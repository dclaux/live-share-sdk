!function(e){function t(t){for(var n,i,s=t[0],a=t[1],o=0,u=[];o<s.length;o++)i=s[o],Object.prototype.hasOwnProperty.call(r,i)&&r[i]&&u.push(r[i][0]),r[i]=0;for(n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n]);for(c&&c(t);u.length;)u.shift()()}var n={},r={1:0};function i(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.e=function(e){var t=[],n=r[e];if(0!==n)if(n)t.push(n[2]);else{var s=new Promise((function(t,i){n=r[e]=[t,i]}));t.push(n[2]=s);var a,o=document.createElement("script");o.charset="utf-8",o.timeout=120,i.nc&&o.setAttribute("nonce",i.nc),o.src=function(e){return i.p+""+({0:"FluidFramework-HashFallback"}[e]||e)+"."+{0:"0a13f8d15d2ef203c36d"}[e]+".js"}(e);var c=new Error;a=function(t){o.onerror=o.onload=null,clearTimeout(u);var n=r[e];if(0!==n){if(n){var i=t&&("load"===t.type?"missing":t.type),s=t&&t.target&&t.target.src;c.message="Loading chunk "+e+" failed.\n("+i+": "+s+")",c.name="ChunkLoadError",c.type=i,c.request=s,n[1](c)}r[e]=void 0}};var u=setTimeout((function(){a({type:"timeout",target:o})}),12e4);o.onerror=o.onload=a,document.head.appendChild(o)}return Promise.all(t)},i.m=e,i.c=n,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i.oe=function(e){throw console.error(e),e};var s=window.webpackJsonp=window.webpackJsonp||[],a=s.push.bind(s);s.push=t,s=s.slice();for(var o=0;o<s.length;o++)t(s[o]);var c=a;i(i.s=327)}([function(e,t,n){"use strict";n.r(t),n.d(t,"assert",(function(){return r.a})),n.d(t,"Uint8ArrayToString",(function(){return i.b})),n.d(t,"stringToBuffer",(function(){return i.h})),n.d(t,"bufferToString",(function(){return i.c})),n.d(t,"isArrayBuffer",(function(){return i.f})),n.d(t,"IsoBuffer",(function(){return i.a})),n.d(t,"hashFile",(function(){return i.e})),n.d(t,"gitHashFile",(function(){return i.d})),n.d(t,"performance",(function(){return i.g})),n.d(t,"fromBase64ToUtf8",(function(){return s.a})),n.d(t,"fromUtf8ToBase64",(function(){return s.b})),n.d(t,"toUtf8",(function(){return s.c})),n.d(t,"BatchManager",(function(){return a})),n.d(t,"doIfNotDisposed",(function(){return o.a})),n.d(t,"EventForwarder",(function(){return c.a})),n.d(t,"NumberComparer",(function(){return u})),n.d(t,"Heap",(function(){return h})),n.d(t,"BaseTelemetryNullLogger",(function(){return l.a})),n.d(t,"TelemetryNullLogger",(function(){return l.b})),n.d(t,"extractLogSafeErrorProperties",(function(){return l.c})),n.d(t,"PromiseCache",(function(){return m})),n.d(t,"Deferred",(function(){return p.a})),n.d(t,"LazyPromise",(function(){return p.b})),n.d(t,"RangeTracker",(function(){return y})),n.d(t,"RateLimiter",(function(){return v})),n.d(t,"safelyParseJSON",(function(){return b})),n.d(t,"Timer",(function(){return S.b})),n.d(t,"PromiseTimer",(function(){return S.a})),n.d(t,"Trace",(function(){return w.a})),n.d(t,"TypedEventEmitter",(function(){return C.a})),n.d(t,"unreachableCase",(function(){return x.a})),n.d(t,"Lazy",(function(){return E.a})),n.d(t,"delay",(function(){return O.a})),n.d(t,"Uint8ArrayToArrayBuffer",(function(){return T.a}));var r=n(5),i=n(112),s=n(185);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class a{constructor(e,t=100){this.process=e,this.maxBatchSize=t,this.pendingWork=new Map}add(e,t){this.pendingWork.has(e)||this.pendingWork.set(e,[]),this.pendingWork.get(e).push(t),this.pendingWork.get(e).length>=this.maxBatchSize?(void 0!==this.pendingTimer&&clearTimeout(this.pendingTimer),this.pendingTimer=void 0,this.startWork()):void 0===this.pendingTimer&&(this.pendingTimer=setTimeout(()=>{this.pendingTimer=void 0,this.startWork()},0))}drain(){this.startWork()}startWork(){const e=this.pendingWork;this.pendingWork=new Map;for(const[t,n]of e)this.process(t,n)}}var o=n(238),c=n(229);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
const u={compare:(e,t)=>e-t,min:Number.MIN_VALUE};class h{constructor(e){this.comp=e,this.L=[{value:e.min,position:0}]}peek(){return this.L[1]}get(){this.swap(1,this.count());const e=this.L.pop();return this.fixdown(1),e.value}add(e){const t={value:e,position:this.L.length};return this.L.push(t),this.fixup(this.count()),t}update(e){const t=e.position;this.isGreaterThanParent(t)?this.fixup(t):this.fixdown(t)}remove(e){const t=e.position;this.swap(e.position,this.L.length-1),this.L.splice(this.L.length-1),t!==this.L.length&&this.update(this.L[t])}count(){return this.L.length-1}fixup(e){let t=e;for(;this.isGreaterThanParent(t);){const e=t>>1;this.swap(t,e),t=e}}isGreaterThanParent(e){return e>1&&this.comp.compare(this.L[e>>1].value,this.L[e].value)>0}fixdown(e){let t=e;for(;t<<1<=this.count();){let e=t<<1;if(e<this.count()&&this.comp.compare(this.L[e].value,this.L[e+1].value)>0&&e++,this.comp.compare(this.L[t].value,this.L[e].value)<=0)break;this.swap(t,e),t=e}}swap(e,t){const n=this.L[e];this.L[e]=this.L[t],this.L[e].position=e,this.L[t]=n,this.L[t].position=t}}var l=n(184);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class d{constructor(e,t){this.expiry=e,this.cleanup=t,this.gcTimeouts=new Map}schedule(e){"indefinite"!==this.expiry.policy&&this.gcTimeouts.set(e,setTimeout(()=>{this.cleanup(e),this.cancel(e)},this.expiry.durationMs))}cancel(e){const t=this.gcTimeouts.get(e);void 0!==t&&(clearTimeout(t),this.gcTimeouts.delete(e))}update(e){"sliding"===this.expiry.policy&&(this.cancel(e),this.schedule(e))}}class m{constructor({expiry:e={policy:"indefinite"},removeOnError:t=(()=>!0)}={}){this.cache=new Map,this.removeOnError=t,this.gc=new d(e,e=>this.remove(e))}has(e){return this.cache.has(e)}get(e){return this.has(e)&&this.gc.update(e),this.cache.get(e)}remove(e){return this.gc.cancel(e),this.cache.delete(e)}async addOrGet(e,t){let n=this.get(e);if(void 0===n){n=(async()=>t())(),this.cache.set(e,n),n.catch(t=>{this.removeOnError(t)&&this.remove(e)}),this.gc.schedule(e)}return n}add(e,t){const n=this.has(e);return this.addOrGet(e,t).catch(()=>{}),!n}async addValueOrGet(e,t){return this.addOrGet(e,async()=>t)}addValue(e,t){return this.add(e,async()=>t)}}var p=n(126),f=n(47),g=n.n(f);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class y{constructor(e,t){"number"==typeof e?(this.ranges=[{length:0,primary:e,secondary:t}],this.lastPrimary=e,this.lastSecondary=t):(this.ranges=g()(e.ranges),this.lastPrimary=e.lastPrimary,this.lastSecondary=e.lastSecondary)}get base(){return this.ranges[0].primary}get primaryHead(){return this.lastPrimary}get secondaryHead(){return this.lastSecondary}serialize(){return{lastPrimary:this.lastPrimary,lastSecondary:this.lastSecondary,ranges:g()(this.ranges)}}add(e,t){Object(r.a)(e>=this.lastPrimary,3),void 0!==this.lastSecondary&&Object(r.a)(t>=this.lastSecondary,4),this.lastPrimary=e,this.lastSecondary=t;const n=this.ranges[this.ranges.length-1],i=n.primary+n.length,s=n.secondary+n.length;t!==s&&(e===i?0===n.length?n.secondary=t:(n.length--,this.ranges.push({length:0,primary:e,secondary:t})):i+1===e&&s+1===t?n.length++:this.ranges.push({length:0,primary:e,secondary:t}))}get(e){Object(r.a)(e>=this.ranges[0].primary,5);let t=1;for(;t<this.ranges.length&&!(e<this.ranges[t].primary);t++);Object(r.a)(e>=this.ranges[t-1].primary,6);const n=this.ranges[t-1];return Math.min(e-n.primary,n.length)+n.secondary}updateBase(e){Object(r.a)(e>=this.ranges[0].primary,7);let t=1;for(;t<this.ranges.length&&!(e<this.ranges[t].primary);t++);Object(r.a)(e>=this.ranges[t-1].primary,8);const n=this.ranges[t-1],i=e-n.primary;n.secondary=n.secondary+Math.min(i,n.length),n.length=Math.max(n.length-i,0),n.primary=e,this.ranges=t-1>0?this.ranges.slice(t-1):this.ranges,Object(r.a)(e===this.ranges[0].primary,9)}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class v{constructor(e){this.windowMSec=e,this.requestMap=new Map}filter(e,t){const n=[],r=Date.now();for(const i of t){const t=`${e}/${i}`;if(this.requestMap.has(t)){if(this.requestMap.get(t)+this.windowMSec>r)continue;this.requestMap.set(t,r),n.push(i)}else this.requestMap.set(t,r),n.push(i)}return n}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */function b(e){let t;try{t=JSON.parse(e)}catch(e){}return t}var S=n(232),w=n(234),C=n(71),x=n(93),E=n(183),O=n(233),T=n(239)},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function r(e,t){if(!e)throw new Error("number"==typeof t?"0x"+t.toString(16).padStart(3,"0"):t)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),i(n(390),t),i(n(391),t),i(n(392),t),i(n(393),t),i(n(394),t),i(n(395),t)},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),i(n(529),t),i(n(530),t),i(n(531),t),i(n(532),t),i(n(533),t),i(n(534),t)},function(e,t,n){"use strict";n.r(t),n.d(t,"assert",(function(){return r.a})),n.d(t,"Uint8ArrayToString",(function(){return i.b})),n.d(t,"stringToBuffer",(function(){return i.h})),n.d(t,"bufferToString",(function(){return i.c})),n.d(t,"isArrayBuffer",(function(){return i.f})),n.d(t,"IsoBuffer",(function(){return i.a})),n.d(t,"hashFile",(function(){return i.e})),n.d(t,"gitHashFile",(function(){return i.d})),n.d(t,"performance",(function(){return i.g})),n.d(t,"fromBase64ToUtf8",(function(){return s.a})),n.d(t,"fromUtf8ToBase64",(function(){return s.b})),n.d(t,"toUtf8",(function(){return s.c})),n.d(t,"BatchManager",(function(){return a})),n.d(t,"doIfNotDisposed",(function(){return o})),n.d(t,"EventForwarder",(function(){return c.a})),n.d(t,"NumberComparer",(function(){return u})),n.d(t,"Heap",(function(){return h})),n.d(t,"BaseTelemetryNullLogger",(function(){return l.a})),n.d(t,"TelemetryNullLogger",(function(){return l.b})),n.d(t,"extractLogSafeErrorProperties",(function(){return l.c})),n.d(t,"PromiseCache",(function(){return m})),n.d(t,"Deferred",(function(){return p.a})),n.d(t,"LazyPromise",(function(){return p.b})),n.d(t,"RangeTracker",(function(){return y})),n.d(t,"RateLimiter",(function(){return v})),n.d(t,"safelyParseJSON",(function(){return b})),n.d(t,"Timer",(function(){return S.b})),n.d(t,"PromiseTimer",(function(){return S.a})),n.d(t,"Trace",(function(){return w.a})),n.d(t,"TypedEventEmitter",(function(){return C.a})),n.d(t,"unreachableCase",(function(){return x.a})),n.d(t,"Lazy",(function(){return E.a})),n.d(t,"delay",(function(){return O.a})),n.d(t,"Uint8ArrayToArrayBuffer",(function(){return T}));var r=n(1),i=n(124),s=n(190);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class a{constructor(e,t=100){this.process=e,this.maxBatchSize=t,this.pendingWork=new Map}add(e,t){this.pendingWork.has(e)||this.pendingWork.set(e,[]),this.pendingWork.get(e).push(t),this.pendingWork.get(e).length>=this.maxBatchSize?(void 0!==this.pendingTimer&&clearTimeout(this.pendingTimer),this.pendingTimer=void 0,this.startWork()):void 0===this.pendingTimer&&(this.pendingTimer=setTimeout(()=>{this.pendingTimer=void 0,this.startWork()},0))}drain(){this.startWork()}startWork(){const e=this.pendingWork;this.pendingWork=new Map;for(const[t,n]of e)this.process(t,n)}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */function o(e,t){return(...n)=>{if(e.disposed)throw new Error("Already disposed");return t(...n)}}var c=n(261);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */const u={compare:(e,t)=>e-t,min:Number.MIN_VALUE};class h{constructor(e){this.comp=e,this.L=[{value:e.min,position:0}]}peek(){return this.L[1]}get(){this.swap(1,this.count());const e=this.L.pop();return this.fixdown(1),e.value}add(e){const t={value:e,position:this.L.length};return this.L.push(t),this.fixup(this.count()),t}update(e){const t=e.position;this.isGreaterThanParent(t)?this.fixup(t):this.fixdown(t)}remove(e){const t=e.position;this.swap(e.position,this.L.length-1),this.L.splice(this.L.length-1),t!==this.L.length&&this.update(this.L[t])}count(){return this.L.length-1}fixup(e){let t=e;for(;this.isGreaterThanParent(t);){const e=t>>1;this.swap(t,e),t=e}}isGreaterThanParent(e){return e>1&&this.comp.compare(this.L[e>>1].value,this.L[e].value)>0}fixdown(e){let t=e;for(;t<<1<=this.count();){let e=t<<1;if(e<this.count()&&this.comp.compare(this.L[e].value,this.L[e+1].value)>0&&e++,this.comp.compare(this.L[t].value,this.L[e].value)<=0)break;this.swap(t,e),t=e}}swap(e,t){const n=this.L[e];this.L[e]=this.L[t],this.L[e].position=e,this.L[t]=n,this.L[t].position=t}}var l=n(189);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class d{constructor(e,t){this.expiry=e,this.cleanup=t,this.gcTimeouts=new Map}schedule(e){"indefinite"!==this.expiry.policy&&this.gcTimeouts.set(e,setTimeout(()=>{this.cleanup(e),this.cancel(e)},this.expiry.durationMs))}cancel(e){const t=this.gcTimeouts.get(e);void 0!==t&&(clearTimeout(t),this.gcTimeouts.delete(e))}update(e){"sliding"===this.expiry.policy&&(this.cancel(e),this.schedule(e))}}class m{constructor({expiry:e={policy:"indefinite"},removeOnError:t=(()=>!0)}={}){this.cache=new Map,this.removeOnError=t,this.gc=new d(e,e=>this.remove(e))}has(e){return this.cache.has(e)}get(e){return this.has(e)&&this.gc.update(e),this.cache.get(e)}remove(e){return this.gc.cancel(e),this.cache.delete(e)}async addOrGet(e,t){let n=this.get(e);if(void 0===n){n=(async()=>t())(),this.cache.set(e,n),n.catch(t=>{this.removeOnError(t)&&this.remove(e)}),this.gc.schedule(e)}return n}add(e,t){const n=this.has(e);return this.addOrGet(e,t).catch(()=>{}),!n}async addValueOrGet(e,t){return this.addOrGet(e,async()=>t)}addValue(e,t){return this.add(e,async()=>t)}}var p=n(90),f=n(99),g=n.n(f);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class y{constructor(e,t){"number"==typeof e?(this.ranges=[{length:0,primary:e,secondary:t}],this.lastPrimary=e,this.lastSecondary=t):(this.ranges=g()(e.ranges),this.lastPrimary=e.lastPrimary,this.lastSecondary=e.lastSecondary)}get base(){return this.ranges[0].primary}get primaryHead(){return this.lastPrimary}get secondaryHead(){return this.lastSecondary}serialize(){return{lastPrimary:this.lastPrimary,lastSecondary:this.lastSecondary,ranges:g()(this.ranges)}}add(e,t){Object(r.a)(e>=this.lastPrimary,3),void 0!==this.lastSecondary&&Object(r.a)(t>=this.lastSecondary,4),this.lastPrimary=e,this.lastSecondary=t;const n=this.ranges[this.ranges.length-1],i=n.primary+n.length,s=n.secondary+n.length;t!==s&&(e===i?0===n.length?n.secondary=t:(n.length--,this.ranges.push({length:0,primary:e,secondary:t})):i+1===e&&s+1===t?n.length++:this.ranges.push({length:0,primary:e,secondary:t}))}get(e){Object(r.a)(e>=this.ranges[0].primary,5);let t=1;for(;t<this.ranges.length&&!(e<this.ranges[t].primary);t++);Object(r.a)(e>=this.ranges[t-1].primary,6);const n=this.ranges[t-1];return Math.min(e-n.primary,n.length)+n.secondary}updateBase(e){Object(r.a)(e>=this.ranges[0].primary,7);let t=1;for(;t<this.ranges.length&&!(e<this.ranges[t].primary);t++);Object(r.a)(e>=this.ranges[t-1].primary,8);const n=this.ranges[t-1],i=e-n.primary;n.secondary=n.secondary+Math.min(i,n.length),n.length=Math.max(n.length-i,0),n.primary=e,this.ranges=t-1>0?this.ranges.slice(t-1):this.ranges,Object(r.a)(e===this.ranges[0].primary,9)}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class v{constructor(e){this.windowMSec=e,this.requestMap=new Map}filter(e,t){const n=[],r=Date.now();for(const i of t){const t=`${e}/${i}`;if(this.requestMap.has(t)){if(this.requestMap.get(t)+this.windowMSec>r)continue;this.requestMap.set(t,r),n.push(i)}else this.requestMap.set(t,r),n.push(i)}return n}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */function b(e){let t;try{t=JSON.parse(e)}catch(e){}return t}var S=n(278),w=n(279),C=n(74),x=n(77),E=n(188),O=n(280);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function T(e){return 0===e.byteOffset&&e.byteLength===e.buffer.byteLength?e.buffer:e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function r(e,t){if(!e)throw new Error("number"==typeof t?"0x"+t.toString(16).padStart(3,"0"):t)}n.d(t,"a",(function(){return r}))},,,function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
var r;n.d(t,"a",(function(){return r})),function(e){e.Tree=1,e.Blob=2,e.Handle=3,e.Attachment=4}(r||(r={}))},,function(e,t,n){"use strict";n.r(t),n.d(t,"generateHandleContextPath",(function(){return r.a})),n.d(t,"exceptionToResponse",(function(){return i.d})),n.d(t,"responseToException",(function(){return i.f})),n.d(t,"requestFluidObject",(function(){return i.e})),n.d(t,"create404Response",(function(){return i.a})),n.d(t,"createResponseError",(function(){return i.c})),n.d(t,"createDataStoreFactory",(function(){return i.b})),n.d(t,"ObjectStoragePartition",(function(){return a})),n.d(t,"getNormalizedObjectStoragePathParts",(function(){return o.a})),n.d(t,"listBlobsAtTreePath",(function(){return o.b})),n.d(t,"RequestParser",(function(){return c.a})),n.d(t,"RuntimeFactoryHelper",(function(){return u.a})),n.d(t,"createRootSummarizerNode",(function(){return h.b})),n.d(t,"createRootSummarizerNodeWithGC",(function(){return l.a})),n.d(t,"mergeStats",(function(){return d.k})),n.d(t,"utf8ByteLength",(function(){return d.l})),n.d(t,"getBlobSize",(function(){return d.j})),n.d(t,"calculateStats",(function(){return d.e})),n.d(t,"addBlobToSummary",(function(){return d.b})),n.d(t,"addTreeToSummary",(function(){return d.d})),n.d(t,"addSummarizeResultToSummary",(function(){return d.c})),n.d(t,"SummaryTreeBuilder",(function(){return d.a})),n.d(t,"convertToSummaryTreeWithStats",(function(){return d.i})),n.d(t,"convertToSummaryTree",(function(){return d.h})),n.d(t,"convertSnapshotTreeToSummaryTree",(function(){return d.f})),n.d(t,"convertSummaryTreeToITree",(function(){return d.g})),n.d(t,"seqFromTree",(function(){return m.a}));var r=n(191),i=n(284),s=n(1);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class a{constructor(e,t){this.storage=e,this.path=t,Object(s.a)(!t.endsWith("/"),412)}async readBlob(e){return this.storage.readBlob(`${this.path}/${e}`)}async contains(e){return this.storage.contains(`${this.path}/${e}`)}async list(e){return this.storage.list(`${this.path}/${e}`)}}var o=n(285),c=n(286),u=n(287),h=n(127),l=n(288),d=n(44),m=n(289)},,function(e,t,n){"use strict";function r(e,t){e.output=t}function i(e,t,n){r(e,t),r(t,n)}function s(e,t,n,s){r(e,t),i(t,n,s)}function a(e,t,n,r,s){i(e,t,n),i(n,r,s)}function o(e,t,n,r,a,o){i(e,t,n),s(n,r,a,o)}function c(e,t,n,r,i,a,o){s(e,t,n,r),s(r,i,a,o)}n.r(t),n.d(t,"chain2",(function(){return r})),n.d(t,"chain3",(function(){return i})),n.d(t,"chain4",(function(){return s})),n.d(t,"chain5",(function(){return a})),n.d(t,"chain6",(function(){return o})),n.d(t,"chain7",(function(){return c}))},function(e,t,n){"use strict";n.r(t),n.d(t,"DebugLogger",(function(){return a})),n.d(t,"extractLogSafeErrorProperties",(function(){return o.b})),n.d(t,"isILoggingError",(function(){return o.g})),n.d(t,"normalizeError",(function(){return o.i})),n.d(t,"generateErrorWithStack",(function(){return o.c})),n.d(t,"generateStack",(function(){return o.d})),n.d(t,"wrapError",(function(){return o.k})),n.d(t,"wrapErrorAndLog",(function(){return o.l})),n.d(t,"originatedAsExternalError",(function(){return o.j})),n.d(t,"isExternalError",(function(){return o.f})),n.d(t,"isTaggedTelemetryPropertyValue",(function(){return o.h})),n.d(t,"getCircularReplacer",(function(){return o.e})),n.d(t,"LoggingError",(function(){return o.a})),n.d(t,"EventEmitterWithErrorHandling",(function(){return c.a})),n.d(t,"connectedEventName",(function(){return u.a})),n.d(t,"disconnectedEventName",(function(){return u.b})),n.d(t,"safeRaiseEvent",(function(){return u.d})),n.d(t,"raiseConnectedEvent",(function(){return u.c})),n.d(t,"hasErrorInstanceId",(function(){return h.a})),n.d(t,"isFluidError",(function(){return h.b})),n.d(t,"isValidLegacyError",(function(){return h.c})),n.d(t,"TelemetryDataTag",(function(){return s.e})),n.d(t,"TelemetryLogger",(function(){return s.f})),n.d(t,"TaggedLoggerAdapter",(function(){return s.d})),n.d(t,"ChildLogger",(function(){return s.a})),n.d(t,"MultiSinkLogger",(function(){return s.b})),n.d(t,"PerformanceEvent",(function(){return s.c})),n.d(t,"TelemetryUTLogger",(function(){return s.g})),n.d(t,"MockLogger",(function(){return l})),n.d(t,"ThresholdCounter",(function(){return d.a})),n.d(t,"logIfFalse",(function(){return m})),n.d(t,"sessionStorageConfigProvider",(function(){return p.e})),n.d(t,"mixinMonitoringContext",(function(){return p.d})),n.d(t,"loggerToMonitoringContext",(function(){return p.c}));var r=n(76),i=n(197),s=n(37);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class a extends s.f{constructor(e,t,n){super(void 0,n),this.debug=e,this.debugErr=t}static create(e,t){const n=Object(i.debug)(e),r=Object(i.debug)(e);return r.log=console.error.bind(console),r.enabled=!0,new a(n,r,t)}static mixinDebugLogger(e,t,n){if(!t)return a.create(e,n);const r=new s.b(void 0,n);return r.addLogger(a.create(e,this.tryGetBaseLoggerProps(t))),r.addLogger(s.a.create(t,e)),r}static tryGetBaseLoggerProps(e){if(e instanceof s.f)return e.properties}send(e){const t=this.prepareEvent(e),n="error"===t.category;let i=n?this.debugErr:this.debug;const a=e.eventName.lastIndexOf(s.f.eventNamespaceSeparator),o=e.eventName.substring(a+1);a>0&&(i=i.extend(e.eventName.substring(0,a))),t.eventName=void 0;let c="";c="tick="+s.f.formatTick(r.a.now());const u=t.stack?t.stack:"";let h;t.stack=void 0;try{h=JSON.stringify(t)}catch(e){t.error=void 0,h=JSON.stringify(t)}"{}"===h&&(h=""),n&&(i.enabled=!0),i(`${o} ${h} ${c} ${u}`)}}var o=n(16),c=n(257),u=n(258),h=n(57);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class l extends s.f{constructor(){super(),this.events=[]}clear(){this.events=[]}send(e){this.events.push(e)}matchEvents(e){const t=this.getMatchedEventsCount(e);return 0===e.length-t}assertMatch(e,t){const n=this.events;if(!this.matchEvents(e))throw new Error(`${t}\nexpected:\n${JSON.stringify(e)}\n\nactual:\n${JSON.stringify(n)}`)}matchAnyEvent(e){return this.getMatchedEventsCount(e)>0}assertMatchAny(e,t){const n=this.events;if(!this.matchAnyEvent(e))throw new Error(`${t}\nexpected:\n${JSON.stringify(e)}\n\nactual:\n${JSON.stringify(n)}`)}getMatchedEventsCount(e){let t=0;return this.events.forEach(n=>{t<e.length&&l.eventsMatch(n,e[t])&&++t}),this.events=[],t}static eventsMatch(e,t){const n=Object.assign(Object.assign({},e),t);return JSON.stringify(n)===JSON.stringify(e)}}var d=n(259);function m(e,t,n){if(e)return!0;const r="string"==typeof n?{eventName:n,category:"error"}:Object.assign({category:"error"},n);return t.send(r),!1}var p=n(53);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */},function(e,t,n){"use strict";n.d(t,"a",(function(){return o})),n.d(t,"b",(function(){return c})),n.d(t,"c",(function(){return u})),n.d(t,"d",(function(){return h})),n.d(t,"e",(function(){return l})),n.d(t,"f",(function(){return d}));var r=n(1),i=n(8),s=n(3),a=n(44);class o{constructor(e){this.path=e}static create(e){return new o(encodeURIComponent(e))}static createAndConcat(e){var t;let n=o.create(null!==(t=e[0])&&void 0!==t?t:"");for(let t=1;t<e.length;t++)n=n.concat(o.create(e[t]));return n}toString(){return this.path}concat(e){return new o(`${this.path}/${e.path}`)}}class c{constructor(e){this.summary=e}static createForRoot(e){return new c({referenceSequenceNumber:e,basePath:void 0,localPath:o.create("")})}get referenceSequenceNumber(){return this.summary.referenceSequenceNumber}get basePath(){return this.summary.basePath}get localPath(){return this.summary.localPath}get additionalPath(){return this.summary.additionalPath}set additionalPath(e){this.summary.additionalPath=e}get fullPath(){var e,t;return null!==(t=null===(e=this.basePath)||void 0===e?void 0:e.concat(this.localPath))&&void 0!==t?t:this.localPath}get fullPathForChildren(){return void 0!==this.additionalPath?this.fullPath.concat(this.additionalPath):this.fullPath}createForChild(e){return new c({referenceSequenceNumber:this.referenceSequenceNumber,basePath:this.fullPathForChildren,localPath:o.create(e)})}}function u(e,t){let n=e;const i=[],s=[];for(let e=0;;e++){e>100&&t.sendTelemetryEvent({eventName:"DecodeSummaryMaxDepth",maxDecodeDepth:100});const a=n.blobs._outstandingOps,o=n.trees._baseSummary;if(void 0===a&&void 0===o)return{baseSummary:n,pathParts:i,async getOutstandingOps(e){let n=[];for(const r of s){const i=await e(r);if(n.length>0&&i.length>0){const e=n[n.length-1].sequenceNumber,r=i[0].sequenceNumber;if(r<=e)for(t.sendTelemetryEvent({eventName:"DuplicateOutstandingOps",message:`newEarliestSeq <= latestSeq in decodeSummary: ${r} <= ${e}`});i.length>0&&i[0].sequenceNumber<=e;)i.shift()}n=n.concat(i)}return n}};Object(r.a)(!!a,431),Object(r.a)(void 0!==o,432),n=o,i.push("_baseSummary"),s.unshift(a)}}function h(e,t){let n=o.create("_baseSummary");const r=new a.a;if(r.addBlob("_outstandingOps",JSON.stringify(t)),e.fromSummary){const t=e.summaryNode;void 0!==t.additionalPath&&(n=n.concat(t.additionalPath)),r.addHandle("_baseSummary",i.a.Tree,t.fullPath.path)}else r.addWithStats("_baseSummary",e.initialSummary);const s=r.getSummaryTree();return Object.assign(Object.assign({},s),{additionalPath:n})}function l(e){const t=e.trees[s.channelsTreeName];return void 0!==t?{childrenTree:t,childrenPathPart:s.channelsTreeName}:{childrenTree:e,childrenPathPart:void 0}}function d(e){const t=e.tree[s.channelsTreeName];return void 0!==t?{childrenTree:t,childrenPathPart:s.channelsTreeName}:{childrenTree:e,childrenPathPart:void 0}}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
var r;n.d(t,"a",(function(){return r})),function(e){e.Tree=1,e.Blob=2,e.Handle=3,e.Attachment=4}(r||(r={}))},function(e,t,n){"use strict";n.d(t,"b",(function(){return s})),n.d(t,"g",(function(){return a})),n.d(t,"i",(function(){return o})),n.d(t,"c",(function(){return u})),n.d(t,"d",(function(){return h})),n.d(t,"k",(function(){return l})),n.d(t,"l",(function(){return d})),n.d(t,"j",(function(){return p})),n.d(t,"f",(function(){return f})),n.d(t,"h",(function(){return g})),n.d(t,"e",(function(){return y})),n.d(t,"a",(function(){return v}));var r=n(98),i=n(57);function s(e,t){const n={message:"string"==typeof(null==e?void 0:e.message)?e.message:String(e)};if(null!==(r=e)&&!Array.isArray(r)&&"object"==typeof r){const{errorType:r,stack:i,name:s}=e;if("string"==typeof r&&(n.errorType=r),"string"==typeof i){const e="string"==typeof s?s:void 0;n.stack=((e,n)=>{if(!t)return e;const r=e.split("\n");return r.shift(),void 0!==n&&r.unshift(n),r.join("\n")})(i,e)}}var r;return n}const a=e=>"function"==typeof(null==e?void 0:e.getTelemetryProperties);function o(e,t={}){var n;if(Object(i.c)(e)&&function(e){const t=e;void 0===t.errorInstanceId&&(t.errorInstanceId=Object(r.a)())}(e),Object(i.b)(e))return e.addTelemetryProperties(null!==(n=t.props)&&void 0!==n?n:{}),e;const{message:a,stack:c}=s(e,!1),u=new b({errorType:"genericError",message:a,stack:c});if(u.addTelemetryProperties(Object.assign(Object.assign({},t.props),{untrustedOrigin:1})),"object"==typeof e&&null!==e){const{canRetry:t,retryAfterSeconds:n}=e;Object.assign(o,{canRetry:t,retryAfterSeconds:n})}return"object"!=typeof e&&u.addTelemetryProperties({typeofError:typeof e}),u}let c;function u(){const e=new Error("<<generated stack>>");if(void 0===c&&(c=void 0!==e.stack),c)return e;try{throw e}catch(e){return e}}function h(){return u().stack}function l(e,t){const{message:n,stack:r}=s(e,!1),a=t(n);return void 0!==r&&m(a,r),p(e)&&a.addTelemetryProperties({untrustedOrigin:1}),Object(i.a)(e)&&(a.overwriteErrorInstanceId(e.errorInstanceId),a.addTelemetryProperties({innerErrorInstanceId:e.errorInstanceId})),a}function d(e,t,n){const r=l(e,t),i=r.errorInstanceId,s=i;return n.sendTelemetryEvent({eventName:"WrapError",errorInstanceId:i,wrappedByErrorInstanceId:s},e),r}function m(e,t){try{Object.assign(e,{stack:t})}catch(n){e.addTelemetryProperties({stack2:t})}}function p(e){return!Object(i.c)(e)||1===e.getTelemetryProperties().untrustedOrigin}function f(e){return!Object(i.c)(e)||1===e.getTelemetryProperties().untrustedOrigin&&"genericError"===e.errorType}function g(e){return"object"!=typeof(null==e?void 0:e.value)&&"string"==typeof(null==e?void 0:e.tag)}const y=()=>{const e=new WeakSet;return(t,n)=>{if("object"==typeof n&&null!==n){if(e.has(n))return"<removed/circular>";e.add(n)}return n}};class v extends Error{constructor(e,t,n=new Set){super(e),this.omitPropsFromLogging=n,this._errorInstanceId=Object(r.a)(),this.fluidErrorCode="-",n.add("omitPropsFromLogging"),n.add("_errorInstanceId"),t&&this.addTelemetryProperties(t)}get errorInstanceId(){return this._errorInstanceId}overwriteErrorInstanceId(e){this._errorInstanceId=e}addTelemetryProperties(e){!function(e,t){for(const n of Object.keys(t))void 0===e[n]&&(e[n]=t[n])}(this,e)}getTelemetryProperties(){const e=function(e,t){const n={};for(const r of Object.keys(e)){if(t.has(r))continue;const i=e[r];switch(typeof i){case"string":case"number":case"boolean":case"undefined":n[r]=i;break;default:g(i)?n[r]=i:n[r]="REDACTED (arbitrary object)"}}return n}(this,this.omitPropsFromLogging);return Object.assign(Object.assign({},e),{stack:this.stack,message:this.message,errorInstanceId:this._errorInstanceId})}}class b extends v{constructor(e){super(e.message),this.errorType=e.errorType,void 0!==e.stack&&m(this,e.stack)}}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
var r,i;n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return i})),function(e){e.File="100644",e.Executable="100755",e.Directory="040000",e.Symlink="120000"}(r||(r={})),function(e){e.Blob="Blob",e.Tree="Tree",e.Attachment="Attachment"}(i||(i={}))},function(e,t,n){"use strict";n.r(t),n.d(t,"MessageType",(function(){return i.a})),n.d(t,"NackErrorType",(function(){return i.b})),n.d(t,"FileMode",(function(){return s.a})),n.d(t,"TreeEntry",(function(){return s.b})),n.d(t,"SummaryType",(function(){return a.a})),n.d(t,"ScopeType",(function(){return r}));var r,i=n(187),s=n(17),a=n(8);!function(e){e.DocRead="doc:read",e.DocWrite="doc:write",e.SummaryWrite="summary:write"}(r||(r={}))},function(e,t,n){"use strict";var r,i="object"==typeof Reflect?Reflect:null,s=i&&"function"==typeof i.apply?i.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};r=i&&"function"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var a=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,e.exports.once=function(e,t){return new Promise((function(n,r){function i(n){e.removeListener(t,s),r(n)}function s(){"function"==typeof e.removeListener&&e.removeListener("error",i),n([].slice.call(arguments))}y(e,t,s,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&y(e,"error",t,n)}(e,i,{once:!0})}))},o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var c=10;function u(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function h(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function l(e,t,n,r){var i,s,a,o;if(u(n),void 0===(s=e._events)?(s=e._events=Object.create(null),e._eventsCount=0):(void 0!==s.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),s=e._events),a=s[t]),void 0===a)a=s[t]=n,++e._eventsCount;else if("function"==typeof a?a=s[t]=r?[n,a]:[a,n]:r?a.unshift(n):a.push(n),(i=h(e))>0&&a.length>i&&!a.warned){a.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=a.length,o=c,console&&console.warn&&console.warn(o)}return e}function d(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function m(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},i=d.bind(r);return i.listener=n,r.wrapFn=i,i}function p(e,t,n){var r=e._events;if(void 0===r)return[];var i=r[t];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(i):g(i,i.length)}function f(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function g(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}function y(e,t,n,r){if("function"==typeof e.on)r.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function i(s){r.once&&e.removeEventListener(t,i),n(s)}))}}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return c},set:function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");c=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return h(this)},o.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var r="error"===e,i=this._events;if(void 0!==i)r=r&&void 0===i.error;else if(!r)return!1;if(r){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var o=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw o.context=a,o}var c=i[e];if(void 0===c)return!1;if("function"==typeof c)s(c,this,t);else{var u=c.length,h=g(c,u);for(n=0;n<u;++n)s(h[n],this,t)}return!0},o.prototype.addListener=function(e,t){return l(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return l(this,e,t,!0)},o.prototype.once=function(e,t){return u(t),this.on(e,m(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){return u(t),this.prependListener(e,m(this,e,t)),this},o.prototype.removeListener=function(e,t){var n,r,i,s,a;if(u(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(i=-1,s=n.length-1;s>=0;s--)if(n[s]===t||n[s].listener===t){a=n[s].listener,i=s;break}if(i<0)return this;0===i?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,i),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,a||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var i,s=Object.keys(n);for(r=0;r<s.length;++r)"removeListener"!==(i=s[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},o.prototype.listeners=function(e){return p(this,e,!0)},o.prototype.rawListeners=function(e){return p(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):f.call(e,t)},o.prototype.listenerCount=f,o.prototype.eventNames=function(){return this._eventsCount>0?r(this._events):[]}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
var r,i;n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return i})),function(e){e.File="100644",e.Executable="100755",e.Directory="040000",e.Symlink="120000"}(r||(r={})),function(e){e.Blob="Blob",e.Tree="Tree",e.Attachment="Attachment"}(i||(i={}))},,,function(e,t,n){"use strict";n.d(t,"e",(function(){return i})),n.d(t,"k",(function(){return o})),n.d(t,"c",(function(){return c})),n.d(t,"b",(function(){return u})),n.d(t,"a",(function(){return h})),n.d(t,"d",(function(){return d})),n.d(t,"h",(function(){return p})),n.d(t,"g",(function(){return f})),n.d(t,"f",(function(){return g})),n.d(t,"j",(function(){return y})),n.d(t,"i",(function(){return v}));var r,i,s=n(100),a=n(35);function o(){return"object"==typeof navigator&&null!==navigator&&"boolean"==typeof navigator.onLine?navigator.onLine?i.Online:i.Offline:i.Unknown}!function(e){e[e.Offline=0]="Offline",e[e.Online=1]="Online",e[e.Unknown=2]="Unknown"}(i||(i={}));class c extends a.a{constructor(e,t,n){super(e,n),this.canRetry=t,this.errorType=s.a.genericNetworkError}}class u extends a.a{constructor(e,t){super(e,Object.assign(Object.assign({},t),{statusCode:400})),this.errorType=u.errorType,this.canRetry=!1}}u.errorType=null!==(r=s.a.deltaStreamConnectionForbidden)&&void 0!==r?r:"deltaStreamConnectionForbidden";class h extends a.a{constructor(e,t,n,r){super(e,r,new Set(["claims","tenantId"])),this.claims=t,this.tenantId=n,this.errorType=s.a.authorizationError,this.canRetry=!1}}class l extends a.a{constructor(e,t,n,r){super(e,r),this.errorType=t,this.canRetry=n}}class d extends l{constructor(e,t,n){super(e,t,!1,n),this.errorType=t}}class m extends a.a{constructor(e,t,n){super(e,n),this.retryAfterSeconds=t,this.errorType=s.a.throttlingError,this.canRetry=!0}}const p=(e,t)=>new d(e,s.a.writeError,t);function f(e,t,n){return void 0!==t.retryAfterMs&&t.canRetry?new m(e,t.retryAfterMs/1e3,n):new c(e,t.canRetry,n)}const g=e=>!0===(null==e?void 0:e.canRetry),y=e=>null==e?void 0:e.retryAfterSeconds,v=e=>void 0!==(null==e?void 0:e.retryAfterSeconds)?1e3*e.retryAfterSeconds:void 0},function(e,t,n){"use strict";function r(e){e.preventDefault()}function i(e){e.preventDefault(),e.stopPropagation()}n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return i}))},function(e,t,n){"use strict";var r=n(244),i=Object.prototype.toString;function s(e){return Array.isArray(e)}function a(e){return void 0===e}function o(e){return"[object ArrayBuffer]"===i.call(e)}function c(e){return null!==e&&"object"==typeof e}function u(e){if("[object Object]"!==i.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function h(e){return"[object Function]"===i.call(e)}function l(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),s(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(null,e[i],i,e)}e.exports={isArray:s,isArrayBuffer:o,isBuffer:function(e){return null!==e&&!a(e)&&null!==e.constructor&&!a(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"[object FormData]"===i.call(e)},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&o(e.buffer)},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:c,isPlainObject:u,isUndefined:a,isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:h,isStream:function(e){return c(e)&&h(e.pipe)},isURLSearchParams:function(e){return"[object URLSearchParams]"===i.call(e)},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:l,merge:function e(){var t={};function n(n,r){u(t[r])&&u(n)?t[r]=e(t[r],n):u(n)?t[r]=e({},n):s(n)?t[r]=n.slice():t[r]=n}for(var r=0,i=arguments.length;r<i;r++)l(arguments[r],n);return t},extend:function(e,t,n){return l(t,(function(t,i){e[i]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},,function(e,t,n){"use strict";n.r(t),n.d(t,"v1",(function(){return u})),n.d(t,"v3",(function(){return S})),n.d(t,"v4",(function(){return w.a})),n.d(t,"v5",(function(){return E})),n.d(t,"NIL",(function(){return O})),n.d(t,"version",(function(){return T})),n.d(t,"validate",(function(){return h.a})),n.d(t,"stringify",(function(){return a.a})),n.d(t,"parse",(function(){return l}));var r,i,s=n(129),a=n(51),o=0,c=0;var u=function(e,t,n){var u=t&&n||0,h=t||new Array(16),l=(e=e||{}).node||r,d=void 0!==e.clockseq?e.clockseq:i;if(null==l||null==d){var m=e.random||(e.rng||s.a)();null==l&&(l=r=[1|m[0],m[1],m[2],m[3],m[4],m[5]]),null==d&&(d=i=16383&(m[6]<<8|m[7]))}var p=void 0!==e.msecs?e.msecs:Date.now(),f=void 0!==e.nsecs?e.nsecs:c+1,g=p-o+(f-c)/1e4;if(g<0&&void 0===e.clockseq&&(d=d+1&16383),(g<0||p>o)&&void 0===e.nsecs&&(f=0),f>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");o=p,c=f,i=d;var y=(1e4*(268435455&(p+=122192928e5))+f)%4294967296;h[u++]=y>>>24&255,h[u++]=y>>>16&255,h[u++]=y>>>8&255,h[u++]=255&y;var v=p/4294967296*1e4&268435455;h[u++]=v>>>8&255,h[u++]=255&v,h[u++]=v>>>24&15|16,h[u++]=v>>>16&255,h[u++]=d>>>8|128,h[u++]=255&d;for(var b=0;b<6;++b)h[u+b]=l[b];return t||Object(a.a)(h)},h=n(54);var l=function(e){if(!Object(h.a)(e))throw TypeError("Invalid UUID");var t,n=new Uint8Array(16);return n[0]=(t=parseInt(e.slice(0,8),16))>>>24,n[1]=t>>>16&255,n[2]=t>>>8&255,n[3]=255&t,n[4]=(t=parseInt(e.slice(9,13),16))>>>8,n[5]=255&t,n[6]=(t=parseInt(e.slice(14,18),16))>>>8,n[7]=255&t,n[8]=(t=parseInt(e.slice(19,23),16))>>>8,n[9]=255&t,n[10]=(t=parseInt(e.slice(24,36),16))/1099511627776&255,n[11]=t/4294967296&255,n[12]=t>>>24&255,n[13]=t>>>16&255,n[14]=t>>>8&255,n[15]=255&t,n};var d=function(e,t,n){function r(e,r,i,s){if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));for(var t=[],n=0;n<e.length;++n)t.push(e.charCodeAt(n));return t}(e)),"string"==typeof r&&(r=l(r)),16!==r.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");var o=new Uint8Array(16+e.length);if(o.set(r),o.set(e,r.length),(o=n(o))[6]=15&o[6]|t,o[8]=63&o[8]|128,i){s=s||0;for(var c=0;c<16;++c)i[s+c]=o[c];return i}return Object(a.a)(o)}try{r.name=e}catch(e){}return r.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",r.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",r};function m(e){return 14+(e+64>>>9<<4)+1}function p(e,t){var n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n}function f(e,t,n,r,i,s){return p((a=p(p(t,e),p(r,s)))<<(o=i)|a>>>32-o,n);var a,o}function g(e,t,n,r,i,s,a){return f(t&n|~t&r,e,t,i,s,a)}function y(e,t,n,r,i,s,a){return f(t&r|n&~r,e,t,i,s,a)}function v(e,t,n,r,i,s,a){return f(t^n^r,e,t,i,s,a)}function b(e,t,n,r,i,s,a){return f(n^(t|~r),e,t,i,s,a)}var S=d("v3",48,(function(e){if("string"==typeof e){var t=unescape(encodeURIComponent(e));e=new Uint8Array(t.length);for(var n=0;n<t.length;++n)e[n]=t.charCodeAt(n)}return function(e){for(var t=[],n=32*e.length,r=0;r<n;r+=8){var i=e[r>>5]>>>r%32&255,s=parseInt("0123456789abcdef".charAt(i>>>4&15)+"0123456789abcdef".charAt(15&i),16);t.push(s)}return t}(function(e,t){e[t>>5]|=128<<t%32,e[m(t)-1]=t;for(var n=1732584193,r=-271733879,i=-1732584194,s=271733878,a=0;a<e.length;a+=16){var o=n,c=r,u=i,h=s;n=g(n,r,i,s,e[a],7,-680876936),s=g(s,n,r,i,e[a+1],12,-389564586),i=g(i,s,n,r,e[a+2],17,606105819),r=g(r,i,s,n,e[a+3],22,-1044525330),n=g(n,r,i,s,e[a+4],7,-176418897),s=g(s,n,r,i,e[a+5],12,1200080426),i=g(i,s,n,r,e[a+6],17,-1473231341),r=g(r,i,s,n,e[a+7],22,-45705983),n=g(n,r,i,s,e[a+8],7,1770035416),s=g(s,n,r,i,e[a+9],12,-1958414417),i=g(i,s,n,r,e[a+10],17,-42063),r=g(r,i,s,n,e[a+11],22,-1990404162),n=g(n,r,i,s,e[a+12],7,1804603682),s=g(s,n,r,i,e[a+13],12,-40341101),i=g(i,s,n,r,e[a+14],17,-1502002290),r=g(r,i,s,n,e[a+15],22,1236535329),n=y(n,r,i,s,e[a+1],5,-165796510),s=y(s,n,r,i,e[a+6],9,-1069501632),i=y(i,s,n,r,e[a+11],14,643717713),r=y(r,i,s,n,e[a],20,-373897302),n=y(n,r,i,s,e[a+5],5,-701558691),s=y(s,n,r,i,e[a+10],9,38016083),i=y(i,s,n,r,e[a+15],14,-660478335),r=y(r,i,s,n,e[a+4],20,-405537848),n=y(n,r,i,s,e[a+9],5,568446438),s=y(s,n,r,i,e[a+14],9,-1019803690),i=y(i,s,n,r,e[a+3],14,-187363961),r=y(r,i,s,n,e[a+8],20,1163531501),n=y(n,r,i,s,e[a+13],5,-1444681467),s=y(s,n,r,i,e[a+2],9,-51403784),i=y(i,s,n,r,e[a+7],14,1735328473),r=y(r,i,s,n,e[a+12],20,-1926607734),n=v(n,r,i,s,e[a+5],4,-378558),s=v(s,n,r,i,e[a+8],11,-2022574463),i=v(i,s,n,r,e[a+11],16,1839030562),r=v(r,i,s,n,e[a+14],23,-35309556),n=v(n,r,i,s,e[a+1],4,-1530992060),s=v(s,n,r,i,e[a+4],11,1272893353),i=v(i,s,n,r,e[a+7],16,-155497632),r=v(r,i,s,n,e[a+10],23,-1094730640),n=v(n,r,i,s,e[a+13],4,681279174),s=v(s,n,r,i,e[a],11,-358537222),i=v(i,s,n,r,e[a+3],16,-722521979),r=v(r,i,s,n,e[a+6],23,76029189),n=v(n,r,i,s,e[a+9],4,-640364487),s=v(s,n,r,i,e[a+12],11,-421815835),i=v(i,s,n,r,e[a+15],16,530742520),r=v(r,i,s,n,e[a+2],23,-995338651),n=b(n,r,i,s,e[a],6,-198630844),s=b(s,n,r,i,e[a+7],10,1126891415),i=b(i,s,n,r,e[a+14],15,-1416354905),r=b(r,i,s,n,e[a+5],21,-57434055),n=b(n,r,i,s,e[a+12],6,1700485571),s=b(s,n,r,i,e[a+3],10,-1894986606),i=b(i,s,n,r,e[a+10],15,-1051523),r=b(r,i,s,n,e[a+1],21,-2054922799),n=b(n,r,i,s,e[a+8],6,1873313359),s=b(s,n,r,i,e[a+15],10,-30611744),i=b(i,s,n,r,e[a+6],15,-1560198380),r=b(r,i,s,n,e[a+13],21,1309151649),n=b(n,r,i,s,e[a+4],6,-145523070),s=b(s,n,r,i,e[a+11],10,-1120210379),i=b(i,s,n,r,e[a+2],15,718787259),r=b(r,i,s,n,e[a+9],21,-343485551),n=p(n,o),r=p(r,c),i=p(i,u),s=p(s,h)}return[n,r,i,s]}(function(e){if(0===e.length)return[];for(var t=8*e.length,n=new Uint32Array(m(t)),r=0;r<t;r+=8)n[r>>5]|=(255&e[r/8])<<r%32;return n}(e),8*e.length))})),w=n(182);function C(e,t,n,r){switch(e){case 0:return t&n^~t&r;case 1:return t^n^r;case 2:return t&n^t&r^n&r;case 3:return t^n^r}}function x(e,t){return e<<t|e>>>32-t}var E=d("v5",80,(function(e){var t=[1518500249,1859775393,2400959708,3395469782],n=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof e){var r=unescape(encodeURIComponent(e));e=[];for(var i=0;i<r.length;++i)e.push(r.charCodeAt(i))}else Array.isArray(e)||(e=Array.prototype.slice.call(e));e.push(128);for(var s=e.length/4+2,a=Math.ceil(s/16),o=new Array(a),c=0;c<a;++c){for(var u=new Uint32Array(16),h=0;h<16;++h)u[h]=e[64*c+4*h]<<24|e[64*c+4*h+1]<<16|e[64*c+4*h+2]<<8|e[64*c+4*h+3];o[c]=u}o[a-1][14]=8*(e.length-1)/Math.pow(2,32),o[a-1][14]=Math.floor(o[a-1][14]),o[a-1][15]=8*(e.length-1)&4294967295;for(var l=0;l<a;++l){for(var d=new Uint32Array(80),m=0;m<16;++m)d[m]=o[l][m];for(var p=16;p<80;++p)d[p]=x(d[p-3]^d[p-8]^d[p-14]^d[p-16],1);for(var f=n[0],g=n[1],y=n[2],v=n[3],b=n[4],S=0;S<80;++S){var w=Math.floor(S/20),E=x(f,5)+C(w,g,y,v)+b+t[w]+d[S]>>>0;b=v,v=y,y=x(g,30)>>>0,g=f,f=E}n[0]=n[0]+f>>>0,n[1]=n[1]+g>>>0,n[2]=n[2]+y>>>0,n[3]=n[3]+v>>>0,n[4]=n[4]+b>>>0}return[n[0]>>24&255,n[0]>>16&255,n[0]>>8&255,255&n[0],n[1]>>24&255,n[1]>>16&255,n[1]>>8&255,255&n[1],n[2]>>24&255,n[2]>>16&255,n[2]>>8&255,255&n[2],n[3]>>24&255,n[3]>>16&255,n[3]>>8&255,255&n[3],n[4]>>24&255,n[4]>>16&255,n[4]>>8&255,255&n[4]]})),O="00000000-0000-0000-0000-000000000000";var T=function(e){if(!Object(h.a)(e))throw TypeError("Invalid UUID");return parseInt(e.substr(14,1),16)}},function(e,t,n){"use strict";n.r(t),n.d(t,"isFluidBrowserPackage",(function(){return a})),n.d(t,"IFluidTokenProvider",(function(){return o})),n.d(t,"IDeltaSender",(function(){return c})),n.d(t,"ContainerErrorType",(function(){return u.a})),n.d(t,"LoaderHeader",(function(){return h.a})),n.d(t,"isFluidPackage",(function(){return r})),n.d(t,"isFluidCodeDetails",(function(){return i})),n.d(t,"IFluidCodeDetailsComparer",(function(){return s})),n.d(t,"AttachState",(function(){return l.a})),n.d(t,"BindState",(function(){return l.b})),n.d(t,"IRuntimeFactory",(function(){return l.c}));
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
const r=e=>"object"==typeof e&&"string"==typeof(null==e?void 0:e.name)&&"object"==typeof(null==e?void 0:e.fluid),i=e=>{const t=e;return"object"==typeof t&&("string"==typeof(null==t?void 0:t.package)||r(null==t?void 0:t.package))&&(void 0===(null==t?void 0:t.config)||"object"==typeof(null==t?void 0:t.config))},s="IFluidCodeDetailsComparer",a=e=>{var t,n,i,s,a,o;return r(e)&&"string"==typeof(null===(i=null===(n=null===(t=null==e?void 0:e.fluid)||void 0===t?void 0:t.browser)||void 0===n?void 0:n.umd)||void 0===i?void 0:i.library)&&Array.isArray(null===(o=null===(a=null===(s=null==e?void 0:e.fluid)||void 0===s?void 0:s.browser)||void 0===a?void 0:a.umd)||void 0===o?void 0:o.files)},o="IFluidTokenProvider",c="IDeltaSender";var u=n(64),h=n(281),l=n(282)},function(e,t,n){"use strict";n.r(t),n.d(t,"v1",(function(){return u})),n.d(t,"v3",(function(){return S})),n.d(t,"v4",(function(){return w.a})),n.d(t,"v5",(function(){return E})),n.d(t,"NIL",(function(){return O})),n.d(t,"version",(function(){return T})),n.d(t,"validate",(function(){return h.a})),n.d(t,"stringify",(function(){return a.a})),n.d(t,"parse",(function(){return l}));var r,i,s=n(134),a=n(52),o=0,c=0;var u=function(e,t,n){var u=t&&n||0,h=t||new Array(16),l=(e=e||{}).node||r,d=void 0!==e.clockseq?e.clockseq:i;if(null==l||null==d){var m=e.random||(e.rng||s.a)();null==l&&(l=r=[1|m[0],m[1],m[2],m[3],m[4],m[5]]),null==d&&(d=i=16383&(m[6]<<8|m[7]))}var p=void 0!==e.msecs?e.msecs:Date.now(),f=void 0!==e.nsecs?e.nsecs:c+1,g=p-o+(f-c)/1e4;if(g<0&&void 0===e.clockseq&&(d=d+1&16383),(g<0||p>o)&&void 0===e.nsecs&&(f=0),f>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");o=p,c=f,i=d;var y=(1e4*(268435455&(p+=122192928e5))+f)%4294967296;h[u++]=y>>>24&255,h[u++]=y>>>16&255,h[u++]=y>>>8&255,h[u++]=255&y;var v=p/4294967296*1e4&268435455;h[u++]=v>>>8&255,h[u++]=255&v,h[u++]=v>>>24&15|16,h[u++]=v>>>16&255,h[u++]=d>>>8|128,h[u++]=255&d;for(var b=0;b<6;++b)h[u+b]=l[b];return t||Object(a.a)(h)},h=n(55);var l=function(e){if(!Object(h.a)(e))throw TypeError("Invalid UUID");var t,n=new Uint8Array(16);return n[0]=(t=parseInt(e.slice(0,8),16))>>>24,n[1]=t>>>16&255,n[2]=t>>>8&255,n[3]=255&t,n[4]=(t=parseInt(e.slice(9,13),16))>>>8,n[5]=255&t,n[6]=(t=parseInt(e.slice(14,18),16))>>>8,n[7]=255&t,n[8]=(t=parseInt(e.slice(19,23),16))>>>8,n[9]=255&t,n[10]=(t=parseInt(e.slice(24,36),16))/1099511627776&255,n[11]=t/4294967296&255,n[12]=t>>>24&255,n[13]=t>>>16&255,n[14]=t>>>8&255,n[15]=255&t,n};var d=function(e,t,n){function r(e,r,i,s){if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));for(var t=[],n=0;n<e.length;++n)t.push(e.charCodeAt(n));return t}(e)),"string"==typeof r&&(r=l(r)),16!==r.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");var o=new Uint8Array(16+e.length);if(o.set(r),o.set(e,r.length),(o=n(o))[6]=15&o[6]|t,o[8]=63&o[8]|128,i){s=s||0;for(var c=0;c<16;++c)i[s+c]=o[c];return i}return Object(a.a)(o)}try{r.name=e}catch(e){}return r.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",r.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",r};function m(e){return 14+(e+64>>>9<<4)+1}function p(e,t){var n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n}function f(e,t,n,r,i,s){return p((a=p(p(t,e),p(r,s)))<<(o=i)|a>>>32-o,n);var a,o}function g(e,t,n,r,i,s,a){return f(t&n|~t&r,e,t,i,s,a)}function y(e,t,n,r,i,s,a){return f(t&r|n&~r,e,t,i,s,a)}function v(e,t,n,r,i,s,a){return f(t^n^r,e,t,i,s,a)}function b(e,t,n,r,i,s,a){return f(n^(t|~r),e,t,i,s,a)}var S=d("v3",48,(function(e){if("string"==typeof e){var t=unescape(encodeURIComponent(e));e=new Uint8Array(t.length);for(var n=0;n<t.length;++n)e[n]=t.charCodeAt(n)}return function(e){for(var t=[],n=32*e.length,r=0;r<n;r+=8){var i=e[r>>5]>>>r%32&255,s=parseInt("0123456789abcdef".charAt(i>>>4&15)+"0123456789abcdef".charAt(15&i),16);t.push(s)}return t}(function(e,t){e[t>>5]|=128<<t%32,e[m(t)-1]=t;for(var n=1732584193,r=-271733879,i=-1732584194,s=271733878,a=0;a<e.length;a+=16){var o=n,c=r,u=i,h=s;n=g(n,r,i,s,e[a],7,-680876936),s=g(s,n,r,i,e[a+1],12,-389564586),i=g(i,s,n,r,e[a+2],17,606105819),r=g(r,i,s,n,e[a+3],22,-1044525330),n=g(n,r,i,s,e[a+4],7,-176418897),s=g(s,n,r,i,e[a+5],12,1200080426),i=g(i,s,n,r,e[a+6],17,-1473231341),r=g(r,i,s,n,e[a+7],22,-45705983),n=g(n,r,i,s,e[a+8],7,1770035416),s=g(s,n,r,i,e[a+9],12,-1958414417),i=g(i,s,n,r,e[a+10],17,-42063),r=g(r,i,s,n,e[a+11],22,-1990404162),n=g(n,r,i,s,e[a+12],7,1804603682),s=g(s,n,r,i,e[a+13],12,-40341101),i=g(i,s,n,r,e[a+14],17,-1502002290),r=g(r,i,s,n,e[a+15],22,1236535329),n=y(n,r,i,s,e[a+1],5,-165796510),s=y(s,n,r,i,e[a+6],9,-1069501632),i=y(i,s,n,r,e[a+11],14,643717713),r=y(r,i,s,n,e[a],20,-373897302),n=y(n,r,i,s,e[a+5],5,-701558691),s=y(s,n,r,i,e[a+10],9,38016083),i=y(i,s,n,r,e[a+15],14,-660478335),r=y(r,i,s,n,e[a+4],20,-405537848),n=y(n,r,i,s,e[a+9],5,568446438),s=y(s,n,r,i,e[a+14],9,-1019803690),i=y(i,s,n,r,e[a+3],14,-187363961),r=y(r,i,s,n,e[a+8],20,1163531501),n=y(n,r,i,s,e[a+13],5,-1444681467),s=y(s,n,r,i,e[a+2],9,-51403784),i=y(i,s,n,r,e[a+7],14,1735328473),r=y(r,i,s,n,e[a+12],20,-1926607734),n=v(n,r,i,s,e[a+5],4,-378558),s=v(s,n,r,i,e[a+8],11,-2022574463),i=v(i,s,n,r,e[a+11],16,1839030562),r=v(r,i,s,n,e[a+14],23,-35309556),n=v(n,r,i,s,e[a+1],4,-1530992060),s=v(s,n,r,i,e[a+4],11,1272893353),i=v(i,s,n,r,e[a+7],16,-155497632),r=v(r,i,s,n,e[a+10],23,-1094730640),n=v(n,r,i,s,e[a+13],4,681279174),s=v(s,n,r,i,e[a],11,-358537222),i=v(i,s,n,r,e[a+3],16,-722521979),r=v(r,i,s,n,e[a+6],23,76029189),n=v(n,r,i,s,e[a+9],4,-640364487),s=v(s,n,r,i,e[a+12],11,-421815835),i=v(i,s,n,r,e[a+15],16,530742520),r=v(r,i,s,n,e[a+2],23,-995338651),n=b(n,r,i,s,e[a],6,-198630844),s=b(s,n,r,i,e[a+7],10,1126891415),i=b(i,s,n,r,e[a+14],15,-1416354905),r=b(r,i,s,n,e[a+5],21,-57434055),n=b(n,r,i,s,e[a+12],6,1700485571),s=b(s,n,r,i,e[a+3],10,-1894986606),i=b(i,s,n,r,e[a+10],15,-1051523),r=b(r,i,s,n,e[a+1],21,-2054922799),n=b(n,r,i,s,e[a+8],6,1873313359),s=b(s,n,r,i,e[a+15],10,-30611744),i=b(i,s,n,r,e[a+6],15,-1560198380),r=b(r,i,s,n,e[a+13],21,1309151649),n=b(n,r,i,s,e[a+4],6,-145523070),s=b(s,n,r,i,e[a+11],10,-1120210379),i=b(i,s,n,r,e[a+2],15,718787259),r=b(r,i,s,n,e[a+9],21,-343485551),n=p(n,o),r=p(r,c),i=p(i,u),s=p(s,h)}return[n,r,i,s]}(function(e){if(0===e.length)return[];for(var t=8*e.length,n=new Uint32Array(m(t)),r=0;r<t;r+=8)n[r>>5]|=(255&e[r/8])<<r%32;return n}(e),8*e.length))})),w=n(98);function C(e,t,n,r){switch(e){case 0:return t&n^~t&r;case 1:return t^n^r;case 2:return t&n^t&r^n&r;case 3:return t^n^r}}function x(e,t){return e<<t|e>>>32-t}var E=d("v5",80,(function(e){var t=[1518500249,1859775393,2400959708,3395469782],n=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof e){var r=unescape(encodeURIComponent(e));e=[];for(var i=0;i<r.length;++i)e.push(r.charCodeAt(i))}else Array.isArray(e)||(e=Array.prototype.slice.call(e));e.push(128);for(var s=e.length/4+2,a=Math.ceil(s/16),o=new Array(a),c=0;c<a;++c){for(var u=new Uint32Array(16),h=0;h<16;++h)u[h]=e[64*c+4*h]<<24|e[64*c+4*h+1]<<16|e[64*c+4*h+2]<<8|e[64*c+4*h+3];o[c]=u}o[a-1][14]=8*(e.length-1)/Math.pow(2,32),o[a-1][14]=Math.floor(o[a-1][14]),o[a-1][15]=8*(e.length-1)&4294967295;for(var l=0;l<a;++l){for(var d=new Uint32Array(80),m=0;m<16;++m)d[m]=o[l][m];for(var p=16;p<80;++p)d[p]=x(d[p-3]^d[p-8]^d[p-14]^d[p-16],1);for(var f=n[0],g=n[1],y=n[2],v=n[3],b=n[4],S=0;S<80;++S){var w=Math.floor(S/20),E=x(f,5)+C(w,g,y,v)+b+t[w]+d[S]>>>0;b=v,v=y,y=x(g,30)>>>0,g=f,f=E}n[0]=n[0]+f>>>0,n[1]=n[1]+g>>>0,n[2]=n[2]+y>>>0,n[3]=n[3]+v>>>0,n[4]=n[4]+b>>>0}return[n[0]>>24&255,n[0]>>16&255,n[0]>>8&255,255&n[0],n[1]>>24&255,n[1]>>16&255,n[1]>>8&255,255&n[1],n[2]>>24&255,n[2]>>16&255,n[2]>>8&255,255&n[2],n[3]>>24&255,n[3]>>16&255,n[3]>>8&255,255&n[3],n[4]>>24&255,n[4]>>16&255,n[4]>>8&255,255&n[4]]})),O="00000000-0000-0000-0000-000000000000";var T=function(e){if(!Object(h.a)(e))throw TypeError("Invalid UUID");return parseInt(e.substr(14,1),16)}},function(e,t,n){"use strict";function r(e){if(e)return function(e){for(var t in r.prototype)e[t]=r.prototype[t];return e}(e)}n.d(t,"a",(function(){return r})),r.prototype.on=r.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},r.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var i=0;i<r.length;i++)if((n=r[i])===t||n.fn===t){r.splice(i,1);break}return 0===r.length&&delete this._callbacks["$"+e],this},r.prototype.emit=function(e){this._callbacks=this._callbacks||{};for(var t=new Array(arguments.length-1),n=this._callbacks["$"+e],r=1;r<arguments.length;r++)t[r-1]=arguments[r];if(n){r=0;for(var i=(n=n.slice(0)).length;r<i;++r)n[r].apply(this,t)}return this},r.prototype.emitReserved=r.prototype.emit,r.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},r.prototype.hasListeners=function(e){return!!this.listeners(e).length}},function(e,t,n){"use strict";n.d(t,"c",(function(){return i})),n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return c}));var r=n(32);function i(e,...t){return t.reduce((t,n)=>(e.hasOwnProperty(n)&&(t[n]=e[n]),t),{})}const s=setTimeout,a=clearTimeout;function o(e,t){t.useNativeTimers?(e.setTimeoutFn=s.bind(r.a),e.clearTimeoutFn=a.bind(r.a)):(e.setTimeoutFn=setTimeout.bind(r.a),e.clearTimeoutFn=clearTimeout.bind(r.a))}function c(e){return"string"==typeof e?function(e){let t=0,n=0;for(let r=0,i=e.length;r<i;r++)t=e.charCodeAt(r),t<128?n+=1:t<2048?n+=2:t<55296||t>=57344?n+=3:(r++,n+=4);return n}(e):Math.ceil(1.33*(e.byteLength||e.size))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));const r="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")()},function(e,t,n){"use strict";n.d(t,"b",(function(){return s})),n.d(t,"e",(function(){return a})),n.d(t,"c",(function(){return o})),n.d(t,"d",(function(){return c})),n.d(t,"a",(function(){return u}));var r=n(92),i=n(5);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function s(e,t){switch(t){case"base64":return r.fromByteArray(e);case"utf8":case"utf-8":case void 0:return(new TextDecoder).decode(e);default:throw new Error("invalid/unsupported encoding")}}const a=(e,t)=>u.from(e,t).buffer,o=(e,t)=>u.from(e).toString(t);function c(e){const t=e;return e instanceof ArrayBuffer||"object"==typeof t&&null!==t&&"number"==typeof t.byteLength&&"function"==typeof t.slice&&void 0===t.byteOffset&&void 0===t.buffer}class u extends Uint8Array{toString(e){return s(this,e)}static from(e,t,n){if("string"==typeof e)return u.fromString(e,t);if(null!==e&&"object"==typeof e&&c(e.buffer))return Object(i.a)(0===e.byteOffset,0),Object(i.a)(e.byteLength===e.buffer.byteLength,1),u.fromArrayBuffer(e.buffer,t,n);if(c(e))return u.fromArrayBuffer(e,t,n);throw new TypeError}static fromArrayBuffer(e,t,n){const r=null!=t?t:0,i=null!=n?n:e.byteLength-r;if(r<0||r>e.byteLength||i<0||i+r>e.byteLength)throw new RangeError;return new u(e,r,i)}static fromString(e,t){switch(t){case"base64":{const t=this.sanitizeBase64(e),n=r.toByteArray(t);return new u(n.buffer)}case"utf8":case"utf-8":case void 0:{const t=(new TextEncoder).encode(e);return new u(t.buffer)}default:throw new Error("invalid/unsupported encoding")}}static isBuffer(e){throw new Error("unimplemented")}static sanitizeBase64(e){let t=e;if(t=t.split("=")[0],t=t.replace(/[^\w+-/]/g,""),t.length%4!=0){t+=["","===","==","="][t.length%4]}return t}}},function(e,t,n){"use strict";n.d(t,"b",(function(){return s})),n.d(t,"e",(function(){return a})),n.d(t,"c",(function(){return o})),n.d(t,"d",(function(){return c})),n.d(t,"a",(function(){return u}));var r=n(73),i=n(1);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function s(e,t){switch(t){case"base64":return r.fromByteArray(e);case"utf8":case"utf-8":case void 0:return(new TextDecoder).decode(e);default:throw new Error("invalid/unsupported encoding")}}const a=(e,t)=>u.from(e,t).buffer,o=(e,t)=>u.from(e).toString(t);function c(e){const t=e;return e instanceof ArrayBuffer||"object"==typeof t&&null!==t&&"number"==typeof t.byteLength&&"function"==typeof t.slice&&void 0===t.byteOffset&&void 0===t.buffer}class u extends Uint8Array{toString(e){return s(this,e)}static from(e,t,n){if("string"==typeof e)return u.fromString(e,t);if(null!==e&&"object"==typeof e&&c(e.buffer))return Object(i.a)(0===e.byteOffset,0),Object(i.a)(e.byteLength===e.buffer.byteLength,1),u.fromArrayBuffer(e.buffer,t,n);if(c(e))return u.fromArrayBuffer(e,t,n);throw new TypeError}static fromArrayBuffer(e,t,n){const r=null!=t?t:0,i=null!=n?n:e.byteLength-r;if(r<0||r>e.byteLength||i<0||i+r>e.byteLength)throw new RangeError;return new u(e,r,i)}static fromString(e,t){switch(t){case"base64":{const t=this.sanitizeBase64(e),n=r.toByteArray(t);return new u(n.buffer)}case"utf8":case"utf-8":case void 0:{const t=(new TextEncoder).encode(e);return new u(t.buffer)}default:throw new Error("invalid/unsupported encoding")}}static isBuffer(e){throw new Error("unimplemented")}static sanitizeBase64(e){let t=e;if(t=t.split("=")[0],t=t.replace(/[^\w+-/]/g,""),t.length%4!=0){t+=["","===","==","="][t.length%4]}return t}}},function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"g",(function(){return c})),n.d(t,"h",(function(){return u})),n.d(t,"c",(function(){return l})),n.d(t,"d",(function(){return d})),n.d(t,"i",(function(){return m})),n.d(t,"j",(function(){return p})),n.d(t,"f",(function(){return g})),n.d(t,"e",(function(){return y})),n.d(t,"a",(function(){return v}));var r=n(182);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */const i=e=>"function"==typeof(null==e?void 0:e.getTelemetryProperties)&&"function"==typeof(null==e?void 0:e.addTelemetryProperties),s=e=>"string"==typeof(null==e?void 0:e.errorInstanceId);function a(e){return"string"==typeof(null==e?void 0:e.errorType)&&"string"==typeof(null==e?void 0:e.message)&&i(e)}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */function o(e,t){const n={message:"string"==typeof(null==e?void 0:e.message)?e.message:String(e)};if(null!==(r=e)&&!Array.isArray(r)&&"object"==typeof r){const{errorType:r,stack:i,name:s}=e;if("string"==typeof r&&(n.errorType=r),"string"==typeof i){const e="string"==typeof s?s:void 0;n.stack=((e,n)=>{if(!t)return e;const r=e.split("\n");return r.shift(),void 0!==n&&r.unshift(n),r.join("\n")})(i,e)}}var r;return n}const c=e=>"function"==typeof(null==e?void 0:e.getTelemetryProperties);function u(e,t={}){var n,c;if(a(e)&&function(e){const t=e;void 0===t.errorInstanceId&&(t.errorInstanceId=Object(r.a)())}(e),"string"==typeof(null==(c=e)?void 0:c.errorType)&&"string"==typeof(null==c?void 0:c.message)&&s(c)&&i(c))return e.addTelemetryProperties(null!==(n=t.props)&&void 0!==n?n:{}),e;const{message:h,stack:l}=o(e,!1),d=new b({errorType:"genericError",message:h,stack:l});if(d.addTelemetryProperties(Object.assign(Object.assign({},t.props),{untrustedOrigin:1})),"object"==typeof e&&null!==e){const{canRetry:t,retryAfterSeconds:n}=e;Object.assign(u,{canRetry:t,retryAfterSeconds:n})}return"object"!=typeof e&&d.addTelemetryProperties({typeofError:typeof e}),d}let h;function l(){const e=new Error("<<generated stack>>");if(void 0===h&&(h=void 0!==e.stack),h)return e;try{throw e}catch(e){return e}}function d(){return l().stack}function m(e,t){const{message:n,stack:r}=o(e,!1),i=t(n);var c;return void 0!==r&&f(i,r),a(c=e)&&1!==c.getTelemetryProperties().untrustedOrigin||i.addTelemetryProperties({untrustedOrigin:1}),s(e)&&(i.overwriteErrorInstanceId(e.errorInstanceId),i.addTelemetryProperties({innerErrorInstanceId:e.errorInstanceId})),i}function p(e,t,n){const r=m(e,t),i=r.errorInstanceId,s=i;return n.sendTelemetryEvent({eventName:"WrapError",errorInstanceId:i,wrappedByErrorInstanceId:s},e),r}function f(e,t){try{Object.assign(e,{stack:t})}catch(n){e.addTelemetryProperties({stack2:t})}}function g(e){return!a(e)||1===e.getTelemetryProperties().untrustedOrigin&&"genericError"===e.errorType}const y=()=>{const e=new WeakSet;return(t,n)=>{if("object"==typeof n&&null!==n){if(e.has(n))return"<removed/circular>";e.add(n)}return n}};class v extends Error{constructor(e,t,n=new Set){super(e),this.omitPropsFromLogging=n,this._errorInstanceId=Object(r.a)(),this.fluidErrorCode="-",n.add("omitPropsFromLogging"),n.add("_errorInstanceId"),t&&this.addTelemetryProperties(t)}get errorInstanceId(){return this._errorInstanceId}overwriteErrorInstanceId(e){this._errorInstanceId=e}addTelemetryProperties(e){!function(e,t){for(const n of Object.keys(t))void 0===e[n]&&(e[n]=t[n])}(this,e)}getTelemetryProperties(){const e=function(e,t){const n={};for(const i of Object.keys(e)){if(t.has(i))continue;const s=e[i];switch(typeof s){case"string":case"number":case"boolean":case"undefined":n[i]=s;break;default:"object"!=typeof(null==(r=s)?void 0:r.value)&&"string"==typeof(null==r?void 0:r.tag)?n[i]=s:n[i]="REDACTED (arbitrary object)"}}var r;return n}(this,this.omitPropsFromLogging);return Object.assign(Object.assign({},e),{stack:this.stack,message:this.message,errorInstanceId:this._errorInstanceId})}}class b extends v{constructor(e){super(e.message),this.errorType=e.errorType,void 0!==e.stack&&f(this,e.stack)}}},function(e,t,n){"use strict";n.r(t),n.d(t,"PointArrayStroke",(function(){return a})),n.d(t,"streamPointArrayStrokePathFrom",(function(){return o})),n.d(t,"streamPointArrayStrokeFrom",(function(){return c})),n.d(t,"streamJointPointArrayStrokePathFrom",(function(){return u}));var r=n(56),i=n(65),s=n(136);class a{constructor(){this.id=s.a,this.drawingAttributes=r.a,this.points=[]}streamChannels(e){this.points.forEach(t=>{e.addPoint(Object(i.a)(t)),e.addPressure(Object(i.c)(t)),e.addTilt(Object(i.d)(t)),e.addTimestamp(Object(i.e)(t))})}streamPoints(e){this.points.forEach(t=>{e.add(t)})}streamPath(e){o(this,e,0)}stream(e){c(this,e,0)}add(e){this.points.push(e)}}function o(e,t,n){if(n+2>e.points.length)return n;t.beginStroke(e.points[n]);for(let r=n+1;r<e.points.length-1;r+=1)t.addPoint(e.points[r]);return t.endStroke(e.points[e.points.length-1]),e.points.length-1}function c(e,t,n){return t.setDrawingAttributes(e.drawingAttributes),o(e,t,n)}function u(e,t,n){if(0===e.length||n+2>e[0].points.length)return;t.beginStroke(e[0].points[n]);let r=e[0].points[n+1];e.forEach((e,i)=>{for(let s=0===i?n+2:0;s<e.points.length;s+=1)t.addPoint(r),r=e.points[s]}),t.endStroke(r)}},function(e,t,n){"use strict";n.d(t,"e",(function(){return r})),n.d(t,"f",(function(){return c})),n.d(t,"d",(function(){return u})),n.d(t,"a",(function(){return h})),n.d(t,"b",(function(){return l})),n.d(t,"c",(function(){return d})),n.d(t,"g",(function(){return m}));var r,i=n(189),s=n(76),a=n(53),o=n(16);!function(e){e.PackageData="PackageData",e.UserData="UserData"}(r||(r={}));class c{constructor(e,t){this.namespace=e,this.properties=t}static formatTick(e){return Math.floor(e)}static numberFromString(e){if(null==e)return;const t=Number(e);return Number.isNaN(t)?e:t}static sanitizePkgName(e){return e.replace("@","").replace("/","-")}static prepareErrorObject(e,t,n){const{message:r,errorType:i,stack:s}=Object(o.b)(t,!0);if(e.stack=s,e.error=r,e.errorType=i,Object(o.g)(t)){const n=t.getTelemetryProperties();for(const t of Object.keys(n))void 0===e[t]&&(e[t]=n[t])}void 0===e.stack&&n&&(e.stack=Object(o.d)())}sendTelemetryEvent(e,t){var n;this.sendTelemetryEventCore(Object.assign(Object.assign({},e),{category:null!==(n=e.category)&&void 0!==n?n:"generic"}),t)}sendTelemetryEventCore(e,t){const n=Object.assign({},e);void 0!==t&&c.prepareErrorObject(n,t,!1),"number"==typeof n.duration&&(n.duration=c.formatTick(n.duration)),this.send(n)}sendErrorEvent(e,t){this.sendTelemetryEventCore(Object.assign(Object.assign({},e),{category:"error"}),t)}sendPerformanceEvent(e,t){var n;const r=Object.assign(Object.assign({},e),{category:null!==(n=e.category)&&void 0!==n?n:"performance"});this.sendTelemetryEventCore(r,t)}prepareEvent(e){const t="error"===e.category||void 0!==e.error,n=Object.assign({},e);if(void 0!==this.namespace&&(n.eventName=`${this.namespace}${c.eventNamespaceSeparator}${n.eventName}`),this.properties){const r=[];r.push(this.properties.all),t&&r.push(this.properties.error);for(const t of r)if(void 0!==t)for(const r of Object.keys(t)){if(void 0!==e[r])continue;const i=t[r],s="function"==typeof i?i():i;void 0!==s&&(n[r]=s)}}return n}}c.eventNamespaceSeparator=":";class u{constructor(e){this.logger=e}send(e){const t={category:e.category,eventName:e.eventName};for(const n of Object.keys(e)){const i=e[n],{value:s,tag:a}="object"==typeof i?i:{value:i,tag:void 0};switch(a){case void 0:case r.PackageData:t[n]=s;break;case r.UserData:t[n]="REDACTED (UserData)";break;default:t[n]="REDACTED (unknown tag)"}}this.logger.send(t)}}class h extends c{constructor(e,t,n){super(t,n),this.baseLogger=e,Object(a.b)(e)&&Object(a.d)(this,new a.a(e.config))}static create(e,t,n){if(e instanceof h){const r={};for(const t of[e.properties,n])void 0!==t&&(void 0!==t.all&&(r.all=Object.assign(Object.assign({},r.all),t.all)),void 0!==t.error&&(r.error=Object.assign(Object.assign({},r.error),t.error)));const i=void 0===e.namespace?t:void 0===t?e.namespace:`${e.namespace}${c.eventNamespaceSeparator}${t}`;return new h(e.baseLogger,i,r)}return new h(e||new i.a,t,n)}send(e){this.baseLogger.send(this.prepareEvent(e))}}class l extends c{constructor(e,t){super(e,t),this.loggers=[]}addLogger(e){null!=e&&this.loggers.push(e)}send(e){const t=this.prepareEvent(e);this.loggers.forEach(e=>{e.send(t)})}}class d{constructor(e,t,n={end:!0,cancel:"generic"}){this.logger=e,this.markers=n,this.startTime=s.a.now(),this.event=Object.assign({},t),this.markers.start&&this.reportEvent("start"),"object"==typeof window&&null!=window&&window.performance&&(this.startMark=t.eventName+"-start",window.performance.mark(this.startMark))}static start(e,t,n){return new d(e,t,n)}static timedExec(e,t,n,r){const i=d.start(e,t,r);try{const e=n(i);return i.autoEnd(),e}catch(e){throw i.cancel(void 0,e),e}}static async timedExecAsync(e,t,n,r){const i=d.start(e,t,r);try{const e=await n(i);return i.autoEnd(),e}catch(e){throw i.cancel(void 0,e),e}}get duration(){return s.a.now()-this.startTime}reportProgress(e,t="update"){this.reportEvent(t,e)}autoEnd(){this.event&&this.markers.end&&this.reportEvent("end"),this.performanceEndMark(),this.event=void 0}end(e){this.reportEvent("end",e),this.performanceEndMark(),this.event=void 0}performanceEndMark(){if(this.startMark&&this.event){const e=this.event.eventName+"-end";window.performance.mark(e),window.performance.measure(""+this.event.eventName,this.startMark,e),this.startMark=void 0}}cancel(e,t){void 0!==this.markers.cancel&&this.reportEvent("cancel",Object.assign({category:this.markers.cancel},e),t),this.event=void 0}reportEvent(e,t,n){if(!this.event)return;const r=Object.assign(Object.assign({},this.event),t);r.eventName=`${r.eventName}_${e}`,"start"!==e&&(r.duration=this.duration),this.logger.sendPerformanceEvent(r,n)}}class m{send(e){}sendTelemetryEvent(e,t){}sendErrorEvent(e,t){this.reportError("errorEvent in UT logger!",e,t)}sendPerformanceEvent(e,t){}logGenericError(e,t){this.reportError("genericError in UT logger!",{eventName:e},t)}logException(e,t){this.reportError("exception in UT logger!",e,t)}debugAssert(e,t){this.reportError("debugAssert in UT logger!")}shipAssert(e,t){this.reportError("shipAssert in UT logger!")}reportError(e,t,n){const r=new Error(e);throw r.error=r,r.event=t,console.error(e),console.error(r),r}}},,,function(e,t,n){var r=n(211),i="object"==typeof self&&self&&self.Object===Object&&self,s=r||i||Function("return this")();e.exports=s},function(e,t,n){var r=n(264),i="object"==typeof self&&self&&self.Object===Object&&self,s=r||i||Function("return this")();e.exports=s},function(e,t,n){"use strict";n.d(t,"e",(function(){return b})),n.d(t,"c",(function(){return u})),n.d(t,"d",(function(){return y})),n.d(t,"a",(function(){return f})),n.d(t,"b",(function(){return v}));const r=Object.create(null);r.open="0",r.close="1",r.ping="2",r.pong="3",r.message="4",r.upgrade="5",r.noop="6";const i=Object.create(null);Object.keys(r).forEach(e=>{i[r[e]]=e});const s={type:"error",data:"parser error"},a="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),o="function"==typeof ArrayBuffer,c=(e,t)=>{const n=new FileReader;return n.onload=function(){const e=n.result.split(",")[1];t("b"+e)},n.readAsDataURL(e)};var u=({type:e,data:t},n,i)=>{return a&&t instanceof Blob?n?i(t):c(t,i):o&&(t instanceof ArrayBuffer||(s=t,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(s):s&&s.buffer instanceof ArrayBuffer))?n?i(t):c(new Blob([t]),i):i(r[e]+(t||""));var s};const h="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",l="undefined"==typeof Uint8Array?[]:new Uint8Array(256);for(let e=0;e<h.length;e++)l[h.charCodeAt(e)]=e;const d="function"==typeof ArrayBuffer,m=(e,t)=>{if(d){const n=(e=>{let t,n,r,i,s,a=.75*e.length,o=e.length,c=0;"="===e[e.length-1]&&(a--,"="===e[e.length-2]&&a--);const u=new ArrayBuffer(a),h=new Uint8Array(u);for(t=0;t<o;t+=4)n=l[e.charCodeAt(t)],r=l[e.charCodeAt(t+1)],i=l[e.charCodeAt(t+2)],s=l[e.charCodeAt(t+3)],h[c++]=n<<2|r>>4,h[c++]=(15&r)<<4|i>>2,h[c++]=(3&i)<<6|63&s;return u})(e);return p(n,t)}return{base64:!0,data:e}},p=(e,t)=>{switch(t){case"blob":return e instanceof ArrayBuffer?new Blob([e]):e;case"arraybuffer":default:return e}};var f=(e,t)=>{if("string"!=typeof e)return{type:"message",data:p(e,t)};const n=e.charAt(0);if("b"===n)return{type:"message",data:m(e.substring(1),t)};return i[n]?e.length>1?{type:i[n],data:e.substring(1)}:{type:i[n]}:s};const g=String.fromCharCode(30),y=(e,t)=>{const n=e.length,r=new Array(n);let i=0;e.forEach((e,s)=>{u(e,!1,e=>{r[s]=e,++i===n&&t(r.join(g))})})},v=(e,t)=>{const n=e.split(g),r=[];for(let e=0;e<n.length;e++){const i=f(n[e],t);if(r.push(i),"error"===i.type)break}return r},b=4},function(e,t,n){"use strict";n.d(t,"c",(function(){return i})),n.d(t,"a",(function(){return s})),n.d(t,"d",(function(){return a})),n.d(t,"b",(function(){return o}));var r=n(32);const i="function"==typeof Promise&&"function"==typeof Promise.resolve?e=>Promise.resolve().then(e):(e,t)=>t(e,0),s=r.a.WebSocket||r.a.MozWebSocket,a=!0,o="arraybuffer"},function(e,t,n){"use strict";n.d(t,"k",(function(){return u})),n.d(t,"l",(function(){return h})),n.d(t,"j",(function(){return l})),n.d(t,"e",(function(){return d})),n.d(t,"b",(function(){return m})),n.d(t,"d",(function(){return p})),n.d(t,"c",(function(){return f})),n.d(t,"a",(function(){return g})),n.d(t,"i",(function(){return y})),n.d(t,"h",(function(){return v})),n.d(t,"f",(function(){return b})),n.d(t,"g",(function(){return S}));var r=n(34),i=n(190),s=n(77),a=n(142),o=n(8),c=n(17);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function u(...e){const t={treeNodeCount:0,blobNodeCount:0,handleNodeCount:0,totalBlobSize:0,unreferencedBlobSize:0};for(const n of e)t.treeNodeCount+=n.treeNodeCount,t.blobNodeCount+=n.blobNodeCount,t.handleNodeCount+=n.handleNodeCount,t.totalBlobSize+=n.totalBlobSize,t.unreferencedBlobSize+=n.unreferencedBlobSize;return t}function h(e){let t=e.length;for(let n=e.length-1;n>=0;n--){const r=e.charCodeAt(n);r>127&&r<=2047?t++:r>2047&&r<=65535&&(t+=2),r>=56320&&r<=57343&&n--}return t}function l(e){return"string"==typeof e?h(e):e.byteLength}function d(e){const t=u();return function e(t,n){switch(t.type){case o.a.Tree:n.treeNodeCount++;for(const r of Object.values(t.tree))e(r,n);return;case o.a.Handle:return void n.handleNodeCount++;case o.a.Blob:return n.blobNodeCount++,void(n.totalBlobSize+=l(t.content));default:return}}(e,t),t}function m(e,t,n){const r={type:o.a.Blob,content:n};e.summary.tree[t]=r,e.stats.blobNodeCount++,e.stats.totalBlobSize+=l(n)}function p(e,t,n){e.summary.tree[t]=n.summary,e.stats=u(e.stats,n.stats)}function f(e,t,n){e.summary.tree[t]=n.summary,e.stats=u(e.stats,n.stats)}class g{constructor(){this.attachmentCounter=0,this.summaryTree={},this.summaryStats=u(),this.summaryStats.treeNodeCount++}get summary(){return{type:o.a.Tree,tree:Object.assign({},this.summaryTree)}}get stats(){return Object.assign({},this.summaryStats)}addBlob(e,t){m({summary:{type:o.a.Tree,tree:this.summaryTree},stats:this.summaryStats},e,t)}addHandle(e,t,n){this.summaryTree[e]={type:o.a.Handle,handleType:t,handle:n},this.summaryStats.handleNodeCount++}addWithStats(e,t){this.summaryTree[e]=t.summary,this.summaryStats=u(this.summaryStats,t.stats)}addAttachment(e){this.summaryTree[this.attachmentCounter++]={id:e,type:o.a.Attachment}}getSummaryTree(){return{summary:this.summary,stats:this.stats}}}function y(e,t=!1){const n=new g;for(const i of e.entries)switch(i.type){case c.b.Blob:{const e=i.value;let t;t="base64"===e.encoding?r.a.from(e.contents,"base64"):e.contents,n.addBlob(i.path,t);break}case c.b.Tree:{const e=v(i.value,t);n.addWithStats(i.path,e);break}case c.b.Attachment:{const e=i.value.id;n.addAttachment(e);break}default:throw new Error("Unexpected TreeEntry type")}const i=n.getSummaryTree();return i.summary.unreferenced=e.unreferenced,i}function v(e,t=!1){if(e.id&&!t){const t=u();return t.handleNodeCount++,{summary:{handle:e.id,handleType:o.a.Tree,type:o.a.Handle},stats:t}}return y(e,t)}function b(e){const t=new g;for(const[n,s]of Object.entries(e.blobs)){let a;if(void 0!==e.blobsContents){const t=e.blobsContents[s];void 0!==t&&(a=Object(r.c)(t,"utf-8"))}else void 0!==e.blobs[s]&&(a=Object(i.a)(e.blobs[s]));void 0!==a&&t.addBlob(n,a)}for(const[n,r]of Object.entries(e.trees)){const e=b(r);t.addWithStats(n,e)}const n=t.getSummaryTree();return n.summary.unreferenced=e.unreferenced,n}function S(e){const t=[];for(const[n,i]of Object.entries(e.tree))switch(i.type){case o.a.Blob:{let e,s="utf-8";"string"==typeof i.content?e=i.content:(e=Object(r.b)(i.content,"base64"),s="base64"),t.push(new a.b(n,e,s));break}case o.a.Tree:t.push(new a.c(n,S(i)));break;case o.a.Attachment:t.push(new a.a(n,i.id));break;case o.a.Handle:throw new Error("Should not have Handle type in summary tree");default:Object(s.a)(i,"Unexpected summary tree type")}return{entries:t,unreferenced:e.unreferenced}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));const r=.5},function(e,t,n){"use strict";n.d(t,"b",(function(){return i})),n.d(t,"a",(function(){return a}));var r=n(143);n(44);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function i(e,t,n){const r=e.makeSerialized(t,n);return{type:r.type,value:r.value&&JSON.parse(r.value)}}class s{constructor(e){this.value=e}get type(){return r.a[r.a.Plain]}makeSerialized(e,t){const n=
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function(e,t,n){return void 0!==e?t.stringify(e,n):e}(this.value,e,t);return{type:this.type,value:n}}}class a{constructor(e){this.serializer=e}fromSerializable(e){if(e.type===r.a[r.a.Shared]){e.type=r.a[r.a.Plain];const t={type:"__fluid_handle__",url:e.value};e.value=t}const t=(n=e.value,i=this.serializer,void 0!==n?i.parse(JSON.stringify(n)):n);var n,i;return new s(t)}fromInMemory(e){return new s(e)}}},function(e,t,n){var r=n(329);e.exports=function(e){return r(e,5)}},,function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.EphemeralEvent=t.EphemeralEventEvents=void 0;const r=n(89),i=n(236),s=n(85),a=n(86),o=n(241);var c;!function(e){e.received="received"}(c=t.EphemeralEventEvents||(t.EphemeralEventEvents={}));class u extends r.DataObject{get isStarted(){return!!this._eventTarget}start(e){if(this._eventTarget)throw new Error("EphemeralEvent already started.");const t=new s.EphemeralEventScope(this.runtime,e);return this._eventTarget=new a.EphemeralEventTarget(t,"event",(e,t)=>{this.emit(c.received,e,t)}),Promise.resolve()}sendEvent(e){if(!this._eventTarget)throw new Error("EphemeralEvent not started.");return this._eventTarget.sendEvent(e)}static getTimestamp(){return u._timestampProvider.getTimestamp()}static getClientRoles(e){return u._roleVerifier.getClientRoles(e)}static registerClientId(e){return u._roleVerifier.registerClientId(e)}static verifyRolesAllowed(e,t){return u._roleVerifier.verifyRolesAllowed(e,t)}static isNewer(e,t,n=0){if(e)if(e.timestamp==t.timestamp){if((e.clientId||"").localeCompare(t.clientId||"")<0)return!1}else if(e.timestamp>t.timestamp){if(e.timestamp-t.timestamp>n)return!1}else{if(t.timestamp-e.timestamp<n)return!1}return!0}static setTimestampProvider(e){u._timestampProvider=e}static setRoleVerifier(e){u._roleVerifier=e}}t.EphemeralEvent=u,u._timestampProvider=new i.LocalTimestampProvider,u._roleVerifier=new o.LocalRoleVerifier,u.TypeName="@microsoft/live-share:EphemeralEvent",u.factory=new r.DataObjectFactory(u.TypeName,u,[],{})},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t,n){"use strict";for(var r=n(54),i=[],s=0;s<256;++s)i.push((s+256).toString(16).substr(1));t.a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(i[e[t+0]]+i[e[t+1]]+i[e[t+2]]+i[e[t+3]]+"-"+i[e[t+4]]+i[e[t+5]]+"-"+i[e[t+6]]+i[e[t+7]]+"-"+i[e[t+8]]+i[e[t+9]]+"-"+i[e[t+10]]+i[e[t+11]]+i[e[t+12]]+i[e[t+13]]+i[e[t+14]]+i[e[t+15]]).toLowerCase();if(!Object(r.a)(n))throw TypeError("Stringified UUID is invalid");return n}},function(e,t,n){"use strict";for(var r=n(55),i=[],s=0;s<256;++s)i.push((s+256).toString(16).substr(1));t.a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(i[e[t+0]]+i[e[t+1]]+i[e[t+2]]+i[e[t+3]]+"-"+i[e[t+4]]+i[e[t+5]]+"-"+i[e[t+6]]+i[e[t+7]]+"-"+i[e[t+8]]+i[e[t+9]]+"-"+i[e[t+10]]+i[e[t+11]]+i[e[t+12]]+i[e[t+13]]+i[e[t+14]]+i[e[t+15]]).toLowerCase();if(!Object(r.a)(n))throw TypeError("Stringified UUID is invalid");return n}},function(e,t,n){"use strict";n.d(t,"e",(function(){return r})),n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return h})),n.d(t,"c",(function(){return l})),n.d(t,"d",(function(){return d}));const r=new(n(188).a)(()=>s(c())),i={getRawConfig:()=>{}},s=e=>null!=e?new u({getRawConfig:t=>{var n,r;try{return null===(r=o(null!==(n=e.getItem(t))&&void 0!==n?n:void 0))||void 0===r?void 0:r.raw}catch(e){}}}):i;function a(e){switch(e){case"boolean":case"number":case"string":return!0;default:return!1}}function o(e){let t,n=e;if("string"==typeof e)try{n=JSON.parse(e),t={raw:e,string:e}}catch(e){}if(void 0===n)return t;const r=typeof n;if(a(r))return Object.assign(Object.assign({},t),{raw:e,[r]:n});if(Array.isArray(n)){const r=typeof n[0];if(!a(r))return t;for(const e of n)if(typeof e!==r)return t;return Object.assign(Object.assign({},t),{raw:e,[r+"[]"]:n})}return t}const c=()=>{try{return null!==sessionStorage?sessionStorage:void 0}catch(e){return}};class u{constructor(...e){this.configCache=new Map,this.orderedBaseProviders=[];const t=new Set,n=[...e];for(;n.length>0;){const e=n.shift();void 0!==e&&m(e)&&!t.has(e)&&(t.add(e),e instanceof u?n.push(...e.orderedBaseProviders):this.orderedBaseProviders.push(e))}}getBoolean(e){var t;return null===(t=this.getCacheEntry(e))||void 0===t?void 0:t.boolean}getNumber(e){var t;return null===(t=this.getCacheEntry(e))||void 0===t?void 0:t.number}getString(e){var t;return null===(t=this.getCacheEntry(e))||void 0===t?void 0:t.string}getBooleanArray(e){var t;return null===(t=this.getCacheEntry(e))||void 0===t?void 0:t["boolean[]"]}getNumberArray(e){var t;return null===(t=this.getCacheEntry(e))||void 0===t?void 0:t["number[]"]}getStringArray(e){var t;return null===(t=this.getCacheEntry(e))||void 0===t?void 0:t["string[]"]}getRawConfig(e){var t;return null===(t=this.getCacheEntry(e))||void 0===t?void 0:t.raw}getCacheEntry(e){if(!this.configCache.has(e)){for(const t of this.orderedBaseProviders){const n=o(null==t?void 0:t.getRawConfig(e));if(void 0!==n)return this.configCache.set(e,n),n}this.configCache.set(e,{raw:void 0})}return this.configCache.get(e)}}function h(e){const t=e;return m(null==t?void 0:t.config)&&void 0!==(null==t?void 0:t.logger)}function l(e){return h(e)?e:d(e,r.value)}function d(e,...t){if(h(e))throw new Error("Logger is already a monitoring context");const n=e;return n.config=new u(...t),n.logger=e,n}function m(e){const t=e;return"function"==typeof(null==t?void 0:t.getRawConfig)}},function(e,t,n){"use strict";var r=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;t.a=function(e){return"string"==typeof e&&r.test(e)}},function(e,t,n){"use strict";var r=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;t.a=function(e){return"string"==typeof e&&r.test(e)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));const r={type:0},i={width:4,height:4,color:{r:0,g:0,b:0,a:1},effect:r,tip:"ellipse",rasterOperation:"copy"}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return s})),n.d(t,"c",(function(){return a}));
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
const r=e=>"function"==typeof(null==e?void 0:e.getTelemetryProperties)&&"function"==typeof(null==e?void 0:e.addTelemetryProperties),i=e=>"string"==typeof(null==e?void 0:e.errorInstanceId);function s(e){return"string"==typeof(null==e?void 0:e.errorType)&&"string"==typeof(null==e?void 0:e.message)&&i(e)&&r(e)}function a(e){return"string"==typeof(null==e?void 0:e.errorType)&&"string"==typeof(null==e?void 0:e.message)&&r(e)}},function(e,t,n){var r=n(340),i=n(345);e.exports=function(e,t){var n=i(e,t);return r(n)?n:void 0}},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){var n,r,i=e.exports={};function s(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function o(e){if(n===setTimeout)return setTimeout(e,0);if((n===s||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:s}catch(e){n=s}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var c,u=[],h=!1,l=-1;function d(){h&&c&&(h=!1,c.length?u=c.concat(u):l=-1,u.length&&m())}function m(){if(!h){var e=o(d);h=!0;for(var t=u.length;t;){for(c=u,u=[];++l<t;)c&&c[l].run();l=-1,t=u.length}c=null,h=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function f(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new p(e,t)),1!==u.length||h||o(m)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=f,i.addListener=f,i.once=f,i.off=f,i.removeListener=f,i.removeAllListeners=f,i.emit=f,i.prependListener=f,i.prependOnceListener=f,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){var r=n(470),i=n(475);e.exports=function(e,t){var n=i(e,t);return r(n)?n:void 0}},function(e,t,n){"use strict";n.d(t,"i",(function(){return u})),n.d(t,"e",(function(){return l})),n.d(t,"b",(function(){return d})),n.d(t,"d",(function(){return m})),n.d(t,"c",(function(){return p})),n.d(t,"a",(function(){return f})),n.d(t,"h",(function(){return g})),n.d(t,"f",(function(){return y})),n.d(t,"g",(function(){return v}));var r=n(33),i=n(185),s=n(93),a=n(140),o=n(15),c=n(20);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function u(...e){const t={treeNodeCount:0,blobNodeCount:0,handleNodeCount:0,totalBlobSize:0,unreferencedBlobSize:0};for(const n of e)t.treeNodeCount+=n.treeNodeCount,t.blobNodeCount+=n.blobNodeCount,t.handleNodeCount+=n.handleNodeCount,t.totalBlobSize+=n.totalBlobSize,t.unreferencedBlobSize+=n.unreferencedBlobSize;return t}function h(e){return"string"==typeof e?function(e){let t=e.length;for(let n=e.length-1;n>=0;n--){const r=e.charCodeAt(n);r>127&&r<=2047?t++:r>2047&&r<=65535&&(t+=2),r>=56320&&r<=57343&&n--}return t}(e):e.byteLength}function l(e){const t=u();return function e(t,n){switch(t.type){case o.a.Tree:n.treeNodeCount++;for(const r of Object.values(t.tree))e(r,n);return;case o.a.Handle:return void n.handleNodeCount++;case o.a.Blob:return n.blobNodeCount++,void(n.totalBlobSize+=h(t.content));default:return}}(e,t),t}function d(e,t,n){const r={type:o.a.Blob,content:n};e.summary.tree[t]=r,e.stats.blobNodeCount++,e.stats.totalBlobSize+=h(n)}function m(e,t,n){e.summary.tree[t]=n.summary,e.stats=u(e.stats,n.stats)}function p(e,t,n){e.summary.tree[t]=n.summary,e.stats=u(e.stats,n.stats)}class f{constructor(){this.attachmentCounter=0,this.summaryTree={},this.summaryStats=u(),this.summaryStats.treeNodeCount++}get summary(){return{type:o.a.Tree,tree:Object.assign({},this.summaryTree)}}get stats(){return Object.assign({},this.summaryStats)}addBlob(e,t){d({summary:{type:o.a.Tree,tree:this.summaryTree},stats:this.summaryStats},e,t)}addHandle(e,t,n){this.summaryTree[e]={type:o.a.Handle,handleType:t,handle:n},this.summaryStats.handleNodeCount++}addWithStats(e,t){this.summaryTree[e]=t.summary,this.summaryStats=u(this.summaryStats,t.stats)}addAttachment(e){this.summaryTree[this.attachmentCounter++]={id:e,type:o.a.Attachment}}getSummaryTree(){return{summary:this.summary,stats:this.stats}}}function g(e,t=!1){if(e.id&&!t){const t=u();return t.handleNodeCount++,{summary:{handle:e.id,handleType:o.a.Tree,type:o.a.Handle},stats:t}}return function(e,t=!1){const n=new f;for(const i of e.entries)switch(i.type){case c.b.Blob:{const e=i.value;let t;t="base64"===e.encoding?r.a.from(e.contents,"base64"):e.contents,n.addBlob(i.path,t);break}case c.b.Tree:{const e=g(i.value,t);n.addWithStats(i.path,e);break}case c.b.Attachment:{const e=i.value.id;n.addAttachment(e);break}default:throw new Error("Unexpected TreeEntry type")}const i=n.getSummaryTree();return i.summary.unreferenced=e.unreferenced,i}(e,t)}function y(e){const t=new f;for(const[n,s]of Object.entries(e.blobs)){let a;if(void 0!==e.blobsContents){const t=e.blobsContents[s];void 0!==t&&(a=Object(r.c)(t,"utf-8"))}else void 0!==e.blobs[s]&&(a=Object(i.a)(e.blobs[s]));void 0!==a&&t.addBlob(n,a)}for(const[n,r]of Object.entries(e.trees)){const e=y(r);t.addWithStats(n,e)}const n=t.getSummaryTree();return n.summary.unreferenced=e.unreferenced,n}function v(e){const t=[];for(const[n,i]of Object.entries(e.tree))switch(i.type){case o.a.Blob:{let e,s="utf-8";"string"==typeof i.content?e=i.content:(e=Object(r.b)(i.content,"base64"),s="base64"),t.push(new a.b(n,e,s));break}case o.a.Tree:t.push(new a.c(n,v(i)));break;case o.a.Attachment:t.push(new a.a(n,i.id));break;case o.a.Handle:throw new Error("Should not have Handle type in summary tree");default:Object(s.a)(i,"Unexpected summary tree type")}return{entries:t,unreferenced:e.unreferenced}}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
var r;n.d(t,"a",(function(){return r})),function(e){e.genericError="genericError",e.throttlingError="throttlingError",e.dataCorruptionError="dataCorruptionError",e.dataProcessingError="dataProcessingError",e.usageError="usageError",e.clientSessionExpiredError="clientSessionExpiredError"}(r||(r={}))},function(e,t,n){"use strict";function r(e,t,n,r){return{x:e.x,y:e.y,pressure:t,tiltX:n.tiltX,tiltY:n.tiltY,timestamp:r}}function i(e){return e}function s(e){return e.pressure}function a(e){return e}function o(e){return e.timestamp}n.d(t,"b",(function(){return r})),n.d(t,"a",(function(){return i})),n.d(t,"c",(function(){return s})),n.d(t,"d",(function(){return a})),n.d(t,"e",(function(){return o}))},function(e,t,n){"use strict";n.d(t,"b",(function(){return i})),n.d(t,"a",(function(){return a}));var r=n(141);n(63);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function i(e,t,n){const r=e.makeSerialized(t,n);return{type:r.type,value:r.value&&JSON.parse(r.value)}}class s{constructor(e){this.value=e}get type(){return r.a[r.a.Plain]}makeSerialized(e,t){const n=
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function(e,t,n){return void 0!==e?t.stringify(e,n):e}(this.value,e,t);return{type:this.type,value:n}}}class a{constructor(e){this.serializer=e}fromSerializable(e){if(e.type===r.a[r.a.Shared]){e.type=r.a[r.a.Plain];const t={type:"__fluid_handle__",url:e.value};e.value=t}const t=(n=e.value,i=this.serializer,void 0!==n?i.parse(JSON.stringify(n)):n);var n,i;return new s(t)}fromInMemory(e){return new s(e)}}},function(e,t,n){"use strict";n.d(t,"e",(function(){return r})),n.d(t,"f",(function(){return c})),n.d(t,"d",(function(){return u})),n.d(t,"a",(function(){return h})),n.d(t,"b",(function(){return l})),n.d(t,"c",(function(){return d}));var r,i=n(184),s=n(75),a=n(139),o=n(35);!function(e){e.PackageData="PackageData",e.UserData="UserData"}(r||(r={}));class c{constructor(e,t){this.namespace=e,this.properties=t}static formatTick(e){return Math.floor(e)}static numberFromString(e){if(null==e)return;const t=Number(e);return Number.isNaN(t)?e:t}static sanitizePkgName(e){return e.replace("@","").replace("/","-")}static prepareErrorObject(e,t,n){const{message:r,errorType:i,stack:s}=Object(o.b)(t,!0);if(e.stack=s,e.error=r,e.errorType=i,Object(o.g)(t)){const n=t.getTelemetryProperties();for(const t of Object.keys(n))void 0===e[t]&&(e[t]=n[t])}void 0===e.stack&&n&&(e.stack=Object(o.d)())}sendTelemetryEvent(e,t){var n;this.sendTelemetryEventCore(Object.assign(Object.assign({},e),{category:null!==(n=e.category)&&void 0!==n?n:"generic"}),t)}sendTelemetryEventCore(e,t){const n=Object.assign({},e);void 0!==t&&c.prepareErrorObject(n,t,!1),"number"==typeof n.duration&&(n.duration=c.formatTick(n.duration)),this.send(n)}sendErrorEvent(e,t){this.sendTelemetryEventCore(Object.assign(Object.assign({},e),{category:"error"}),t)}sendPerformanceEvent(e,t){var n;const r=Object.assign(Object.assign({},e),{category:null!==(n=e.category)&&void 0!==n?n:"performance"});this.sendTelemetryEventCore(r,t)}prepareEvent(e){const t="error"===e.category||void 0!==e.error,n=Object.assign({},e);if(void 0!==this.namespace&&(n.eventName=`${this.namespace}${c.eventNamespaceSeparator}${n.eventName}`),this.properties){const r=[];r.push(this.properties.all),t&&r.push(this.properties.error);for(const t of r)if(void 0!==t)for(const r of Object.keys(t)){if(void 0!==e[r])continue;const i=t[r],s="function"==typeof i?i():i;void 0!==s&&(n[r]=s)}}return n}}c.eventNamespaceSeparator=":";class u{constructor(e){this.logger=e}send(e){const t={category:e.category,eventName:e.eventName};for(const n of Object.keys(e)){const i=e[n],{value:s,tag:a}="object"==typeof i?i:{value:i,tag:void 0};switch(a){case void 0:case r.PackageData:t[n]=s;break;case r.UserData:t[n]="REDACTED (UserData)";break;default:t[n]="REDACTED (unknown tag)"}}this.logger.send(t)}}class h extends c{constructor(e,t,n){super(t,n),this.baseLogger=e,Object(a.b)(e)&&Object(a.d)(this,new a.a(e.config))}static create(e,t,n){if(e instanceof h){const r={};for(const t of[e.properties,n])void 0!==t&&(void 0!==t.all&&(r.all=Object.assign(Object.assign({},r.all),t.all)),void 0!==t.error&&(r.error=Object.assign(Object.assign({},r.error),t.error)));const i=void 0===e.namespace?t:void 0===t?e.namespace:`${e.namespace}${c.eventNamespaceSeparator}${t}`;return new h(e.baseLogger,i,r)}return new h(e||new i.a,t,n)}send(e){this.baseLogger.send(this.prepareEvent(e))}}class l extends c{constructor(e,t){super(e,t),this.loggers=[]}addLogger(e){null!=e&&this.loggers.push(e)}send(e){const t=this.prepareEvent(e);this.loggers.forEach(e=>{e.send(t)})}}class d{constructor(e,t,n={end:!0,cancel:"generic"}){this.logger=e,this.markers=n,this.startTime=s.a.now(),this.event=Object.assign({},t),this.markers.start&&this.reportEvent("start"),"object"==typeof window&&null!=window&&window.performance&&(this.startMark=t.eventName+"-start",window.performance.mark(this.startMark))}static start(e,t,n){return new d(e,t,n)}static timedExec(e,t,n,r){const i=d.start(e,t,r);try{const e=n(i);return i.autoEnd(),e}catch(e){throw i.cancel(void 0,e),e}}static async timedExecAsync(e,t,n,r){const i=d.start(e,t,r);try{const e=await n(i);return i.autoEnd(),e}catch(e){throw i.cancel(void 0,e),e}}get duration(){return s.a.now()-this.startTime}reportProgress(e,t="update"){this.reportEvent(t,e)}autoEnd(){this.event&&this.markers.end&&this.reportEvent("end"),this.performanceEndMark(),this.event=void 0}end(e){this.reportEvent("end",e),this.performanceEndMark(),this.event=void 0}performanceEndMark(){if(this.startMark&&this.event){const e=this.event.eventName+"-end";window.performance.mark(e),window.performance.measure(""+this.event.eventName,this.startMark,e),this.startMark=void 0}}cancel(e,t){void 0!==this.markers.cancel&&this.reportEvent("cancel",Object.assign({category:this.markers.cancel},e),t),this.event=void 0}reportEvent(e,t,n){if(!this.event)return;const r=Object.assign(Object.assign({},this.event),t);r.eventName=`${r.eventName}_${e}`,"start"!==e&&(r.duration=this.duration),this.logger.sendPerformanceEvent(r,n)}}},function(e,t,n){"use strict";(function(t){var r=n(402),i=n(403),s=/^[\x00-\x20\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/,a=/[\n\r\t]/g,o=/^[A-Za-z][A-Za-z0-9+-.]*:\/\//,c=/:\d+$/,u=/^([a-z][a-z0-9.+-]*:)?(\/\/)?([\\/]+)?([\S\s]*)/i,h=/^[a-zA-Z]:/;function l(e){return(e||"").toString().replace(s,"")}var d=[["#","hash"],["?","query"],function(e,t){return f(t.protocol)?e.replace(/\\/g,"/"):e},["/","pathname"],["@","auth",1],[NaN,"host",void 0,1,1],[/:(\d*)$/,"port",void 0,1],[NaN,"hostname",void 0,1,1]],m={hash:1,query:1};function p(e){var n,r=("undefined"!=typeof window?window:void 0!==t?t:"undefined"!=typeof self?self:{}).location||{},i={},s=typeof(e=e||r);if("blob:"===e.protocol)i=new y(unescape(e.pathname),{});else if("string"===s)for(n in i=new y(e,{}),m)delete i[n];else if("object"===s){for(n in e)n in m||(i[n]=e[n]);void 0===i.slashes&&(i.slashes=o.test(e.href))}return i}function f(e){return"file:"===e||"ftp:"===e||"http:"===e||"https:"===e||"ws:"===e||"wss:"===e}function g(e,t){e=(e=l(e)).replace(a,""),t=t||{};var n,r=u.exec(e),i=r[1]?r[1].toLowerCase():"",s=!!r[2],o=!!r[3],c=0;return s?o?(n=r[2]+r[3]+r[4],c=r[2].length+r[3].length):(n=r[2]+r[4],c=r[2].length):o?(n=r[3]+r[4],c=r[3].length):n=r[4],"file:"===i?c>=2&&(n=n.slice(2)):f(i)?n=r[4]:i?s&&(n=n.slice(2)):c>=2&&f(t.protocol)&&(n=r[4]),{protocol:i,slashes:s||f(i),slashesCount:c,rest:n}}function y(e,t,n){if(e=(e=l(e)).replace(a,""),!(this instanceof y))return new y(e,t,n);var s,o,c,u,m,v,b=d.slice(),S=typeof t,w=this,C=0;for("object"!==S&&"string"!==S&&(n=t,t=null),n&&"function"!=typeof n&&(n=i.parse),s=!(o=g(e||"",t=p(t))).protocol&&!o.slashes,w.slashes=o.slashes||s&&t.slashes,w.protocol=o.protocol||t.protocol||"",e=o.rest,("file:"===o.protocol&&(2!==o.slashesCount||h.test(e))||!o.slashes&&(o.protocol||o.slashesCount<2||!f(w.protocol)))&&(b[3]=[/(.*)/,"pathname"]);C<b.length;C++)"function"!=typeof(u=b[C])?(c=u[0],v=u[1],c!=c?w[v]=e:"string"==typeof c?~(m="@"===c?e.lastIndexOf(c):e.indexOf(c))&&("number"==typeof u[2]?(w[v]=e.slice(0,m),e=e.slice(m+u[2])):(w[v]=e.slice(m),e=e.slice(0,m))):(m=c.exec(e))&&(w[v]=m[1],e=e.slice(0,m.index)),w[v]=w[v]||s&&u[3]&&t[v]||"",u[4]&&(w[v]=w[v].toLowerCase())):e=u(e,w);n&&(w.query=n(w.query)),s&&t.slashes&&"/"!==w.pathname.charAt(0)&&(""!==w.pathname||""!==t.pathname)&&(w.pathname=function(e,t){if(""===e)return t;for(var n=(t||"/").split("/").slice(0,-1).concat(e.split("/")),r=n.length,i=n[r-1],s=!1,a=0;r--;)"."===n[r]?n.splice(r,1):".."===n[r]?(n.splice(r,1),a++):a&&(0===r&&(s=!0),n.splice(r,1),a--);return s&&n.unshift(""),"."!==i&&".."!==i||n.push(""),n.join("/")}(w.pathname,t.pathname)),"/"!==w.pathname.charAt(0)&&f(w.protocol)&&(w.pathname="/"+w.pathname),r(w.port,w.protocol)||(w.host=w.hostname,w.port=""),w.username=w.password="",w.auth&&(~(m=w.auth.indexOf(":"))?(w.username=w.auth.slice(0,m),w.username=encodeURIComponent(decodeURIComponent(w.username)),w.password=w.auth.slice(m+1),w.password=encodeURIComponent(decodeURIComponent(w.password))):w.username=encodeURIComponent(decodeURIComponent(w.auth)),w.auth=w.password?w.username+":"+w.password:w.username),w.origin="file:"!==w.protocol&&f(w.protocol)&&w.host?w.protocol+"//"+w.host:"null",w.href=w.toString()}y.prototype={set:function(e,t,n){var s=this;switch(e){case"query":"string"==typeof t&&t.length&&(t=(n||i.parse)(t)),s[e]=t;break;case"port":s[e]=t,r(t,s.protocol)?t&&(s.host=s.hostname+":"+t):(s.host=s.hostname,s[e]="");break;case"hostname":s[e]=t,s.port&&(t+=":"+s.port),s.host=t;break;case"host":s[e]=t,c.test(t)?(t=t.split(":"),s.port=t.pop(),s.hostname=t.join(":")):(s.hostname=t,s.port="");break;case"protocol":s.protocol=t.toLowerCase(),s.slashes=!n;break;case"pathname":case"hash":if(t){var a="pathname"===e?"/":"#";s[e]=t.charAt(0)!==a?a+t:t}else s[e]=t;break;case"username":case"password":s[e]=encodeURIComponent(t);break;case"auth":var o=t.indexOf(":");~o?(s.username=t.slice(0,o),s.username=encodeURIComponent(decodeURIComponent(s.username)),s.password=t.slice(o+1),s.password=encodeURIComponent(decodeURIComponent(s.password))):s.username=encodeURIComponent(decodeURIComponent(t))}for(var u=0;u<d.length;u++){var h=d[u];h[4]&&(s[h[1]]=s[h[1]].toLowerCase())}return s.auth=s.password?s.username+":"+s.password:s.username,s.origin="file:"!==s.protocol&&f(s.protocol)&&s.host?s.protocol+"//"+s.host:"null",s.href=s.toString(),s},toString:function(e){e&&"function"==typeof e||(e=i.stringify);var t,n=this,r=n.host,s=n.protocol;s&&":"!==s.charAt(s.length-1)&&(s+=":");var a=s+(n.protocol&&n.slashes||f(n.protocol)?"//":"");return n.username?(a+=n.username,n.password&&(a+=":"+n.password),a+="@"):n.password?(a+=":"+n.password,a+="@"):"file:"!==n.protocol&&f(n.protocol)&&!r&&"/"!==n.pathname&&(a+="@"),(":"===r[r.length-1]||c.test(n.hostname)&&!n.port)&&(r+=":"),a+=r+n.pathname,(t="object"==typeof n.query?e(n.query):n.query)&&(a+="?"!==t.charAt(0)?"?"+t:t),n.hash&&(a+=n.hash),a}},y.extractProtocol=g,y.location=p,y.trimLeft=l,y.qs=i,e.exports=y}).call(this,n(69))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(42),i=n(30),s=n(31);class a extends Error{constructor(e,t,n){super(e),this.description=t,this.context=n,this.type="TransportError"}}class o extends i.a{constructor(e){super(),this.writable=!1,Object(s.b)(this,e),this.opts=e,this.query=e.query,this.readyState="",this.socket=e.socket}onError(e,t,n){return super.emitReserved("error",new a(e,t,n)),this}open(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(e){"open"===this.readyState&&this.write(e)}onOpen(){this.readyState="open",this.writable=!0,super.emitReserved("open")}onData(e){const t=Object(r.a)(e,this.socket.binaryType);this.onPacket(t)}onPacket(e){super.emitReserved("packet",e)}onClose(e){this.readyState="closed",super.emitReserved("close",e)}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(19);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class i extends r.EventEmitter{constructor(){super(),this.addListener=super.addListener.bind(this),this.on=super.on.bind(this),this.once=super.once.bind(this),this.prependListener=super.prependListener.bind(this),this.prependOnceListener=super.prependOnceListener.bind(this),this.removeListener=super.removeListener.bind(this),this.off=super.off.bind(this)}}},function(e,t,n){"use strict";function r(e){let t="";for(let n in e)e.hasOwnProperty(n)&&(t.length&&(t+="&"),t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t}function i(e){let t={},n=e.split("&");for(let e=0,r=n.length;e<r;e++){let r=n[e].split("=");t[decodeURIComponent(r[0])]=decodeURIComponent(r[1])}return t}n.d(t,"b",(function(){return r})),n.d(t,"a",(function(){return i}))},function(e,t,n){"use strict";t.byteLength=function(e){var t=u(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){var t,n,r=u(e),a=r[0],o=r[1],c=new s(function(e,t,n){return 3*(t+n)/4-n}(0,a,o)),h=0,l=o>0?a-4:a;for(n=0;n<l;n+=4)t=i[e.charCodeAt(n)]<<18|i[e.charCodeAt(n+1)]<<12|i[e.charCodeAt(n+2)]<<6|i[e.charCodeAt(n+3)],c[h++]=t>>16&255,c[h++]=t>>8&255,c[h++]=255&t;2===o&&(t=i[e.charCodeAt(n)]<<2|i[e.charCodeAt(n+1)]>>4,c[h++]=255&t);1===o&&(t=i[e.charCodeAt(n)]<<10|i[e.charCodeAt(n+1)]<<4|i[e.charCodeAt(n+2)]>>2,c[h++]=t>>8&255,c[h++]=255&t);return c},t.fromByteArray=function(e){for(var t,n=e.length,i=n%3,s=[],a=0,o=n-i;a<o;a+=16383)s.push(h(e,a,a+16383>o?o:a+16383));1===i?(t=e[n-1],s.push(r[t>>2]+r[t<<4&63]+"==")):2===i&&(t=(e[n-2]<<8)+e[n-1],s.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return s.join("")};for(var r=[],i=[],s="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=0,c=a.length;o<c;++o)r[o]=a[o],i[a.charCodeAt(o)]=o;function u(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function h(e,t,n){for(var i,s,a=[],o=t;o<n;o+=3)i=(e[o]<<16&16711680)+(e[o+1]<<8&65280)+(255&e[o+2]),a.push(r[(s=i)>>18&63]+r[s>>12&63]+r[s>>6&63]+r[63&s]);return a.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(19);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class i extends r.EventEmitter{constructor(){super(),this.addListener=super.addListener.bind(this),this.on=super.on.bind(this),this.once=super.once.bind(this),this.prependListener=super.prependListener.bind(this),this.prependOnceListener=super.prependOnceListener.bind(this),this.removeListener=super.removeListener.bind(this),this.off=super.off.bind(this)}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
const r=window.performance},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
const r=window.performance},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function r(e,t="Unreachable Case"){throw new Error(t)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.d(t,"c",(function(){return s})),n.d(t,"e",(function(){return a})),n.d(t,"d",(function(){return o})),n.d(t,"a",(function(){return c})),n.d(t,"b",(function(){return u}));var r=n(5),i=n(35);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function s(e){if(null!==e&&"object"==typeof e&&!0===e.errorFromRequestFluidObject){const t=e;return{mimeType:"text/plain",status:t.code,value:t.message,get stack(){return t.stack}}}const t=Object(i.c)();return{mimeType:"text/plain",status:500,value:""+e,get stack(){var n;return null!==(n=null==e?void 0:e.stack)&&void 0!==n?n:t.stack}}}function a(e,t){const n=e.value,r=Object(i.c)();return{errorFromRequestFluidObject:!0,message:n,name:"Error",code:e.status,get stack(){var t;return null!==(t=e.stack)&&void 0!==t?t:r.stack}}}async function o(e,t){const n="string"==typeof t?{url:t}:t,i=await e.request(n);if(200!==i.status||"fluid/object"!==i.mimeType)throw a(i);return Object(r.a)(i.value,410),i.value}const c=e=>u(404,"not found",e);function u(e,t,n){var s;Object(r.a)(200!==e,411);const a=null===(s=n.url)||void 0===s?void 0:s.split("?")[0],o=Object(i.c)();return{mimeType:"text/plain",status:e,value:void 0===a?t:`${t}: ${a}`,get stack(){return o.stack}}}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
var r,i;n.d(t,"a",(function(){return r})),function(e){e.NoOp="noop",e.ClientJoin="join",e.ClientLeave="leave",e.Propose="propose",e.Reject="reject",e.Summarize="summarize",e.SummaryAck="summaryAck",e.SummaryNack="summaryNack",e.Operation="op",e.RemoteHelp="remoteHelp",e.NoClient="noClient",e.RoundTrip="tripComplete",e.Control="control"}(r||(r={})),function(e){e.ThrottlingError="ThrottlingError",e.InvalidScopeError="InvalidScopeError",e.BadRequestError="BadRequestError",e.LimitExceededError="LimitExceededError"}(i||(i={}))},,,function(e,t,n){var r=n(150),i=n(341),s=n(342),a=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":a&&a in Object(e)?i(e):s(e)}},function(e,t,n){var r=n(213),i=n(151);e.exports=function(e,t,n,s){var a=!n;n||(n={});for(var o=-1,c=t.length;++o<c;){var u=t[o],h=s?s(n[u],e[u],u,n,e):void 0;void 0===h&&(h=e[u]),a?i(n,u,h):r(n,u,h)}return n}},function(e,t,n){var r=n(215),i=n(368),s=n(110);e.exports=function(e){return s(e)?r(e,!0):i(e)}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.EphemeralEventScope=void 0;const i=r(n(19)),s=n(0),a=n(49);class o extends s.TypedEventEmitter{constructor(e,t){super(),this.emitter=new i.default,this._runtime=e,this._allowedRoles=t||[],this.emitter.on("error",e=>{this.emit("error",e)}),this._runtime.on("signal",(e,t)=>{const n=e.clientId;e.content.clientId=n,this._runtime.connected&&null!==n&&a.EphemeralEvent.verifyRolesAllowed(n,this._allowedRoles).then(r=>{r?this.emitter.emit(e.type,e.content,t):this._runtime.logger.sendErrorEvent({eventName:"SharedEvent:invalidRole"},new Error(`The clientId of "${n}" doesn't have a role of ${JSON.stringify(this._allowedRoles)}.`))}).catch(e=>{this._runtime.logger.sendErrorEvent({eventName:"SharedEvent:invalidRole"},e)})})}get allowedRoles(){return this._allowedRoles}set allowedRoles(e){this._allowedRoles=e}get clientId(){return this._runtime.clientId}onEvent(e,t){return this.emitter.on(e,t),this}offEvent(e,t){return this.emitter.off(e,t),this}sendEvent(e,t={}){const n=Object.assign(Object.assign({},t),{clientId:this._runtime.clientId,name:e,timestamp:a.EphemeralEvent.getTimestamp()});return this._runtime.submitSignal(e,n),n}}t.EphemeralEventScope=o},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.EphemeralEventTarget=void 0;const r=n(240);class i extends r.EphemeralEventSource{constructor(e,t,n){super(e,t),e.onEvent(t,n)}}t.EphemeralEventTarget=i},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t,n){"use strict";n.r(t),n.d(t,"DataObjectFactory",(function(){return r.a})),n.d(t,"PureDataObjectFactory",(function(){return i.a})),n.d(t,"DataObject",(function(){return s.a})),n.d(t,"PureDataObject",(function(){return s.b})),n.d(t,"BaseContainerRuntimeFactory",(function(){return a.a})),n.d(t,"ContainerRuntimeFactoryWithDefaultDataStore",(function(){return c})),n.d(t,"serviceRoutePathRoot",(function(){return u.c})),n.d(t,"BaseContainerService",(function(){return u.a})),n.d(t,"generateContainerServicesRequestHandler",(function(){return u.b})),n.d(t,"mountableViewRequestHandler",(function(){return h.c})),n.d(t,"defaultRouteRequestHandler",(function(){return h.b})),n.d(t,"defaultFluidObjectRequestHandler",(function(){return h.a})),n.d(t,"waitForAttach",(function(){return d})),n.d(t,"getDefaultObjectFromContainer",(function(){return m})),n.d(t,"getObjectWithIdFromContainer",(function(){return p})),n.d(t,"getObjectFromContainer",(function(){return f}));var r=n(209),i=n(125),s=n(161),a=n(128),o=n(230);class c extends a.a{constructor(e,t,n,r=[],i){super(t,n,[Object(o.b)("default"),...r],i),this.defaultFactory=e}async containerInitializingFirstTime(e){await e.createRootDataStore(this.defaultFactory.type,"default")}}c.defaultDataStoreId="default";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
var u=n(162),h=n(111),l=n(585);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
async function d(e){if(e.attachState!==l.a.Attached)return new Promise(t=>{e.once("attached",()=>{Promise.resolve().then(()=>t()).catch(()=>{})})})}async function m(e){const t=await e.request({url:"/"});if(200!==t.status||"fluid/object"!==t.mimeType)throw new Error('Unable to retrieve Fluid object at URL: "/"');if(void 0===t.value)throw new Error('Empty response from URL: "/"');return t.value}async function p(e,t){const n="/"+e,r=await t.request({url:n});if(200!==r.status||"fluid/object"!==r.mimeType)throw new Error(`Unable to retrieve Fluid object with ID: "${e}" from URL: "${n}"`);if(void 0===r.value)throw new Error(`Empty response for ID: "${e}" from URL: "${n}"`);return r.value}async function f(e,t){const n=await t.request({url:e});if(200!==n.status||"fluid/object"!==n.mimeType)throw new Error(`Unable to retrieve Fluid object with from URL: "${e}"`);if(void 0===n.value)throw new Error(`Empty response for from URL: "${e}"`);return n.value}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */},function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return i}));
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class r{constructor(){this.completed=!1,this.p=new Promise((e,t)=>{this.res=e,this.rej=t})}get isCompleted(){return this.completed}get promise(){return this.p}resolve(e){void 0!==this.res&&(this.completed=!0,this.res(e))}reject(e){void 0!==this.rej&&(this.completed=!0,this.rej(e))}}class i{constructor(e){this.execute=e}get[Symbol.toStringTag](){return this.getPromise()[Symbol.toStringTag]}async then(e,t){return this.getPromise().then(...arguments)}async catch(e){return this.getPromise().catch(...arguments)}async finally(e){return this.getPromise().finally(...arguments)}async getPromise(){return void 0===this.result&&(this.result=this.execute()),this.result}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(229),i=n(5),s=n(589);n(199);class a{constructor(e,t){this.absolutePath=e,this.runtime=t,this.isAttached=!0}get IFluidHandle(){return this}attachGraph(){Object(i.a)(!1,202)}async get(){const e=await this.runtime.IFluidHandleContext.resolveHandle({url:this.absolutePath});if(200===e.status&&"fluid/object"===e.mimeType)return e.value;throw new Error("Failed to resolve container path "+this.absolutePath)}bind(e){throw new Error("Cannot bind to LegacyUriHandle")}}var o=n(231),c=n(230);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class u extends r.a{constructor(e){super(),this._disposed=!1,this.runtime=e.runtime,this.context=e.context,this.providers=e.providers,this.initProps=e.initProps,Object(i.a)(void 0===this.runtime._dataObject,189),this.runtime._dataObject=this,this.innerHandle=new s.a(this,"",this.runtime.objectsRoutingContext),this.runtime.once("dispose",()=>{this._disposed=!0,this.dispose()})}get disposed(){return this._disposed}get id(){return this.runtime.id}get IFluidRouter(){return this}get IFluidLoadable(){return this}get IFluidHandle(){return this.innerHandle}get handle(){return this.innerHandle}static async getDataObject(e){const t=e._dataObject;return Object(i.a)(void 0!==t,188),await t.finishInitialization(!0),t}async request(e){return Object(c.a)(this,e)}async finishInitialization(e){return void 0!==this.initializeP||(this.initializeP=this.initializeInternal(e)),this.initializeP}async initializeInternal(e){var t;await this.preInitialize(),e?(Object(i.a)(void 0===this.initProps,190),await this.initializingFromExisting()):await this.initializingFirstTime(null!==(t=this.context.createProps)&&void 0!==t?t:this.initProps),await this.hasInitialized()}async getFluidObjectFromDirectory(e,t,n){const r=n?n(e,t):t.get(e),i=null==r?void 0:r.IFluidHandle;if(i)return i.get()}async getService(e){return(t=`/${o.c}/${e}`,n=this.context.containerRuntime,new a(t,n)).get();var t,n}async preInitialize(){}async initializingFirstTime(e){}async initializingFromExisting(){}async hasInitialized(){}dispose(){super.dispose()}}},function(e,t,n){"use strict";t.byteLength=function(e){var t=u(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){var t,n,r=u(e),a=r[0],o=r[1],c=new s(function(e,t,n){return 3*(t+n)/4-n}(0,a,o)),h=0,l=o>0?a-4:a;for(n=0;n<l;n+=4)t=i[e.charCodeAt(n)]<<18|i[e.charCodeAt(n+1)]<<12|i[e.charCodeAt(n+2)]<<6|i[e.charCodeAt(n+3)],c[h++]=t>>16&255,c[h++]=t>>8&255,c[h++]=255&t;2===o&&(t=i[e.charCodeAt(n)]<<2|i[e.charCodeAt(n+1)]>>4,c[h++]=255&t);1===o&&(t=i[e.charCodeAt(n)]<<10|i[e.charCodeAt(n+1)]<<4|i[e.charCodeAt(n+2)]>>2,c[h++]=t>>8&255,c[h++]=255&t);return c},t.fromByteArray=function(e){for(var t,n=e.length,i=n%3,s=[],a=0,o=n-i;a<o;a+=16383)s.push(h(e,a,a+16383>o?o:a+16383));1===i?(t=e[n-1],s.push(r[t>>2]+r[t<<4&63]+"==")):2===i&&(t=(e[n-2]<<8)+e[n-1],s.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return s.join("")};for(var r=[],i=[],s="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=0,c=a.length;o<c;++o)r[o]=a[o],i[a.charCodeAt(o)]=o;function u(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function h(e,t,n){for(var i,s,a=[],o=t;o<n;o+=3)i=(e[o]<<16&16711680)+(e[o+1]<<8&65280)+(255&e[o+2]),a.push(r[(s=i)>>18&63]+r[s>>12&63]+r[s>>6&63]+r[63&s]);return a.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function r(e,t="Unreachable Case"){throw new Error(t)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e){if(this._capacity=s(e),this._length=0,this._front=0,i(e)){for(var t=e.length,n=0;n<t;++n)this[n]=e[n];this._length=t}}r.prototype.toArray=function(){for(var e=this._length,t=new Array(e),n=this._front,r=this._capacity,i=0;i<e;++i)t[i]=this[n+i&r-1];return t},r.prototype.push=function(e){var t=arguments.length,n=this._length;if(t>1){var r=this._capacity;if(n+t>r){for(var i=0;i<t;++i){this._checkCapacity(n+1),this[s=this._front+n&this._capacity-1]=arguments[i],n++,this._length=n}return n}for(var s=this._front,i=0;i<t;++i)this[s+n&r-1]=arguments[i],s++;return this._length=n+t,n+t}return 0===t?n:(this._checkCapacity(n+1),this[i=this._front+n&this._capacity-1]=e,this._length=n+1,n+1)},r.prototype.pop=function(){var e=this._length;if(0!==e){var t=this._front+e-1&this._capacity-1,n=this[t];return this[t]=void 0,this._length=e-1,n}},r.prototype.shift=function(){var e=this._length;if(0!==e){var t=this._front,n=this[t];return this[t]=void 0,this._front=t+1&this._capacity-1,this._length=e-1,n}},r.prototype.unshift=function(e){var t=this._length,n=arguments.length;if(n>1){if(t+n>(i=this._capacity)){for(var r=n-1;r>=0;r--){this._checkCapacity(t+1);var i=this._capacity;this[a=(this._front-1&i-1^i)-i]=arguments[r],t++,this._length=t,this._front=a}return t}var s=this._front;for(r=n-1;r>=0;r--){var a;this[a=(s-1&i-1^i)-i]=arguments[r],s=a}return this._front=s,this._length=t+n,t+n}if(0===n)return t;this._checkCapacity(t+1);i=this._capacity;return this[r=(this._front-1&i-1^i)-i]=e,this._length=t+1,this._front=r,t+1},r.prototype.peekBack=function(){var e=this._length;if(0!==e)return this[this._front+e-1&this._capacity-1]},r.prototype.peekFront=function(){if(0!==this._length)return this[this._front]},r.prototype.get=function(e){var t=e;if(t===(0|t)){var n=this._length;if(t<0&&(t+=n),!(t<0||t>=n))return this[this._front+t&this._capacity-1]}},r.prototype.isEmpty=function(){return 0===this._length},r.prototype.clear=function(){for(var e=this._length,t=this._front,n=this._capacity,r=0;r<e;++r)this[t+r&n-1]=void 0;this._length=0,this._front=0},r.prototype.toString=function(){return this.toArray().toString()},r.prototype.valueOf=r.prototype.toString,r.prototype.removeFront=r.prototype.shift,r.prototype.removeBack=r.prototype.pop,r.prototype.insertFront=r.prototype.unshift,r.prototype.insertBack=r.prototype.push,r.prototype.enqueue=r.prototype.push,r.prototype.dequeue=r.prototype.shift,r.prototype.toJSON=r.prototype.toArray,Object.defineProperty(r.prototype,"length",{get:function(){return this._length},set:function(){throw new RangeError("")}}),r.prototype._checkCapacity=function(e){this._capacity<e&&this._resizeTo(s(1.5*this._capacity+16))},r.prototype._resizeTo=function(e){var t=this._capacity;this._capacity=e;var n=this._front,r=this._length;n+r>t&&function(e,t,n,r,i){for(var s=0;s<i;++s)n[s+r]=e[s+t],e[s+t]=void 0}(this,0,this,t,n+r&t-1)};var i=Array.isArray;function s(e){if("number"!=typeof e){if(!i(e))return 16;e=e.length}return t=Math.min(Math.max(16,e),1073741824),t>>>=0,t-=1,t|=t>>1,t|=t>>2,t|=t>>4,t|=t>>8,1+(t|=t>>16);var t}e.exports=r},function(e,t){function n(e,t){var n=[],r=[];return null==t&&(t=function(e,t){return n[0]===t?"[Circular ~]":"[Circular ~."+r.slice(0,n.indexOf(t)).join(".")+"]"}),function(i,s){if(n.length>0){var a=n.indexOf(this);~a?n.splice(a+1):n.push(this),~a?r.splice(a,1/0,i):r.push(i),~n.indexOf(s)&&(s=t.call(this,i,s))}else n.push(s);return null==e?s:e.call(this,i,s)}}(e.exports=function(e,t,r,i){return JSON.stringify(e,n(t,i),r)}).getSerialize=n},function(e,t,n){(function(r){t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let r=0,i=0;t[0].replace(/%[a-zA-Z%]/g,e=>{"%%"!==e&&(r++,"%c"===e&&(i=r))}),t.splice(i,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG);return e},t.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=n(423)(t);const{formatters:i}=e.exports;i.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}}).call(this,n(61))},function(e,t,n){"use strict";var r=n(443),i=n(444);function s(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}t.parse=b,t.resolve=function(e,t){return b(e,!1,!0).resolve(t)},t.resolveObject=function(e,t){return e?b(e,!1,!0).resolveObject(t):t},t.format=function(e){i.isString(e)&&(e=b(e));return e instanceof s?e.format():s.prototype.format.call(e)},t.Url=s;var a=/^([a-z0-9.+-]+:)/i,o=/:[0-9]*$/,c=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,u=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),h=["'"].concat(u),l=["%","/","?",";","#"].concat(h),d=["/","?","#"],m=/^[+a-z0-9A-Z_-]{0,63}$/,p=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,f={javascript:!0,"javascript:":!0},g={javascript:!0,"javascript:":!0},y={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},v=n(186);function b(e,t,n){if(e&&i.isObject(e)&&e instanceof s)return e;var r=new s;return r.parse(e,t,n),r}s.prototype.parse=function(e,t,n){if(!i.isString(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var s=e.indexOf("?"),o=-1!==s&&s<e.indexOf("#")?"?":"#",u=e.split(o);u[0]=u[0].replace(/\\/g,"/");var b=e=u.join(o);if(b=b.trim(),!n&&1===e.split("#").length){var S=c.exec(b);if(S)return this.path=b,this.href=b,this.pathname=S[1],S[2]?(this.search=S[2],this.query=t?v.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var w=a.exec(b);if(w){var C=(w=w[0]).toLowerCase();this.protocol=C,b=b.substr(w.length)}if(n||w||b.match(/^\/\/[^@\/]+@[^@\/]+/)){var x="//"===b.substr(0,2);!x||w&&g[w]||(b=b.substr(2),this.slashes=!0)}if(!g[w]&&(x||w&&!y[w])){for(var E,O,T=-1,P=0;P<d.length;P++){-1!==(A=b.indexOf(d[P]))&&(-1===T||A<T)&&(T=A)}-1!==(O=-1===T?b.lastIndexOf("@"):b.lastIndexOf("@",T))&&(E=b.slice(0,O),b=b.slice(O+1),this.auth=decodeURIComponent(E)),T=-1;for(P=0;P<l.length;P++){var A;-1!==(A=b.indexOf(l[P]))&&(-1===T||A<T)&&(T=A)}-1===T&&(T=b.length),this.host=b.slice(0,T),b=b.slice(T),this.parseHost(),this.hostname=this.hostname||"";var N="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!N)for(var I=this.hostname.split(/\./),k=(P=0,I.length);P<k;P++){var D=I[P];if(D&&!D.match(m)){for(var F="",j=0,R=D.length;j<R;j++)D.charCodeAt(j)>127?F+="x":F+=D[j];if(!F.match(m)){var M=I.slice(0,P),_=I.slice(P+1),B=D.match(p);B&&(M.push(B[1]),_.unshift(B[2])),_.length&&(b="/"+_.join(".")+b),this.hostname=M.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),N||(this.hostname=r.toASCII(this.hostname));var L=this.port?":"+this.port:"",q=this.hostname||"";this.host=q+L,this.href+=this.host,N&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==b[0]&&(b="/"+b))}if(!f[C])for(P=0,k=h.length;P<k;P++){var z=h[P];if(-1!==b.indexOf(z)){var H=encodeURIComponent(z);H===z&&(H=escape(z)),b=b.split(z).join(H)}}var U=b.indexOf("#");-1!==U&&(this.hash=b.substr(U),b=b.slice(0,U));var V=b.indexOf("?");if(-1!==V?(this.search=b.substr(V),this.query=b.substr(V+1),t&&(this.query=v.parse(this.query)),b=b.slice(0,V)):t&&(this.search="",this.query={}),b&&(this.pathname=b),y[C]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){L=this.pathname||"";var G=this.search||"";this.path=L+G}return this.href=this.format(),this},s.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",n=this.pathname||"",r=this.hash||"",s=!1,a="";this.host?s=e+this.host:this.hostname&&(s=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(s+=":"+this.port)),this.query&&i.isObject(this.query)&&Object.keys(this.query).length&&(a=v.stringify(this.query));var o=this.search||a&&"?"+a||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||y[t])&&!1!==s?(s="//"+(s||""),n&&"/"!==n.charAt(0)&&(n="/"+n)):s||(s=""),r&&"#"!==r.charAt(0)&&(r="#"+r),o&&"?"!==o.charAt(0)&&(o="?"+o),t+s+(n=n.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(o=o.replace("#","%23"))+r},s.prototype.resolve=function(e){return this.resolveObject(b(e,!1,!0)).format()},s.prototype.resolveObject=function(e){if(i.isString(e)){var t=new s;t.parse(e,!1,!0),e=t}for(var n=new s,r=Object.keys(this),a=0;a<r.length;a++){var o=r[a];n[o]=this[o]}if(n.hash=e.hash,""===e.href)return n.href=n.format(),n;if(e.slashes&&!e.protocol){for(var c=Object.keys(e),u=0;u<c.length;u++){var h=c[u];"protocol"!==h&&(n[h]=e[h])}return y[n.protocol]&&n.hostname&&!n.pathname&&(n.path=n.pathname="/"),n.href=n.format(),n}if(e.protocol&&e.protocol!==n.protocol){if(!y[e.protocol]){for(var l=Object.keys(e),d=0;d<l.length;d++){var m=l[d];n[m]=e[m]}return n.href=n.format(),n}if(n.protocol=e.protocol,e.host||g[e.protocol])n.pathname=e.pathname;else{for(var p=(e.pathname||"").split("/");p.length&&!(e.host=p.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==p[0]&&p.unshift(""),p.length<2&&p.unshift(""),n.pathname=p.join("/")}if(n.search=e.search,n.query=e.query,n.host=e.host||"",n.auth=e.auth,n.hostname=e.hostname||e.host,n.port=e.port,n.pathname||n.search){var f=n.pathname||"",v=n.search||"";n.path=f+v}return n.slashes=n.slashes||e.slashes,n.href=n.format(),n}var b=n.pathname&&"/"===n.pathname.charAt(0),S=e.host||e.pathname&&"/"===e.pathname.charAt(0),w=S||b||n.host&&e.pathname,C=w,x=n.pathname&&n.pathname.split("/")||[],E=(p=e.pathname&&e.pathname.split("/")||[],n.protocol&&!y[n.protocol]);if(E&&(n.hostname="",n.port=null,n.host&&(""===x[0]?x[0]=n.host:x.unshift(n.host)),n.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===p[0]?p[0]=e.host:p.unshift(e.host)),e.host=null),w=w&&(""===p[0]||""===x[0])),S)n.host=e.host||""===e.host?e.host:n.host,n.hostname=e.hostname||""===e.hostname?e.hostname:n.hostname,n.search=e.search,n.query=e.query,x=p;else if(p.length)x||(x=[]),x.pop(),x=x.concat(p),n.search=e.search,n.query=e.query;else if(!i.isNullOrUndefined(e.search)){if(E)n.hostname=n.host=x.shift(),(N=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=N.shift(),n.host=n.hostname=N.shift());return n.search=e.search,n.query=e.query,i.isNull(n.pathname)&&i.isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.href=n.format(),n}if(!x.length)return n.pathname=null,n.search?n.path="/"+n.search:n.path=null,n.href=n.format(),n;for(var O=x.slice(-1)[0],T=(n.host||e.host||x.length>1)&&("."===O||".."===O)||""===O,P=0,A=x.length;A>=0;A--)"."===(O=x[A])?x.splice(A,1):".."===O?(x.splice(A,1),P++):P&&(x.splice(A,1),P--);if(!w&&!C)for(;P--;P)x.unshift("..");!w||""===x[0]||x[0]&&"/"===x[0].charAt(0)||x.unshift(""),T&&"/"!==x.join("/").substr(-1)&&x.push("");var N,I=""===x[0]||x[0]&&"/"===x[0].charAt(0);E&&(n.hostname=n.host=I?"":x.length?x.shift():"",(N=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=N.shift(),n.host=n.hostname=N.shift()));return(w=w||n.host&&x.length)&&!I&&x.unshift(""),x.length?n.pathname=x.join("/"):(n.pathname=null,n.path=null),i.isNull(n.pathname)&&i.isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.auth=e.auth||n.auth,n.slashes=n.slashes||e.slashes,n.href=n.format(),n},s.prototype.parseHost=function(){var e=this.host,t=o.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},function(e,t,n){"use strict";var r=n(134),i=n(52);t.a=function(e,t,n){var s=(e=e||{}).random||(e.rng||r.a)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,t){n=n||0;for(var a=0;a<16;++a)t[n+a]=s[a];return t}return Object(i.a)(s)}},function(e,t,n){var r=n(458);e.exports=function(e){return r(e,5)}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
var r;n.d(t,"a",(function(){return r})),function(e){e.genericError="genericError",e.genericNetworkError="genericNetworkError",e.authorizationError="authorizationError",e.fileNotFoundOrAccessDeniedError="fileNotFoundOrAccessDeniedError",e.throttlingError="throttlingError",e.offlineError="offlineError",e.unsupportedClientProtocolVersion="unsupportedClientProtocolVersion",e.writeError="writeError",e.fetchFailure="fetchFailure",e.incorrectServerResponse="incorrectServerResponse",e.fileOverwrittenInStorage="fileOverwrittenInStorage",e.deltaStreamConnectionForbidden="deltaStreamConnectionForbidden"}(r||(r={}))},,,,function(e,t,n){var r=n(330),i=n(331),s=n(332),a=n(333),o=n(334);function c(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=i,c.prototype.get=s,c.prototype.has=a,c.prototype.set=o,e.exports=c},function(e,t,n){var r=n(106);e.exports=function(e,t){for(var n=e.length;n--;)if(r(e[n][0],t))return n;return-1}},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,n){var r=n(58)(Object,"create");e.exports=r},function(e,t,n){var r=n(355);e.exports=function(e,t){var n=e.__data__;return r(t)?n["string"==typeof t?"string":"hash"]:n.map}},function(e,t){var n=Array.isArray;e.exports=n},function(e,t,n){var r=n(149),i=n(219);e.exports=function(e){return null!=e&&i(e.length)&&!r(e)}},function(e,t,n){"use strict";var r=n(230);n.d(t,"a",(function(){return r.a})),n.d(t,"b",(function(){return r.b})),n.d(t,"c",(function(){return r.c}))},function(e,t,n){"use strict";var r=n(33);n.d(t,"a",(function(){return r.a})),n.d(t,"b",(function(){return r.b})),n.d(t,"c",(function(){return r.c})),n.d(t,"f",(function(){return r.d})),n.d(t,"h",(function(){return r.e}));var i=n(237);n.d(t,"d",(function(){return i.a})),n.d(t,"e",(function(){return i.b}));var s=n(75);n.d(t,"g",(function(){return s.a}))},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.TimeInterval=void 0;t.TimeInterval=class{constructor(e){this._value=e}get milliseconds(){return this._value}set milliseconds(e){this._value=e}get seconds(){return this._value/1e3}set seconds(e){this._value=Math.floor(1e3*e)}}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,i)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),i(n(399),t),i(n(400),t),i(n(243),t),i(n(401),t),i(n(445),t),i(n(446),t),i(n(115),t),i(n(256),t)},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.LOCAL_MODE_TEST_TOKEN=t.TestTeamsClientApi=t.ContainerState=void 0;const r=n(163),i=n(181);var s;!function(e){e.added="Added",e.alreadyExists="AlreadyExists",e.conflict="Conflict",e.notFound="NotFound"}(s=t.ContainerState||(t.ContainerState={}));t.TestTeamsClientApi=class{constructor(e,t){this.interactive=new a(e,t)}},t.LOCAL_MODE_TEST_TOKEN="test-token";class a{constructor(e,t){this._getLocalTestContainerId=e,this._setLocalTestContainerId=t,this.clientsMeetingRoles=[r.UserMeetingRole.organizer,r.UserMeetingRole.presenter,r.UserMeetingRole.attendee]}getFluidTenantInfo(){return Promise.resolve({tenantId:i.LOCAL_MODE_TENANT_ID,ordererEndpoint:"http://localhost:7070",storageEndpoint:"http://localhost:7070"})}getFluidToken(e){return Promise.resolve(t.LOCAL_MODE_TEST_TOKEN)}getFluidContainerId(){const e=this.getLocalTestContainerId();return Promise.resolve({containerState:e?s.alreadyExists:s.notFound,shouldCreate:!e,containerId:e,retryAfter:0})}setFluidContainerId(e){return this.setLocalTestContainerId(e),Promise.resolve({containerState:s.added,containerId:e,shouldCreate:!1,retryAfter:0})}getNtpTime(){const e=new Date;return Promise.resolve({ntpTime:e.toUTCString(),ntpTimeInUTC:e.getTime()})}registerClientId(e){return Promise.resolve(this.clientsMeetingRoles)}getClientRoles(e){return Promise.resolve(this.clientsMeetingRoles)}getLocalTestContainerId(){return this._getLocalTestContainerId?this._getLocalTestContainerId():window.location.hash?window.location.hash.substring(1):void 0}setLocalTestContainerId(e){this._setLocalTestContainerId?this._setLocalTestContainerId(e):window.location.hash=e}}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){(function(t){self,e.exports=(()=>{var e={22:(e,t,n)=>{var r=n(481),i=n(426),s=i;s.v1=r,s.v4=i,e.exports=s},725:e=>{for(var t=[],n=0;n<256;++n)t[n]=(n+256).toString(16).substr(1);e.exports=function(e,n){var r=n||0,i=t;return[i[e[r++]],i[e[r++]],i[e[r++]],i[e[r++]],"-",i[e[r++]],i[e[r++]],"-",i[e[r++]],i[e[r++]],"-",i[e[r++]],i[e[r++]],"-",i[e[r++]],i[e[r++]],i[e[r++]],i[e[r++]],i[e[r++]],i[e[r++]]].join("")}},157:e=>{var t="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(t){var n=new Uint8Array(16);e.exports=function(){return t(n),n}}else{var r=new Array(16);e.exports=function(){for(var e,t=0;t<16;t++)0==(3&t)&&(e=4294967296*Math.random()),r[t]=e>>>((3&t)<<3)&255;return r}}},481:(e,t,n)=>{var r,i,s=n(157),a=n(725),o=0,c=0;e.exports=function(e,t,n){var u=t&&n||0,h=t||[],l=(e=e||{}).node||r,d=void 0!==e.clockseq?e.clockseq:i;if(null==l||null==d){var m=s();null==l&&(l=r=[1|m[0],m[1],m[2],m[3],m[4],m[5]]),null==d&&(d=i=16383&(m[6]<<8|m[7]))}var p=void 0!==e.msecs?e.msecs:(new Date).getTime(),f=void 0!==e.nsecs?e.nsecs:c+1,g=p-o+(f-c)/1e4;if(g<0&&void 0===e.clockseq&&(d=d+1&16383),(g<0||p>o)&&void 0===e.nsecs&&(f=0),f>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");o=p,c=f,i=d;var y=(1e4*(268435455&(p+=122192928e5))+f)%4294967296;h[u++]=y>>>24&255,h[u++]=y>>>16&255,h[u++]=y>>>8&255,h[u++]=255&y;var v=p/4294967296*1e4&268435455;h[u++]=v>>>8&255,h[u++]=255&v,h[u++]=v>>>24&15|16,h[u++]=v>>>16&255,h[u++]=d>>>8|128,h[u++]=255&d;for(var b=0;b<6;++b)h[u+b]=l[b];return t||a(h)}},426:(e,t,n)=>{var r=n(157),i=n(725);e.exports=function(e,t,n){var s=t&&n||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var a=(e=e||{}).random||(e.rng||r)();if(a[6]=15&a[6]|64,a[8]=63&a[8]|128,t)for(var o=0;o<16;++o)t[s+o]=a[o];return t||i(a)}},227:(e,n,r)=>{n.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let r=0,i=0;t[0].replace(/%[a-zA-Z%]/g,e=>{"%%"!==e&&(r++,"%c"===e&&(i=r))}),t.splice(i,0,n)},n.save=function(e){try{e?n.storage.setItem("debug",e):n.storage.removeItem("debug")}catch(e){}},n.load=function(){let e;try{e=n.storage.getItem("debug")}catch(e){}return!e&&void 0!==t&&"env"in t&&(e=t.env.DEBUG),e},n.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},n.storage=function(){try{return localStorage}catch(e){}}(),n.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),n.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],n.log=console.debug||console.log||(()=>{}),e.exports=r(447)(n);const{formatters:i}=e.exports;i.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},447:(e,t,n)=>{e.exports=function(e){function t(e){let n,i,s,a=null;function o(...e){if(!o.enabled)return;const r=o,i=Number(new Date),s=i-(n||i);r.diff=s,r.prev=n,r.curr=i,n=i,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let a=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,(n,i)=>{if("%%"===n)return"%";a++;const s=t.formatters[i];if("function"==typeof s){const t=e[a];n=s.call(r,t),e.splice(a,1),a--}return n}),t.formatArgs.call(r,e),(r.log||t.log).apply(r,e)}return o.namespace=e,o.useColors=t.useColors(),o.color=t.selectColor(e),o.extend=r,o.destroy=t.destroy,Object.defineProperty(o,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==a?a:(i!==t.namespaces&&(i=t.namespaces,s=t.enabled(e)),s),set:e=>{a=e}}),"function"==typeof t.init&&t.init(o),o}function r(e,n){const r=t(this.namespace+(void 0===n?":":n)+e);return r.log=this.log,r}function i(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(i),...t.skips.map(i).map(e=>"-"+e)].join(",");return t.enable(""),e},t.enable=function(e){let n;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const r=("string"==typeof e?e:"").split(/[\s,]+/),i=r.length;for(n=0;n<i;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(824),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach(n=>{t[n]=e[n]}),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let n=0;for(let t=0;t<e.length;t++)n=(n<<5)-n+e.charCodeAt(t),n|=0;return t.colors[Math.abs(n)%t.colors.length]},t.enable(t.load()),t}},824:e=>{var t=1e3,n=6e4,r=60*n,i=24*r;function s(e){if(!((e=String(e)).length>100)){var s=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(s){var a=parseFloat(s[1]);switch((s[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*a;case"weeks":case"week":case"w":return 6048e5*a;case"days":case"day":case"d":return a*i;case"hours":case"hour":case"hrs":case"hr":case"h":return a*r;case"minutes":case"minute":case"mins":case"min":case"m":return a*n;case"seconds":case"second":case"secs":case"sec":case"s":return a*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}}}function a(e){var s=Math.abs(e);return s>=i?Math.round(e/i)+"d":s>=r?Math.round(e/r)+"h":s>=n?Math.round(e/n)+"m":s>=t?Math.round(e/t)+"s":e+"ms"}function o(e){var s=Math.abs(e);return s>=i?c(e,s,i,"day"):s>=r?c(e,s,r,"hour"):s>=n?c(e,s,n,"minute"):s>=t?c(e,s,t,"second"):e+" ms"}function c(e,t,n,r){var i=t>=1.5*n;return Math.round(e/n)+" "+r+(i?"s":"")}e.exports=function(e,t){t=t||{};var n=typeof e;if("string"===n&&e.length>0)return s(e);if("number"===n&&isFinite(e))return t.long?o(e):a(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}}},n={};function r(t){var i=n[t];if(void 0!==i)return i.exports;var s=n[t]={exports:{}};return e[t](s,s.exports,r),s.exports}r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var i={};return(()=>{"use strict";r.r(i),r.d(i,{ChannelType:()=>v,ChildAppWindow:()=>je,DialogDimension:()=>u,ErrorCode:()=>t,FileOpenPreference:()=>e,FrameContexts:()=>a,HostClientType:()=>n,HostName:()=>s,NotificationTypes:()=>Ce,ParentAppWindow:()=>Re,TaskModuleDimension:()=>b,TeamType:()=>o,UserSettingTypes:()=>Ee,UserTeamRole:()=>c,ViewerActionTypes:()=>xe,app:()=>q,appEntity:()=>st,appInitialization:()=>Qe,appInstallDialog:()=>Te,authentication:()=>S,calendar:()=>Ue,call:()=>Je,chat:()=>Pe,conversations:()=>Oe,dialog:()=>_,enablePrintCapability:()=>ut,executeDeepLink:()=>Ot,files:()=>Ze,getContext:()=>lt,getMruTabInstances:()=>xt,getTabInstances:()=>Ct,initialize:()=>ct,initializeWithFrameContext:()=>Pt,interactive:()=>et,legacy:()=>tt,location:()=>qe,logs:()=>we,mail:()=>Ve,media:()=>Le,meeting:()=>ze,meetingRoom:()=>nt,menus:()=>B,monetization:()=>He,navigateBack:()=>kt,navigateCrossDomain:()=>It,navigateToTab:()=>Nt,notifications:()=>rt,openFilePreview:()=>M,pages:()=>z,people:()=>Ge,print:()=>ht,registerAppButtonClickHandler:()=>pt,registerAppButtonHoverEnterHandler:()=>ft,registerAppButtonHoverLeaveHandler:()=>gt,registerBackButtonHandler:()=>yt,registerBeforeUnloadHandler:()=>bt,registerCustomHandler:()=>j,registerEnterSettingsHandler:()=>wt,registerFocusEnterHandler:()=>St,registerFullScreenHandler:()=>mt,registerOnLoadHandler:()=>vt,registerOnThemeChangeHandler:()=>dt,registerUserSettingsChangeHandler:()=>R,remoteCamera:()=>it,returnFocus:()=>At,sendCustomEvent:()=>F,sendCustomMessage:()=>D,setFrameContext:()=>Tt,settings:()=>Ye,shareDeepLink:()=>Et,sharing:()=>Ke,stageView:()=>$e,tasks:()=>Xe,teams:()=>at,teamsCore:()=>L,uploadCustomApp:()=>k,video:()=>We});var e,t,n,s,a,o,c,u,h="2.0.0-experimental.0",l="2.0.1",d="2.0.3",m="1.9.0",p="1.8.0",f=["teams.microsoft.com","teams.microsoft.us","gov.teams.microsoft.us","dod.teams.microsoft.us","int.teams.microsoft.com","teams.live.com","devspaces.skype.com","ssauth.skype.com","local.teams.live.com","local.teams.live.com:8080","local.teams.office.com","local.teams.office.com:8080","msft.spoppe.com","*.sharepoint.com","*.sharepoint-df.com","*.sharepointonline.com","outlook.office.com","outlook-sdf.office.com","outlook.office365.com","outlook-sdf.office365.com","*.teams.microsoft.com","www.office.com","word.office.com","excel.office.com","powerpoint.office.com","www.officeppe.com","*.www.office.com"],g=/^https:\/\//,y=function(){function e(){}return e.initializeCalled=!1,e.initializeCompleted=!1,e.additionalValidOrigins=[],e.isFramelessWindow=!1,e.printCapabilityEnabled=!1,e}();!function(e){e.Inline="inline",e.Desktop="desktop",e.Web="web"}(e||(e={})),function(e){e[e.NOT_SUPPORTED_ON_PLATFORM=100]="NOT_SUPPORTED_ON_PLATFORM",e[e.INTERNAL_ERROR=500]="INTERNAL_ERROR",e[e.NOT_SUPPORTED_IN_CURRENT_CONTEXT=501]="NOT_SUPPORTED_IN_CURRENT_CONTEXT",e[e.PERMISSION_DENIED=1e3]="PERMISSION_DENIED",e[e.NETWORK_ERROR=2e3]="NETWORK_ERROR",e[e.NO_HW_SUPPORT=3e3]="NO_HW_SUPPORT",e[e.INVALID_ARGUMENTS=4e3]="INVALID_ARGUMENTS",e[e.UNAUTHORIZED_USER_OPERATION=5e3]="UNAUTHORIZED_USER_OPERATION",e[e.INSUFFICIENT_RESOURCES=6e3]="INSUFFICIENT_RESOURCES",e[e.THROTTLE=7e3]="THROTTLE",e[e.USER_ABORT=8e3]="USER_ABORT",e[e.OPERATION_TIMED_OUT=8001]="OPERATION_TIMED_OUT",e[e.OLD_PLATFORM=9e3]="OLD_PLATFORM",e[e.FILE_NOT_FOUND=404]="FILE_NOT_FOUND",e[e.SIZE_EXCEEDED=1e4]="SIZE_EXCEEDED"}(t||(t={})),function(e){e.desktop="desktop",e.web="web",e.android="android",e.ios="ios",e.rigel="rigel",e.surfaceHub="surfaceHub",e.teamsRoomsWindows="teamsRoomsWindows",e.teamsRoomsAndroid="teamsRoomsAndroid",e.teamsPhones="teamsPhones",e.teamsDisplays="teamsDisplays"}(n||(n={})),function(e){e.office="Office",e.outlook="Outlook",e.orange="Orange",e.teams="Teams"}(s||(s={})),function(e){e.settings="settings",e.content="content",e.authentication="authentication",e.remove="remove",e.task="task",e.sidePanel="sidePanel",e.stage="stage",e.meetingStage="meetingStage"}(a||(a={})),function(e){e[e.Standard=0]="Standard",e[e.Edu=1]="Edu",e[e.Class=2]="Class",e[e.Plc=3]="Plc",e[e.Staff=4]="Staff"}(o||(o={})),function(e){e[e.Admin=0]="Admin",e[e.User=1]="User",e[e.Guest=2]="Guest"}(c||(c={})),function(e){e.Large="large",e.Medium="medium",e.Small="small"}(u||(u={}));var v,b=u;!function(e){e.Regular="Regular",e.Private="Private",e.Shared="Shared"}(v||(v={}));var S,w={errorCode:t.NOT_SUPPORTED_ON_PLATFORM},C=r(22);function x(e,t){if("*."===e.substring(0,2)){var n=e.substring(1);if(t.length>n.length&&t.split(".").length===n.split(".").length&&t.substring(t.length-n.length)===n)return!0}else if(e===t)return!0;return!1}function E(e){return function(t,n){if(!t)throw new Error(e||n)}}function O(e,t){if("string"!=typeof e||"string"!=typeof t)return NaN;var n=e.split("."),r=t.split(".");function i(e){return/^\d+$/.test(e)}if(!n.every(i)||!r.every(i))return NaN;for(;n.length<r.length;)n.push("0");for(;r.length<n.length;)r.push("0");for(var s=0;s<n.length;++s)if(Number(n[s])!=Number(r[s]))return Number(n[s])>Number(r[s])?1:-1;return 0}function T(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=e.apply(void 0,n);return i.then((function(e){t&&t(void 0,e)})).catch((function(e){t&&t(e)})),i}function P(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=e.apply(void 0,n);return i.then((function(){t&&t(null)})).catch((function(e){t&&t(e)})),i}function A(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(!y.initializeCalled)throw new Error("The library has not yet been initialized");if(y.frameContext&&e&&e.length>0){for(var n=!1,r=0;r<e.length;r++)if(e[r]===y.frameContext){n=!0;break}if(!n)throw new Error("This call is only allowed in following contexts: "+JSON.stringify(e)+'. Current context: "'+y.frameContext+'".')}}function N(e){void 0===e&&(e=l);var t=O(y.clientSupportedSDKVersion,e);return!isNaN(t)&&t>=0}function I(e){if(void 0===e&&(e=l),y.hostClientType!=n.android&&y.hostClientType!=n.ios)throw{errorCode:t.NOT_SUPPORTED_ON_PLATFORM};if(!N(e))throw{errorCode:t.OLD_PLATFORM}}function k(e,t){A(),pe("uploadCustomApp",[e],t||E())}function D(e,t,n){A(),pe(e,t,n)}function F(e,t){if(A(),!oe.childWindow)throw new Error("The child window has not yet been initialized or is not present");De(e,t)}function j(e,t){var n=this;A(),ee(e,(function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return t.apply(n,e)}))}function R(e,t){A(),ee("userSettingsChange",t,!0,[e])}function M(e){A(a.content,a.task),pe("openFilePreview",[e.entityId,e.title,e.description,e.type,e.objectUrl,e.downloadUrl,e.webPreviewUrl,e.webEditUrl,e.baseUrl,e.editFile,e.subEntityId,e.viewerAction,e.fileOpenPreference,e.conversationId])}!function(e){var t,r,i;function s(e){return new Promise((function(r,i){if(y.hostClientType===n.desktop||y.hostClientType===n.android||y.hostClientType===n.ios||y.hostClientType===n.rigel||y.hostClientType===n.teamsRoomsWindows||y.hostClientType===n.teamsRoomsAndroid||y.hostClientType===n.teamsPhones||y.hostClientType===n.teamsDisplays){var s=document.createElement("a");s.href=e.url,r(me("authentication.authenticate",[s.href,e.width,e.height,e.isExternal]).then((function(e){var t=e[0],n=e[1];if(t)return n;throw new Error(n)})))}else t={success:r,fail:i},function(e){o();var t=e.width||600,n=e.height||400;t=Math.min(t,oe.currentWindow.outerWidth-400),n=Math.min(n,oe.currentWindow.outerHeight-200);var r=document.createElement("a");r.href=e.url.replace("{oauthRedirectMethod}","web");var i=void 0!==oe.currentWindow.screenLeft?oe.currentWindow.screenLeft:oe.currentWindow.screenX,s=void 0!==oe.currentWindow.screenTop?oe.currentWindow.screenTop:oe.currentWindow.screenY;i+=oe.currentWindow.outerWidth/2-t/2,s+=oe.currentWindow.outerHeight/2-n/2,oe.childWindow=oe.currentWindow.open(r.href,"_blank","toolbar=no, location=yes, status=no, menubar=no, scrollbars=yes, top="+s+", left="+i+", width="+t+", height="+n),oe.childWindow?u():l("FailedToOpenWindow")}(e)}))}function o(){c();try{oe.childWindow&&oe.childWindow.close()}finally{oe.childWindow=null,oe.childOrigin=null}}function c(){r&&(clearInterval(r),r=0),te("initialize"),te("navigateCrossDomain")}function u(){c(),r=oe.currentWindow.setInterval((function(){if(!oe.childWindow||oe.childWindow.closed)l("CancelledByUser");else{var e=oe.childOrigin;try{oe.childOrigin="*",De("ping")}finally{oe.childOrigin=e}}}),100),ee("initialize",(function(){return[a.authentication,y.hostClientType]})),ee("navigateCrossDomain",(function(){return!1}))}function h(e){try{t&&t.success(e)}finally{t=null,o()}}function l(e){try{t&&t.fail(new Error(e))}finally{t=null,o()}}function d(e,t,n){if(e){var r=document.createElement("a");r.href=decodeURIComponent(e),r.host&&r.host!==window.location.host&&"outlook.office.com"===r.host&&r.search.indexOf("client_type=Win32_Outlook")>-1&&(t&&"result"===t&&(n&&(r.href=m(r.href,"result",n)),oe.currentWindow.location.assign(m(r.href,"authSuccess",""))),t&&"reason"===t&&(n&&(r.href=m(r.href,"reason",n)),oe.currentWindow.location.assign(m(r.href,"authFailure",""))))}}function m(e,t,n){var r=e.indexOf("#"),i=-1===r?"#":e.substr(r);return i=i+"&"+t+(""!==n?"="+n:""),(e=-1===r?e:e.substr(0,r))+i}e.initialize=function(){ee("authentication.authenticate.success",h,!1),ee("authentication.authenticate.failure",l,!1)},e.registerAuthenticationHandlers=function(e){i=e},e.authenticate=function(e){var t=void 0!==e,n=t?e:i;if(!n)throw new Error("No parameters are provided for authentication");return A(a.content,a.sidePanel,a.settings,a.remove,a.task,a.stage,a.meetingStage),s(n).then((function(e){try{return n&&n.successCallback?(n.successCallback(e),""):e}finally{t||(i=null)}})).catch((function(e){try{if(n&&n.failureCallback)return n.failureCallback(e.message),"";throw e}finally{t||(i=null)}}))},e.getAuthToken=function(e){return A(),function(e){return new Promise((function(t){t(me("authentication.getAuthToken",[null==e?void 0:e.resources,null==e?void 0:e.claims,null==e?void 0:e.silent]))})).then((function(e){var t=e[0],n=e[1];if(t)return n;throw new Error(n)}))}(e).then((function(t){return e&&e.successCallback?(e.successCallback(t),""):t})).catch((function(t){if(e&&e.failureCallback)return e.failureCallback(t.message),"";throw t}))},e.getUser=function(e){return A(),new Promise((function(e){e(me("authentication.getUser"))})).then((function(e){var t=e[0],n=e[1];if(t)return n;throw new Error(n)})).then((function(t){return e&&e.successCallback?(e.successCallback(t),null):t})).catch((function(t){if(e&&e.failureCallback)return e.failureCallback(t.message),null;throw t}))},e.notifySuccess=function(e,t){d(t,"result",e),A(a.authentication),pe("authentication.authenticate.success",[e]),Ie(oe.parentWindow,(function(){return setTimeout((function(){return oe.currentWindow.close()}),200)}))},e.notifyFailure=function(e,t){d(t,"reason",e),A(a.authentication),pe("authentication.authenticate.failure",[e]),Ie(oe.parentWindow,(function(){return setTimeout((function(){return oe.currentWindow.close()}),200)}))}}(S||(S={}));var _,B,L,q,z,H=function(){return(H=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},U={apiVersion:1,supports:{appInstallDialog:void 0,calendar:void 0,call:void 0,chat:void 0,conversations:void 0,dialog:{bot:void 0,update:void 0},location:void 0,logs:void 0,mail:void 0,meetingRoom:void 0,menus:void 0,monetization:void 0,notifications:void 0,pages:{appButton:void 0,tabs:void 0,config:void 0,backStack:void 0,fullTrust:void 0},people:void 0,remoteCamera:void 0,sharing:void 0,teams:{fullTrust:{joinedTeams:void 0}},teamsCore:void 0,video:void 0}},V={appInstallDialog:{},appEntity:{},call:{},chat:{},conversations:{},dialog:{bot:{},update:{}},logs:{},meetingRoom:{},menus:{},monetization:{},notifications:{},pages:{appButton:{},tabs:{},config:{},backStack:{},fullTrust:{}},remoteCamera:{},sharing:{},teams:{fullTrust:{}},teamsCore:{},video:{}},G=[n.desktop,n.web,n.android,n.ios,n.rigel,n.surfaceHub,n.teamsRoomsWindows,n.teamsRoomsAndroid,n.teamsPhones,n.teamsDisplays],W={"1.9.0":[{capability:{location:{}},hostClientTypes:G}],"2.0.0":[{capability:{people:{}},hostClientTypes:G}],"2.0.1":[{capability:{teams:{fullTrust:{joinedTeams:{}}}},hostClientTypes:[n.android,n.teamsRoomsAndroid,n.teamsPhones,n.teamsDisplays]}]};function K(e){U=function e(t){return Object.keys(t).forEach((function(n){"object"==typeof t[n]&&e(t[n])})),Object.freeze(t)}(e)}!function(e){var t=[];function n(e){y.frameContext&&(y.frameContext===a.task?t.push(e):te("messageForChild"))}function r(e){return{url:e.url,height:e.size?e.size.height:u.Small,width:e.size?e.size.width:u.Small,title:e.title,fallbackUrl:e.fallbackUrl}}function i(e){return{url:e.url,height:e.size?e.size.height:u.Small,width:e.size?e.size.width:u.Small,title:e.title,fallbackUrl:e.fallbackUrl,completionBotId:e.completionBotId}}e.initialize=function(){ee("messageForChild",n,!1)},e.open=function(e,t,n){A(a.content,a.sidePanel,a.meetingStage),n&&ee("messageForParent",n),pe("tasks.startTask",[r(e)],(function(e,n){t({err:e,result:n}),te("messageForParent")}))},e.submit=function(e,t){A(a.content,a.sidePanel,a.task,a.meetingStage),pe("tasks.completeTask",[e,t?Array.isArray(t)?t:[t]:[]])},e.sendMessageToParentFromDialog=function(e){A(a.task),pe("messageForParent",[e])},e.sendMessageToDialog=function(e){A(a.content,a.sidePanel,a.meetingStage),pe("messageForChild",[e])},e.registerOnMessageFromParent=function(e){for(A(a.task),te("messageForChild"),ee("messageForChild",e),t.reverse();t.length>0;)e(t.pop())},e.isSupported=function(){return!!U.supports.dialog},function(e){e.resize=function(e){A(a.content,a.sidePanel,a.task,a.meetingStage),pe("tasks.updateTask",[e])},e.isSupported=function(){return!!U.supports.dialog&&!!U.supports.dialog.update}}(e.update||(e.update={})),function(e){e.open=function(e,t,n){A(a.content,a.sidePanel,a.meetingStage),n&&ee("messageForParent",n),pe("tasks.startTask",[i(e)],(function(e,n){t({err:e,result:n}),te("messageForParent")}))},e.isSupported=function(){return!!U.supports.dialog&&!!U.supports.dialog.bot}}(e.bot||(e.bot={})),e.getDialogInfoFromUrlDialogInfo=r,e.getDialogInfoFromBotUrlDialogInfo=i}(_||(_={})),function(e){!function(e){e[e.ifRoom=0]="ifRoom",e[e.overflowOnly=1]="overflowOnly"}(e.DisplayMode||(e.DisplayMode={}));var t,n,r,i=function(){this.enabled=!0,this.selected=!1};function s(e){r&&r(e)||(A(),pe("viewConfigItemPress",[e]))}function a(e){t&&t(e)||(A(),pe("handleNavBarMenuItemPress",[e]))}function o(e){n&&n(e)||(A(),pe("handleActionMenuItemPress",[e]))}e.MenuItem=i,function(e){e.dropDown="dropDown",e.popOver="popOver"}(e.MenuListType||(e.MenuListType={})),e.initialize=function(){ee("navBarMenuItemPress",a,!1),ee("actionMenuItemPress",o,!1),ee("setModuleView",s,!1)},e.setUpViews=function(e,t){A(),r=t,pe("setUpViews",[e])},e.setNavBarMenu=function(e,n){A(),t=n,pe("setNavBarMenu",[e])},e.showActionMenu=function(e,t){A(),n=t,pe("showActionMenu",[e])},e.isSupported=function(){return!!U.supports.menus}}(B||(B={})),function(e){function t(){window.print()}e.enablePrintCapability=function(){y.printCapabilityEnabled||(y.printCapabilityEnabled=!0,A(),document.addEventListener("keydown",(function(e){(e.ctrlKey||e.metaKey)&&80===e.keyCode&&(t(),e.cancelBubble=!0,e.preventDefault(),e.stopImmediatePropagation())})))},e.print=t,e.registerOnLoadHandler=function(e){A(),function(e){Y.loadHandler=e,e&&pe("registerHandler",["load"])}(e)},e.registerBeforeUnloadHandler=function(e){A(),function(e){Y.beforeUnloadHandler=e,e&&pe("registerHandler",["beforeUnload"])}(e)},e.isSupported=function(){return!!U.supports.teamsCore}}(L||(L={})),function(e){function t(e){return new Promise((function(t){y.initializeCalled||(y.initializeCalled=!0,Y.handlers.themeChange=ne,Y.handlers.load=re,Y.handlers.beforeUnload=ie,z.backStack._initialize(),y.initializePromise=function(e){if(ce.messageListener=function(e){return function(e){if(e&&e.data&&"object"==typeof e.data){var t=e.source||e.originalEvent&&e.originalEvent.source,n=e.origin||e.originalEvent&&e.originalEvent.origin;(function(e,t){return(!oe.currentWindow||e!==oe.currentWindow)&&(!!(oe.currentWindow&&oe.currentWindow.location&&t&&t===oe.currentWindow.location.origin)||function(e){if("https:"!==e.protocol)return!1;var t=e.host;if(f.some((function(e){return x(e,t)})))return!0;for(var n=0,r=y.additionalValidOrigins;n<r.length;n++){var i=r[n];if(x("https://"===i.substring(0,8)?i.substring(8):i,t))return!0}return!1}(new URL(t)))})(t,n)&&(function(e,t){y.isFramelessWindow||oe.parentWindow&&!oe.parentWindow.closed&&e!==oe.parentWindow?oe.childWindow&&!oe.childWindow.closed&&e!==oe.childWindow||(oe.childWindow=e,oe.childOrigin=t):(oe.parentWindow=e,oe.parentOrigin=t),oe.parentWindow&&oe.parentWindow.closed&&(oe.parentWindow=null,oe.parentOrigin=null),oe.childWindow&&oe.childWindow.closed&&(oe.childWindow=null,oe.childOrigin=null),Ne(oe.parentWindow),Ne(oe.childWindow)}(t,n),t===oe.parentWindow?ve(e):t===oe.childWindow&&function(e){if("id"in e.data&&"func"in e.data){var t=e.data,n=Z(t.func,t.args),r=n[0],i=n[1];r&&void 0!==i?ke(t.id,Array.isArray(i)?i:[i]):pe(t.func,t.args,(function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];if(oe.childWindow){var r=e.pop();ke(t.id,e,r)}}))}}(e))}}(e)},oe.currentWindow=oe.currentWindow||window,oe.parentWindow=oe.currentWindow.parent!==oe.currentWindow.self?oe.currentWindow.parent:oe.currentWindow.opener,(oe.parentWindow||e)&&oe.currentWindow.addEventListener("message",ce.messageListener,!1),!oe.parentWindow){var t=oe.currentWindow;if(!t.nativeInterface)return Promise.reject(new Error("Initialization Failed. No Parent window found."));y.isFramelessWindow=!0,t.onNativeMessage=ve}try{return oe.parentOrigin="*",me("initialize",[h]).then((function(e){return{context:e[0],clientType:e[1],runtimeConfig:e[2],clientSupportedSDKVersion:e[3]}}))}finally{oe.parentOrigin=null}}(e).then((function(e){var t=e.context,n=e.clientType,r=e.runtimeConfig,i=e.clientSupportedSDKVersion,s=void 0===i?l:i;y.frameContext=t,y.hostClientType=n,y.clientSupportedSDKVersion=s;try{if(!(a=JSON.parse(r))||!a.apiVersion)throw new Error("Received runtime config is invalid");r&&K(a)}catch(e){if(!(e instanceof SyntaxError))throw e;try{isNaN(O(r,l))||(y.clientSupportedSDKVersion=r);var a=JSON.parse(s);s&&K(a)}catch(e){if(!(e instanceof SyntaxError))throw e;K(function(e){var t=H({},V);return Object.keys(W).forEach((function(n){O(e,n)>=0&&W[n].forEach((function(e){e.hostClientTypes.includes(y.hostClientType)&&(t=H(H({},t),e.capability))}))})),{apiVersion:1,isLegacyTeams:!0,supports:t}}(y.clientSupportedSDKVersion))}}y.initializeCompleted=!0})),S.initialize(),B.initialize(),z.config.initialize(),_.initialize()),Array.isArray(e)&&function(e){var t=y.additionalValidOrigins.concat(e.filter((function(e){return"string"==typeof e&&g.test(e)}))),n={};t=t.filter((function(e){return!n[e]&&(n[e]=!0,!0)})),y.additionalValidOrigins=t}(e),t(y.initializePromise)}))}function r(e){A(),function(e){Y.themeChangeHandler=e,e&&pe("registerHandler",["themeChange"])}(e)}e.Messages={AppLoaded:"appInitialization.appLoaded",Success:"appInitialization.success",Failure:"appInitialization.failure",ExpectedFailure:"appInitialization.expectedFailure"},function(e){e.AuthFailed="AuthFailed",e.Timeout="Timeout",e.Other="Other"}(e.FailedReason||(e.FailedReason={})),function(e){e.PermissionError="PermissionError",e.NotFound="NotFound",e.Throttling="Throttling",e.Offline="Offline",e.Other="Other"}(e.ExpectedFailureReason||(e.ExpectedFailureReason={})),e.isInitialized=function(){return y.initializeCalled},e.getFrameContext=function(){return y.frameContext},e.initialize=function(e){return function(e,t,n){return new Promise((function(r,i){var s=setTimeout(i,t,n);e().then((function(e){clearTimeout(s),r(e)})).catch((function(e){clearTimeout(s),i(e)}))}))}((function(){return t(e)}),5e3,new Error("SDK initialization timed out."))},e._initialize=function(e){oe.currentWindow=e},e._uninitialize=function(){y.initializeCalled&&(y.frameContext&&(r(null),z.backStack.registerBackButtonHandler(null),z.registerFullScreenHandler(null),L.registerBeforeUnloadHandler(null),L.registerOnLoadHandler(null),we.registerGetLogHandler(null)),y.frameContext===a.settings&&z.config.registerOnSaveHandler(null),y.frameContext===a.remove&&z.config.registerOnRemoveHandler(null),y.initializeCalled=!1,y.initializeCompleted=!1,y.initializePromise=null,y.additionalValidOrigins=[],y.frameContext=null,y.hostClientType=null,y.isFramelessWindow=!1,oe.currentWindow.removeEventListener("message",ce.messageListener,!1),oe.parentWindow=null,oe.parentOrigin=null,oe.childWindow=null,oe.childOrigin=null,ce.parentMessageQueue=[],ce.childMessageQueue=[],ce.nextMessageId=0,ce.callbacks={})},e.getContext=function(){return new Promise((function(e){A(),e(ue("getContext"))})).then((function(e){return function(e){return{app:{locale:e.locale,sessionId:e.appSessionId?e.appSessionId:"",theme:e.theme?e.theme:"default",iconPositionVertical:e.appIconPosition,osLocaleInfo:e.osLocaleInfo,parentMessageId:e.parentMessageId,userClickTime:e.userClickTime,userFileOpenPreference:e.userFileOpenPreference,host:{name:e.hostName?e.hostName:s.teams,clientType:e.hostClientType?e.hostClientType:n.web,sessionId:e.sessionId?e.sessionId:"",ringId:e.ringId},appLaunchId:e.appLaunchId},page:{id:e.entityId,frameContext:e.frameContext?e.frameContext:y.frameContext,subPageId:e.subEntityId,isFullScreen:e.isFullScreen,isMultiWindow:e.isMultiWindow,sourceOrigin:e.sourceOrigin},user:{id:e.userObjectId,displayName:e.userDisplayName,isCallingAllowed:e.isCallingAllowed,isPSTNCallingAllowed:e.isPSTNCallingAllowed,licenseType:e.userLicenseType,loginHint:e.loginHint,userPrincipalName:e.userPrincipalName,tenant:e.tid?{id:e.tid,teamsSku:e.tenantSKU}:void 0},channel:e.channelId?{id:e.channelId,displayName:e.channelName,relativeUrl:e.channelRelativeUrl,membershipType:e.channelType,defaultOneNoteSectionId:e.defaultOneNoteSectionId,ownerGroupId:e.hostTeamGroupId,ownerTenantId:e.hostTeamTenantId}:void 0,chat:e.chatId?{id:e.chatId}:void 0,meeting:e.meetingId?{id:e.meetingId}:void 0,sharepoint:e.sharepoint,team:e.teamId?{internalId:e.teamId,displayName:e.teamName,type:e.teamType,groupId:e.groupId,templateId:e.teamTemplateId,isArchived:e.isTeamArchived,userRole:e.userTeamRole}:void 0,sharePointSite:e.teamSiteUrl||e.teamSiteDomain||e.teamSitePath||e.mySitePath||e.mySiteDomain?{teamSiteUrl:e.teamSiteUrl,teamSiteDomain:e.teamSiteDomain,teamSitePath:e.teamSitePath,teamSiteId:e.teamSiteId,mySitePath:e.mySitePath,mySiteDomain:e.mySiteDomain}:void 0}}(e)}))},e.notifyAppLoaded=function(){A(),pe(e.Messages.AppLoaded,[h])},e.notifySuccess=function(){A(),pe(e.Messages.Success,[h])},e.notifyFailure=function(t){A(),pe(e.Messages.Failure,[t.reason,t.message])},e.notifyExpectedFailure=function(t){A(),pe(e.Messages.ExpectedFailure,[t.reason,t.message])},e.registerOnThemeChangeHandler=r,e.openLink=function(e){return new Promise((function(t){A(a.content,a.sidePanel,a.settings,a.task,a.stage,a.meetingStage),t(he("executeDeepLink",e))}))}}(q||(q={})),function(e){function t(e){A(a.content),pe("setFrameContext",[e])}e.returnFocus=function(e){A(a.content),pe("returnFocus",[e])},e.registerFocusEnterHandler=function(e){A(),ee("focusEnter",e)},e.setCurrentFrame=t,e.initializeWithFrameContext=function(e,n,r){q.initialize(r).then((function(){return n&&n()})),t(e)},e.getConfig=function(){return new Promise((function(e){A(a.content,a.settings,a.remove,a.sidePanel),e(ue("settings.getSettings"))}))},e.navigateCrossDomain=function(e){return new Promise((function(t){A(a.content,a.sidePanel,a.settings,a.remove,a.task,a.stage,a.meetingStage),t(le("navigateCrossDomain","Cross-origin navigation is only supported for URLs matching the pattern registered in the manifest.",e))}))},e.navigateToApp=function(e){return new Promise((function(t){A(a.content,a.sidePanel,a.settings,a.task,a.stage,a.meetingStage),U.isLegacyTeams?t(he("executeDeepLink",function(e){var t=new URL("https://teams.microsoft.com/l/entity/"+encodeURIComponent(e.appId)+"/"+encodeURIComponent(e.pageId));return e.webUrl&&t.searchParams.append("webUrl",e.webUrl),(e.channelId||e.subPageId)&&t.searchParams.append("context",JSON.stringify({channelId:e.channelId,subEntityId:e.subPageId})),t.toString()}(e))):t(he("pages.navigateToApp",e))}))},e.shareDeepLink=function(e){A(a.content,a.sidePanel,a.meetingStage),pe("shareDeepLink",[e.subPageId,e.subPageLabel,e.subPageWebUrl])},e.registerFullScreenHandler=function(e){A(),ee("fullScreenChange",e)},e.isSupported=function(){return!!U.supports.pages},function(e){e.navigateToTab=function(e){return new Promise((function(t){A(),t(le("navigateToTab","Invalid internalTabInstanceId and/or channelId were/was provided",e))}))},e.getTabInstances=function(e){return new Promise((function(t){A(),t(ue("getTabInstances",e))}))},e.getMruTabInstances=function(e){return new Promise((function(t){A(),t(ue("getMruTabInstances",e))}))},e.isSupported=function(){return!!U.supports.pages&&!!U.supports.pages.tabs}}(e.tabs||(e.tabs={})),function(e){var t,n;function r(e){var n=new i(e);t?t(n):n.notifySuccess()}e.initialize=function(){ee("settings.save",r,!1),ee("settings.remove",s,!1)},e.setValidityState=function(e){A(a.settings,a.remove),pe("settings.setValidityState",[e])},e.setConfig=function(e){return new Promise((function(t){A(a.content,a.settings,a.sidePanel),t(he("settings.setSettings",e))}))},e.registerOnSaveHandler=function(e){A(a.settings),t=e,e&&pe("registerHandler",["save"])},e.registerOnRemoveHandler=function(e){A(a.remove,a.settings),n=e,e&&pe("registerHandler",["remove"])},e.registerChangeConfigHandler=function(e){A(a.content),ee("changeSettings",e)};var i=function(){function e(e){this.notified=!1,this.result=e||{}}return e.prototype.notifySuccess=function(){this.ensureNotNotified(),pe("settings.save.success"),this.notified=!0},e.prototype.notifyFailure=function(e){this.ensureNotNotified(),pe("settings.save.failure",[e]),this.notified=!0},e.prototype.ensureNotNotified=function(){if(this.notified)throw new Error("The SaveEvent may only notify success or failure once.")},e}();function s(){var e=new o;n?n(e):e.notifySuccess()}var o=function(){function e(){this.notified=!1}return e.prototype.notifySuccess=function(){this.ensureNotNotified(),pe("settings.remove.success"),this.notified=!0},e.prototype.notifyFailure=function(e){this.ensureNotNotified(),pe("settings.remove.failure",[e]),this.notified=!0},e.prototype.ensureNotNotified=function(){if(this.notified)throw new Error("The removeEvent may only notify success or failure once.")},e}();e.isSupported=function(){return!!U.supports.pages&&!!U.supports.pages.config}}(e.config||(e.config={})),function(e){var t;function n(){return new Promise((function(e){A(),e(le("navigateBack","Back navigation is not supported in the current client or context."))}))}function r(){t&&t()||n()}e._initialize=function(){ee("backButtonPress",r,!1)},e.navigateBack=n,e.registerBackButtonHandler=function(e){t=e,e&&pe("registerHandler",["backButton"])},e.isSupported=function(){return!!U.supports.pages&&!!U.supports.pages.backStack}}(e.backStack||(e.backStack={})),function(e){e.enterFullscreen=function(){A(a.content),pe("enterFullscreen",[])},e.exitFullscreen=function(){A(a.content),pe("exitFullscreen",[])},e.isSupported=function(){return!!U.supports.pages&&!!U.supports.pages.fullTrust}}(e.fullTrust||(e.fullTrust={})),function(e){e.onClick=function(e){A(a.content),ee("appButtonClick",e)},e.onHoverEnter=function(e){A(a.content),ee("appButtonHoverEnter",e)},e.onHoverLeave=function(e){A(a.content),ee("appButtonHoverLeave",e)},e.isSupported=function(){return!!U.supports.pages&&!!U.supports.pages.appButton}}(e.appButton||(e.appButton={}))}(z||(z={}));var $=(0,r(227).debug)("teamsJs");function J(e){return $.extend(e)}var Q=J("handlers"),Y=function(){function e(){}return e.handlers={},e}(),X=Q.extend("callHandler");function Z(e,t){var n=Y.handlers[e];return n?(X("Invoking the registered handler for message %s with arguments %o",e,t),[!0,n.apply(this,t)]):(X("Handler for action message %s not found.",e),[!1,void 0])}function ee(e,t,n,r){void 0===n&&(n=!0),void 0===r&&(r=[]),t?(Y.handlers[e]=t,n&&pe("registerHandler",function(e,t,n){if(n||2===arguments.length)for(var r,i=0,s=t.length;i<s;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))}([e],r,!0))):delete Y.handlers[e]}function te(e){delete Y.handlers[e]}function ne(e){Y.themeChangeHandler&&Y.themeChangeHandler(e),oe.childWindow&&De("themeChange",[e])}function re(e){Y.loadHandler&&Y.loadHandler(e),oe.childWindow&&De("load",[e])}function ie(){var e=function(){pe("readyToUnload",[])};Y.beforeUnloadHandler&&Y.beforeUnloadHandler(e)||e()}var se=function(e,t,n){if(n||2===arguments.length)for(var r,i=0,s=t.length;i<s;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))},ae=J("communication"),oe=function(){},ce=function(){function e(){}return e.parentMessageQueue=[],e.childMessageQueue=[],e.nextMessageId=0,e.callbacks={},e.promiseCallbacks={},e}();function ue(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return me(e,t).then((function(e){return e[0]}))}function he(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return me(e,t).then((function(e){var t=e[0],n=e[1];if(!t)throw new Error(n)}))}function le(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];return me(e,n).then((function(e){var n=e[0],r=e[1];if(!n)throw new Error(r||t)}))}function de(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return me(e,t).then((function(e){var t=e[0],n=e[1];if(t)throw t;return n}))}function me(e,t){return void 0===t&&(t=void 0),new Promise((function(n){n(function(e){return new Promise((function(t){ce.promiseCallbacks[e]=t}))}(ge(e,t).id))}))}function pe(e,t,n){var r;t instanceof Function?n=t:t instanceof Array&&(r=t);var i=ge(e,r);n&&(ce.callbacks[i.id]=n)}var fe=ae.extend("sendMessageToParentHelper");function ge(e,t){var n=fe,r=oe.parentWindow,i=function(e,t){return{id:ce.nextMessageId++,func:e,timestamp:Date.now(),args:t||[]}}(e,t);if(n("Message %i information: %o",i.id,{actionName:e,args:t}),y.isFramelessWindow)oe.currentWindow&&oe.currentWindow.nativeInterface&&(n("Sending message %i to parent via framelessPostMessage interface",i.id),oe.currentWindow.nativeInterface.framelessPostMessage(JSON.stringify(i)));else{var s=Se(r);r&&s?(n("Sending message %i to parent via postMessage",i.id),r.postMessage(i,s)):(n("Adding message %i to parent message queue",i.id),be(r).push(i))}return i}var ye=ae.extend("handleParentMessage");function ve(e){var t=ye;if("id"in e.data&&"number"==typeof e.data.id){var n=e.data,r=ce.callbacks[n.id];t("Received a response from parent for message %i",n.id),r&&(t("Invoking the registered callback for message %i with arguments %o",n.id,n.args),r.apply(null,se(se([],n.args,!0),[n.isPartialResponse],!1)),function(e){return!0===e.data.isPartialResponse}(e)||(t("Removing registered callback for message %i",n.id),delete ce.callbacks[n.id]));var i=ce.promiseCallbacks[n.id];i&&(t("Invoking the registered promise callback for message %i with arguments %o",n.id,n.args),i(n.args),t("Removing registered promise callback for message %i",n.id),delete ce.promiseCallbacks[n.id])}else"func"in e.data&&"string"==typeof e.data.func?(t("Received an action message %s from parent",(n=e.data).func),Z(n.func,n.args)):t("Received an unknown message: %O",e)}function be(e){return e===oe.parentWindow?ce.parentMessageQueue:e===oe.childWindow?ce.childMessageQueue:[]}function Se(e){return e===oe.parentWindow?oe.parentOrigin:e===oe.childWindow?oe.childOrigin:null}var we,Ce,xe,Ee,Oe,Te,Pe,Ae=ae.extend("flushMessageQueue");function Ne(e){for(var t=Se(e),n=be(e),r=e==oe.parentWindow?"parent":"child";e&&t&&n.length>0;){var i=n.shift();Ae("Flushing message %i from "+r+" message queue via postMessage.",i.id),e.postMessage(i,t)}}function Ie(e,t){var n=oe.currentWindow.setInterval((function(){0===be(e).length&&(clearInterval(n),t())}),100)}function ke(e,t,n){var r=oe.childWindow,i=function(e,t,n){return{id:e,args:t||[],isPartialResponse:n}}(e,t,n),s=Se(r);r&&s&&r.postMessage(i,s)}function De(e,t){var n=oe.childWindow,r=function(e,t){return{func:e,args:t||[]}}(e,t),i=Se(n);n&&i?n.postMessage(r,i):be(n).push(r)}function Fe(e,t,n){if(0===e.length)throw new Error("Must have at least one user when creating a chat deep link");return"https://teams.microsoft.com/l/chat/0/0?users="+e.map((function(e){return encodeURIComponent(e)})).join(",")+(void 0===t?"":"&topicName="+encodeURIComponent(t))+(void 0===n?"":"&message="+encodeURIComponent(n))}!function(e){function t(){return!!U.supports.logs}e.registerGetLogHandler=function(e){if(A(),!t())throw w;e?ee("log.request",(function(){pe("log.receive",[e()])})):te("log.request")},e.isSupported=t}(we||(we={})),function(e){e.fileDownloadStart="fileDownloadStart",e.fileDownloadComplete="fileDownloadComplete"}(Ce||(Ce={})),function(e){e.view="view",e.edit="edit",e.editNew="editNew"}(xe||(xe={})),function(e){e.fileOpenPreference="fileOpenPreference",e.theme="theme"}(Ee||(Ee={})),function(e){function t(){return!!U.supports.conversations}e.openConversation=function(e){return new Promise((function(n){if(A(a.content),!t())throw w;var r=he("conversations.openConversation",{title:e.title,subEntityId:e.subEntityId,conversationId:e.conversationId,channelId:e.channelId,entityId:e.entityId});e.onStartConversation&&ee("startConversation",(function(t,n,r,i){return e.onStartConversation({subEntityId:t,conversationId:n,channelId:r,entityId:i})})),e.onCloseConversation&&ee("closeConversation",(function(t,n,r,i){return e.onCloseConversation({subEntityId:t,conversationId:n,channelId:r,entityId:i})})),n(r)}))},e.closeConversation=function(){if(A(a.content),!t())throw w;pe("conversations.closeConversation"),te("startConversation"),te("closeConversation")},e.getChatMembers=function(){return new Promise((function(e){if(A(),!t())throw w;e(ue("getChatMembers"))}))},e.isSupported=t}(Oe||(Oe={})),function(e){function t(){return!!U.supports.appInstallDialog}e.openAppInstallDialog=function(e){return new Promise((function(n){if(A(a.content,a.sidePanel,a.settings,a.task,a.stage,a.meetingStage),!t())throw new Error("Not supported");U.isLegacyTeams?n(he("executeDeepLink",function(e){if(!e)throw new Error("App ID must be set when creating an app install dialog deep link");return"https://teams.microsoft.com/l/app/"+encodeURIComponent(e)+"/"}(e.appId))):(pe("appInstallDialog.openAppInstallDialog",[e]),n())}))},e.isSupported=t}(Te||(Te={})),function(e){function t(e){return new Promise((function(t){if(A(a.content),!n())throw w;U.isLegacyTeams?t(he("executeDeepLink",Fe([e.user],void 0,e.message))):t(he("chat.openChat",{members:e.user,message:e.message}))}))}function n(){return!!U.supports.chat}e.openChat=t,e.openGroupChat=function(e){return new Promise((function(r){if(e.users.length<1)throw Error("OpenGroupChat Failed: No users specified");if(1===e.users.length)t({user:e.users[0],message:e.message});else{if(A(a.content),!n())throw w;U.isLegacyTeams?r(he("executeDeepLink",Fe(e.users,e.topic,e.message))):r(he("chat.openChat",{members:e.users,message:e.message,topic:e.topic}))}}))},e.isSupported=n}(Pe||(Pe={}));var je=function(){function e(){}return e.prototype.postMessage=function(e,t){A(),pe("messageForChild",[e],t||E())},e.prototype.addEventListener=function(e,t){A(),"message"===e&&ee("messageForParent",t)},e}(),Re=function(){function e(){}return Object.defineProperty(e,"Instance",{get:function(){return this._instance||(this._instance=new this)},enumerable:!1,configurable:!0}),e.prototype.postMessage=function(e,t){A(a.task),pe("messageForParent",[e],t||E())},e.prototype.addEventListener=function(e,t){A(a.task),"message"===e&&ee("messageForChild",t)},e}();function Me(e,t){if(null==e||null==t||e.length<=0)return null;var n,r=1;return e.sort((function(e,t){return e.sequence>t.sequence?1:-1})),e.forEach((function(e){e.sequence==r&&(n=n?new Blob([n,e.file],{type:t}):new Blob([e.file],{type:t}),r++)})),n}function _e(e,t){if(null==e||null==t)return null;for(var n=atob(e.chunk),r=new Array(n.length),i=0;i<n.length;i++)r[i]=n.charCodeAt(i);var s=new Uint8Array(r),a=new Blob([s],{type:t});return{sequence:e.chunkSequence,file:a}}function Be(e){!function(e){return!(!e||e.mediaType!=Le.MediaType.VideoAndImage&&!e.videoAndImageProps)}(e)?function(e){return!(!e||e.mediaType!=Le.MediaType.Video||!e.videoProps||e.videoProps.isFullScreenMode)}(e)?I(d):function(e){var t;return!((null==e?void 0:e.mediaType)!=Le.MediaType.Image||!(null===(t=null==e?void 0:e.imageProps)||void 0===t?void 0:t.imageOutputFormats))}(e)&&I("2.0.4"):I("2.0.2")}var Le,qe,ze,He,Ue,Ve,Ge,We,Ke,$e,Je,Qe,Ye,Xe,Ze,et,tt,nt,rt,it,st,at,ot=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();function ct(e,t){q.initialize(t).then((function(){e&&e()}))}function ut(){L.enablePrintCapability()}function ht(){L.print()}function lt(e){A(),q.getContext().then((function(t){e&&e(function(e){return{locale:e.app.locale,appSessionId:e.app.sessionId,theme:e.app.theme,appIconPosition:e.app.iconPositionVertical,osLocaleInfo:e.app.osLocaleInfo,parentMessageId:e.app.parentMessageId,userClickTime:e.app.userClickTime,userFileOpenPreference:e.app.userFileOpenPreference,appLaunchId:e.app.appLaunchId,hostClientType:e.app.host.clientType,sessionId:e.app.host.sessionId,ringId:e.app.host.ringId,entityId:e.page.id,frameContext:e.page.frameContext,subEntityId:e.page.subPageId,isFullScreen:e.page.isFullScreen,isMultiWindow:e.page.isMultiWindow,sourceOrigin:e.page.sourceOrigin,userObjectId:void 0!==e.user?e.user.id:void 0,isCallingAllowed:void 0!==e.user?e.user.isCallingAllowed:void 0,isPSTNCallingAllowed:void 0!==e.user?e.user.isPSTNCallingAllowed:void 0,userLicenseType:void 0!==e.user?e.user.licenseType:void 0,loginHint:void 0!==e.user?e.user.loginHint:void 0,userPrincipalName:void 0!==e.user?e.user.userPrincipalName:void 0,tid:void 0!==e.user&&void 0!==e.user.tenant?e.user.tenant.id:void 0,tenantSKU:void 0!==e.user&&void 0!==e.user.tenant?e.user.tenant.teamsSku:void 0,channelId:void 0!==e.channel?e.channel.id:void 0,channelName:void 0!==e.channel?e.channel.displayName:void 0,channelRelativeUrl:void 0!==e.channel?e.channel.relativeUrl:void 0,channelType:void 0!==e.channel?e.channel.membershipType:void 0,defaultOneNoteSectionId:void 0!==e.channel?e.channel.defaultOneNoteSectionId:void 0,hostTeamGroupId:void 0!==e.channel?e.channel.ownerGroupId:void 0,hostTeamTenantId:void 0!==e.channel?e.channel.ownerTenantId:void 0,chatId:void 0!==e.chat?e.chat.id:void 0,meetingId:void 0!==e.meeting?e.meeting.id:void 0,sharepoint:e.sharepoint,teamId:void 0!==e.team?e.team.internalId:void 0,teamName:void 0!==e.team?e.team.displayName:void 0,teamType:void 0!==e.team?e.team.type:void 0,groupId:void 0!==e.team?e.team.groupId:void 0,teamTemplateId:void 0!==e.team?e.team.templateId:void 0,isTeamArchived:void 0!==e.team?e.team.isArchived:void 0,userTeamRole:void 0!==e.team?e.team.userRole:void 0,teamSiteUrl:void 0!==e.sharePointSite?e.sharePointSite.teamSiteUrl:void 0,teamSiteDomain:void 0!==e.sharePointSite?e.sharePointSite.teamSiteDomain:void 0,teamSitePath:void 0!==e.sharePointSite?e.sharePointSite.teamSitePath:void 0,teamSiteId:void 0!==e.sharePointSite?e.sharePointSite.teamSiteId:void 0,mySitePath:void 0!==e.sharePointSite?e.sharePointSite.mySitePath:void 0,mySiteDomain:void 0!==e.sharePointSite?e.sharePointSite.mySiteDomain:void 0}}(t))}))}function dt(e){q.registerOnThemeChangeHandler(e)}function mt(e){z.registerFullScreenHandler(e)}function pt(e){z.appButton.onClick(e)}function ft(e){z.appButton.onHoverEnter(e)}function gt(e){z.appButton.onHoverLeave(e)}function yt(e){z.backStack.registerBackButtonHandler(e)}function vt(e){L.registerOnLoadHandler(e)}function bt(e){L.registerBeforeUnloadHandler(e)}function St(e){z.registerFocusEnterHandler(e)}function wt(e){z.config.registerChangeConfigHandler(e)}function Ct(e,t){A(),z.tabs.getTabInstances(t).then((function(t){e(t)}))}function xt(e,t){A(),z.tabs.getMruTabInstances(t).then((function(t){e(t)}))}function Et(e){z.shareDeepLink({subPageId:e.subEntityId,subPageLabel:e.subEntityLabel,subPageWebUrl:e.subEntityWebUrl})}function Ot(e,t){A(a.content,a.sidePanel,a.settings,a.task,a.stage,a.meetingStage),t=t||E(),q.openLink(e).then((function(){t(!0)})).catch((function(e){t(!1,e.message)}))}function Tt(e){z.setCurrentFrame(e)}function Pt(e,t,n){z.initializeWithFrameContext(e,t,n)}function At(e){z.returnFocus(e)}function Nt(e,t){A(),t=t||E(),z.tabs.navigateToTab(e).then((function(){t(!0)})).catch((function(e){t(!1,e.message)}))}function It(e,t){A(a.content,a.sidePanel,a.settings,a.remove,a.task,a.stage,a.meetingStage),t=t||E(),z.navigateCrossDomain(e).then((function(){t(!0)})).catch((function(e){t(!1,e.message)}))}function kt(e){A(),e=e||E(),z.backStack.navigateBack().then((function(){e(!0)})).catch((function(t){e(!1,t.message)}))}!function(e){!function(e){e.Base64="base64",e.ID="id"}(e.FileFormat||(e.FileFormat={}));var r=function(){};e.File=r,e.captureImage=function(e){if(!e)throw new Error("[captureImage] Callback cannot be null");A(a.content,a.task),y.isFramelessWindow?N("1.7.0")?pe("captureImage",e):e({errorCode:t.OLD_PLATFORM},void 0):e({errorCode:t.NOT_SUPPORTED_ON_PLATFORM},void 0)};var i=function(e){function n(t){void 0===t&&(t=null);var n=e.call(this)||this;return t&&(n.content=t.content,n.format=t.format,n.mimeType=t.mimeType,n.name=t.name,n.preview=t.preview,n.size=t.size),n}return ot(n,e),n.prototype.getMedia=function(e){if(!e)throw new Error("[get Media] Callback cannot be null");A(a.content,a.task),N(p)?function(e,t,n){return null!=e&&null!=t&&t==Le.FileFormat.ID&&null!=n}(this.mimeType,this.format,this.content)?N("2.0.0")?this.getMediaViaCallback(e):this.getMediaViaHandler(e):e({errorCode:t.INVALID_ARGUMENTS},null):e({errorCode:t.OLD_PLATFORM},null)},n.prototype.getMediaViaCallback=function(e){var n={mediaMimeType:this.mimeType,assembleAttachment:[]};pe("getMedia",[this.content],(function(r){if(e)if(r&&r.error)e(r.error,null);else if(r&&r.mediaChunk)if(r.mediaChunk.chunkSequence<=0){var i=Me(n.assembleAttachment,n.mediaMimeType);e(r.error,i)}else{var s=_e(r.mediaChunk,n.mediaMimeType);n.assembleAttachment.push(s)}else e({errorCode:t.INTERNAL_ERROR,message:"data received is null"},null)}))},n.prototype.getMediaViaHandler=function(e){var n=C.v4(),r={mediaMimeType:this.mimeType,assembleAttachment:[]},i=[n,this.content];this.content&&e&&pe("getMedia",i),ee("getMedia"+n,(function(i){if(e){var s=JSON.parse(i);if(s.error)e(s.error,null),te("getMedia"+n);else if(s.mediaChunk)if(s.mediaChunk.chunkSequence<=0){var a=Me(r.assembleAttachment,r.mediaMimeType);e(s.error,a),te("getMedia"+n)}else{var o=_e(s.mediaChunk,r.mediaMimeType);r.assembleAttachment.push(o)}else e({errorCode:t.INTERNAL_ERROR,message:"data received is null"},null),te("getMedia"+n)}}))},n}(r);e.Media=i;var s,o,c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ot(t,e),t.prototype.getMediaType=function(){return o.Video},t.prototype.notifyEventToApp=function(e){if(this.controllerCallback)switch(e){case s.StartRecording:if(this.controllerCallback.onRecordingStarted){this.controllerCallback.onRecordingStarted();break}}},t}(function(){function e(e){this.controllerCallback=e}return e.prototype.notifyEventToHost=function(e,t){A(a.content,a.task);try{I(d)}catch(e){return void(t&&t(e))}pe("media.controller",[{mediaType:this.getMediaType(),mediaControllerEvent:e}],(function(e){t&&t(e)}))},e.prototype.stop=function(e){this.notifyEventToHost(s.StopRecording,e)},e}());e.VideoController=c,function(e){e[e.StartRecording=1]="StartRecording",e[e.StopRecording=2]="StopRecording"}(s=e.MediaControllerEvent||(e.MediaControllerEvent={})),function(e){e[e.Photo=1]="Photo",e[e.Document=2]="Document",e[e.Whiteboard=3]="Whiteboard",e[e.BusinessCard=4]="BusinessCard"}(e.CameraStartMode||(e.CameraStartMode={})),function(e){e[e.Camera=1]="Camera",e[e.Gallery=2]="Gallery"}(e.Source||(e.Source={})),function(e){e[e.Image=1]="Image",e[e.Video=2]="Video",e[e.VideoAndImage=3]="VideoAndImage",e[e.Audio=4]="Audio"}(o=e.MediaType||(e.MediaType={})),function(e){e[e.ID=1]="ID",e[e.URL=2]="URL"}(e.ImageUriType||(e.ImageUriType={})),function(e){e[e.IMAGE=1]="IMAGE",e[e.PDF=2]="PDF"}(e.ImageOutputFormats||(e.ImageOutputFormats={})),e.selectMedia=function(e,n){if(!n)throw new Error("[select Media] Callback cannot be null");if(A(a.content,a.task),N(p)){try{Be(e)}catch(e){return void n(e,null)}if(function(e){return!(null==e||e.maxMediaCount>10)}(e))pe("selectMedia",[e],(function(t,r,s){if(s)(function(e){return!(e.mediaType!=Le.MediaType.Video||!e.videoProps||!e.videoProps.videoController)})(e)&&e.videoProps.videoController.notifyEventToApp(s);else if(r){for(var a=[],o=0,c=r;o<c.length;o++){var u=c[o];a.push(new i(u))}n(t,a)}else n(t,null)}));else{var r={errorCode:t.INVALID_ARGUMENTS};n(r,null)}}else{var s={errorCode:t.OLD_PLATFORM};n(s,null)}},e.viewImages=function(e,n){if(!n)throw new Error("[view images] Callback cannot be null");A(a.content,a.task),N(p)?function(e){return!(null==e||e.length<=0||e.length>10)}(e)?pe("viewImages",[e],n):n({errorCode:t.INVALID_ARGUMENTS}):n({errorCode:t.OLD_PLATFORM})},e.scanBarCode=function(e,r){if(!e)throw new Error("[media.scanBarCode] Callback cannot be null");A(a.content,a.task),y.hostClientType!==n.desktop&&y.hostClientType!==n.web&&y.hostClientType!==n.rigel&&y.hostClientType!==n.teamsRoomsWindows&&y.hostClientType!==n.teamsRoomsAndroid&&y.hostClientType!==n.teamsPhones&&y.hostClientType!==n.teamsDisplays?N("1.9.0")?function(e){return!e||!(null===e.timeOutIntervalInSec||e.timeOutIntervalInSec<=0||e.timeOutIntervalInSec>60)}(r)?pe("media.scanBarCode",[r],e):e({errorCode:t.INVALID_ARGUMENTS},null):e({errorCode:t.OLD_PLATFORM},null):e({errorCode:t.NOT_SUPPORTED_ON_PLATFORM},null)}}(Le||(Le={})),function(e){function n(e){return new Promise((function(n){if(!N(m))throw{errorCode:t.OLD_PLATFORM};if(!e)throw{errorCode:t.INVALID_ARGUMENTS};if(!i())throw w;n(de("location.getLocation",e))}))}function r(e){return new Promise((function(n){if(!N(m))throw{errorCode:t.OLD_PLATFORM};if(!e)throw{errorCode:t.INVALID_ARGUMENTS};if(!i())throw w;n(de("location.showLocation",e))}))}function i(){return!!U.supports.location}e.getLocation=function(e,t){return A(a.content,a.task),T(n,t,e)},e.showLocation=function(e,t){return A(a.content,a.task),function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=e.apply(void 0,n);return i.then((function(){t&&t(void 0,!0)})).catch((function(e){t&&t(e,!1)})),i}(r,t,e)},e.showLocationHelper=r,e.isSupported=i}(qe||(qe={})),function(e){!function(e){e.Unknown="Unknown",e.Adhoc="Adhoc",e.Scheduled="Scheduled",e.Recurring="Recurring",e.Broadcast="Broadcast",e.MeetNow="MeetNow"}(e.MeetingType||(e.MeetingType={})),function(e){e.OneOnOneCall="oneOnOneCall",e.GroupCall="groupCall"}(e.CallType||(e.CallType={})),e.getIncomingClientAudioState=function(e){if(!e)throw new Error("[get incoming client audio state] Callback cannot be null");A(a.sidePanel,a.meetingStage),pe("getIncomingClientAudioState",e)},e.toggleIncomingClientAudio=function(e){if(!e)throw new Error("[toggle incoming client audio] Callback cannot be null");A(a.sidePanel,a.meetingStage),pe("toggleIncomingClientAudio",e)},e.getMeetingDetails=function(e){if(!e)throw new Error("[get meeting details] Callback cannot be null");A(a.sidePanel,a.meetingStage,a.settings,a.content),pe("meeting.getMeetingDetails",e)},e.getAuthenticationTokenForAnonymousUser=function(e){if(!e)throw new Error("[get Authentication Token For AnonymousUser] Callback cannot be null");A(a.sidePanel,a.meetingStage),pe("meeting.getAuthenticationTokenForAnonymousUser",e)},e.getLiveStreamState=function(e){if(!e)throw new Error("[get live stream state] Callback cannot be null");A(a.sidePanel),pe("meeting.getLiveStreamState",e)},e.requestStartLiveStreaming=function(e,t,n){if(!e)throw new Error("[request start live streaming] Callback cannot be null");A(a.sidePanel),pe("meeting.requestStartLiveStreaming",[t,n],e)},e.requestStopLiveStreaming=function(e){if(!e)throw new Error("[request stop live streaming] Callback cannot be null");A(a.sidePanel),pe("meeting.requestStopLiveStreaming",e)},e.registerLiveStreamChangedHandler=function(e){if(!e)throw new Error("[register live stream changed handler] Handler cannot be null");A(a.sidePanel),ee("meeting.liveStreamChanged",e)},e.shareAppContentToStage=function(e,t){if(!e)throw new Error("[share app content to stage] Callback cannot be null");A(a.sidePanel,a.meetingStage),pe("meeting.shareAppContentToStage",[t],e)},e.getAppContentStageSharingCapabilities=function(e){if(!e)throw new Error("[get app content stage sharing capabilities] Callback cannot be null");A(a.sidePanel,a.meetingStage),pe("meeting.getAppContentStageSharingCapabilities",e)},e.stopSharingAppContentToStage=function(e){if(!e)throw new Error("[stop sharing app content to stage] Callback cannot be null");A(a.sidePanel,a.meetingStage),pe("meeting.stopSharingAppContentToStage",e)},e.getAppContentStageSharingState=function(e){if(!e)throw new Error("[get app content stage sharing state] Callback cannot be null");A(a.sidePanel,a.meetingStage),pe("meeting.getAppContentStageSharingState",e)},e.registerSpeakingStateChangeHandler=function(e){if(!e)throw new Error("[registerSpeakingStateChangeHandler] Handler cannot be null");A(a.sidePanel,a.meetingStage),ee("meeting.speakingStateChanged",e)}}(ze||(ze={})),function(e){e.openPurchaseExperience=function(e,t){var n,r;return"function"==typeof e?(n=e,r=t):r=e,A(a.content),function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=e.apply(void 0,n);return i.then((function(e){t&&t(null,e)})).catch((function(e){t&&t(e,null)})),i}((function(){return new Promise((function(e){e(de("monetization.openPurchaseExperience",r))}))}),n)},e.isSupported=function(){return!!U.supports.monetization}}(He||(He={})),function(e){function t(){return!!U.supports.calendar}e.openCalendarItem=function(e){return new Promise((function(n){if(A(a.content),!t())throw new Error("Not supported");if(!e.itemId||!e.itemId.trim())throw new Error("Must supply an itemId to openCalendarItem");n(he("calendar.openCalendarItem",e))}))},e.composeMeeting=function(e){return new Promise((function(n){if(A(a.content),!t())throw new Error("Not supported");U.isLegacyTeams?n(he("executeDeepLink",function(e,t,n,r,i){return"https://teams.microsoft.com/l/meeting/new?"+(void 0===e?"":"attendees="+e.map((function(e){return encodeURIComponent(e)})).join(","))+(void 0===t?"":"&startTime="+encodeURIComponent(t))+(void 0===n?"":"&endTime="+encodeURIComponent(n))+(void 0===r?"":"&subject="+encodeURIComponent(r))+(void 0===i?"":"&content="+encodeURIComponent(i))}(e.attendees,e.startTime,e.endTime,e.subject,e.content))):n(he("calendar.composeMeeting",e))}))},e.isSupported=t}(Ue||(Ue={})),function(e){function t(){return!!U.supports.mail}e.openMailItem=function(e){return new Promise((function(n){if(A(a.content),!t())throw new Error("Not supported");if(!e.itemId||!e.itemId.trim())throw new Error("Must supply an itemId to openMailItem");n(he("mail.openMailItem",e))}))},e.composeMail=function(e){return new Promise((function(n){if(A(a.content),!t())throw new Error("Not supported");n(he("mail.composeMail",e))}))},e.isSupported=t,function(e){e.New="new",e.Reply="reply",e.ReplyAll="replyAll",e.Forward="forward"}(e.ComposeMailType||(e.ComposeMailType={}))}(Ve||(Ve={})),function(e){function n(e){return new Promise((function(n){if(!N("2.0.0"))throw{errorCode:t.OLD_PLATFORM};if(!function(e){if(e){if(e.title&&"string"!=typeof e.title)return!1;if(e.setSelected&&"object"!=typeof e.setSelected)return!1;if(e.openOrgWideSearchInChatOrChannel&&"boolean"!=typeof e.openOrgWideSearchInChatOrChannel)return!1;if(e.singleSelect&&"boolean"!=typeof e.singleSelect)return!1}return!0}(e))throw{errorCode:t.INVALID_ARGUMENTS};n(de("people.selectPeople",e))}))}e.selectPeople=function(e,t){var r,i,s;return A(a.content,a.task,a.settings),"function"==typeof e?(i=(r=[e,t])[0],s=r[1]):s=e,T(n,i,s)},e.isSupported=function(){return!!U.supports.people}}(Ge||(Ge={})),function(e){function t(){pe("video.videoFrameProcessed")}function n(e){pe("video.notifyError",[e])}!function(e){e[e.NV12=0]="NV12"}(e.VideoFrameFormat||(e.VideoFrameFormat={})),function(e){e[e.EffectChanged=0]="EffectChanged",e[e.EffectDisabled=1]="EffectDisabled"}(e.EffectChangeType||(e.EffectChangeType={})),e.registerForVideoFrame=function(e,r){A(a.sidePanel),ee("video.newVideoFrame",(function(r){void 0!==r&&e(r,t,n)})),pe("video.registerForVideoFrame",[r])},e.notifySelectedVideoEffectChanged=function(e,t){A(a.sidePanel),pe("video.videoEffectChanged",[e,t])},e.registerForVideoEffect=function(e){A(a.sidePanel),ee("video.effectParameterChange",e)},e.isSupported=function(){return!!U.supports.video}}(We||(We={})),function(e){function n(t){return new Promise((function(n){if(!o())throw w;n(de(e.SharingAPIMessages.shareWebContent,t))}))}function r(e){if(!(e&&e.content&&e.content.length))throw{errorCode:t.INVALID_ARGUMENTS,message:"Shared content is missing"}}function i(e){if(e.content.some((function(e){return!e.type})))throw{errorCode:t.INVALID_ARGUMENTS,message:"Shared content type cannot be undefined"};if(e.content.some((function(t){return t.type!==e.content[0].type})))throw{errorCode:t.INVALID_ARGUMENTS,message:"Shared content must be of the same type"}}function s(e){if("URL"!==e.content[0].type)throw{errorCode:t.INVALID_ARGUMENTS,message:"Content type is unsupported"};if(e.content.some((function(e){return!e.url})))throw{errorCode:t.INVALID_ARGUMENTS,message:"URLs are required for URL content types"}}function o(){return!!U.supports.sharing}e.SharingAPIMessages={shareWebContent:"sharing.shareWebContent"},e.shareWebContent=function(e,t){try{r(e),i(e),s(e)}catch(e){return P((function(){return Promise.reject(e)}),t)}return A(a.content,a.sidePanel,a.task,a.stage,a.meetingStage),P(n,t,e)},e.isSupported=o}(Ke||(Ke={})),function(e){e.open=function(e,t){if(A(a.content),!e)throw new Error("[stageView.open] Stage view params cannot be null");return T((function(){return new Promise((function(t){return t(de("stageView.open",e))}))}),t)}}($e||($e={})),function(e){var t;function n(){return!!U.supports.call}!function(e){e.Unknown="unknown",e.Audio="audio",e.Video="video",e.VideoBasedScreenSharing="videoBasedScreenSharing",e.Data="data"}(t=e.CallModalities||(e.CallModalities={})),e.startCall=function(e){return new Promise((function(r){var i;if(A(a.content),!n())throw new Error("Not supported");if(!U.isLegacyTeams)return pe("call.startCall",[e],r);r(de("executeDeepLink",function(e,t,n){if(0===e.length)throw new Error("Must have at least one target when creating a call deep link");return"https://teams.microsoft.com/l/call/0/0?users="+e.map((function(e){return encodeURIComponent(e)})).join(",")+(void 0===t?"":"&withVideo="+encodeURIComponent(t))+(void 0===n?"":"&source="+encodeURIComponent(n))}(e.targets,null===(i=e.requestedModalities)||void 0===i?void 0:i.includes(t.Video),e.source)))}))},e.isSupported=n}(Je||(Je={})),function(e){e.Messages=q.Messages,e.FailedReason=q.FailedReason,e.ExpectedFailureReason=q.ExpectedFailureReason,e.notifyAppLoaded=function(){q.notifyAppLoaded()},e.notifySuccess=function(){q.notifySuccess()},e.notifyFailure=function(e){q.notifyFailure(e)},e.notifyExpectedFailure=function(e){q.notifyExpectedFailure(e)}}(Qe||(Qe={})),function(e){e.setValidityState=function(e){z.config.setValidityState(e)},e.getSettings=function(e){A(a.content,a.settings,a.remove,a.sidePanel),z.getConfig().then((function(t){e(t)}))},e.setSettings=function(e,t){A(a.content,a.settings,a.sidePanel),t=t||E(),z.config.setConfig(e).then((function(){t(!0)})).catch((function(e){t(!1,e.message)}))},e.registerOnSaveHandler=function(e){z.config.registerOnSaveHandler(e)},e.registerOnRemoveHandler=function(e){z.config.registerOnRemoveHandler(e)}}(Ye||(Ye={})),function(e){function t(e){return{url:e.url,size:{height:e.height?e.height:b.Small,width:e.width?e.width:b.Small},title:e.title,fallbackUrl:e.fallbackUrl}}function n(e){return{url:e.url,size:{height:e.height?e.height:b.Small,width:e.width?e.width:b.Small},title:e.title,fallbackUrl:e.fallbackUrl,completionBotId:e.completionBotId}}function r(e){return e.height=e.height?e.height:b.Small,e.width=e.width?e.width:b.Small,e}e.startTask=function(e,r){return void 0!==e.card||void 0===e.url?(A(a.content,a.sidePanel,a.meetingStage),pe("tasks.startTask",[e],r)):void 0!==e.completionBotId?_.bot.open(n(e),(function(e){return r(e.err,e.result)})):_.open(t(e),(function(e){return r(e.err,e.result)})),new je},e.updateTask=function(e){(e=r(e)).width,e.height;var t=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n}(e,["width","height"]);if(Object.keys(t).length)throw new Error("resize requires a TaskInfo argument containing only width and height");_.update.resize(e)},e.submitTask=function(e,t){_.submit(e,t)},e.getUrlDialogInfoFromTaskInfo=t,e.getBotUrlDialogInfoFromTaskInfo=n,e.getDefaultSizeIfNotProvided=r}(Xe||(Xe={})),function(e){!function(e){e.Dropbox="DROPBOX",e.Box="BOX",e.Sharefile="SHAREFILE",e.GoogleDrive="GOOGLEDRIVE",e.Egnyte="EGNYTE",e.SharePoint="SharePoint"}(e.CloudStorageProvider||(e.CloudStorageProvider={})),function(e){e[e.Sharepoint=0]="Sharepoint",e[e.WopiIntegration=1]="WopiIntegration",e[e.Google=2]="Google",e[e.OneDrive=3]="OneDrive",e[e.Recent=4]="Recent",e[e.Aggregate=5]="Aggregate",e[e.FileSystem=6]="FileSystem",e[e.Search=7]="Search",e[e.AllFiles=8]="AllFiles",e[e.SharedWithMe=9]="SharedWithMe"}(e.CloudStorageProviderType||(e.CloudStorageProviderType={})),function(e){e.ClassMaterials="classMaterials"}(e.SpecialDocumentLibraryType||(e.SpecialDocumentLibraryType={})),function(e){e.Readonly="readonly"}(e.DocumentLibraryAccessType||(e.DocumentLibraryAccessType={})),function(e){e.Downloaded="Downloaded",e.Downloading="Downloading",e.Failed="Failed"}(e.FileDownloadStatus||(e.FileDownloadStatus={})),e.getCloudStorageFolders=function(e,t){if(A(a.content),!e||0===e.length)throw new Error("[files.getCloudStorageFolders] channelId name cannot be null or empty");if(!t)throw new Error("[files.getCloudStorageFolders] Callback cannot be null");pe("files.getCloudStorageFolders",[e],t)},e.addCloudStorageFolder=function(e,t){if(A(a.content),!e||0===e.length)throw new Error("[files.addCloudStorageFolder] channelId name cannot be null or empty");if(!t)throw new Error("[files.addCloudStorageFolder] Callback cannot be null");pe("files.addCloudStorageFolder",[e],t)},e.deleteCloudStorageFolder=function(e,t,n){if(A(a.content),!e)throw new Error("[files.deleteCloudStorageFolder] channelId name cannot be null or empty");if(!t)throw new Error("[files.deleteCloudStorageFolder] folderToDelete cannot be null or empty");if(!n)throw new Error("[files.deleteCloudStorageFolder] Callback cannot be null");pe("files.deleteCloudStorageFolder",[e,t],n)},e.getCloudStorageFolderContents=function(e,t,n){if(A(a.content),!e||!t)throw new Error("[files.getCloudStorageFolderContents] folder/providerCode name cannot be null or empty");if(!n)throw new Error("[files.getCloudStorageFolderContents] Callback cannot be null");if("isSubdirectory"in e&&!e.isSubdirectory)throw new Error("[files.getCloudStorageFolderContents] provided folder is not a subDirectory");pe("files.getCloudStorageFolderContents",[e,t],n)},e.openCloudStorageFile=function(e,t,n){if(A(a.content),!e||!t)throw new Error("[files.openCloudStorageFile] file/providerCode cannot be null or empty");if(e.isSubdirectory)throw new Error("[files.openCloudStorageFile] provided file is a subDirectory");pe("files.openCloudStorageFile",[e,t,n])},e.getExternalProviders=function(e,t){if(void 0===e&&(e=!1),A(a.content),!t)throw new Error("[files.getExternalProviders] Callback cannot be null");pe("files.getExternalProviders",[e],t)},e.copyMoveFiles=function(e,t,n,r,i,s){if(void 0===i&&(i=!1),A(a.content),!e||0===e.length)throw new Error("[files.copyMoveFiles] selectedFiles cannot be null or empty");if(!t)throw new Error("[files.copyMoveFiles] providerCode cannot be null or empty");if(!n)throw new Error("[files.copyMoveFiles] destinationFolder cannot be null or empty");if(!r)throw new Error("[files.copyMoveFiles] destinationProviderCode cannot be null or empty");if(!s)throw new Error("[files.copyMoveFiles] callback cannot be null");pe("files.copyMoveFiles",[e,t,n,r,i],s)},e.getFileDownloads=function(e){if(A(a.content),!e)throw new Error("[files.getFileDownloads] Callback cannot be null");pe("files.getFileDownloads",[],e)},e.openDownloadFolder=function(e,t){if(void 0===e&&(e=void 0),A(a.content),!t)throw new Error("[files.openDownloadFolder] Callback cannot be null");pe("files.openDownloadFolder",[e],t)}}(Ze||(Ze={})),function(e){!function(e){e.guest="Guest",e.attendee="Attendee",e.presenter="Presenter",e.organizer="Organizer"}(e.UserMeetingRole||(e.UserMeetingRole={})),function(e){e.added="Added",e.alreadyExists="AlreadyExists",e.conflict="Conflict",e.notFound="NotFound"}(e.ContainerState||(e.ContainerState={})),e.getFluidTenantInfo=function(){return new Promise((function(e){A(a.meetingStage,a.sidePanel),e(de("interactive.getFluidTenantInfo"))}))},e.getFluidToken=function(e){return new Promise((function(t){A(a.meetingStage,a.sidePanel),t(de("interactive.getFluidToken",e))}))},e.getFluidContainerId=function(){return new Promise((function(e){A(a.meetingStage,a.sidePanel),e(de("interactive.getFluidContainerId"))}))},e.setFluidContainerId=function(e){return new Promise((function(t){A(a.meetingStage,a.sidePanel),t(de("interactive.setFluidContainerId",e))}))},e.getNtpTime=function(){return new Promise((function(e){A(a.meetingStage,a.sidePanel),e(de("interactive.getNtpTime"))}))},e.registerClientId=function(e){return new Promise((function(t){A(a.meetingStage,a.sidePanel),t(de("interactive.registerClientId",e))}))},e.getClientRoles=function(e){return new Promise((function(t){A(a.meetingStage,a.sidePanel),t(de("interactive.getClientRoles",e))}))}}(et||(et={})),function(e){!function(e){function r(){return!!U.supports.teams&&!!U.supports.teams.fullTrust}!function(e){function r(){return!!U.supports.teams&&!!U.supports.teams.fullTrust&&!!U.supports.teams.fullTrust.joinedTeams}e.getUserJoinedTeams=function(e){return new Promise((function(i){if(A(),!r())throw w;if((y.hostClientType===n.android||y.hostClientType===n.teamsRoomsAndroid||y.hostClientType===n.teamsPhones||y.hostClientType===n.teamsDisplays)&&!N("2.0.1")){var s={errorCode:t.OLD_PLATFORM};throw new Error(JSON.stringify(s))}i(ue("getUserJoinedTeams",e))}))},e.isSupported=r}(e.joinedTeams||(e.joinedTeams={})),e.getConfigSetting=function(e){return new Promise((function(t){if(A(),!r())throw w;t(ue("getConfigSetting",e))}))},e.isSupported=r}(e.fullTrust||(e.fullTrust={})),e.isSupported=function(){return!!U.supports.teams}}(tt||(tt={})),function(e){function t(){return!!U.supports.meetingRoom}e.getPairedMeetingRoomInfo=function(){return new Promise((function(e){if(A(),!t())throw w;e(de("meetingRoom.getPairedMeetingRoomInfo"))}))},e.sendCommandToPairedMeetingRoom=function(e){return new Promise((function(n){if(!e||0==e.length)throw new Error("[meetingRoom.sendCommandToPairedMeetingRoom] Command name cannot be null or empty");if(A(),!t())throw w;n(de("meetingRoom.sendCommandToPairedMeetingRoom",e))}))},e.registerMeetingRoomCapabilitiesUpdateHandler=function(e){if(!e)throw new Error("[meetingRoom.registerMeetingRoomCapabilitiesUpdateHandler] Handler cannot be null");if(A(),!t())throw w;ee("meetingRoom.meetingRoomCapabilitiesUpdate",(function(t){A(),e(t)}))},e.registerMeetingRoomStatesUpdateHandler=function(e){if(!e)throw new Error("[meetingRoom.registerMeetingRoomStatesUpdateHandler] Handler cannot be null");if(A(),!t())throw w;ee("meetingRoom.meetingRoomStatesUpdate",(function(t){A(),e(t)}))},e.isSupported=t}(nt||(nt={})),function(e){function t(){return!!U.supports.notifications}e.showNotification=function(e){if(A(a.content),!t())throw w;pe("notifications.showNotification",[e])},e.isSupported=t}(rt||(rt={})),function(e){!function(e){e.Reset="Reset",e.ZoomIn="ZoomIn",e.ZoomOut="ZoomOut",e.PanLeft="PanLeft",e.PanRight="PanRight",e.TiltUp="TiltUp",e.TiltDown="TiltDown"}(e.ControlCommand||(e.ControlCommand={})),function(e){e[e.CommandResetError=0]="CommandResetError",e[e.CommandZoomInError=1]="CommandZoomInError",e[e.CommandZoomOutError=2]="CommandZoomOutError",e[e.CommandPanLeftError=3]="CommandPanLeftError",e[e.CommandPanRightError=4]="CommandPanRightError",e[e.CommandTiltUpError=5]="CommandTiltUpError",e[e.CommandTiltDownError=6]="CommandTiltDownError",e[e.SendDataError=7]="SendDataError"}(e.ErrorReason||(e.ErrorReason={})),function(e){e[e.None=0]="None",e[e.ControlDenied=1]="ControlDenied",e[e.ControlNoResponse=2]="ControlNoResponse",e[e.ControlBusy=3]="ControlBusy",e[e.AckTimeout=4]="AckTimeout",e[e.ControlTerminated=5]="ControlTerminated",e[e.ControllerTerminated=6]="ControllerTerminated",e[e.DataChannelError=7]="DataChannelError",e[e.ControllerCancelled=8]="ControllerCancelled",e[e.ControlDisabled=9]="ControlDisabled",e[e.ControlTerminatedToAllowOtherController=10]="ControlTerminatedToAllowOtherController"}(e.SessionTerminatedReason||(e.SessionTerminatedReason={})),e.getCapableParticipants=function(e){if(!e)throw new Error("[remoteCamera.getCapableParticipants] Callback cannot be null");A(a.sidePanel),pe("remoteCamera.getCapableParticipants",e)},e.requestControl=function(e,t){if(!e)throw new Error("[remoteCamera.requestControl] Participant cannot be null");if(!t)throw new Error("[remoteCamera.requestControl] Callback cannot be null");A(a.sidePanel),pe("remoteCamera.requestControl",[e],t)},e.sendControlCommand=function(e,t){if(!e)throw new Error("[remoteCamera.sendControlCommand] ControlCommand cannot be null");if(!t)throw new Error("[remoteCamera.sendControlCommand] Callback cannot be null");A(a.sidePanel),pe("remoteCamera.sendControlCommand",[e],t)},e.terminateSession=function(e){if(!e)throw new Error("[remoteCamera.terminateSession] Callback cannot be null");A(a.sidePanel),pe("remoteCamera.terminateSession",e)},e.registerOnCapableParticipantsChangeHandler=function(e){if(!e)throw new Error("[remoteCamera.registerOnCapableParticipantsChangeHandler] Handler cannot be null");A(a.sidePanel),ee("remoteCamera.capableParticipantsChange",e)},e.registerOnErrorHandler=function(e){if(!e)throw new Error("[remoteCamera.registerOnErrorHandler] Handler cannot be null");A(a.sidePanel),ee("remoteCamera.handlerError",e)},e.registerOnDeviceStateChangeHandler=function(e){if(!e)throw new Error("[remoteCamera.registerOnDeviceStateChangeHandler] Handler cannot be null");A(a.sidePanel),ee("remoteCamera.deviceStateChange",e)},e.registerOnSessionStatusChangeHandler=function(e){if(!e)throw new Error("[remoteCamera.registerOnSessionStatusChangeHandler] Handler cannot be null");A(a.sidePanel),ee("remoteCamera.sessionStatusChange",e)},e.isSupported=function(){return!!U.supports.remoteCamera}}(it||(it={})),function(e){e.selectAppEntity=function(e,t,n,r){if(A(a.content),!e||0==e.length)throw new Error("[appEntity.selectAppEntity] threadId name cannot be null or empty");if(!r)throw new Error("[appEntity.selectAppEntity] Callback cannot be null");pe("appEntity.selectAppEntity",[e,t,n],r)},e.isSupported=function(){return!!U.supports.appEntity}}(st||(st={})),function(e){!function(e){e[e.Regular=0]="Regular",e[e.Private=1]="Private",e[e.Shared=2]="Shared"}(e.ChannelType||(e.ChannelType={})),e.getTeamChannels=function(e,t){if(A(a.content),!e)throw new Error("[teams.getTeamChannels] groupId cannot be null or empty");if(!t)throw new Error("[teams.getTeamChannels] Callback cannot be null");pe("teams.getTeamChannels",[e],t)},e.refreshSiteUrl=function(e,t){if(A(),!e)throw new Error("[teams.refreshSiteUrl] threadId cannot be null or empty");if(!t)throw new Error("[teams.refreshSiteUrl] Callback cannot be null");pe("teams.refreshSiteUrl",[e],t)},e.isSupported=function(){return!!U.supports.teams}}(at||(at={}))})(),i})()}).call(this,n(61))},function(e,t,n){var r=n(460),i=n(461),s=n(462),a=n(463),o=n(464);function c(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=i,c.prototype.get=s,c.prototype.has=a,c.prototype.set=o,e.exports=c},function(e,t,n){var r=n(262);e.exports=function(e,t){for(var n=e.length;n--;)if(r(e[n][0],t))return n;return-1}},function(e,t,n){var r=n(168),i=n(471),s=n(472),a=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":a&&a in Object(e)?i(e):s(e)}},function(e,t,n){var r=n(62)(Object,"create");e.exports=r},function(e,t,n){var r=n(485);e.exports=function(e,t){var n=e.__data__;return r(t)?n["string"==typeof t?"string":"hash"]:n.map}},function(e,t,n){var r=n(266),i=n(267);e.exports=function(e,t,n,s){var a=!n;n||(n={});for(var o=-1,c=t.length;++o<c;){var u=t[o],h=s?s(n[u],e[u],u,n,e):void 0;void 0===h&&(h=e[u]),a?i(n,u,h):r(n,u,h)}return n}},function(e,t,n){"use strict";n.d(t,"b",(function(){return r.b})),n.d(t,"h",(function(){return r.e})),n.d(t,"c",(function(){return r.c})),n.d(t,"f",(function(){return r.d})),n.d(t,"a",(function(){return r.a})),n.d(t,"e",(function(){return s})),n.d(t,"d",(function(){return a})),n.d(t,"g",(function(){return o.a}));var r=n(34),i=n(73);async function s(e,t="SHA-1",r="hex"){if(void 0===crypto.subtle)return n.e(0).then(n.bind(null,608)).then(async n=>n.hashFile(e,t,r));return function(e,t){switch(t){case"hex":return Array.prototype.map.call(e,e=>e.toString(16).padStart(2,"0")).join("");case"base64":return i.fromByteArray(e)}}(await
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
async function(e,t){const n=await crypto.subtle.digest(t,e);return new Uint8Array(n)}(e,t),r)}async function a(e){const t=`blob ${e.byteLength.toString()}${String.fromCharCode(0)}`;return s(r.a.from(t+e.toString()))}var o=n(76);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(202),i=n(195),s=n(579),a=n(91);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
async function o(e,t,n,i,o,c,u){let h=o;h=Object(r.b)(async(e,t)=>(await a.a.getDataObject(t)).request(e),h);const l=new h(t,n,c),d=t.scope,m=new e({runtime:l,context:t,providers:new s.a(d.IFluidDependencySynthesizer).synthesize(i,{}),initProps:u});return c||await m.finishInitialization(c),{instance:m,runtime:l}}class c{constructor(e,t,n,s,a,o=r.a){if(this.type=e,this.ctor=t,this.optionalProviders=s,this.runtimeClass=o,""===this.type)throw new Error("undefined type member");void 0!==a&&(this.registry=new i.a(a)),this.sharedObjectRegistry=new Map(n.map(e=>[e.type,e]))}get IFluidDataStoreFactory(){return this}get IFluidDataStoreRegistry(){return this.registry}get registryEntry(){return[this.type,Promise.resolve(this)]}async instantiateDataStore(e,t){const{runtime:n}=await o(this.ctor,e,this.sharedObjectRegistry,this.optionalProviders,this.runtimeClass,t);return n}async createChildInstance(e,t){return this.createNonRootInstanceCore(e.containerRuntime,[...e.packagePath,this.type],t)}async createPeerInstance(e,t){return this.createNonRootInstanceCore(e.containerRuntime,e.packagePath,t)}async createInstance(e,t){return this.createNonRootInstanceCore(e,[this.type],t)}async createRootInstance(e,t,n){const r=t.createDetachedRootDataStore([this.type],e);return this.createInstanceCore(r,n)}async createNonRootInstanceCore(e,t,n){const r=e.createDetachedDataStore(t);return this.createInstanceCore(r,n)}async createInstanceCore(e,t){const{instance:n,runtime:r}=await o(this.ctor,e,this.sharedObjectRegistry,this.optionalProviders,this.runtimeClass,!1,t);return await e.attachRuntime(this,r),n}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return i}));
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class r{constructor(){this.completed=!1,this.p=new Promise((e,t)=>{this.res=e,this.rej=t})}get isCompleted(){return this.completed}get promise(){return this.p}resolve(e){void 0!==this.res&&(this.completed=!0,this.res(e))}reject(e){void 0!==this.rej&&(this.completed=!0,this.rej(e))}}class i{constructor(e){this.execute=e}get[Symbol.toStringTag](){return this.getPromise()[Symbol.toStringTag]}async then(e,t){return this.getPromise().then(...arguments)}async catch(e){return this.getPromise().catch(...arguments)}async finally(e){return this.getPromise().finally(...arguments)}async getPromise(){return void 0===this.result&&(this.result=this.execute()),this.result}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return h}));var r=n(3),i=n(8),s=n(1),a=n(77),o=n(44),c=n(14);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class u{constructor(e,t,n,r,i,s,a){var o;this.defaultLogger=e,this.summarizeInternalFn=t,this._changeSequenceNumber=r,this._latestSummary=i,this.initialSummary=s,this.wipSummaryLogger=a,this.children=new Map,this.pendingSummaries=new Map,this.outstandingOps=[],this.wipSkipRecursion=!1,this.canReuseHandle=null===(o=n.canReuseHandle)||void 0===o||o,this.throwOnError=!0,this.trackingSequenceNumber=this._changeSequenceNumber}get referenceSequenceNumber(){var e,t;return null!==(t=null===(e=this._latestSummary)||void 0===e?void 0:e.referenceSequenceNumber)&&void 0!==t?t:0}startSummary(e,t){Object(s.a)(void 0===this.wipSummaryLogger,415),Object(s.a)(void 0===this.wipReferenceSequenceNumber,416),this.wipSummaryLogger=t;for(const t of this.children.values())t.startSummary(e,this.wipSummaryLogger);this.wipReferenceSequenceNumber=e}async summarize(e){if(Object(s.a)(this.isTrackingInProgress(),417),Object(s.a)(void 0!==this.wipSummaryLogger,418),this.canReuseHandle&&!e&&!this.hasChanged()){const e=this._latestSummary;if(void 0!==e){this.wipLocalPaths={localPath:e.localPath,additionalPath:e.additionalPath},this.wipSkipRecursion=!0;const t=Object(o.k)();return t.handleNodeCount++,{summary:{type:i.a.Handle,handle:e.fullPath.path,handleType:i.a.Tree},stats:t}}}try{const t=await this.summarizeInternalFn(e);return this.wipLocalPaths={localPath:c.a.create(t.id)},void 0!==t.pathPartsForChildren&&(this.wipLocalPaths.additionalPath=c.a.createAndConcat(t.pathPartsForChildren)),{summary:t.summary,stats:t.stats}}catch(e){if(this.throwOnError||this.trackingSequenceNumber<this._changeSequenceNumber)throw e;const t=this._latestSummary,n=this.initialSummary;let r,i;if(void 0!==t)r={fromSummary:!0,summaryNode:t},i=t.localPath;else{if(void 0===(null==n?void 0:n.summary))throw e;r={fromSummary:!1,initialSummary:n.summary},i=c.a.create(n.id)}this.wipSummaryLogger.sendErrorEvent({eventName:"SummarizingWithBasePlusOps"},e);const s=Object(c.d)(r,this.outstandingOps);return this.wipLocalPaths={localPath:i,additionalPath:s.additionalPath},this.wipSkipRecursion=!0,{summary:s.summary,stats:s.stats}}}completeSummary(e){this.completeSummaryCore(e,void 0,!1)}completeSummaryCore(e,t,n){Object(s.a)(void 0!==this.wipSummaryLogger,419),Object(s.a)(void 0!==this.wipReferenceSequenceNumber,420);let r=this.wipLocalPaths;if(n){const e=this._latestSummary;if(void 0===e)return void this.clearSummary();r={localPath:e.localPath,additionalPath:e.additionalPath}}Object(s.a)(!!r,421);const i=new c.b(Object.assign(Object.assign({},r),{referenceSequenceNumber:this.wipReferenceSequenceNumber,basePath:t})),a=i.fullPathForChildren;for(const t of this.children.values())t.completeSummaryCore(e,a,this.wipSkipRecursion||n);this.pendingSummaries.set(e,i),this.clearSummary()}clearSummary(){this.wipReferenceSequenceNumber=void 0,this.wipLocalPaths=void 0,this.wipSkipRecursion=!1,this.wipSummaryLogger=void 0;for(const e of this.children.values())e.clearSummary()}async refreshLatestSummary(e,t,n,r,i){if(void 0!==e){const t=this.pendingSummaries.get(e);if(void 0!==t)return this.refreshLatestSummaryFromPending(e,t.referenceSequenceNumber),{latestSummaryUpdated:!0,wasSummaryTracked:!0}}if(this.referenceSequenceNumber>=t)return{latestSummaryUpdated:!1};const s=await n();return await this.refreshLatestSummaryFromSnapshot(t,s,void 0,c.a.create(""),i,r),{latestSummaryUpdated:!0,wasSummaryTracked:!1,snapshot:s}}refreshLatestSummaryFromPending(e,t){const n=this.pendingSummaries.get(e);if(void 0!==n){Object(s.a)(t===n.referenceSequenceNumber,423),this.pendingSummaries.delete(e),this.refreshLatestSummaryCore(t),this._latestSummary=n;for(const n of this.children.values())n.refreshLatestSummaryFromPending(e,t)}else Object(s.a)(void 0===this._latestSummary,422)}async refreshLatestSummaryFromSnapshot(e,t,n,r,i,s){if(this.referenceSequenceNumber>=e)return;this.refreshLatestSummaryCore(e);const{baseSummary:a,pathParts:o}=Object(c.c)(t,i);this._latestSummary=new c.b({referenceSequenceNumber:e,basePath:n,localPath:r});const{childrenTree:u,childrenPathPart:h}=Object(c.e)(a);void 0!==h&&o.push(h),o.length>0&&(this._latestSummary.additionalPath=c.a.createAndConcat(o));const l=this._latestSummary.fullPathForChildren;await Promise.all(Array.from(this.children).filter(([e])=>void 0!==u.trees[e]).map(async([t,n])=>n.refreshLatestSummaryFromSnapshot(e,u.trees[t],l,c.a.create(t),i,s)))}refreshLatestSummaryCore(e){for(const[t,n]of this.pendingSummaries)n.referenceSequenceNumber<e&&this.pendingSummaries.delete(t);for(;this.outstandingOps.length>0&&this.outstandingOps[0].sequenceNumber<=e;)this.outstandingOps.shift()}loadBaseSummaryWithoutDifferential(e){const{childrenPathPart:t}=Object(c.e)(e);void 0!==t&&void 0!==this._latestSummary&&(this._latestSummary.additionalPath=c.a.create(t))}async loadBaseSummary(e,t){const n=Object(c.c)(e,this.defaultLogger),r=await n.getOutstandingOps(t),{childrenPathPart:i}=Object(c.e)(n.baseSummary);if(void 0!==i&&n.pathParts.push(i),n.pathParts.length>0&&void 0!==this._latestSummary&&(this._latestSummary.additionalPath=c.a.createAndConcat(n.pathParts)),r.length>0){const e=r[r.length-1].sequenceNumber;Object(s.a)(e<=this.trackingSequenceNumber,425)}return{baseSummary:n.baseSummary,outstandingOps:r}}recordChange(e){const t=this.outstandingOps[this.outstandingOps.length-1];void 0!==t&&Object(s.a)(t.sequenceNumber<e.sequenceNumber,426),this.invalidate(e.sequenceNumber),this.trackingSequenceNumber=e.sequenceNumber,this.outstandingOps.push(e)}invalidate(e){e>this._changeSequenceNumber&&(this._changeSequenceNumber=e)}hasChanged(){return this._changeSequenceNumber>this.referenceSequenceNumber}get latestSummary(){return this._latestSummary}createChild(e,t,n,r={}){Object(s.a)(!this.children.has(t),427);const i=this.getCreateDetailsForChild(t,n),a=new u(this.defaultLogger,e,r,i.changeSequenceNumber,i.latestSummary,i.initialSummary,this.wipSummaryLogger);return this.maybeUpdateChildState(a),this.children.set(t,a),a}getChild(e){return this.children.get(e)}getCreateDetailsForChild(e,t){var n;let u,h,l;const d=this._latestSummary;switch(t.type){case r.CreateSummarizerNodeSource.FromAttach:if(void 0!==d&&t.sequenceNumber<=d.referenceSequenceNumber)h=d.createForChild(e);else{const n=Object(o.h)(t.snapshot);u={sequenceNumber:t.sequenceNumber,id:e,summary:n}}l=t.sequenceNumber;break;case r.CreateSummarizerNodeSource.FromSummary:void 0===this.initialSummary&&Object(s.a)(!!d,428);case r.CreateSummarizerNodeSource.Local:{const a=this.initialSummary;if(void 0!==a){let n,h;if(void 0!==a.summary){const{childrenTree:t}=Object(c.f)(a.summary.summary);Object(s.a)(t.type===i.a.Tree,470),n=t.tree[e]}t.type===r.CreateSummarizerNodeSource.FromSummary&&Object(s.a)(!!n,429),void 0!==n&&(Object(s.a)(n.type===i.a.Tree,430),h={summary:n,stats:Object(o.e)(n)}),u={sequenceNumber:a.sequenceNumber,id:e,summary:h}}h=null==d?void 0:d.createForChild(e),l=null!==(n=null==d?void 0:d.referenceSequenceNumber)&&void 0!==n?n:-1;break}default:{const e=t.type;Object(a.a)(t,"Unexpected CreateSummarizerNodeSource: "+e)}}return{initialSummary:u,latestSummary:h,changeSequenceNumber:l}}maybeUpdateChildState(e){this.isTrackingInProgress()&&(e.wipReferenceSequenceNumber=this.wipReferenceSequenceNumber)}isTrackingInProgress(){return void 0!==this.wipReferenceSequenceNumber}}const h=(e,t,n,r,i={})=>new u(e,t,i,n,void 0===r?void 0:c.b.createForRoot(r))},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(195),i=n(597),s=n(301),a=n(574),o=n(579);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class c extends
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class{get IRuntimeFactory(){return this}async instantiateRuntime(e,t){const n=void 0===t?!0===e.existing:t,r=await this.preInitialize(e,n);return n?await this.instantiateFromExisting(r):await this.instantiateFirstTime(r),await this.hasInitialized(r),r}async instantiateFirstTime(e){}async instantiateFromExisting(e){}async hasInitialized(e){}}{constructor(e,t,n=[],i){super(),this.registryEntries=e,this.dependencyContainer=t,this.requestHandlers=n,this.runtimeOptions=i,this.registry=new r.a(e)}get IFluidDataStoreRegistry(){return this.registry}async instantiateFirstTime(e){await this.containerInitializingFirstTime(e),await this.containerHasInitialized(e)}async instantiateFromExisting(e){await this.containerHasInitialized(e)}async preInitialize(e,t){const n=e.scope,r=new o.a(this.dependencyContainer,n.IFluidDependencySynthesizer);n.IFluidDependencySynthesizer=r;const c=await i.b.load(e,this.registryEntries,Object(a.a)(...this.requestHandlers),this.runtimeOptions,n,t);return r.register(s.IContainerRuntime,c),c}async containerInitializingFirstTime(e){}async containerHasInitialized(e){}}},function(e,t,n){"use strict";var r;n.d(t,"a",(function(){return s}));var i=new Uint8Array(16);function s(){if(!r&&!(r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return r(i)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 *
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY
 */
const r="0.59.4002"},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class r{constructor(e){this.internalStorageService=e}set policies(e){this._policies=e}get policies(){var e;return null!==(e=this._policies)&&void 0!==e?e:this.internalStorageService.policies}get repositoryUrl(){return this.internalStorageService.repositoryUrl}async getSnapshotTree(e){return this.internalStorageService.getSnapshotTree(e)}async getVersions(e,t){return this.internalStorageService.getVersions(e,t)}async write(e,t,n,r){return this.internalStorageService.write(e,t,n,r)}async uploadSummaryWithContext(e,t){return this.internalStorageService.uploadSummaryWithContext(e,t)}async downloadSummary(e){return this.internalStorageService.downloadSummary(e)}async createBlob(e){return this.internalStorageService.createBlob(e)}async readBlob(e){return this.internalStorageService.readBlob(e)}}},function(e,t,n){e.exports=n(406)},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));const r="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),i={};let s,a=0,o=0;function c(e){let t="";do{t=r[e%64]+t,e=Math.floor(e/64)}while(e>0);return t}function u(){const e=c(+new Date);return e!==s?(a=0,s=e):e+"."+c(a++)}for(;o<64;o++)i[r[o]]=o},function(e,t,n){"use strict";var r;n.d(t,"a",(function(){return s}));var i=new Uint8Array(16);function s(){if(!r&&!(r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return r(i)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 *
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY
 */
const r="0.59.4002"},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));const r=0},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));var r=n(56);function i(e){return{width:e.width,height:e.height,color:e.color,effect:e.effect,tip:e.tip,rasterOperation:e.rasterOperation}}class s{constructor(e){this.attributes=i(void 0!==e?e:r.a)}setWidth(e){return this.attributes.width=e,this}setHeight(e){return this.attributes.height=e,this}setColor(e){return this.attributes.color=e,this}setEffect(e){return this.attributes.effect=e,this}setTip(e){return this.attributes.tip=e,this}setRasterOperation(e){return this.attributes.rasterOperation=e,this}build(){return i(this.attributes)}}},function(e,t,n){"use strict";function r(){return-1!==navigator.userAgent.indexOf("Firefox")}function i(){return/iPad|iPhone|iPod/.test(navigator.platform)||"MacIntel"===navigator.platform&&navigator.maxTouchPoints>1}n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return i}))},function(e,t,n){"use strict";n.d(t,"e",(function(){return r})),n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return h})),n.d(t,"c",(function(){return l})),n.d(t,"d",(function(){return d}));const r=new(n(183).a)(()=>s(c())),i={getRawConfig:()=>{}},s=e=>null!=e?new u({getRawConfig:t=>{var n,r;try{return null===(r=o(null!==(n=e.getItem(t))&&void 0!==n?n:void 0))||void 0===r?void 0:r.raw}catch(e){}}}):i;function a(e){switch(e){case"boolean":case"number":case"string":return!0;default:return!1}}function o(e){let t,n=e;if("string"==typeof e)try{n=JSON.parse(e),t={raw:e,string:e}}catch(e){}if(void 0===n)return t;const r=typeof n;if(a(r))return Object.assign(Object.assign({},t),{raw:e,[r]:n});if(Array.isArray(n)){const r=typeof n[0];if(!a(r))return t;for(const e of n)if(typeof e!==r)return t;return Object.assign(Object.assign({},t),{raw:e,[r+"[]"]:n})}return t}const c=()=>{try{return null!==sessionStorage?sessionStorage:void 0}catch(e){return}};class u{constructor(...e){this.configCache=new Map,this.orderedBaseProviders=[];const t=new Set,n=[...e];for(;n.length>0;){const e=n.shift();void 0!==e&&m(e)&&!t.has(e)&&(t.add(e),e instanceof u?n.push(...e.orderedBaseProviders):this.orderedBaseProviders.push(e))}}getBoolean(e){var t;return null===(t=this.getCacheEntry(e))||void 0===t?void 0:t.boolean}getNumber(e){var t;return null===(t=this.getCacheEntry(e))||void 0===t?void 0:t.number}getString(e){var t;return null===(t=this.getCacheEntry(e))||void 0===t?void 0:t.string}getBooleanArray(e){var t;return null===(t=this.getCacheEntry(e))||void 0===t?void 0:t["boolean[]"]}getNumberArray(e){var t;return null===(t=this.getCacheEntry(e))||void 0===t?void 0:t["number[]"]}getStringArray(e){var t;return null===(t=this.getCacheEntry(e))||void 0===t?void 0:t["string[]"]}getRawConfig(e){var t;return null===(t=this.getCacheEntry(e))||void 0===t?void 0:t.raw}getCacheEntry(e){if(!this.configCache.has(e)){for(const t of this.orderedBaseProviders){const n=o(null==t?void 0:t.getRawConfig(e));if(void 0!==n)return this.configCache.set(e,n),n}this.configCache.set(e,{raw:void 0})}return this.configCache.get(e)}}function h(e){const t=e;return m(null==t?void 0:t.config)&&void 0!==(null==t?void 0:t.logger)}function l(e){return h(e)?e:d(e,r.value)}function d(e,...t){if(h(e))throw new Error("Logger is already a monitoring context");const n=e;return n.config=new u(...t),n.logger=e,n}function m(e){const t=e;return"function"==typeof(null==t?void 0:t.getRawConfig)}},function(e,t,n){"use strict";n.d(t,"e",(function(){return a})),n.d(t,"f",(function(){return o})),n.d(t,"d",(function(){return c})),n.d(t,"b",(function(){return u})),n.d(t,"c",(function(){return h})),n.d(t,"a",(function(){return l}));var r=n(15),i=n(20),s=n(93);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function a(e){const t=e.type===r.a.Handle?e.handleType:e.type;switch(t){case r.a.Blob:case r.a.Attachment:return i.a.File;case r.a.Tree:return i.a.Directory;default:Object(s.a)(t,"Unknown type: "+t)}}function o(e){const t=e.type===r.a.Handle?e.handleType:e.type;switch(t){case r.a.Blob:case r.a.Attachment:return"blob";case r.a.Tree:return"tree";default:Object(s.a)(t,"Unknown type: "+t)}}function c(e,t=new Map,n=!1){const r={},i={id:e.sha,blobs:{},trees:{}};r[""]=i;for(const i of e.tree){const e=n?i.path.replace(/^\.app\//,""):i.path,s=e.lastIndexOf("/"),a=e.slice(0,Math.max(0,s)),o=e.slice(s+1),c=r[a];if("tree"===i.type){const t={id:i.sha,blobs:{},commits:{},trees:{}};c.trees[decodeURIComponent(o)]=t,r[e]=t}else{if("blob"!==i.type)throw new Error("Unknown entry type!!");c.blobs[decodeURIComponent(o)]=i.sha,t.set(i.sha,"/"+e)}}return i}class u{constructor(e,t,n="utf-8"){this.path=e,this.mode=i.a.File,this.type=i.b.Blob,this.value={contents:t,encoding:n}}}class h{constructor(e,t){this.path=e,this.value=t,this.mode=i.a.Directory,this.type=i.b.Tree}}class l{constructor(e,t){this.path=e,this.id=t,this.mode=i.a.File,this.type=i.b.Attachment,this.value={id:t}}}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
var r;n.d(t,"a",(function(){return r})),function(e){e[e.Shared=0]="Shared",e[e.Plain=1]="Plain"}(r||(r={}))},function(e,t,n){"use strict";n.d(t,"d",(function(){return i})),n.d(t,"b",(function(){return s})),n.d(t,"c",(function(){return a})),n.d(t,"a",(function(){return o}));n(8);var r=n(17);n(77);function i(e,t=new Map,n=!1){const r={},i={id:e.sha,blobs:{},trees:{}};r[""]=i;for(const i of e.tree){const e=n?i.path.replace(/^\.app\//,""):i.path,s=e.lastIndexOf("/"),a=e.slice(0,Math.max(0,s)),o=e.slice(s+1),c=r[a];if("tree"===i.type){const t={id:i.sha,blobs:{},commits:{},trees:{}};c.trees[decodeURIComponent(o)]=t,r[e]=t}else{if("blob"!==i.type)throw new Error("Unknown entry type!!");c.blobs[decodeURIComponent(o)]=i.sha,t.set(i.sha,"/"+e)}}return i}class s{constructor(e,t,n="utf-8"){this.path=e,this.mode=r.a.File,this.type=r.b.Blob,this.value={contents:t,encoding:n}}}class a{constructor(e,t){this.path=e,this.value=t,this.mode=r.a.Directory,this.type=r.b.Tree}}class o{constructor(e,t){this.path=e,this.id=t,this.mode=r.a.File,this.type=r.b.Attachment,this.value={id:t}}}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
var r;n.d(t,"a",(function(){return r})),function(e){e[e.Shared=0]="Shared",e[e.Plain=1]="Plain"}(r||(r={}))},function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var r=n(73),i=n(425),s=n(426);function a(){return c.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function o(e,t){if(a()<t)throw new RangeError("Invalid typed array length");return c.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=c.prototype:(null===e&&(e=new c(t)),e.length=t),e}function c(e,t,n){if(!(c.TYPED_ARRAY_SUPPORT||this instanceof c))return new c(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return l(this,e)}return u(this,e,t,n)}function u(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);c.TYPED_ARRAY_SUPPORT?(e=t).__proto__=c.prototype:e=d(e,t);return e}(e,t,n,r):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!c.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|p(t,n),i=(e=o(e,r)).write(t,n);i!==r&&(e=e.slice(0,i));return e}(e,t,n):function(e,t){if(c.isBuffer(t)){var n=0|m(t.length);return 0===(e=o(e,n)).length||t.copy(e,0,0,n),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(r=t.length)!=r?o(e,0):d(e,t);if("Buffer"===t.type&&s(t.data))return d(e,t.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function h(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function l(e,t){if(h(t),e=o(e,t<0?0:0|m(t)),!c.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function d(e,t){var n=t.length<0?0:0|m(t.length);e=o(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function m(e){if(e>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|e}function p(e,t){if(c.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return q(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return z(e).length;default:if(r)return q(e).length;t=(""+t).toLowerCase(),r=!0}}function f(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return N(this,t,n);case"utf8":case"utf-8":return T(this,t,n);case"ascii":return P(this,t,n);case"latin1":case"binary":return A(this,t,n);case"base64":return O(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return I(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function g(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function y(e,t,n,r,i){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(i)return-1;n=e.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof t&&(t=c.from(t,r)),c.isBuffer(t))return 0===t.length?-1:v(e,t,n,r,i);if("number"==typeof t)return t&=255,c.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):v(e,[t],n,r,i);throw new TypeError("val must be string, number or Buffer")}function v(e,t,n,r,i){var s,a=1,o=e.length,c=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;a=2,o/=2,c/=2,n/=2}function u(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(i){var h=-1;for(s=n;s<o;s++)if(u(e,s)===u(t,-1===h?0:s-h)){if(-1===h&&(h=s),s-h+1===c)return h*a}else-1!==h&&(s-=s-h),h=-1}else for(n+c>o&&(n=o-c),s=n;s>=0;s--){for(var l=!0,d=0;d<c;d++)if(u(e,s+d)!==u(t,d)){l=!1;break}if(l)return s}return-1}function b(e,t,n,r){n=Number(n)||0;var i=e.length-n;r?(r=Number(r))>i&&(r=i):r=i;var s=t.length;if(s%2!=0)throw new TypeError("Invalid hex string");r>s/2&&(r=s/2);for(var a=0;a<r;++a){var o=parseInt(t.substr(2*a,2),16);if(isNaN(o))return a;e[n+a]=o}return a}function S(e,t,n,r){return H(q(t,e.length-n),e,n,r)}function w(e,t,n,r){return H(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function C(e,t,n,r){return w(e,t,n,r)}function x(e,t,n,r){return H(z(t),e,n,r)}function E(e,t,n,r){return H(function(e,t){for(var n,r,i,s=[],a=0;a<e.length&&!((t-=2)<0);++a)n=e.charCodeAt(a),r=n>>8,i=n%256,s.push(i),s.push(r);return s}(t,e.length-n),e,n,r)}function O(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function T(e,t,n){n=Math.min(e.length,n);for(var r=[],i=t;i<n;){var s,a,o,c,u=e[i],h=null,l=u>239?4:u>223?3:u>191?2:1;if(i+l<=n)switch(l){case 1:u<128&&(h=u);break;case 2:128==(192&(s=e[i+1]))&&(c=(31&u)<<6|63&s)>127&&(h=c);break;case 3:s=e[i+1],a=e[i+2],128==(192&s)&&128==(192&a)&&(c=(15&u)<<12|(63&s)<<6|63&a)>2047&&(c<55296||c>57343)&&(h=c);break;case 4:s=e[i+1],a=e[i+2],o=e[i+3],128==(192&s)&&128==(192&a)&&128==(192&o)&&(c=(15&u)<<18|(63&s)<<12|(63&a)<<6|63&o)>65535&&c<1114112&&(h=c)}null===h?(h=65533,l=1):h>65535&&(h-=65536,r.push(h>>>10&1023|55296),h=56320|1023&h),r.push(h),i+=l}return function(e){var t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=4096));return n}(r)}t.Buffer=c,t.SlowBuffer=function(e){+e!=e&&(e=0);return c.alloc(+e)},t.INSPECT_MAX_BYTES=50,c.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=a(),c.poolSize=8192,c._augment=function(e){return e.__proto__=c.prototype,e},c.from=function(e,t,n){return u(null,e,t,n)},c.TYPED_ARRAY_SUPPORT&&(c.prototype.__proto__=Uint8Array.prototype,c.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&c[Symbol.species]===c&&Object.defineProperty(c,Symbol.species,{value:null,configurable:!0})),c.alloc=function(e,t,n){return function(e,t,n,r){return h(t),t<=0?o(e,t):void 0!==n?"string"==typeof r?o(e,t).fill(n,r):o(e,t).fill(n):o(e,t)}(null,e,t,n)},c.allocUnsafe=function(e){return l(null,e)},c.allocUnsafeSlow=function(e){return l(null,e)},c.isBuffer=function(e){return!(null==e||!e._isBuffer)},c.compare=function(e,t){if(!c.isBuffer(e)||!c.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,i=0,s=Math.min(n,r);i<s;++i)if(e[i]!==t[i]){n=e[i],r=t[i];break}return n<r?-1:r<n?1:0},c.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(e,t){if(!s(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return c.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=c.allocUnsafe(t),i=0;for(n=0;n<e.length;++n){var a=e[n];if(!c.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,i),i+=a.length}return r},c.byteLength=p,c.prototype._isBuffer=!0,c.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)g(this,t,t+1);return this},c.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)g(this,t,t+3),g(this,t+1,t+2);return this},c.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)g(this,t,t+7),g(this,t+1,t+6),g(this,t+2,t+5),g(this,t+3,t+4);return this},c.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?T(this,0,e):f.apply(this,arguments)},c.prototype.equals=function(e){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===c.compare(this,e)},c.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},c.prototype.compare=function(e,t,n,r,i){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),t<0||n>e.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&t>=n)return 0;if(r>=i)return-1;if(t>=n)return 1;if(this===e)return 0;for(var s=(i>>>=0)-(r>>>=0),a=(n>>>=0)-(t>>>=0),o=Math.min(s,a),u=this.slice(r,i),h=e.slice(t,n),l=0;l<o;++l)if(u[l]!==h[l]){s=u[l],a=h[l];break}return s<a?-1:a<s?1:0},c.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},c.prototype.indexOf=function(e,t,n){return y(this,e,t,n,!0)},c.prototype.lastIndexOf=function(e,t,n){return y(this,e,t,n,!1)},c.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-t;if((void 0===n||n>i)&&(n=i),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var s=!1;;)switch(r){case"hex":return b(this,e,t,n);case"utf8":case"utf-8":return S(this,e,t,n);case"ascii":return w(this,e,t,n);case"latin1":case"binary":return C(this,e,t,n);case"base64":return x(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,e,t,n);default:if(s)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),s=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function P(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(127&e[i]);return r}function A(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(e[i]);return r}function N(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var i="",s=t;s<n;++s)i+=L(e[s]);return i}function I(e,t,n){for(var r=e.slice(t,n),i="",s=0;s<r.length;s+=2)i+=String.fromCharCode(r[s]+256*r[s+1]);return i}function k(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function D(e,t,n,r,i,s){if(!c.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<s)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function F(e,t,n,r){t<0&&(t=65535+t+1);for(var i=0,s=Math.min(e.length-n,2);i<s;++i)e[n+i]=(t&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function j(e,t,n,r){t<0&&(t=4294967295+t+1);for(var i=0,s=Math.min(e.length-n,4);i<s;++i)e[n+i]=t>>>8*(r?i:3-i)&255}function R(e,t,n,r,i,s){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function M(e,t,n,r,s){return s||R(e,0,n,4),i.write(e,t,n,r,23,4),n+4}function _(e,t,n,r,s){return s||R(e,0,n,8),i.write(e,t,n,r,52,8),n+8}c.prototype.slice=function(e,t){var n,r=this.length;if((e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),c.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=c.prototype;else{var i=t-e;n=new c(i,void 0);for(var s=0;s<i;++s)n[s]=this[s+e]}return n},c.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||k(e,t,this.length);for(var r=this[e],i=1,s=0;++s<t&&(i*=256);)r+=this[e+s]*i;return r},c.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||k(e,t,this.length);for(var r=this[e+--t],i=1;t>0&&(i*=256);)r+=this[e+--t]*i;return r},c.prototype.readUInt8=function(e,t){return t||k(e,1,this.length),this[e]},c.prototype.readUInt16LE=function(e,t){return t||k(e,2,this.length),this[e]|this[e+1]<<8},c.prototype.readUInt16BE=function(e,t){return t||k(e,2,this.length),this[e]<<8|this[e+1]},c.prototype.readUInt32LE=function(e,t){return t||k(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},c.prototype.readUInt32BE=function(e,t){return t||k(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},c.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||k(e,t,this.length);for(var r=this[e],i=1,s=0;++s<t&&(i*=256);)r+=this[e+s]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*t)),r},c.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||k(e,t,this.length);for(var r=t,i=1,s=this[e+--r];r>0&&(i*=256);)s+=this[e+--r]*i;return s>=(i*=128)&&(s-=Math.pow(2,8*t)),s},c.prototype.readInt8=function(e,t){return t||k(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},c.prototype.readInt16LE=function(e,t){t||k(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt16BE=function(e,t){t||k(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt32LE=function(e,t){return t||k(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},c.prototype.readInt32BE=function(e,t){return t||k(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},c.prototype.readFloatLE=function(e,t){return t||k(e,4,this.length),i.read(this,e,!0,23,4)},c.prototype.readFloatBE=function(e,t){return t||k(e,4,this.length),i.read(this,e,!1,23,4)},c.prototype.readDoubleLE=function(e,t){return t||k(e,8,this.length),i.read(this,e,!0,52,8)},c.prototype.readDoubleBE=function(e,t){return t||k(e,8,this.length),i.read(this,e,!1,52,8)},c.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||D(this,e,t,n,Math.pow(2,8*n)-1,0);var i=1,s=0;for(this[t]=255&e;++s<n&&(i*=256);)this[t+s]=e/i&255;return t+n},c.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||D(this,e,t,n,Math.pow(2,8*n)-1,0);var i=n-1,s=1;for(this[t+i]=255&e;--i>=0&&(s*=256);)this[t+i]=e/s&255;return t+n},c.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||D(this,e,t,1,255,0),c.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},c.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||D(this,e,t,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):F(this,e,t,!0),t+2},c.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||D(this,e,t,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):F(this,e,t,!1),t+2},c.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||D(this,e,t,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):j(this,e,t,!0),t+4},c.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||D(this,e,t,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):j(this,e,t,!1),t+4},c.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);D(this,e,t,n,i-1,-i)}var s=0,a=1,o=0;for(this[t]=255&e;++s<n&&(a*=256);)e<0&&0===o&&0!==this[t+s-1]&&(o=1),this[t+s]=(e/a>>0)-o&255;return t+n},c.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);D(this,e,t,n,i-1,-i)}var s=n-1,a=1,o=0;for(this[t+s]=255&e;--s>=0&&(a*=256);)e<0&&0===o&&0!==this[t+s+1]&&(o=1),this[t+s]=(e/a>>0)-o&255;return t+n},c.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||D(this,e,t,1,127,-128),c.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},c.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||D(this,e,t,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):F(this,e,t,!0),t+2},c.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||D(this,e,t,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):F(this,e,t,!1),t+2},c.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||D(this,e,t,4,2147483647,-2147483648),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):j(this,e,t,!0),t+4},c.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||D(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):j(this,e,t,!1),t+4},c.prototype.writeFloatLE=function(e,t,n){return M(this,e,t,!0,n)},c.prototype.writeFloatBE=function(e,t,n){return M(this,e,t,!1,n)},c.prototype.writeDoubleLE=function(e,t,n){return _(this,e,t,!0,n)},c.prototype.writeDoubleBE=function(e,t,n){return _(this,e,t,!1,n)},c.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var i,s=r-n;if(this===e&&n<t&&t<r)for(i=s-1;i>=0;--i)e[i+t]=this[i+n];else if(s<1e3||!c.TYPED_ARRAY_SUPPORT)for(i=0;i<s;++i)e[i+t]=this[i+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+s),t);return s},c.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!c.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var s;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(s=t;s<n;++s)this[s]=e;else{var a=c.isBuffer(e)?e:q(new c(e,r).toString()),o=a.length;for(s=0;s<n-t;++s)this[s+t]=a[s%o]}return this};var B=/[^+\/0-9A-Za-z-_]/g;function L(e){return e<16?"0"+e.toString(16):e.toString(16)}function q(e,t){var n;t=t||1/0;for(var r=e.length,i=null,s=[],a=0;a<r;++a){if((n=e.charCodeAt(a))>55295&&n<57344){if(!i){if(n>56319){(t-=3)>-1&&s.push(239,191,189);continue}if(a+1===r){(t-=3)>-1&&s.push(239,191,189);continue}i=n;continue}if(n<56320){(t-=3)>-1&&s.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(t-=3)>-1&&s.push(239,191,189);if(i=null,n<128){if((t-=1)<0)break;s.push(n)}else if(n<2048){if((t-=2)<0)break;s.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;s.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;s.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return s}function z(e){return r.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(B,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function H(e,t,n,r){for(var i=0;i<r&&!(i+n>=t.length||i>=e.length);++i)t[i+n]=e[i];return i}}).call(this,n(69))},,,,function(e,t,n){var r=n(58)(n(40),"Map");e.exports=r},function(e,t,n){var r=n(82),i=n(50);e.exports=function(e){if(!i(e))return!1;var t=r(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},function(e,t,n){var r=n(40).Symbol;e.exports=r},function(e,t,n){var r=n(214);e.exports=function(e,t,n){"__proto__"==t&&r?r(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}},function(e,t,n){var r=n(215),i=n(365),s=n(110);e.exports=function(e){return s(e)?r(e):i(e)}},function(e,t,n){(function(e){var r=n(40),i=n(363),s=t&&!t.nodeType&&t,a=s&&"object"==typeof e&&e&&!e.nodeType&&e,o=a&&a.exports===s?r.Buffer:void 0,c=(o?o.isBuffer:void 0)||i;e.exports=c}).call(this,n(60)(e))},function(e,t){e.exports=function(e){return function(t){return e(t)}}},function(e,t,n){(function(e){var r=n(211),i=t&&!t.nodeType&&t,s=i&&"object"==typeof e&&e&&!e.nodeType&&e,a=s&&s.exports===i&&r.process,o=function(){try{var e=s&&s.require&&s.require("util").types;return e||a&&a.binding&&a.binding("util")}catch(e){}}();e.exports=o}).call(this,n(60)(e))},function(e,t){var n=Object.prototype;e.exports=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||n)}},function(e,t,n){var r=n(371),i=n(223),s=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,o=a?function(e){return null==e?[]:(e=Object(e),r(a(e),(function(t){return s.call(e,t)})))}:i;e.exports=o},function(e,t,n){var r=n(220)(Object.getPrototypeOf,Object);e.exports=r},function(e,t,n){var r=n(375),i=n(148),s=n(376),a=n(377),o=n(378),c=n(82),u=n(212),h=u(r),l=u(i),d=u(s),m=u(a),p=u(o),f=c;(r&&"[object DataView]"!=f(new r(new ArrayBuffer(1)))||i&&"[object Map]"!=f(new i)||s&&"[object Promise]"!=f(s.resolve())||a&&"[object Set]"!=f(new a)||o&&"[object WeakMap]"!=f(new o))&&(f=function(e){var t=c(e),n="[object Object]"==t?e.constructor:void 0,r=n?u(n):"";if(r)switch(r){case h:return"[object DataView]";case l:return"[object Map]";case d:return"[object Promise]";case m:return"[object Set]";case p:return"[object WeakMap]"}return t}),e.exports=f},function(e,t,n){var r=n(381);e.exports=function(e){var t=new e.constructor(e.byteLength);return new r(t).set(new r(e)),t}},function(e,t,n){"use strict";var r=n(235);n.d(t,"a",(function(){return r.a}));var i=n(91);n.d(t,"b",(function(){return i.a}))},function(e,t,n){"use strict";var r=n(231);n.d(t,"a",(function(){return r.a})),n.d(t,"b",(function(){return r.b})),n.d(t,"c",(function(){return r.c}))},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.UserMeetingRole=void 0,function(e){e.guest="Guest",e.attendee="Attendee",e.presenter="Presenter",e.organizer="Organizer"}(t.UserMeetingRole||(t.UserMeetingRole={}))},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.EphemeralTelemetryLogger=void 0;const r=n(49);class i{constructor(e){this._runtime=e}sendTelemetryEvent(e,t,n){if(this._runtime.logger){const r=this.createTelemetryEvent(e,n);this._runtime.logger.sendTelemetryEvent(r,t)}}sendErrorEvent(e,t,n){if(this._runtime.logger){const r=this.createTelemetryEvent(e,n);this._runtime.logger.sendErrorEvent(r,t)}}sendPerformanceEvent(e,t,n,r){if(this._runtime.logger){const i=Object.assign({duration:t},this.createTelemetryEvent(e,r));this._runtime.logger.sendPerformanceEvent(i,n)}}createTelemetryEvent(e,t){const n=r.EphemeralEvent.getTimestamp();return Object.assign({eventName:e,clientId:this._runtime.clientId,correlationId:i.formatCorrelationId(this._runtime.clientId,n),timestamp:n},t)}static formatCorrelationId(e,t){return`${e}:${t}`}}t.EphemeralTelemetryLogger=i},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.EphemeralObjectSynchronizer=void 0;class r{constructor(e,t,n,i){this._isDisposed=!1,this._id=e,this._containerRuntime=t,r.registerObject(t,e,{getState:n,updateState:i})}dispose(){this._isDisposed||(this._isDisposed=!0,r.unregisterObject(this._containerRuntime,this._id))}static registerObject(e,t,n){let r=this._synchronizers.get(e);r||(r=new i(e),this._synchronizers.set(e,r)),r.registerObject(t,n)}static unregisterObject(e,t){let n=this._synchronizers.get(e);if(n){n.unregisterObject(t)&&this._synchronizers.delete(e)}}}t.EphemeralObjectSynchronizer=r,r.updateInterval=5e3,r._synchronizers=new Map;class i{constructor(e){this._objects=new Map,this._refCount=0,this._containerRuntime=e,this._containerRuntime.on("signal",(e,t)=>{if(!t){const t="connect"==e.type,n=e.content;if("object"==typeof n)for(const r in n){const i=this._objects.get(r);if(i){try{const s=n[r];"object"==typeof s&&i.updateState(t,s,e.clientId)}catch(e){console.error("EphemeralObjectSynchronizer: error processing received update - "+e.toString())}if(t)try{this.sendUpdateEvent([r])}catch(e){console.error("EphemeralObjectSynchronizer: error responding to connect with update - "+e.toString())}}}}})}registerObject(e,t){if(this._objects.has(e))throw new Error(`EphemeralObjectSynchronizer: too many calls to registerObject() for object '${e}'`);this._objects.set(e,t);const n={[e]:t.getState(!0)};this._containerRuntime.submitSignal("connect",n),0==this._refCount++&&(this._hTimer=setInterval(()=>{try{this.sendUpdateEvent(Array.from(this._objects.keys()))}catch(e){console.error("EphemeralObjectSynchronizer: error sending update - "+e.toString())}},r.updateInterval))}unregisterObject(e){return!(!this._objects.has(e)||(this._objects.delete(e),0!=--this._refCount))&&(clearInterval(this._hTimer),this._hTimer=void 0,!0)}sendUpdateEvent(e){const t={};e.forEach(e=>{var n;try{const r=null===(n=this._objects.get(e))||void 0===n?void 0:n.getState(!1);t[e]=r}catch(e){console.error("EphemeralObjectSynchronizer: error getting an objects state - "+e.toString())}}),this._containerRuntime.submitSignal("update",t)}}},function(e,t,n){"use strict";(function(t){var r=n(25),i=n(411),s=n(246),a=n(247),o={"Content-Type":"application/x-www-form-urlencoded"};function c(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var u,h={transitional:a,adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t&&"[object process]"===Object.prototype.toString.call(t))&&(u=n(248)),u),transformRequest:[function(e,t){return i(t,"Accept"),i(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(c(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)||t&&"application/json"===t["Content-Type"]?(c(t,"application/json"),function(e,t,n){if(r.isString(e))try{return(t||JSON.parse)(e),r.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(n||JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional||h.transitional,n=t&&t.silentJSONParsing,i=t&&t.forcedJSONParsing,a=!n&&"json"===this.responseType;if(a||i&&r.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(a){if("SyntaxError"===e.name)throw s(e,this,"E_JSON_PARSE");throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(e){h.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){h.headers[e]=r.merge(o)})),e.exports=h}).call(this,n(61))},function(e,t,n){var r=n(62)(n(41),"Map");e.exports=r},function(e,t,n){var r=n(41).Symbol;e.exports=r},function(e,t,n){var r=n(268),i=n(499),s=n(272);e.exports=function(e){return s(e)?r(e):i(e)}},function(e,t){var n=Array.isArray;e.exports=n},function(e,t){e.exports=function(e){return function(t){return e(t)}}},function(e,t,n){(function(e){var r=n(264),i=t&&!t.nodeType&&t,s=i&&"object"==typeof e&&e&&!e.nodeType&&e,a=s&&s.exports===i&&r.process,o=function(){try{var e=s&&s.require&&s.require("util").types;return e||a&&a.binding&&a.binding("util")}catch(e){}}();e.exports=o}).call(this,n(60)(e))},function(e,t){var n=Object.prototype;e.exports=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||n)}},function(e,t,n){var r=n(268),i=n(502),s=n(272);e.exports=function(e){return s(e)?r(e,!0):i(e)}},function(e,t,n){var r=n(507),i=n(273),s=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,o=a?function(e){return null==e?[]:(e=Object(e),r(a(e),(function(t){return s.call(e,t)})))}:i;e.exports=o},function(e,t,n){var r=n(511),i=n(167),s=n(512),a=n(513),o=n(514),c=n(120),u=n(265),h=u(r),l=u(i),d=u(s),m=u(a),p=u(o),f=c;(r&&"[object DataView]"!=f(new r(new ArrayBuffer(1)))||i&&"[object Map]"!=f(new i)||s&&"[object Promise]"!=f(s.resolve())||a&&"[object Set]"!=f(new a)||o&&"[object WeakMap]"!=f(new o))&&(f=function(e){var t=c(e),n="[object Object]"==t?e.constructor:void 0,r=n?u(n):"";if(r)switch(r){case h:return"[object DataView]";case l:return"[object Map]";case d:return"[object Promise]";case m:return"[object Set]";case p:return"[object WeakMap]"}return t}),e.exports=f},function(e,t,n){var r=n(517);e.exports=function(e){var t=new e.constructor(e.byteLength);return new r(t).set(new r(e)),t}},function(e,t,n){"use strict";n.r(t);var r=n(299);n.d(t,"MapFactory",(function(){return r.a})),n.d(t,"SharedMap",(function(){return r.b}));var i=n(290);n.d(t,"DirectoryFactory",(function(){return i.a})),n.d(t,"SharedDirectory",(function(){return i.b}));var s=n(46);n.d(t,"LocalValueMaker",(function(){return s.a}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.StrokeCollectionStore=t.RerenderEvent=t.StrokeDeletedEvent=t.StrokeAddedEvent=t.ClearEvent=void 0;const r=n(19),i=n(193),s=n(552),a=n(553);t.ClearEvent=Symbol(),t.StrokeAddedEvent=Symbol(),t.StrokeDeletedEvent=Symbol(),t.RerenderEvent=Symbol();class o extends r.EventEmitter{constructor(){super(...arguments),this.zOrderCollection=new a.MapZOrderCollection,this.collection=new s.MapStrokeCollection,this._strokesVisible=!0,this.sharedIdGenerator=new i.IncrementalNumberUniqueIdGenerator}add(e){this.zOrderCollection.add(e),this.collection.add(e),this.emit(t.StrokeAddedEvent,e)}replaceStroke(e,t){for(const n of e)this.zOrderCollection.addWithZOrder(n,t),this.collection.add(n);this.collection.remove(t)&&this.zOrderCollection.remove(t)}updateView(){this.zOrderCollection.sort(),this.emit(t.RerenderEvent)}remove(e){this.collection.remove(e)&&(this.zOrderCollection.remove(e),this.emit(t.StrokeDeletedEvent,e))}clear(){this.zOrderCollection.clear(),this.collection.clear(),this._strokesVisible=!0,this.emit(t.ClearEvent)}showStrokes(e){this._strokesVisible=e,this.emit(t.RerenderEvent)}stream(e){this._strokesVisible&&this.collection.stream(e)}streamStrokes(e,t){this._strokesVisible&&this.collection.streamByZOrder(this.zOrderCollection,{add:n=>{n.stream(e),t&&t(n)}})}}t.StrokeCollectionStore=o,o.INSTANCE=new o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WetStrokeCollectionStore=t.StrokeEndEvent=t.StrokeBeginEvent=void 0;const r=n(19),i=n(12),s=n(570),a=n(295),o=n(179);t.StrokeBeginEvent=Symbol(),t.StrokeEndEvent=Symbol();class c extends r.EventEmitter{constructor(){super(),this._strokeBeginEnd={onStrokeBegin:()=>{this.emit(t.StrokeBeginEvent)},onStrokeEnd:()=>{this.emit(t.StrokeEndEvent)}},this._defaultCollector=new s.StrokeCollector(this._strokeBeginEnd),this._defaultCollector.idGenerator=o.StrokeCollectionStore.INSTANCE.sharedIdGenerator,this._collector=this._defaultCollector}setLineMode(e){this._defaultCollector.isLineMode=e}getLineMode(){return this._defaultCollector.isLineMode}makeCurrentStrokeStraight(){this._defaultCollector.makeCurrentStrokeStraight()}overrideCollector(e){this._collector=e}resetCollector(){this._collector=this._defaultCollector}setStrokeSource(e){(0,i.chain3)(e,a.ActiveDrawingAttributes.INSTANCE.createDrawingAttributesInjector(),this._collector)}streamWet(e){this._collector.streamCurrentStroke(e)}streamWetNewPoints(e){this._collector.streamCurrentStrokeNewPoints(e)}streamSemiWet(e){this._collector.streamCollectedStrokes({add:t=>{t.stream(e)}})}drySemiWet(e){this._collector.streamCollectedStrokes(e),this._collector.resetCollectedStrokes()}clearSemiWet(){this._collector.resetCollectedStrokes()}}t.WetStrokeCollectionStore=c,c.INSTANCE=new c},function(e,t,n){"use strict";n.r(t),n.d(t,"AzureAudience",(function(){return a})),n.d(t,"LOCAL_MODE_TENANT_ID",(function(){return zn})),n.d(t,"AzureClient",(function(){return Hn})),n.d(t,"AzureFunctionTokenProvider",(function(){return Un})),n.d(t,"ScopeType",(function(){return Oe}));var r={};n.r(r),n.d(r,"protocol",(function(){return Ot})),n.d(r,"PacketType",(function(){return Tt})),n.d(r,"Encoder",(function(){return Pt})),n.d(r,"Decoder",(function(){return At}));var i=n(71);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class s extends i.a{constructor(e){super(),this.container=e,this.lastMembers=new Map,this.audience=e.audience,this.getMembers(),this.audience.on("addMember",(e,t)=>{if(this.shouldIncludeAsMember(t)){const t=this.getMember(e);this.emit("memberAdded",e,t),this.emit("membersChanged")}}),this.audience.on("removeMember",e=>{this.lastMembers.has(e)&&(this.emit("memberRemoved",e,this.lastMembers.get(e)),this.emit("membersChanged"))}),this.container.on("connected",()=>this.emit("membersChanged"))}getMembers(){const e=new Map,t=new Map;return this.audience.getMembers().forEach((n,r)=>{if(this.shouldIncludeAsMember(n)){const i=n.user.id;let s=e.get(i);void 0===s&&(s=this.createServiceMember(n),e.set(i,s)),s.connections.push({id:r,mode:n.mode}),t.set(r,s)}}),this.lastMembers=t,e}getMyself(){const e=this.container.clientId;if(void 0!==e)return this.getMember(e)}getMember(e){const t=this.audience.getMember(e);if(void 0===t)return;const n=this.getMembers().get(null==t?void 0:t.user.id);if(void 0===n)throw Error(`Attempted to fetch client ${e} that is not part of the current member list`);return n}shouldIncludeAsMember(e){return e.details.capabilities.interactive}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class a extends s{createServiceMember(e){return{userId:e.user.id,userName:e.user.name,connections:[],additionalDetails:e.user.additionalDetails}}}var o=n(182),c=n(591),u=n(139),h=n(75),l=n(96),d=n(67);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class m extends d.f{constructor(e,t,n){super(void 0,n),this.debug=e,this.debugErr=t}static create(e,t){const n=Object(l.debug)(e),r=Object(l.debug)(e);return r.log=console.error.bind(console),r.enabled=!0,new m(n,r,t)}static mixinDebugLogger(e,t,n){if(!t)return m.create(e,n);const r=new d.b(void 0,n);return r.addLogger(m.create(e,this.tryGetBaseLoggerProps(t))),r.addLogger(d.a.create(t,e)),r}static tryGetBaseLoggerProps(e){if(e instanceof d.f)return e.properties}send(e){const t=this.prepareEvent(e),n="error"===t.category;let r=n?this.debugErr:this.debug;const i=e.eventName.lastIndexOf(d.f.eventNamespaceSeparator),s=e.eventName.substring(i+1);i>0&&(r=r.extend(e.eventName.substring(0,i))),t.eventName=void 0;let a="";a="tick="+d.f.formatTick(h.a.now());const o=t.stack?t.stack:"";let c;t.stack=void 0;try{c=JSON.stringify(t)}catch(e){t.error=void 0,c=JSON.stringify(t)}"{}"===c&&(c=""),n&&(r.enabled=!0),r(`${s} ${c} ${a} ${o}`)}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */const p=e=>"fluid"===(null==e?void 0:e.type);function f(e){if(!p(e))throw new Error("resolved is not a Fluid url. Type: "+(null==e?void 0:e.type))}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class g{constructor(e){this.urlResolvers=e}static create(e){return Array.isArray(e)?1===e.length?e[0]:new g(e):e}async resolve(e){return async function(e,t){let n;for(const r of e)if(n=await r.resolve(Object.assign({},t)),void 0!==n)return n}(this.urlResolvers,e)}async getAbsoluteUrl(e,t){throw new Error("Not implmented")}}var y=n(97);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class v{constructor(e){this.protocolName="none:",this.protocolToDocumentFactoryMap=new Map,e.forEach(e=>{this.protocolToDocumentFactoryMap.set(e.protocolName,e)})}static create(e){if(Array.isArray(e)){const t=[];return e.forEach(e=>{const n=e;void 0!==n.protocolToDocumentFactoryMap?t.push(...n.protocolToDocumentFactoryMap.values()):t.push(e)}),1===t.length?t[0]:new v(t)}return e}async createDocumentService(e,t,n){f(e);const r=Object(y.parse)(e.url);if(void 0===r.protocol||null===r.protocol)throw new Error("No protocol provided");const i=this.protocolToDocumentFactoryMap.get(r.protocol);if(void 0===i)throw new Error("Unknown Fluid protocol");return i.createDocumentService(e,t,n)}async createContainer(e,t,n,r){f(t);const i=Object(y.parse)(t.url);if(void 0===i.protocol||null===i.protocol)throw new Error("No protocol provided");const s=this.protocolToDocumentFactoryMap.get(i.protocol);if(void 0===s)throw new Error("Unknown Fluid protocol");return s.createContainer(e,t,n,r)}}var b=n(304),S=n.n(b),w=n(5),C=n(93),x=n(585);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
const E=e=>"object"==typeof e&&"string"==typeof(null==e?void 0:e.name)&&"object"==typeof(null==e?void 0:e.fluid),O=e=>{const t=e;return"object"==typeof t&&("string"==typeof(null==t?void 0:t.package)||E(null==t?void 0:t.package))&&(void 0===(null==t?void 0:t.config)||"object"==typeof(null==t?void 0:t.config))};var T=n(578),P=n(15);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function A(e,t){return{type:P.a.Tree,tree:{".protocol":t,".app":e}}}var N=n(233),I=n(100),k=n(23);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
async function D(e,t,n,r){var i,s;let a,o=!1,c=1e3,u=0;const l=h.a.now();let d;do{try{a=await e(r.cancel),o=!0}catch(e){if(!Object(k.f)(e))throw n.sendTelemetryEvent({eventName:t+"_cancel",retry:u,duration:h.a.now()-l,fetchCallName:t},e),e;if(!0===(null===(i=r.cancel)||void 0===i?void 0:i.aborted))throw n.sendTelemetryEvent({eventName:t+"_runWithRetryAborted",retry:u,duration:h.a.now()-l,fetchCallName:t},e),new k.d("runWithRetry was Aborted",I.a.genericError,{driverVersion:"0.59.4002",fetchCallName:t});u++,d=e,c=null!==(s=Object(k.i)(e))&&void 0!==s?s:Math.min(2*c,8e3),r.onRetry&&r.onRetry(c,e),await Object(N.a)(c)}}while(!o);return u>0&&n.sendTelemetryEvent({eventName:t+"_lastError",retry:u,duration:h.a.now()-l,fetchCallName:t},d),a}var F=n(308),j=n(79),R=n(19),M=n(47),_=n.n(M);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class B{constructor(e,t,n,r){this.sequenceNumber=e,this.key=t,this.value=n,this.local=r}}class L extends i.a{constructor(e){super(),this.isDisposed=!1,this.members=new Map(e),this.snapshotCache=e}get disposed(){return this.isDisposed}snapshot(){var e;return null!==(e=this.snapshotCache)&&void 0!==e||(this.snapshotCache=_()(Array.from(this.members))),this.snapshotCache}addMember(e,t){Object(w.a)(!this.members.has(e),462),this.members.set(e,t),this.emit("addMember",e,t),this.snapshotCache=void 0}removeMember(e){Object(w.a)(this.members.has(e),463),this.members.delete(e),this.emit("removeMember",e),this.snapshotCache=void 0}getMembers(){return new Map(this.members)}getMember(e){return this.members.get(e)}dispose(){this.isDisposed=!0}}class q extends i.a{constructor(e,t){super(),this.sendProposal=t,this.isDisposed=!1,this.stateEvents=new R.EventEmitter,this.proposals=new Map(e.proposals.map(([,e])=>[e.sequenceNumber,new B(e.sequenceNumber,e.key,e.value,!1)])),this.values=new Map(e.values),this.proposalsSnapshotCache=e.proposals,this.valuesSnapshotCache=e.values}get disposed(){return this.isDisposed}snapshot(){var e,t;return null!==(e=this.proposalsSnapshotCache)&&void 0!==e||(this.proposalsSnapshotCache=Array.from(this.proposals).map(([e,t])=>[e,{sequenceNumber:e,key:t.key,value:t.value},[]])),null!==(t=this.valuesSnapshotCache)&&void 0!==t||(this.valuesSnapshotCache=_()(Array.from(this.values))),{proposals:this.proposalsSnapshotCache,values:this.valuesSnapshotCache}}has(e){return this.values.has(e)}get(e){var t;return null===(t=this.values.get(e))||void 0===t?void 0:t.value}getApprovalData(e){const t=this.values.get(e);return t?_()(t):void 0}async propose(e,t){const n=this.sendProposal(e,t);if(n<0)throw this.emit("error",{eventName:"ProposalInDisconnectedState",key:e}),new Error("Can't propose in disconnected state");return new Promise((e,t)=>{let r;const i=(e,t)=>{e===n&&(r=t,this.stateEvents.off("localProposalSequenced",i),this.stateEvents.off("disconnected",a),this.stateEvents.on("localProposalApproved",s))},s=t=>{t===r&&(e(),c())},a=()=>{void 0===r&&this.stateEvents.once("connected",()=>{void 0===r&&(t(new Error("Client disconnected without successfully sending proposal")),c())})},o=()=>{t(new Error("QuorumProposals was disposed")),c()},c=()=>{this.stateEvents.off("localProposalSequenced",i),this.stateEvents.off("localProposalApproved",s),this.stateEvents.off("disconnected",a),this.stateEvents.off("disposed",o)};this.stateEvents.on("localProposalSequenced",i),this.stateEvents.on("disconnected",a),this.stateEvents.on("disposed",o)})}addProposal(e,t,n,r,i){Object(w.a)(!this.proposals.has(n),464);const s=new B(n,e,t,r);this.proposals.set(n,s),this.emit("addProposal",s),r&&this.stateEvents.emit("localProposalSequenced",i,n),this.proposalsSnapshotCache=void 0}updateMinimumSequenceNumber(e){const t=e.minimumSequenceNumber,n=[];for(const[e,r]of this.proposals)e<=t&&n.push(r);n.sort((e,t)=>e.sequenceNumber-t.sequenceNumber);for(const t of n){const n={approvalSequenceNumber:e.sequenceNumber,commitSequenceNumber:-1,key:t.key,sequenceNumber:t.sequenceNumber,value:t.value};this.values.set(n.key,n),this.valuesSnapshotCache=void 0,this.emit("approveProposal",n.sequenceNumber,n.key,n.value,n.approvalSequenceNumber),this.proposals.delete(t.sequenceNumber),this.proposalsSnapshotCache=void 0,t.local&&this.stateEvents.emit("localProposalApproved",t.sequenceNumber)}}setConnectionState(e){e?this.stateEvents.emit("connected"):this.stateEvents.emit("disconnected")}dispose(){this.isDisposed=!0,this.stateEvents.emit("disposed")}}class z extends i.a{constructor(e,t,n,r){super(),this.isDisposed=!1,this.quorumClients=new L(e),this.quorumClients.on("addMember",(e,t)=>{this.emit("addMember",e,t)}),this.quorumClients.on("removeMember",e=>{this.emit("removeMember",e)}),this.quorumProposals=new q({proposals:t,values:n},r),this.quorumProposals.on("addProposal",e=>{this.emit("addProposal",e)}),this.quorumProposals.on("approveProposal",(e,t,n,r)=>{this.emit("approveProposal",e,t,n,r)})}get disposed(){return this.isDisposed}close(){this.removeAllListeners()}snapshot(){const e=this.quorumClients.snapshot(),{proposals:t,values:n}=this.quorumProposals.snapshot();return{members:e,proposals:t,values:n}}has(e){return this.quorumProposals.has(e)}get(e){return this.quorumProposals.get(e)}getApprovalData(e){return this.quorumProposals.getApprovalData(e)}addMember(e,t){this.quorumClients.addMember(e,t)}removeMember(e){this.quorumClients.removeMember(e)}getMembers(){return this.quorumClients.getMembers()}getMember(e){return this.quorumClients.getMember(e)}async propose(e,t){return this.quorumProposals.propose(e,t)}addProposal(e,t,n,r,i){return this.quorumProposals.addProposal(e,t,n,r,i)}updateMinimumSequenceNumber(e){this.quorumProposals.updateMinimumSequenceNumber(e)}setConnectionState(e,t){this.quorumProposals.setConnectionState(e)}dispose(){throw new Error("Not implemented.")}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */function H(e){switch(e.type){case j.a.ClientJoin:case j.a.ClientLeave:case j.a.Propose:case j.a.Reject:case j.a.NoOp:case j.a.NoClient:case j.a.Summarize:case j.a.SummaryAck:case j.a.SummaryNack:return!0;default:return!1}}class U{constructor(e,t,n,r,i,s,a){this.minimumSequenceNumber=e,this.sequenceNumber=t,this.term=null!=n?n:1,this._quorum=new z(r,i,s,a)}get quorum(){return this._quorum}get attributes(){return{minimumSequenceNumber:this.minimumSequenceNumber,sequenceNumber:this.sequenceNumber,term:this.term}}setConnectionState(e,t){this._quorum.setConnectionState(e,t)}snapshot(){return this._quorum.snapshot()}close(){this._quorum.close()}processMessage(e,t){if(e.sequenceNumber!==this.sequenceNumber+1)throw new Error(`Protocol state is not moving sequentially. Current is ${this.sequenceNumber}. Next is ${e.sequenceNumber}`);this.sequenceNumber=e.sequenceNumber,this.minimumSequenceNumber=e.minimumSequenceNumber;let n=!1;switch(e.type){case j.a.ClientJoin:const r=e,i=JSON.parse(r.data),s={client:i.detail,sequenceNumber:r.sequenceNumber};this._quorum.addMember(i.clientId,s);break;case j.a.ClientLeave:const a=e,o=JSON.parse(a.data);this._quorum.removeMember(o);break;case j.a.Propose:const c=e.contents;this._quorum.addProposal(c.key,c.value,e.sequenceNumber,t,e.clientSequenceNumber),n=!0;break;case j.a.Reject:throw new Error("Quorum rejection is removed.")}return this._quorum.updateMinimumSequenceNumber(e),{immediateNoOp:n}}getProtocolState(){return Object.assign({sequenceNumber:this.sequenceNumber,minimumSequenceNumber:this.minimumSequenceNumber},this._quorum.snapshot())}}var V=n(35),G=n(587),W=n(590);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class K extends R.EventEmitter{constructor(){super(...arguments),this.members=new Map}on(e,t){return super.on(e,t)}addMember(e,t){this.members.set(e,t),this.emit("addMember",e,t)}removeMember(e){const t=this.members.get(e);return void 0!==t&&(this.members.delete(e),this.emit("removeMember",e,t),!0)}getMembers(){return new Map(this.members)}getMember(e){return this.members.get(e)}clear(){const e=this.members.keys();for(const t of e)this.removeMember(t)}}var $=n(126);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class J{constructor(e,t,n,r,i,s,a,o,c,u,h,l,d,m,p){this.container=e,this.scope=t,this.codeLoader=n,this._codeDetails=r,this._baseSnapshot=i,this.deltaManager=s,this.loader=o,this.submitFn=c,this.submitSignalFn=u,this.closeFn=h,this.version=l,this.updateDirtyContainerState=d,this.existing=m,this.pendingLocalState=p,this._disposed=!1,this._quorum=a,this.taggedLogger=e.subLogger,this._fluidModuleP=new $.b(async()=>this.loadCodeModule(r)),this.attachListener()}static async createOrLoad(e,t,n,r,i,s,a,o,c,u,h,l,d,m,p){const f=new J(e,t,n,r,i,s,a,o,c,u,h,l,d,m,p);return await f.instantiateRuntime(m),f}get clientId(){return this.container.clientId}get id(){const e=this.container.resolvedUrl;return p(e)?e.id:""}get clientDetails(){return this.container.clientDetails}get connected(){return this.container.connected}get canSummarize(){return"summarize"in this.runtime}get serviceConfiguration(){return this.container.serviceConfiguration}get audience(){return this.container.audience}get options(){return this.container.options}get baseSnapshot(){return this._baseSnapshot}get storage(){return this.container.storage}get runtime(){if(void 0===this._runtime)throw new Error("Attempted to access runtime before it was defined");return this._runtime}get disposed(){return this._disposed}get codeDetails(){return this._codeDetails}get quorum(){return this._quorum}getSpecifiedCodeDetails(){var e;return null!==(e=this._quorum.get("code"))&&void 0!==e?e:this._quorum.get("code2")}dispose(e){this._disposed||(this._disposed=!0,this.runtime.dispose(e),this._quorum.dispose(),this.deltaManager.dispose())}getLoadedFromVersion(){return this.container.loadedFromVersion}get attachState(){return this.container.attachState}createSummary(e){return this.runtime.createSummary(e)}setConnectionState(e,t){const n=this.runtime;Object(w.a)(e===this.connected,222),n.setConnectionState(e,t)}process(e,t,n){this.runtime.process(e,t,n)}processSignal(e,t){this.runtime.processSignal(e,t)}async request(e){return this.runtime.request(e)}async getAbsoluteUrl(e){return this.container.getAbsoluteUrl(e)}getPendingLocalState(){return this.runtime.getPendingLocalState()}async satisfies(e){var t;const n=[],r=this.codeLoader;void 0!==r.IFluidCodeDetailsComparer&&n.push(r.IFluidCodeDetailsComparer);const i=await this._fluidModuleP,s=null===(t=i.module)||void 0===t?void 0:t.fluidExport;if(void 0!==(null==s?void 0:s.IFluidCodeDetailsComparer)&&n.push(s.IFluidCodeDetailsComparer),0===n.length)return!1;for(const t of n){if(!1===await t.satisfies(i.details,e))return!1}return!0}notifyAttaching(){this.runtime.setAttachState(x.a.Attaching)}async getRuntimeFactory(){var e;const t=null===(e=(await this._fluidModuleP).module)||void 0===e?void 0:e.fluidExport,n=null==t?void 0:t.IRuntimeFactory;if(void 0===n)throw new Error("Code package does not implement IRuntimeFactory");return n}async instantiateRuntime(e){const t=await this.getRuntimeFactory();this._runtime=await t.instantiateRuntime(this,e)}attachListener(){this.container.once("attached",()=>{this.runtime.setAttachState(x.a.Attached)})}async loadCodeModule(e){const t=await d.c.timedExecAsync(this.taggedLogger,{eventName:"CodeLoad"},async()=>this.codeLoader.load(e));if("module"in t){const{module:n,details:r}=t;return{module:n,details:null!=r?r:e}}return this.taggedLogger.sendTelemetryEvent({eventName:"LegacyCodeLoader"}),{module:t,details:e}}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */var Q;!function(e){e.Never="Never",e.Disabled="Disabled",e.Enabled="Enabled"}(Q||(Q={}));var Y=n(196),X=n.n(Y);var Z=n(94),ee=n.n(Z);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class te extends i.a{constructor(e){super(),this.worker=e,this.isDisposed=!1,this.q=new ee.a,this.pauseCount=1}get disposed(){return this.isDisposed}get paused(){return 0!==this.pauseCount}get length(){return this.q.length}get idle(){return void 0===this.processingDeferred&&0===this.q.length}async waitTillProcessingDone(){if(void 0!==this.processingDeferred)return this.processingDeferred.promise}dispose(){throw new Error("Not implemented.")}clear(){this.q.clear()}peek(){return this.q.peekFront()}toArray(){return this.q.toArray()}push(e){this.q.push(e),this.emit("push",e),this.ensureProcessing()}async pause(){return this.pauseCount++,this.waitTillProcessingDone()}resume(){Object(w.a)(this.pauseCount>0,244),this.pauseCount--,this.ensureProcessing()}ensureProcessing(){this.paused||void 0!==this.processingDeferred||(this.processingDeferred=new $.a,Promise.resolve().then(()=>{this.processDeltas(),void 0!==this.processingDeferred&&(this.processingDeferred.resolve(),this.processingDeferred=void 0)}))}processDeltas(){const e=h.a.now();let t=0;for(;0!==this.q.length&&!this.paused&&void 0===this.error;){const e=this.q.shift();t++;try{this.worker(e),this.emit("op",e)}catch(e){this.error=e,this.emit("error",e)}}0===this.q.length&&this.emit("idle",t,h.a.now()-e)}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class ne extends i.a{constructor(e,t,n,r){super(),this.serviceProvider=e,this.logger=t,this._active=n,this.pending=[],this.minSequenceNumber=0,this.lastQueuedSequenceNumber=0,this.lastObservedSeqNumber=0,this.lastProcessedSequenceNumber=0,this.baseTerm=0,this.initSequenceNumber=0,this.closed=!1,this.throttlingIdSet=new Set,this.timeTillThrottling=0,this.closeAbortController=new X.a,this.deltaStorageDelayId=Object(o.a)(),this.deltaStreamDelayId=Object(o.a)(),this.messageBuffer=[];const i={incomingOpHandler:(e,t)=>this.enqueueMessages(e,t),signalHandler:e=>this._inboundSignal.push(e),reconnectionDelayHandler:(e,t)=>this.emitDelayInfo(this.deltaStreamDelayId,e,t),closeHandler:e=>this.close(e),disconnectHandler:e=>this.disconnectHandler(e),connectHandler:e=>this.connectHandler(e),pongHandler:e=>this.emit("pong",e),readonlyChangeHandler:e=>Object(G.d)(this,this.logger,"readonly",e)};this.connectionManager=r(i),this._inbound=new te(e=>{this.processInboundMessage(e)}),this._inbound.on("error",e=>{this.close(T.c.wrapIfUnrecognized(e,"deltaManagerInboundErrorHandler",this.lastMessage))}),this._inboundSignal=new te(e=>{if(void 0===this.handler)throw new Error("Attempted to process an inbound signal without a handler attached");this.handler.processSignal({clientId:e.clientId,content:JSON.parse(e.content)})}),this._inboundSignal.on("error",e=>{this.close(Object(V.h)(e))})}get active(){return this._active()}get disposed(){return this.closed}get IDeltaSender(){return this}get inbound(){return this._inbound}get inboundSignal(){return this._inboundSignal}get initialSequenceNumber(){return this.initSequenceNumber}get lastSequenceNumber(){return this.lastProcessedSequenceNumber}get lastMessage(){return this.lastProcessedMessage}get lastKnownSeqNumber(){return this.lastObservedSeqNumber}get referenceTerm(){return this.baseTerm}get minimumSequenceNumber(){return this.minSequenceNumber}get hasCheckpointSequenceNumber(){return Object(w.a)(this.connectionManager.connected,223),void 0!==this._checkpointSequenceNumber}get maxMessageSize(){return this.connectionManager.maxMessageSize}get version(){return this.connectionManager.version}get serviceConfiguration(){return this.connectionManager.serviceConfiguration}get outbound(){return this.connectionManager.outbound}get readOnlyInfo(){return this.connectionManager.readOnlyInfo}get clientDetails(){return this.connectionManager.clientDetails}submit(e,t,n=!1,r){const i={contents:JSON.stringify(t),metadata:r,referenceSequenceNumber:this.lastProcessedSequenceNumber,type:e};n||this.flush();const s=this.connectionManager.prepareMessageToSend(i);return void 0===s?-1:(this.messageBuffer.push(s),this.emit("submitOp",s),n||this.flush(),s.clientSequenceNumber)}submitSignal(e){return this.connectionManager.submitSignal(e)}flush(){0!==this.messageBuffer.length&&(this.emit("prepareSend",this.messageBuffer),this.connectionManager.sendMessages(this.messageBuffer),this.messageBuffer=[])}get connectionProps(){return Object.assign({sequenceNumber:this.lastSequenceNumber},this.connectionManager.connectionProps)}logConnectionIssue(e){var t;Object(w.a)(this.connectionManager.connected,568);const n=this.pending.sort((e,t)=>e.sequenceNumber-t.sequenceNumber);this.logger.sendErrorEvent(Object.assign(Object.assign(Object.assign(Object.assign({},e),{fetchReason:this.fetchReason,lastQueuedSequenceNumber:this.lastQueuedSequenceNumber,lastProcessedSequenceNumber:this.lastProcessedSequenceNumber,lastObserved:this.lastObservedSeqNumber}),this.connectionManager.connectionVerboseProps),{pendingOps:this.pending.length,pendingFirst:null===(t=n[0])||void 0===t?void 0:t.sequenceNumber,haveHandler:void 0!==this.handler,inboundLength:this.inbound.length,inboundPaused:this.inbound.paused}))}connectHandler(e){this.refreshDelayInfo(this.deltaStreamDelayId);const t=this.connectionManager.connectionVerboseProps;t.connectionLastQueuedSequenceNumber=this.lastQueuedSequenceNumber,t.connectionLastObservedSeqNumber=this.lastObservedSeqNumber;const n=e.checkpointSequenceNumber;this._checkpointSequenceNumber=n,void 0!==n&&this.updateLatestKnownOpSeqNumber(n),Object(w.a)(0===this.messageBuffer.length,233),this.emit("connect",e,void 0!==n?this.lastObservedSeqNumber-this.lastSequenceNumber:void 0),void 0!==n?n>this.lastQueuedSequenceNumber&&this.fetchMissingDeltas("AfterConnection"):"read"===e.mode&&this.fetchMissingDeltas("AfterReadConnection")}dispose(){throw new Error("Not implemented.")}async attachOpHandler(e,t,n,r,i="none"){if(this.initSequenceNumber=t,this.lastProcessedSequenceNumber=t,this.baseTerm=n,this.minSequenceNumber=e,this.lastQueuedSequenceNumber=t,this.lastObservedSeqNumber=t,Object(w.a)(void 0===this.handler,226),this.handler=r,Object(w.a)(!!this.handler,227),Object(w.a)(void 0===this.fetchReason,616),!this.closed){if(this._inbound.resume(),this._inboundSignal.resume(),"none"!==i){const e="cached"===i;await this.fetchMissingDeltasCore("DocumentOpen",e,this.lastQueuedSequenceNumber),e&&this.fetchMissingDeltas("DocumentOpen")}Object(w.a)(void 0!==this.fetchReason||0===this.pending.length,617)}}connect(e){var t;const n=null===(t=e.fetchOpsFromStorage)||void 0===t||t;!function(e,t,n){if(e)return!0;const r="string"==typeof n?{eventName:n,category:"error"}:Object.assign({category:"error"},n);t.send(r)}(void 0!==this.handler||!n,this.logger,"CantFetchWithoutBaseline"),n&&this.fetchMissingDeltas(e.reason),this.connectionManager.connect(e.mode)}async getDeltas(e,t,n,r){const i=this.serviceProvider();if(void 0===i)throw new Error("Delta manager is not attached");let s;if(void 0===this.deltaStorage&&(this.deltaStorage=await i.connectToDeltaStorage()),void 0!==t){const n=t-1;if(this.lastQueuedSequenceNumber>=n)return void this.logger.sendPerformanceEvent(Object.assign({reason:this.fetchReason,eventName:"ExtraStorageCall",early:!0,from:e,to:t},this.connectionManager.connectionVerboseProps));s=e=>e.sequenceNumber>=n}else s=e=>e.sequenceNumber>=this.lastObservedSeqNumber;const a=new X.a;let o=!1;const c=e=>{Object(w.a)(e.sequenceNumber===this.lastQueuedSequenceNumber,570),!o&&s(e)&&(a.abort(),this._inbound.off("push",c))};try{this._inbound.on("push",c),Object(w.a)(null===this.closeAbortController.signal.onabort,488),this.closeAbortController.signal.onabort=()=>a.abort();const i=this.deltaStorage.fetchMessages(e,t,a.signal,r,this.fetchReason);for(;;){const e=await i.read();if(e.done)break;try{o=!0,n(e.value)}finally{o=!1}}}finally{this.closeAbortController.signal.onabort=null,this._inbound.off("push",c),Object(w.a)(!o,649)}}close(e){this.closed||(this.closed=!0,this.connectionManager.dispose(e),this.closeAbortController.abort(),this._inbound.clear(),this._inboundSignal.clear(),this._inbound.pause(),this._inboundSignal.pause(),this.pending=[],this.emit("closed",e),this.removeAllListeners())}refreshDelayInfo(e){this.throttlingIdSet.delete(e),0===this.throttlingIdSet.size&&(this.timeTillThrottling=0)}disconnectHandler(e){this.messageBuffer.length=0,this.emit("disconnect",e)}emitDelayInfo(e,t,n){const r=Date.now();if(this.throttlingIdSet.add(e),t>0&&r+t>this.timeTillThrottling){this.timeTillThrottling=r+t;const e=T.e.wrap(n,t/1e3,this.logger);this.emit("throttled",e)}}comparableMessagePayload(e){return`${e.clientId}-${e.type}-${e.minimumSequenceNumber}-${e.referenceSequenceNumber}-${e.timestamp}`}enqueueMessages(e,t,n=!1){var r,i;if(void 0===this.handler)return void(this.pending=this.pending.concat(e));if(Object(w.a)(0===this.pending.length||void 0!==this.fetchReason,489),0===e.length)return;const s=e[0].sequenceNumber,a=e[e.length-1].sequenceNumber;if(a>this.lastQueuedSequenceNumber){let r=s-1;const i=r-this.lastQueuedSequenceNumber;let o,c,u=0,h=0;for(const t of e)t.sequenceNumber===r?u++:t.sequenceNumber!==r+1&&(h++,void 0===o&&(o=r+1)),r=t.sequenceNumber;0!==u||0!==h&&!n||i>0&&void 0===this.fetchReason?c="enqueueMessages":void 0!==this.fetchReason&&this.fetchReason!==t&&s<=this.lastQueuedSequenceNumber+1&&a>this.lastQueuedSequenceNumber&&(c="enqueueMessagesExtraFetch"),void 0!==c&&this.logger.sendPerformanceEvent(Object.assign({eventName:c,reason:t,previousReason:this.prevEnqueueMessagesReason,from:s,to:a+1,length:e.length,fetchReason:this.fetchReason,duplicate:u>0?u:void 0,initialGap:0!==i?i:void 0,gap:h>0?h:void 0,firstMissing:o,dmInitialSeqNumber:this.initialSequenceNumber},this.connectionManager.connectionVerboseProps))}this.updateLatestKnownOpSeqNumber(e[e.length-1].sequenceNumber);const o=null===(r=this.previouslyProcessedMessage)||void 0===r?void 0:r.sequenceNumber;Object(w.a)(void 0===o||o===this.lastQueuedSequenceNumber,236);for(const n of e)if(n.sequenceNumber<=this.lastQueuedSequenceNumber){if((null===(i=this.previouslyProcessedMessage)||void 0===i?void 0:i.sequenceNumber)===n.sequenceNumber){const e=this.comparableMessagePayload(this.previouslyProcessedMessage),t=this.comparableMessagePayload(n);if(e!==t){const r=new k.d("Found two messages with the same sequenceNumber but different payloads",I.a.fileOverwrittenInStorage,{clientId:this.connectionManager.clientId,sequenceNumber:n.sequenceNumber,message1:e,message2:t,driverVersion:void 0});this.close(r)}}}else n.sequenceNumber!==this.lastQueuedSequenceNumber+1?(this.pending.push(n),this.fetchMissingDeltas(t,n.sequenceNumber)):(this.lastQueuedSequenceNumber=n.sequenceNumber,this.previouslyProcessedMessage=n,this._inbound.push(n));this.prevEnqueueMessagesReason=this.pending.length>0?"unknown":t}processInboundMessage(e){const t=Date.now();if(this.lastProcessedMessage=e,Object(w.a)(void 0!==e.clientId||H(e),237),"string"==typeof e.contents&&""!==e.contents&&e.type!==j.a.ClientLeave&&(e.contents=JSON.parse(e.contents)),this.connectionManager.beforeProcessingIncomingOp(e),this.minSequenceNumber>e.minimumSequenceNumber)throw new T.b("Found a lower minimumSequenceNumber (msn) than previously recorded",Object.assign(Object.assign({},Object(T.g)(e)),{clientId:this.connectionManager.clientId}));if(this.minSequenceNumber=e.minimumSequenceNumber,e.sequenceNumber!==this.lastProcessedSequenceNumber+1)throw new T.b("Found a non-Sequential sequenceNumber",Object.assign(Object.assign({},Object(T.g)(e)),{clientId:this.connectionManager.clientId}));if(this.lastProcessedSequenceNumber=e.sequenceNumber,Object(w.a)(this.lastProcessedSequenceNumber<=this.lastObservedSeqNumber,615),void 0===e.term&&(e.term=1),this.baseTerm=e.term,void 0===this.handler)throw new Error("Attempted to process an inbound message without a handler attached");this.handler.process(e);const n=Date.now();this.emit("op",e,n-t)}fetchMissingDeltas(e,t){this.fetchMissingDeltasCore(e,!1,t).catch(e=>{this.logger.sendErrorEvent({eventName:"fetchMissingDeltasException"},e)})}async fetchMissingDeltasCore(e,t,n){var r;if(void 0===this.fetchReason)if(this.closed)this.logger.sendTelemetryEvent({eventName:"fetchMissingDeltasClosedConnection",reason:e});else if(void 0!==this.handler)try{let i=this.lastQueuedSequenceNumber+1;const s=null===(r=this.previouslyProcessedMessage)||void 0===r?void 0:r.sequenceNumber;void 0!==s&&(Object(w.a)(s===this.lastQueuedSequenceNumber,242),Object(w.a)(i>1,243),i--);const a=e+"_fetch";this.fetchReason=a,await this.getDeltas(i,n,e=>{this.refreshDelayInfo(this.deltaStorageDelayId),this.enqueueMessages(e,a)},t)}catch(e){this.logger.sendErrorEvent({eventName:"GetDeltas_Exception"},e),this.close(Object(V.h)(e))}finally{this.refreshDelayInfo(this.deltaStorageDelayId),this.fetchReason=void 0,this.processPendingOps(e)}else Object(w.a)(0===this.lastQueuedSequenceNumber,619)}processPendingOps(e){if(this.closed)return;Object(w.a)(void 0!==this.handler,620);const t=this.pending.sort((e,t)=>e.sequenceNumber-t.sequenceNumber);this.pending=[],this.enqueueMessages(t,e+"_pending",!0),void 0===this.fetchReason&&this.lastQueuedSequenceNumber<this.lastObservedSeqNumber&&this.fetchMissingDeltas("OpsBehind")}updateLatestKnownOpSeqNumber(e){this.lastObservedSeqNumber<e&&(this.lastObservedSeqNumber=e)}}var re=n(229);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class ie extends re.a{constructor(e){super(e),this.queue=e}get paused(){return this.queue.paused}get length(){return this.queue.length}get idle(){return this.queue.idle}peek(){return this.queue.peek()}toArray(){return this.queue.toArray()}async systemPause(){return this.pause()}async pause(){return this.queue.pause()}async systemResume(){return this.resume()}async resume(){this.queue.resume()}async waitTillProcessingDone(){return this.queue.waitTillProcessingDone()}}class se extends re.a{constructor(e){super(e),this.deltaManager=e,this.inbound=new ie(e.inbound),this.outbound=new ie(e.outbound),this.inboundSignal=new ie(e.inboundSignal)}get IDeltaSender(){return this}get minimumSequenceNumber(){return this.deltaManager.minimumSequenceNumber}get lastSequenceNumber(){return this.deltaManager.lastSequenceNumber}get lastMessage(){return this.deltaManager.lastMessage}get lastKnownSeqNumber(){return this.deltaManager.lastKnownSeqNumber}get initialSequenceNumber(){return this.deltaManager.initialSequenceNumber}get hasCheckpointSequenceNumber(){return this.deltaManager.hasCheckpointSequenceNumber}get clientDetails(){return this.deltaManager.clientDetails}get version(){return this.deltaManager.version}get maxMessageSize(){return this.deltaManager.maxMessageSize}get serviceConfiguration(){return this.deltaManager.serviceConfiguration}get active(){return this.deltaManager.active}get readOnlyInfo(){return this.deltaManager.readOnlyInfo}dispose(){this.inbound.dispose(),this.outbound.dispose(),this.inboundSignal.dispose(),super.dispose()}close(){return this.deltaManager.close()}submitSignal(e){return this.deltaManager.submitSignal(e)}flush(){return this.deltaManager.flush()}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 *
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY
 */var ae,oe=n(232);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */!function(e){e[e.Disconnected=0]="Disconnected",e[e.Connecting=1]="Connecting",e[e.Connected=2]="Connected"}(ae||(ae={}));class ce{constructor(e,t){var n;this.handler=e,this.logger=t,this._connectionState=ae.Disconnected,this.prevClientLeftTimer=new oe.b(null!==(n=this.handler.maxClientLeaveWaitTime)&&void 0!==n?n:3e5,()=>{Object(w.a)(!this.connected,684),this.applyForConnectedState("timeout")}),this.joinOpTimer=new oe.b(45e3,()=>{this.connectionState===ae.Connecting&&this.handler.logConnectionIssue("NoJoinOp")})}get connectionState(){return this._connectionState}get connected(){return this.connectionState===ae.Connected}get clientId(){return this._clientId}get pendingClientId(){return this._pendingClientId}startJoinOpTimer(){Object(w.a)(!this.joinOpTimer.hasTimer,564),this.joinOpTimer.start()}stopJoinOpTimer(){Object(w.a)(this.joinOpTimer.hasTimer,565),this.joinOpTimer.clear()}dispose(){Object(w.a)(!this.joinOpTimer.hasTimer,677),this.prevClientLeftTimer.clear()}containerSaved(){this.prevClientLeftTimer.hasTimer&&(this.prevClientLeftTimer.clear(),this.applyForConnectedState("containerSaved"))}receivedAddMemberEvent(e){e===this.pendingClientId&&(this.joinOpTimer.hasTimer?this.stopJoinOpTimer():this.handler.logConnectionIssue("ReceivedJoinOp"),this.prevClientLeftTimer.hasTimer&&(this.waitEvent=d.c.start(this.logger,{eventName:"WaitBeforeClientLeave",waitOnClientId:this._clientId,hadOutstandingOps:this.handler.shouldClientJoinWrite()})),this.applyForConnectedState("addMemberEvent"))}applyForConnectedState(e){var t;const n=this.handler.quorumClients();Object(w.a)(void 0!==n,566),this.pendingClientId===this.clientId||void 0===this.pendingClientId||void 0===n.getMember(this.pendingClientId)||this.prevClientLeftTimer.hasTimer?this.logger.sendTelemetryEvent({eventName:"connectedStateRejected",category:"timeout"===e?"error":"generic",source:e,pendingClientId:this.pendingClientId,clientId:this.clientId,hasTimer:this.prevClientLeftTimer.hasTimer,inQuorum:void 0!==n&&void 0!==this.pendingClientId&&void 0!==n.getMember(this.pendingClientId)}):(null===(t=this.waitEvent)||void 0===t||t.end({source:e}),this.setConnectionState(ae.Connected))}receivedRemoveMemberEvent(e){this.clientId===e&&(this.prevClientLeftTimer.clear(),this.applyForConnectedState("removeMemberEvent"))}receivedDisconnectEvent(e){this.joinOpTimer.hasTimer&&this.stopJoinOpTimer(),this.setConnectionState(ae.Disconnected,e)}receivedConnectEvent(e,t){const n=this._connectionState;this._connectionState=ae.Connecting,this._pendingClientId=t.clientId,this.handler.logConnectionStateChangeTelemetry(ae.Connecting,n);const r=this.handler.quorumClients();void 0!==(null==r?void 0:r.getMember(t.clientId))||"read"===e?(Object(w.a)(!this.prevClientLeftTimer.hasTimer,678),this.setConnectionState(ae.Connected)):"write"===e&&this.startJoinOpTimer()}setConnectionState(e,t){if(this.connectionState===e)return void this.logger.sendErrorEvent({eventName:"setConnectionStateSame",value:e});const n=this._connectionState;this._connectionState=e;const r=this.handler.quorumClients();let i;void 0!==this._clientId&&(i=null==r?void 0:r.getMember(this._clientId)),e===ae.Connected?(Object(w.a)(n===ae.Connecting,472),void 0!==i&&(i.shouldHaveLeft=!0),this._clientId=this.pendingClientId):e===ae.Disconnected&&(this._pendingClientId=void 0,void 0!==i&&this.handler.shouldClientJoinWrite()&&!1===this.prevClientLeftTimer.hasTimer?this.prevClientLeftTimer.restart():this.logger.sendTelemetryEvent({eventName:"noWaitOnDisconnected",inQuorum:void 0!==i,hasTimer:this.prevClientLeftTimer.hasTimer,shouldClientJoinWrite:this.handler.shouldClientJoinWrite()})),this.handler.logConnectionStateChangeTelemetry(this._connectionState,n,t),this.handler.connectionStateChanged()}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class ue{constructor(e,t){this.internalStorageService=e,this.logger=t,this._disposed=!1}get policies(){return this.internalStorageService.policies}get disposed(){return this._disposed}dispose(){this._disposed=!0}get repositoryUrl(){return this.internalStorageService.repositoryUrl}async getSnapshotTree(e){return this.runWithRetry(async()=>this.internalStorageService.getSnapshotTree(e),"storage_getSnapshotTree")}async readBlob(e){return this.runWithRetry(async()=>this.internalStorageService.readBlob(e),"storage_readBlob")}async getVersions(e,t){return this.runWithRetry(async()=>this.internalStorageService.getVersions(e,t),"storage_getVersions")}async write(e,t,n,r){return this.runWithRetry(async()=>this.internalStorageService.write(e,t,n,r),"storage_write")}async uploadSummaryWithContext(e,t){return Object(w.a)(0===t.referenceSequenceNumber==(void 0===t.ackHandle),593),0!==t.referenceSequenceNumber?this.internalStorageService.uploadSummaryWithContext(e,t):this.runWithRetry(async()=>this.internalStorageService.uploadSummaryWithContext(e,t),"storage_uploadSummaryWithContext")}async downloadSummary(e){return this.runWithRetry(async()=>this.internalStorageService.downloadSummary(e),"storage_downloadSummary")}async createBlob(e){return this.runWithRetry(async()=>this.internalStorageService.createBlob(e),"storage_createBlob")}checkStorageDisposed(){if(this._disposed)throw new T.d("Storage Service is disposed. Cannot retry",{canRetry:!1})}async runWithRetry(e,t){return D(e,t,this.logger,{onRetry:()=>this.checkStorageDisposed()})}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class he{constructor(e,t){this.internalStorageService=e,this.generateProtocolTree=t,this.getSnapshotTree=this.internalStorageService.getSnapshotTree.bind(this.internalStorageService),this.getVersions=this.internalStorageService.getVersions.bind(this.internalStorageService),this.write=this.internalStorageService.write.bind(this.internalStorageService),this.createBlob=this.internalStorageService.createBlob.bind(this.internalStorageService),this.readBlob=this.internalStorageService.readBlob.bind(this.internalStorageService),this.downloadSummary=this.internalStorageService.downloadSummary.bind(this.internalStorageService),this.dispose=this.internalStorageService.dispose.bind(this.internalStorageService)}get policies(){return this.internalStorageService.policies}get repositoryUrl(){return this.internalStorageService.repositoryUrl}get disposed(){return this.internalStorageService.disposed}async uploadSummaryWithContext(e,t){return this.internalStorageService.uploadSummaryWithContext(A(e,this.generateProtocolTree()),t)}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class le{constructor(e){this.storageGetter=e,this.blobContents={}}loadSnapshotForRehydratingContainer(e){this.getBlobContents(e)}getBlobContents(e){for(const[t,n]of Object.entries(e.blobsContents))this.blobContents[t]=n;for(const[t,n]of Object.entries(e.trees))this.getBlobContents(n)}get policies(){try{return this.storageGetter().policies}catch(e){}}get repositoryUrl(){return this.storageGetter().repositoryUrl}async getSnapshotTree(e){return this.storageGetter().getSnapshotTree(e)}async readBlob(e){const t=this.blobContents[e];return void 0!==t?t:this.storageGetter().readBlob(e)}async getVersions(e,t){return this.storageGetter().getVersions(e,t)}async write(e,t,n,r){return this.storageGetter().write(e,t,n,r)}async uploadSummaryWithContext(e,t){return this.storageGetter().uploadSummaryWithContext(e,t)}async downloadSummary(e){return this.storageGetter().downloadSummary(e)}async createBlob(e){return this.storageGetter().createBlob(e)}}class de{constructor(e,t){this.blobStorage=e,this.logger=t,this.getSnapshotTree=this.notCalled,this.getVersions=this.notCalled,this.write=this.notCalled,this.uploadSummaryWithContext=this.notCalled,this.downloadSummary=this.notCalled}async createBlob(e){return this.blobStorage.createBlob(e)}async readBlob(e){return this.blobStorage.readBlob(e)}get policies(){return this.notCalled()}get repositoryUrl(){return this.notCalled()}notCalled(){try{throw new Error("BlobOnlyStorage not implemented method used")}catch(e){throw this.logger.sendErrorEvent({eventName:"BlobOnlyStorageWrongCall"},e),e}}}var me=n(33),pe=n(239);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function fe(e){var t;const n=Object(y.parse)(e,!0);if("string"!=typeof n.pathname)throw new Error("Failed to parse pathname");const r=null!==(t=n.search)&&void 0!==t?t:"",i=/^\/([^/]*\/[^/]*)(\/?.*)$/.exec(n.pathname);return 3===(null==i?void 0:i.length)?{id:i[1],path:i[2],query:r,version:n.query.version}:void 0}function ge(e,t){const n={type:P.a.Tree,tree:Object.assign({},t.tree)};n.tree[".protocol"]=e;return function e(t){const n={blobs:{},blobsContents:{},trees:{},id:Object(o.a)(),unreferenced:t.unreferenced},r=Object.keys(t.tree);for(const i of r){const r=t.tree[i];switch(r.type){case P.a.Tree:n.trees[i]=e(r);break;case P.a.Attachment:n.blobs[i]=r.id;break;case P.a.Blob:{const e=Object(o.a)();n.blobs[i]=e;const t="string"==typeof r.content?Object(me.e)(r.content,"utf8"):Object(pe.a)(r.content);n.blobsContents[e]=t;break}case P.a.Handle:throw new Error("No handles should be there in summary in detached container!!");default:Object(C.a)(r,"Unknown tree type "+r.type)}}return n}(n)}function ye(e){return".protocol"in e.trees?e.trees[".protocol"]:e}var ve=n(238);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class be extends re.a{constructor(e){super(e),super.setMaxListeners(50),this.propose=Object(ve.a)(this,e.propose.bind(e)),this.has=Object(ve.a)(this,e.has.bind(e)),this.get=Object(ve.a)(this,e.get.bind(e)),this.getMembers=Object(ve.a)(this,e.getMembers.bind(e)),this.getMember=Object(ve.a)(this,e.getMember.bind(e))}}function Se(e){return[["code",{key:"code",value:e,approvalSequenceNumber:0,commitSequenceNumber:0,sequenceNumber:0}]]}var we=n(593);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class Ce{constructor(e,t=2e3,n=50){this.submit=e,this.NoopCountFrequency=n,this.opsCountSinceNoop=0,t!==1/0&&(this.timer=new oe.b(t,()=>{0!==this.opsCountSinceNoop&&this.submitNoop(!1)}))}scheduleSequenceNumberUpdate(e,t){t?this.submitNoop(!0):Object(we.a)(e)&&(this.opsCountSinceNoop++,this.opsCountSinceNoop>=this.NoopCountFrequency?this.submitNoop(!1):void 0!==this.timer&&(1===this.opsCountSinceNoop&&this.timer.restart(),Object(w.a)(this.timer.hasTimer,578)))}submitNoop(e){this.submit(j.a.NoOp,e?"":null),Object(w.a)(0===this.opsCountSinceNoop,579)}stopSequenceNumberUpdate(){this.opsCountSinceNoop=0}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */function xe(e,t,n){var r,i;const s=Object.assign({},t),a=n.online;if(s.online="string"==typeof a?a:k.e[Object(k.k)()],"object"==typeof navigator&&null!==navigator){const e=navigator,t=null!==(i=null!==(r=e.connection)&&void 0!==r?r:e.mozConnection)&&void 0!==i?i:e.webkitConnection;null!==t&&"object"==typeof t&&(s.connectionType=t.type)}s.category=Object(k.f)(n)?"generic":"error",e.sendTelemetryEvent(s,n)}function Ee(e){return new Promise(t=>{let n=t,r=e;Object(k.k)()===k.e.Offline&&void 0!==(null===window||void 0===window?void 0:window.addEventListener)&&(n=()=>{t(),window.removeEventListener("online",n)},window.addEventListener("online",n,!1),r=Math.max(e,3e4)),setTimeout(n,r)})}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */var Oe;!function(e){e.DocRead="doc:read",e.DocWrite="doc:write",e.SummaryWrite="summary:write"}(Oe||(Oe={}));
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
const Te={fatalConnectError:!0};class Pe extends i.a{constructor(){super(...arguments),this.clientId="storage-only client",this.claims={scopes:[Oe.DocRead]},this.mode="read",this.existing=!0,this.maxMessageSize=0,this.version="",this.initialMessages=[],this.initialSignals=[],this.initialClients=[],this.serviceConfiguration={maxMessageSize:0,blockSize:0,summary:void 0},this.checkpointSequenceNumber=void 0,this._disposed=!1}submit(e){this.emit("nack",this.clientId,e.map(e=>({operation:e,content:{message:"Cannot submit with storage-only connection",code:403}})))}submitSignal(e){this.emit("nack",this.clientId,{operation:e,content:{message:"Cannot submit signal with storage-only connection",code:403}})}get disposed(){return this._disposed}dispose(){this._disposed=!0}}class Ae{constructor(e,t,n,r,i){this.serviceProvider=e,this.client=t,this.logger=r,this.props=i,this.pendingConnection=!1,this._forceReadonly=!1,this.pendingReconnect=!1,this.clientSequenceNumber=0,this.clientSequenceNumberObserved=0,this.trailingNoopCount=0,this.connectFirstConnection=!0,this._connectionVerboseProps={},this._connectionProps={},this.closed=!1,this.opHandler=(e,t)=>{const n=Array.isArray(t)?t:[t];this.props.incomingOpHandler(n,"opHandler")},this.nackHandler=(e,t)=>{const n=t[0];if(!0===this._readonlyPermissions)return void this.props.closeHandler(Object(k.h)("writeOnReadOnlyDocument",{driverVersion:void 0}));const r=function(e){const t=`Nack (${e.type}): ${e.message}`,n=403!==e.code,r=void 0!==e.retryAfter?1e3*e.retryAfter:void 0;return Object(k.g)(t,{canRetry:n,retryAfterMs:r},{statusCode:e.code,driverVersion:void 0})}(n.content);r.canRetry?this.reconnectOnError("write",r):this.props.closeHandler(r)},this.disconnectHandlerInternal=e=>{this.reconnectOnError(this.defaultReconnectionMode,e)},this.errorHandler=e=>{this.reconnectOnError(this.defaultReconnectionMode,e)},this.clientDetails=this.client.details,this.defaultReconnectionMode=this.client.mode,this._reconnectMode=n?Q.Enabled:Q.Never,this._outbound=new te(e=>{if(void 0===this.connection)throw new Error("Attempted to submit an outbound message without connection");this.connection.submit(e)}),this._outbound.on("error",e=>{this.props.closeHandler(Object(V.h)(e))})}get connectionVerboseProps(){return this._connectionVerboseProps}get connectionMode(){var e,t;return null!==(t=null===(e=this.connection)||void 0===e?void 0:e.mode)&&void 0!==t?t:"read"}get connected(){return void 0!==this.connection}get clientId(){var e;return null===(e=this.connection)||void 0===e?void 0:e.clientId}get reconnectMode(){return this._reconnectMode}get maxMessageSize(){var e,t,n;return null!==(n=null===(t=null===(e=this.connection)||void 0===e?void 0:e.serviceConfiguration)||void 0===t?void 0:t.maxMessageSize)&&void 0!==n?n:16384}get version(){if(void 0===this.connection)throw new Error("Cannot check version without a connection");return this.connection.version}get serviceConfiguration(){var e;return null===(e=this.connection)||void 0===e?void 0:e.serviceConfiguration}get scopes(){var e;return null===(e=this.connection)||void 0===e?void 0:e.claims.scopes}get outbound(){return this._outbound}get connectionProps(){return void 0!==this.connection?this._connectionProps:Object.assign(Object.assign({},this._connectionProps),{sentOps:this.clientSequenceNumber})}shouldJoinWrite(){return this.clientSequenceNumberObserved<this.clientSequenceNumber-this.trailingNoopCount}get readonly(){return!!this._forceReadonly||this._readonlyPermissions}get readOnlyInfo(){const e=void 0!==this.connection&&this.connection instanceof Pe;return e||this._forceReadonly||!0===this._readonlyPermissions?{readonly:!0,forced:this._forceReadonly,permissions:this._readonlyPermissions,storageOnly:e}:{readonly:this._readonlyPermissions}}static detailsFromConnection(e){return{claims:e.claims,clientId:e.clientId,existing:e.existing,checkpointSequenceNumber:e.checkpointSequenceNumber,get initialClients(){return e.initialClients},mode:e.mode,serviceConfiguration:e.serviceConfiguration,version:e.version}}dispose(e){if(this.closed)return;this.closed=!0,this.pendingConnection=!1,this._reconnectMode=Q.Never,this._outbound.clear();const t=void 0!==e?`Closing DeltaManager (${e.message})`:"Closing DeltaManager";this.disconnectFromDeltaStream(t),this.set_readonlyPermissions(!0)}setAutoReconnect(e){Object(w.a)(e!==Q.Never&&this._reconnectMode!==Q.Never,632),this._reconnectMode=e,e!==Q.Enabled&&this.disconnectFromDeltaStream("setAutoReconnect")}forceReadonly(e){e!==this._forceReadonly&&this.logger.sendTelemetryEvent({eventName:"ForceReadOnly",value:e});const t=this.readonly;if(this._forceReadonly=e,t!==this.readonly){Object(w.a)(this._reconnectMode!==Q.Never,633);let e=!1;!0===this.readonly&&(this.shouldJoinWrite()&&this.logger.sendErrorEvent({eventName:"ForceReadonlyPendingChanged"}),e=this.disconnectFromDeltaStream("Force readonly")),this.props.readonlyChangeHandler(this.readonly),e&&this.triggerConnect("read")}}set_readonlyPermissions(e){const t=this.readonly;this._readonlyPermissions=e,t!==this.readonly&&this.props.readonlyChangeHandler(this.readonly)}connect(e){this.connectCore(e).catch(e=>{const t=Object(V.h)(e,{props:Te});this.props.closeHandler(t)})}async connectCore(e){var t;if(Object(w.a)(!this.closed,618),void 0!==this.connection||this.pendingConnection)return;let n=null!=e?e:this.defaultReconnectionMode;this.shouldJoinWrite()&&(n="write");const r=this.serviceProvider();let i;if(Object(w.a)(void 0!==r,679),!0===(null===(t=r.policies)||void 0===t?void 0:t.storageOnly))return i=new Pe,this.pendingConnection=!0,this.setupNewSuccessfulConnection(i,"read"),void Object(w.a)(!this.pendingConnection,691);this.pendingConnection=!0;let s=1e3,a=0;const o=h.a.now();let c;for(;void 0===i;){if(this.closed)throw new Error("Attempting to connect a closed DeltaManager");a++;try{this.client.mode=n,i=await r.connectToDeltaStream(this.client),i.disposed&&(this.logger.sendTelemetryEvent({eventName:"ReceivedClosedConnection"}),i=void 0)}catch(e){if("object"==typeof e&&null!==e&&(null==e?void 0:e.errorType)===k.b.errorType){i=new Pe,n="read";break}if(!Object(k.f)(e)){const t=Object(V.h)(e,{props:Te});throw this.props.closeHandler(t),t}xe(this.logger,{attempts:a,delay:s,eventName:"DeltaConnectionFailureToConnect",duration:d.f.formatTick(h.a.now()-o)},e),c=e;const t=Object(k.i)(e);s=null!=t?t:Math.min(2*s,8e3),void 0!==t&&this.props.reconnectionDelayHandler(t,e),await Ee(s)}}a>1&&xe(this.logger,{eventName:"MultipleDeltaConnectionFailures",attempts:a,duration:d.f.formatTick(h.a.now()-o)},c),this.setupNewSuccessfulConnection(i,n)}triggerConnect(e){Object(w.a)(void 0===this.connection,569),this.reconnectMode===Q.Enabled&&this.connect(e)}disconnectFromDeltaStream(e){if(this.pendingReconnect=!1,void 0===this.connection)return!1;Object(w.a)(!this.pendingConnection,635);const t=this.connection;return this.connection=void 0,t.off("op",this.opHandler),t.off("signal",this.props.signalHandler),t.off("nack",this.nackHandler),t.off("disconnect",this.disconnectHandlerInternal),t.off("error",this.errorHandler),t.off("pong",this.props.pongHandler),this._outbound.pause(),this._outbound.clear(),this.props.disconnectHandler(e),t.dispose(),this._connectionVerboseProps={},!0}setupNewSuccessfulConnection(e,t){Object(w.a)(void 0===this.connection,230),Object(w.a)(!e.disposed,650),this.pendingConnection?this.pendingConnection=!1:Object(w.a)(this.closed,639),this.connection=e;const n=!e.claims.scopes.includes(Oe.DocWrite);if(Object(w.a)("read"===t||n===("read"===this.connectionMode),231),Object(w.a)(!n||"read"===this.connectionMode,232),this.set_readonlyPermissions(n),this.closed)return void this.disconnectFromDeltaStream("ConnectionManager already closed");this._outbound.resume(),e.on("op",this.opHandler),e.on("signal",this.props.signalHandler),e.on("nack",this.nackHandler),e.on("disconnect",this.disconnectHandlerInternal),e.on("error",this.errorHandler),e.on("pong",this.props.pongHandler);const r=e.initialMessages.sort((e,t)=>e.sequenceNumber-t.sequenceNumber);let i=e.checkpointSequenceNumber;this._connectionVerboseProps={clientId:e.clientId,mode:e.mode},this._connectionProps={},void 0!==e.relayServiceAgent&&(this._connectionVerboseProps.relayServiceAgent=e.relayServiceAgent,this._connectionProps.relayServiceAgent=e.relayServiceAgent),this._connectionProps.socketDocumentId=e.claims.documentId,this._connectionProps.connectionMode=e.mode;let s=-1;if(0!==r.length&&(this._connectionVerboseProps.connectionInitialOpsFrom=r[0].sequenceNumber,s=r[r.length-1].sequenceNumber,this._connectionVerboseProps.connectionInitialOpsTo=s+1,(void 0===i||i<s)&&(i=s)),this.props.incomingOpHandler(r,this.connectFirstConnection?"InitialOps":"ReconnectOps"),void 0!==e.initialSignals)for(const t of e.initialSignals)this.props.signalHandler(t);const a=Ae.detailsFromConnection(e);a.checkpointSequenceNumber=i,this.props.connectHandler(a),this.connectFirstConnection=!1}reconnectOnError(e,t){this.reconnect(e,t.message,t).catch(this.props.closeHandler)}async reconnect(e,t,n){if(Object(w.a)(void 0!==this.connection,235),this.disconnectFromDeltaStream(t),void 0===n||n.canRetry||this.logger.sendTelemetryEvent({eventName:"reconnectingDespiteFatalError",reconnectMode:this.reconnectMode},n),this.reconnectMode===Q.Never&&this.props.closeHandler(),this.closed||this.reconnectMode!==Q.Enabled)return;const r=Object(k.i)(n);void 0!==n&&void 0!==r&&(this.props.reconnectionDelayHandler(r,n),await Ee(r)),this.triggerConnect(e)}prepareMessageToSend(e){var t,n;if(!0!==this.readonly)return Object(w.a)(!!this.connection,228),this.lastSubmittedClientId!==(null===(t=this.connection)||void 0===t?void 0:t.clientId)&&(this.lastSubmittedClientId=null===(n=this.connection)||void 0===n?void 0:n.clientId,this.clientSequenceNumber=0,this.clientSequenceNumberObserved=0),e.type===j.a.NoOp?this.trailingNoopCount++:this.trailingNoopCount=0,Object.assign(Object.assign({},e),{clientSequenceNumber:++this.clientSequenceNumber});{Object(w.a)(!0===this.readOnlyInfo.readonly,496);const e=new T.d("deltaManagerReadonlySubmit",void 0,{readonly:this.readOnlyInfo.readonly,forcedReadonly:this.readOnlyInfo.forced,readonlyPermissions:this.readOnlyInfo.permissions,storageOnly:this.readOnlyInfo.storageOnly});this.props.closeHandler(e)}}submitSignal(e){void 0!==this.connection?this.connection.submitSignal(e):this.logger.sendErrorEvent({eventName:"submitSignalDisconnected"})}sendMessages(e){Object(w.a)(this.connected,692),"read"!==this.connectionMode?(Object(w.a)(!this.pendingReconnect,693),this._outbound.push(e)):this.pendingReconnect||(this.pendingReconnect=!0,Promise.resolve().then(async()=>{this.pendingReconnect&&await this.reconnect("write","Switch to write")}).catch(()=>{}))}beforeProcessingIncomingOp(e){if(Object(w.a)(this.clientId!==e.clientId||this.lastSubmittedClientId===e.clientId,238),void 0!==this.lastSubmittedClientId&&this.lastSubmittedClientId===e.clientId){const t=e.clientSequenceNumber;Object(w.a)(this.clientSequenceNumberObserved<t,239),Object(w.a)(t<=this.clientSequenceNumber,240),this.clientSequenceNumberObserved=t}if(e.type===j.a.ClientLeave){const t=e;JSON.parse(t.data)===this.clientId&&(this.logger.sendPerformanceEvent({eventName:"ReadConnectionTransition"}),this.reconnect("read","Switch to read").catch(e=>{this.logger.sendErrorEvent({eventName:"SwitchToReadConnection"},e)}))}}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class Ne extends W.a{constructor(e,t){var n;super((e,t)=>{this.mc.logger.sendErrorEvent({eventName:"ContainerEventHandlerException",name:"string"==typeof e?e:void 0},t)}),this.loader=e,this._canReconnect=!0,this._lifecycleState="created",this._attachState=x.a.Detached,this.resumedOpProcessingAfterLoad=!1,this.firstConnection=!0,this.connectionTransitionTimes=[],this.messageCountAfterDisconnection=0,this.attachStarted=!1,this._dirtyContainer=!1,this.setAutoReconnectTime=h.a.now(),this._audience=new K,this.clientDetailsOverride=t.clientDetailsOverride,this._resolvedUrl=t.resolvedUrl,void 0!==t.canReconnect&&(this._canReconnect=t.canReconnect);const r=this.client.details.type,i=`${this.client.details.capabilities.interactive?"interactive":"noninteractive"}${void 0!==r&&""!==r?"/"+r:""}`;this.subLogger=d.a.create(e.services.subLogger,void 0,{all:{clientType:i,containerId:Object(o.a)(),docId:()=>{var e,t;return null!==(t=null===(e=this._resolvedUrl)||void 0===e?void 0:e.id)&&void 0!==t?t:void 0},containerAttachState:()=>this._attachState,containerLifecycleState:()=>this._lifecycleState,containerConnectionState:()=>ae[this.connectionState]},error:{dmInitialSeqNumber:()=>{var e;return null===(e=this._deltaManager)||void 0===e?void 0:e.initialSequenceNumber},dmLastProcessedSeqNumber:()=>{var e;return null===(e=this._deltaManager)||void 0===e?void 0:e.lastSequenceNumber},dmLastKnownSeqNumber:()=>{var e;return null===(e=this._deltaManager)||void 0===e?void 0:e.lastKnownSeqNumber},containerLoadedFromVersionId:()=>{var e;return null===(e=this.loadedFromVersion)||void 0===e?void 0:e.id},containerLoadedFromVersionDate:()=>{var e;return null===(e=this.loadedFromVersion)||void 0===e?void 0:e.date},dmLastMsqSeqNumber:()=>{var e,t;return null===(t=null===(e=this.deltaManager)||void 0===e?void 0:e.lastMessage)||void 0===t?void 0:t.sequenceNumber},dmLastMsqSeqTimestamp:()=>{var e,t;return null===(t=null===(e=this.deltaManager)||void 0===e?void 0:e.lastMessage)||void 0===t?void 0:t.timestamp},dmLastMsqSeqClientId:()=>{var e,t;return null===(t=null===(e=this.deltaManager)||void 0===e?void 0:e.lastMessage)||void 0===t?void 0:t.clientId},connectionStateDuration:()=>h.a.now()-this.connectionTransitionTimes[this.connectionState]}}),this.mc=Object(u.c)(d.a.create(this.subLogger,"Container"));const s=null!==(n=this.mc.config.getBoolean("Fluid.Container.summarizeProtocolTree"))&&void 0!==n?n:this.loader.services.options.summarizeProtocolTree;this.options=Object.assign(Object.assign({},this.loader.services.options),{summarizeProtocolTree:s}),this.connectionStateHandler=new ce({quorumClients:()=>{var e;return null===(e=this._protocolHandler)||void 0===e?void 0:e.quorum},logConnectionStateChangeTelemetry:(e,t,n)=>this.logConnectionStateChangeTelemetry(e,t,n),shouldClientJoinWrite:()=>this._deltaManager.connectionManager.shouldJoinWrite(),maxClientLeaveWaitTime:this.loader.services.options.maxClientLeaveWaitTime,logConnectionIssue:e=>{this._deltaManager.logConnectionIssue({eventName:e,duration:h.a.now()-this.connectionTransitionTimes[ae.Connecting]})},connectionStateChanged:()=>{this.loaded&&this.propagateConnectionState()}},this.mc.logger),this.on("saved",()=>{this.connectionStateHandler.containerSaved()}),this._deltaManager=this.createDeltaManager(),this._storage=new le(()=>{if(this.attachState!==x.a.Attached){if(void 0!==this.loader.services.detachedBlobStorage)return new de(this.loader.services.detachedBlobStorage,this.mc.logger);throw this.mc.logger.sendErrorEvent({eventName:"NoRealStorageInDetachedContainer"}),new Error("Real storage calls not allowed in Unattached container")}return this.storageService});"object"==typeof document&&null!==document&&"function"==typeof document.addEventListener&&null!==document.addEventListener&&(this.lastVisible=document.hidden?h.a.now():void 0,this.visibilityEventHandler=()=>{document.hidden?this.lastVisible=h.a.now():setTimeout(()=>{this.lastVisible=void 0},0)},document.addEventListener("visibilitychange",this.visibilityEventHandler)),this.on("newListener",(e,t)=>{Promise.resolve().then(()=>{switch(e){case"dirty":this._dirtyContainer&&t();break;case"saved":this._dirtyContainer||t();break;case G.a:this.connected&&t(this.clientId);break;case G.b:this.connected||t()}}).catch(e=>{this.mc.logger.sendErrorEvent({eventName:"RaiseConnectedEventError"},e)})})}static async load(e,t,n){const r=new Ne(e,{clientDetailsOverride:t.clientDetailsOverride,resolvedUrl:t.resolvedUrl,canReconnect:t.canReconnect});return d.c.timedExecAsync(r.mc.logger,{eventName:"Load"},async e=>new Promise((i,s)=>{var a;r._lifecycleState="loading";const o=t.version;Object(w.a)(void 0===n||void 0===t.loadMode,481);const c=null!==(a=t.loadMode)&&void 0!==a?a:{opsBeforeReturn:"cached"},u=e=>{s(null!=e?e:new T.d("Container closed without error during load"))};r.on("closed",u),r.load(o,c,n).finally(()=>{r.removeListener("closed",u)}).then(n=>{e.end(Object.assign(Object.assign({},n),t.loadMode)),i(r)},e=>{const t=Object(V.h)(e);r.close(t),u(t)})}),{start:!0,end:!0,cancel:"generic"})}static async createDetached(e,t){const n=new Ne(e,{});return d.c.timedExecAsync(n.mc.logger,{eventName:"CreateDetached"},async e=>(n._lifecycleState="loading",await n.createDetached(t),n),{start:!0,end:!0,cancel:"generic"})}static async rehydrateDetachedFromSnapshot(e,t){const n=new Ne(e,{});return d.c.timedExecAsync(n.mc.logger,{eventName:"RehydrateDetachedFromSnapshot"},async e=>{const r=JSON.parse(t);return n._lifecycleState="loading",await n.rehydrateDetachedFromSnapshot(r),n},{start:!0,end:!0,cancel:"generic"})}get loaded(){return"created"!==this._lifecycleState&&"loading"!==this._lifecycleState}set loaded(e){Object(w.a)(e,637),Object(w.a)("created"!==this._lifecycleState,638),"loading"===this._lifecycleState&&(this._lifecycleState="loaded")}get closed(){return"closing"===this._lifecycleState||"closed"===this._lifecycleState}get storage(){return this._storage}get storageService(){if(void 0===this._storageService)throw new Error("Attempted to access storageService before it was defined");return this._storageService}get context(){if(void 0===this._context)throw new T.d("Attempted to access context before it was defined");return this._context}get protocolHandler(){if(void 0===this._protocolHandler)throw new Error("Attempted to access protocolHandler before it was defined");return this._protocolHandler}get connectionMode(){return this._deltaManager.connectionManager.connectionMode}get IFluidRouter(){return this}get resolvedUrl(){return this._resolvedUrl}get loadedFromVersion(){return this._loadedFromVersion}get readOnlyInfo(){return this._deltaManager.readOnlyInfo}get closeSignal(){return this._deltaManager.closeAbortController.signal}forceReadonly(e){this._deltaManager.connectionManager.forceReadonly(e)}get deltaManager(){return this._deltaManager}get connectionState(){return this.connectionStateHandler.connectionState}get connected(){return this.connectionStateHandler.connected}get serviceConfiguration(){return this._deltaManager.serviceConfiguration}get clientId(){return this.connectionStateHandler.clientId}get scopes(){return this._deltaManager.connectionManager.scopes}get clientDetails(){return this._deltaManager.clientDetails}getSpecifiedCodeDetails(){return this.getCodeDetailsFromQuorum()}getLoadedCodeDetails(){var e;return null===(e=this._context)||void 0===e?void 0:e.codeDetails}get audience(){return this._audience}get isDirty(){return this._dirtyContainer}get serviceFactory(){return this.loader.services.documentServiceFactory}get urlResolver(){return this.loader.services.urlResolver}get scope(){return this.loader.services.scope}get codeLoader(){return this.loader.services.codeLoader}getQuorum(){return this.protocolHandler.quorum}close(e){var t,n,r,i;if(!this.closed)try{this._lifecycleState="closing";try{this._deltaManager.close(e),null===(t=this._protocolHandler)||void 0===t||t.close(),this.connectionStateHandler.dispose(),null===(n=this._context)||void 0===n||n.dispose(void 0!==e?new Error(e.message):void 0),Object(w.a)(this.connectionState===ae.Disconnected,207),null===(r=this._storageService)||void 0===r||r.dispose(),null===(i=this.service)||void 0===i||i.dispose(e)}catch(e){this.mc.logger.sendErrorEvent({eventName:"ContainerCloseException"},e)}this.mc.logger.sendTelemetryEvent({eventName:"ContainerClose",category:void 0===e?"generic":"error"},e),this.emit("closed",e),this.removeAllListeners(),void 0!==this.visibilityEventHandler&&document.removeEventListener("visibilitychange",this.visibilityEventHandler)}finally{this._lifecycleState="closed"}}closeAndGetPendingLocalState(){Object(w.a)(this.attachState===x.a.Attached,209),Object(w.a)(void 0!==this.resolvedUrl&&"fluid"===this.resolvedUrl.type,210);const e={pendingRuntimeState:this.context.getPendingLocalState(),url:this.resolvedUrl.url};return this.close(),JSON.stringify(e)}get attachState(){return this._attachState}serialize(){Object(w.a)(this.attachState===x.a.Detached,211);const e=A(this.context.createSummary(),this.captureProtocolSummary());return this.loader.services.detachedBlobStorage&&this.loader.services.detachedBlobStorage.size>0&&(e.tree[".hasAttachmentBlobs"]={type:P.a.Blob,content:"true"}),JSON.stringify(e)}async attach(e){await d.c.timedExecAsync(this.mc.logger,{eventName:"Attach"},async()=>{if("loaded"!==this._lifecycleState)throw new T.f(`The Container is not in a valid state for attach [${this._lifecycleState}]`);Object(w.a)(this._attachState===x.a.Detached&&!this.attachStarted,517),this.attachStarted=!0;const t=void 0!==this.loader.services.detachedBlobStorage&&this.loader.services.detachedBlobStorage.size>0;try{let n;if(Object(w.a)(0===this.deltaManager.inbound.length,214),!t){const e=this.context.createSummary(),t=this.captureProtocolSummary();n=A(e,t),this._attachState=x.a.Attaching,this.context.notifyAttaching()}const r=await this.urlResolver.resolve(e);f(r),void 0===this.service&&(Object(w.a)("summarizer"!==this.client.details.type,708),this.service=await D(async()=>this.serviceFactory.createContainer(n,r,this.subLogger,!1),"containerAttach",this.mc.logger,{cancel:this.closeSignal}));const i=this.service.resolvedUrl;if(f(i),this._resolvedUrl=i,await this.connectStorageService(),t){Object(w.a)(!!this.loader.services.detachedBlobStorage,590);const e=new Map;for(;e.size<this.loader.services.detachedBlobStorage.size;){const t=this.loader.services.detachedBlobStorage.getBlobIds().filter(t=>!e.has(t));for(const n of t){const t=await this.loader.services.detachedBlobStorage.readBlob(n),r=await this.storageService.createBlob(t);e.set(n,r.id)}}const t=this.context.createSummary(e),r=this.captureProtocolSummary();n=A(t,r),this._attachState=x.a.Attaching,this.context.notifyAttaching(),await this.storageService.uploadSummaryWithContext(n,{referenceSequenceNumber:0,ackHandle:void 0,proposalHandle:void 0})}this._attachState=x.a.Attached,this.emit("attached"),this.propagateConnectionState(),this.closed||this.resumeInternal({fetchOpsFromStorage:!1,reason:"createDetached"})}catch(e){const t=Object(V.h)(e),n=this.resolvedUrl;throw p(n)&&t.addTelemetryProperties({resolvedUrl:n.url}),this.close(t),t}},{start:!0,end:!0,cancel:"generic"})}async request(e){return d.c.timedExecAsync(this.mc.logger,{eventName:"Request"},async()=>this.context.request(e),{end:!0,cancel:"error"})}setAutoReconnect(e){if(this.closed)throw new Error("Attempting to setAutoReconnect() a closed Container");const t=e?Q.Enabled:Q.Disabled;this.setAutoReconnectInternal(t),e&&this._attachState===x.a.Attached&&this.resumedOpProcessingAfterLoad&&this.connectToDeltaStream({reason:"autoReconnect"})}setAutoReconnectInternal(e){if(this._deltaManager.connectionManager.reconnectMode===e)return;const t=h.a.now(),n=t-this.setAutoReconnectTime;this.setAutoReconnectTime=t,this.mc.logger.sendTelemetryEvent({eventName:e===Q.Enabled?"AutoReconnectEnabled":"AutoReconnectDisabled",connectionMode:this.connectionMode,connectionState:ae[this.connectionState],duration:n}),this._deltaManager.connectionManager.setAutoReconnect(e)}connect(){if(this.closed)throw new T.f("The Container is closed and cannot be connected");if(this._attachState!==x.a.Attached)throw new T.f("The Container is not attached and cannot be connected");this.connected||this.connectInternal({reason:"DocumentConnect",fetchOpsFromStorage:!1})}connectInternal(e){Object(w.a)(!this.closed,709),Object(w.a)(this._attachState===x.a.Attached,710),this.resumeInternal(e);const t=Q.Enabled;this.setAutoReconnectInternal(t)}disconnect(){if(this.closed)throw new T.f("The Container is closed and cannot be disconnected");this.disconnectInternal()}disconnectInternal(){Object(w.a)(!this.closed,711);const e=Q.Disabled;this.setAutoReconnectInternal(e)}resume(){this.closed||this.resumeInternal({reason:"DocumentOpenResume",fetchOpsFromStorage:!1})}resumeInternal(e){Object(w.a)(!this.closed,217),this.resumedOpProcessingAfterLoad||(this.resumedOpProcessingAfterLoad=!0,this._deltaManager.inbound.resume(),this._deltaManager.inboundSignal.resume()),this.connectToDeltaStream(e)}async getAbsoluteUrl(e){var t;if(void 0!==this.resolvedUrl)return this.urlResolver.getAbsoluteUrl(this.resolvedUrl,e,(e=>{let t;return t=e&&"name"in e?e:E(null==e?void 0:e.package)?null==e?void 0:e.package.name:null==e?void 0:e.package,{name:t}})(null===(t=this._context)||void 0===t?void 0:t.codeDetails))}async proposeCodeDetails(e){if(!O(e))throw new Error("Provided codeDetails are not IFluidCodeDetails");if(this.codeLoader.IFluidCodeDetailsComparer){const t=await this.codeLoader.IFluidCodeDetailsComparer.compare(e,this.getCodeDetailsFromQuorum());if(void 0!==t&&t<=0)throw new Error("Proposed code details should be greater than the current")}return this.protocolHandler.quorum.propose("code",e).then(()=>!0).catch(()=>!1)}async processCodeProposal(){const e=this.getCodeDetailsFromQuorum();if(await Promise.all([this.deltaManager.inbound.pause(),this.deltaManager.inboundSignal.pause()]),!0===await this.context.satisfies(e))return this.deltaManager.inbound.resume(),void this.deltaManager.inboundSignal.resume();this.close(new T.d("Existing context does not satisfy incoming proposal"))}async getVersion(e){return(await this.storageService.getVersions(e,1))[0]}recordConnectStartTime(){void 0===this.connectionTransitionTimes[ae.Disconnected]&&(this.connectionTransitionTimes[ae.Disconnected]=h.a.now())}connectToDeltaStream(e){this.recordConnectStartTime(),this._canReconnect&&this.client.details.capabilities.interactive||(e.mode="write"),this._deltaManager.connect(e)}async load(e,t,n){if(void 0===this._resolvedUrl)throw new Error("Attempting to load without a resolved url");this.service=await this.serviceFactory.createDocumentService(this._resolvedUrl,this.subLogger,"summarizer"===this.client.details.type);const r={reason:"DocumentOpen",mode:"write",fetchOpsFromStorage:!1};void 0===t.deltaConnection&&this.connectToDeltaStream(r),await this.connectStorageService(),this._attachState=x.a.Attached;const{snapshot:i,versionId:s}=await this.fetchSnapshotTree(e);Object(w.a)(void 0!==i,567);const a=await this.getDocumentAttributes(this.storageService,i);let o;switch(t.opsBeforeReturn){case void 0:this.attachDeltaManagerOpHandler(a,"none"!==t.deltaConnection?"all":"none");break;case"cached":o=this.attachDeltaManagerOpHandler(a,"cached");break;case"all":o=this.attachDeltaManagerOpHandler(a,"all");break;default:Object(C.a)(t.opsBeforeReturn)}this._protocolHandler=await this.initializeProtocolStateFromSnapshot(a,this.storageService,i);const c=this.getCodeDetailsFromQuorum();if(await this.instantiateContext(!0,c,i,n),this.propagateConnectionState(),this.loaded=!0,!this.closed)switch(void 0!==o&&(this._deltaManager.inbound.resume(),await o,await this._deltaManager.inbound.waitTillProcessingDone(),this._deltaManager.inbound.pause()),t.deltaConnection){case void 0:this.resume();break;case"delayed":this.resumedOpProcessingAfterLoad=!0,this._deltaManager.inbound.resume(),this._deltaManager.inboundSignal.resume();break;case"none":break;default:Object(C.a)(t.deltaConnection)}if(this.closed)throw new Error("Container was closed while load()");return{sequenceNumber:a.sequenceNumber,version:s}}async createDetached(e){const t={sequenceNumber:0,term:1,minimumSequenceNumber:0};await this.attachDeltaManagerOpHandler(t);const n=Se(e);this._protocolHandler=await this.initializeProtocolState(t,[],[],n),await this.instantiateContextDetached(!1),this.propagateConnectionState(),this.loaded=!0}async rehydrateDetachedFromSnapshot(e){void 0!==e.tree[".hasAttachmentBlobs"]&&(Object(w.a)(!!this.loader.services.detachedBlobStorage&&this.loader.services.detachedBlobStorage.size>0,592),delete e.tree[".hasAttachmentBlobs"]);const t=(e=>{const t=e.tree[".protocol"],n=e.tree[".app"];Object(w.a)(void 0!==t&&void 0!==n,480);return ge(t,n)})(e);this._storage.loadSnapshotForRehydratingContainer(t);const n=await this.getDocumentAttributes(this._storage,t);await this.attachDeltaManagerOpHandler(n);const r=ye(t),i=function(e){const t=new Map(e).get("code");return Object(w.a)(void 0!==t,732),null==t?void 0:t.value}(await Object(F.a)(this._storage,r.blobs.quorumValues));this._protocolHandler=await this.initializeProtocolState(n,[],[],void 0!==i?Se(i):[]),await this.instantiateContextDetached(!0,t),this.loaded=!0,this.propagateConnectionState()}async connectStorageService(){var e,t;if(void 0!==this._storageService)return;Object(w.a)(void 0!==this.service,495);const n=await this.service.connectToStorage();this._storageService=new ue(n,this.mc.logger),!0===this.options.summarizeProtocolTree&&(this.mc.logger.sendTelemetryEvent({eventName:"summarizeProtocolTreeEnabled"}),this._storageService=new he(this._storageService,()=>this.captureProtocolSummary())),Object(w.a)((null===(e=n.policies)||void 0===e?void 0:e.minBlobSize)===(null===(t=this.storageService.policies)||void 0===t?void 0:t.minBlobSize),224)}async getDocumentAttributes(e,t){if(void 0===t)return{minimumSequenceNumber:0,sequenceNumber:0,term:1};const n=".protocol"in t.trees?t.trees[".protocol"].blobs.attributes:t.blobs[".attributes"],r=await Object(F.a)(e,n);return void 0===r.term&&(r.term=1),r}async initializeProtocolStateFromSnapshot(e,t,n){let r=[],i=[],s=[];if(void 0!==n){const e=ye(n);[r,i,s]=await Promise.all([Object(F.a)(t,e.blobs.quorumMembers),Object(F.a)(t,e.blobs.quorumProposals),Object(F.a)(t,e.blobs.quorumValues)])}return await this.initializeProtocolState(e,r,i,s)}async initializeProtocolState(e,t,n,r){const i=new U(e.minimumSequenceNumber,e.sequenceNumber,e.term,t,n,r,(e,t)=>this.submitMessage(j.a.Propose,{key:e,value:t})),s=d.a.create(this.subLogger,"ProtocolHandler");return i.quorum.on("error",e=>{s.sendErrorEvent(e)}),i.quorum.on("addMember",(e,t)=>{this.connectionStateHandler.receivedAddMemberEvent(e)}),i.quorum.on("removeMember",e=>{this.connectionStateHandler.receivedRemoveMemberEvent(e)}),i.quorum.on("addProposal",e=>{"code"!==e.key&&"code2"!==e.key||this.emit("codeDetailsProposed",e.value,e)}),i.quorum.on("approveProposal",(e,t,n)=>{"code"!==t&&"code2"!==t||(O(n)||this.mc.logger.sendErrorEvent({eventName:"CodeProposalNotIFluidCodeDetails"}),this.processCodeProposal().catch(e=>{throw this.close(Object(V.h)(e)),e}))}),i}captureProtocolSummary(){const e=this.protocolHandler.quorum.snapshot(),t={minimumSequenceNumber:this.protocolHandler.minimumSequenceNumber,sequenceNumber:this.protocolHandler.sequenceNumber,term:this.protocolHandler.term};return{tree:{attributes:{content:JSON.stringify(t),type:P.a.Blob},quorumMembers:{content:JSON.stringify(e.members),type:P.a.Blob},quorumProposals:{content:JSON.stringify(e.proposals),type:P.a.Blob},quorumValues:{content:JSON.stringify(e.values),type:P.a.Blob}},type:P.a.Tree}}getCodeDetailsFromQuorum(){return(e=>{var t;return null!==(t=e.get("code"))&&void 0!==t?t:e.get("code2")})(this.protocolHandler.quorum)}get client(){var e;const t=void 0!==(null===(e=this.options)||void 0===e?void 0:e.client)?this.options.client:{details:{capabilities:{interactive:!0}},mode:"read",permission:[],scopes:[],user:{id:""}};return void 0!==this.clientDetailsOverride&&S()(t.details,this.clientDetailsOverride),t.details.environment=[t.details.environment," loaderVersion:0.59.4002"].join(";"),t}activeConnection(){return this.connectionState===ae.Connected&&"write"===this.connectionMode}createDeltaManager(){const e=()=>this.service,t=new ne(e,d.a.create(this.subLogger,"DeltaManager"),()=>this.activeConnection(),t=>new Ae(e,this.client,this._canReconnect,d.a.create(this.subLogger,"ConnectionManager"),t));return t.inbound.pause(),t.inboundSignal.pause(),t.on("connect",(e,t)=>{var n;this._audience.clear();for(const t of null!==(n=e.initialClients)&&void 0!==n?n:[])this._audience.addMember(t.clientId,t.client);this.connectionStateHandler.receivedConnectEvent(this.connectionMode,e)}),t.on("disconnect",e=>{var t;null===(t=this.collabWindowTracker)||void 0===t||t.stopSequenceNumberUpdate(),this.connectionStateHandler.receivedDisconnectEvent(e)}),t.on("throttled",e=>{const t=e;!0!==t.logged&&this.logContainerError(t),this.emit("warning",t)}),t.on("readonly",e=>{this.emit("readonly",e)}),t.on("closed",e=>{this.close(e)}),t}async attachDeltaManagerOpHandler(e,t){var n;return this._deltaManager.attachOpHandler(e.minimumSequenceNumber,e.sequenceNumber,null!==(n=e.term)&&void 0!==n?n:1,{process:e=>this.processRemoteMessage(e),processSignal:e=>{this.processSignal(e)}},t)}logConnectionStateChangeTelemetry(e,t,n){const r=h.a.now();this.connectionTransitionTimes[e]=r;const i=r-this.connectionTransitionTimes[t];let s,a,o,c,u;e===ae.Disconnected?o=this._deltaManager.connectionManager.reconnectMode:(e===ae.Connected?(s=r-this.connectionTransitionTimes[ae.Disconnected],s=d.f.formatTick(s)):(c=this.deltaManager.lastKnownSeqNumber,this.deltaManager.hasCheckpointSequenceNumber&&(u=c-this.deltaManager.lastSequenceNumber)),a=this.firstConnection?"InitialConnect":"AutoReconnect"),this.mc.logger.sendPerformanceEvent(Object.assign({eventName:"ConnectionStateChange_"+ae[e],from:ae[t],duration:i,durationFromDisconnected:s,reason:n,connectionInitiationReason:a,pendingClientId:this.connectionStateHandler.pendingClientId,clientId:this.clientId,autoReconnect:o,opsBehind:u,online:k.e[Object(k.k)()],lastVisible:void 0!==this.lastVisible?h.a.now()-this.lastVisible:void 0,checkpointSequenceNumber:c},this._deltaManager.connectionProps)),e===ae.Connected&&(this.firstConnection=!1)}propagateConnectionState(){const e=this.connectionState===ae.Connected&&!this.firstConnection&&"write"===this.connectionMode;e&&(this.messageCountAfterDisconnection=0);const t=this.connectionState===ae.Connected;this.context.disposed||this.context.setConnectionState(t,this.clientId),Object(w.a)(void 0!==this.protocolHandler,220),this.protocolHandler.quorum.setConnectionState(t,this.clientId),Object(G.c)(this.mc.logger,this,t,this.clientId),e&&this.mc.logger.sendTelemetryEvent({eventName:"OpsSentOnReconnect",count:this.messageCountAfterDisconnection})}submitContainerMessage(e,t,n,r){switch(e){case j.a.Operation:case j.a.RemoteHelp:break;case j.a.Summarize:{const e=t;void 0===e.details&&(e.details={}),e.details.includesProtocolTree=!0===this.options.summarizeProtocolTree;break}default:return this.close(new T.d("invalidContainerSubmitOpType",void 0,{messageType:e})),-1}return this.submitMessage(e,t,n,r)}submitMessage(e,t,n,r){var i;return this.connectionState!==ae.Connected?(this.mc.logger.sendErrorEvent({eventName:"SubmitMessageWithNoConnection",type:e}),-1):(this.messageCountAfterDisconnection+=1,null===(i=this.collabWindowTracker)||void 0===i||i.stopSequenceNumberUpdate(),this._deltaManager.submit(e,t,n,r))}processRemoteMessage(e){if(null!=e.clientId){let t;const n=this.getQuorum().getMember(e.clientId);if(void 0===n&&e.type!==j.a.ClientJoin?t="Remote message's clientId is missing from the quorum":!0===(null==n?void 0:n.shouldHaveLeft)&&e.type!==j.a.NoOp&&(t="Remote message's clientId already should have left"),void 0!==t){const n=new T.b(t,Object(T.g)(e));this.close(Object(V.h)(n))}}const t=this.clientId===e.clientId;H(e)||this.context.process(e,t,void 0);const n=this.protocolHandler.processMessage(e,t);if(this.activeConnection()){if(void 0===this.collabWindowTracker){const[e,t]=this.getNoopConfig();this.collabWindowTracker=new Ce((e,t)=>{Object(w.a)(this.activeConnection(),577),this.submitMessage(e,t)},e,t)}this.collabWindowTracker.scheduleSequenceNumberUpdate(e,!0===n.immediateNoOp)}return this.emit("op",e),n}getNoopConfig(){var e,t;return Object(w.a)(void 0!==this.serviceConfiguration,738),void 0!==this.serviceConfiguration.noopTimeFrequency||void 0!==this.serviceConfiguration.noopCountFrequency?[this.serviceConfiguration.noopTimeFrequency,this.serviceConfiguration.noopCountFrequency]:[null===(e=this.loader.services.options)||void 0===e?void 0:e.noopTimeFrequency,null===(t=this.loader.services.options)||void 0===t?void 0:t.noopCountFrequency]}submitSignal(e){this._deltaManager.submitSignal(JSON.stringify(e))}processSignal(e){if(null===e.clientId){const t=e.content;if(t.type===j.a.ClientJoin){const e=t.content;this._audience.addMember(e.clientId,e.client)}else if(t.type===j.a.ClientLeave){const e=t.content;this._audience.removeMember(e)}}else{const t=this.clientId===e.clientId;this.context.processSignal(e,t)}}async fetchSnapshotTree(e){var t;const n=await this.getVersion(null!=e?e:null);void 0===n&&void 0!==e&&this.mc.logger.sendErrorEvent({eventName:"NoVersionFoundWhenSpecified",id:e}),this._loadedFromVersion=n;const r=null!==(t=await this.storageService.getSnapshotTree(n))&&void 0!==t?t:void 0;return void 0===r&&void 0!==n&&this.mc.logger.sendErrorEvent({eventName:"getSnapshotTreeFailed",id:n.id}),{snapshot:r,versionId:null==n?void 0:n.id}}async instantiateContextDetached(e,t,n){const r=this.getCodeDetailsFromQuorum();if(void 0===r)throw new Error("pkg should be provided in create flow!!");await this.instantiateContext(e,r,t,n)}async instantiateContext(e,t,n,r){var i;Object(w.a)(!1!==(null===(i=this._context)||void 0===i?void 0:i.disposed),221);const s=new ke(this,this.loader);this._context=await J.createOrLoad(this,this.scope,this.codeLoader,t,n,new se(this._deltaManager),new be(this.protocolHandler.quorum),s,(e,t,n,r)=>this.submitContainerMessage(e,t,n,r),e=>this.submitSignal(e),e=>this.close(e),Ne.version,e=>this.updateDirtyContainerState(e),e,r),this.emit("contextChanged",t)}updateDirtyContainerState(e){this._dirtyContainer!==e&&(this._dirtyContainer=e,this.emit(e?"dirty":"saved"))}logContainerError(e){this.mc.logger.sendErrorEvent({eventName:"ContainerWarning"},e)}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function Ie(e){return void 0===e.headers||!1!==e.headers[c.a.cache]}Ne.version="^0.1.0";class ke{constructor(e,t){this.container=e,this.loader=t}get IFluidRouter(){return this}async resolve(e){var t,n,r,i,s;if(e.url.startsWith("/")){if(Ie(e))return this.container;{const a=this.container.resolvedUrl;f(a);return await Ne.load(this.loader,{canReconnect:null===(t=e.headers)||void 0===t?void 0:t[c.a.reconnect],clientDetailsOverride:null===(n=e.headers)||void 0===n?void 0:n[c.a.clientDetails],resolvedUrl:Object.assign({},a),version:null!==(i=null===(r=e.headers)||void 0===r?void 0:r[c.a.version])&&void 0!==i?i:void 0,loadMode:null===(s=e.headers)||void 0===s?void 0:s[c.a.loadMode]})}}if(void 0===this.loader)throw new Error("Cannot resolve external containers");return this.loader.resolve(e)}async request(e){if(e.url.startsWith("/")){return(await this.resolve(e)).request(e)}return void 0===this.loader?{status:404,value:"Cannot request external containers",mimeType:"plain/text"}:this.loader.request(e)}}function De(e){const t=Object.create(e),n=new Map;return t.resolve=async t=>Ie(t)?(n.has(t.url)||n.set(t.url,e.resolve(t)),n.get(t.url)):e.resolve(t),t}class Fe{constructor(e){var t,n,r;this.containers=new Map;const i=Object.assign({},e.scope);!1!==(null===(t=e.options)||void 0===t?void 0:t.provideScopeLoader)&&(i.ILoader=this);const s={loaderId:Object(o.a)(),loaderVersion:"0.59.4002"},a=Object(u.d)(m.mixinDebugLogger("fluid:telemetry",e.logger,{all:s}),u.e.value,e.configProvider);this.services={urlResolver:De(g.create(e.urlResolver)),documentServiceFactory:v.create(e.documentServiceFactory),codeLoader:e.codeLoader,options:null!==(n=e.options)&&void 0!==n?n:{},scope:i,subLogger:a.logger,proxyLoaderFactories:null!==(r=e.proxyLoaderFactories)&&void 0!==r?r:new Map,detachedBlobStorage:e.detachedBlobStorage},this.mc=Object(u.c)(d.a.create(this.services.subLogger,"Loader"))}get IFluidRouter(){return this}async createDetachedContainer(e){const t=await Ne.createDetached(this,e);return this.cachingEnabled&&t.once("attached",()=>{f(t.resolvedUrl);const e=fe(t.resolvedUrl.url);void 0!==e&&this.addToContainerCache(e.id,Promise.resolve(t))}),t}async rehydrateDetachedContainerFromSnapshot(e){return Ne.rehydrateDetachedFromSnapshot(this,e)}async resolve(e,t){const n=void 0===t?"Resolve":"ResolveWithPendingState";return d.c.timedExecAsync(this.mc.logger,{eventName:n},async()=>(await this.resolveCore(e,void 0!==t?JSON.parse(t):void 0)).container)}async request(e){return d.c.timedExecAsync(this.mc.logger,{eventName:"Request"},async()=>{const t=await this.resolveCore(e);return t.container.request(Object.assign(Object.assign({},e),{url:`${t.parsed.path}${t.parsed.query}`}))})}getKeyForContainerCache(e,t){var n;return void 0!==(null===(n=e.headers)||void 0===n?void 0:n[c.a.version])?`${t.id}@${e.headers[c.a.version]}`:t.id}addToContainerCache(e,t){this.containers.set(e,t),t.then(t=>{t.closed?this.containers.delete(e):t.once("closed",()=>{this.containers.delete(e)})}).catch(e=>{})}async resolveCore(e,t){const n=await this.services.urlResolver.resolve(e);f(n);const r=fe(n.url);if(void 0===r)throw new Error("Invalid URL "+n.url);if(void 0!==t){const e=fe(t.url);if((null==e?void 0:e.id)!==r.id||(null==e?void 0:e.path.replace(/\/$/,""))!==r.path.replace(/\/$/,"")){const e=`URL ${n.url} does not match pending state URL ${t.url}`;throw new Error(e)}}const{canCache:i,fromSequenceNumber:s}=this.parseHeader(r,e);let a;if(void 0===t&&i){const t=this.getKeyForContainerCache(e,r),i=await this.containers.get(t);if(void 0!==i)a=i;else{const r=this.loadContainer(e,n);this.addToContainerCache(t,r),a=await r}}else a=await this.loadContainer(e,n,null==t?void 0:t.pendingRuntimeState);return a.deltaManager.lastSequenceNumber<=s&&await new Promise((e,t)=>{a.on("op",(function t(n){n.sequenceNumber>s&&(e(),a.removeListener("op",t))}))}),{container:a,parsed:r}}get cachingEnabled(){return!1!==this.services.options.cache}canCacheForRequest(e){return this.cachingEnabled&&!1!==e[c.a.cache]}parseHeader(e,t){var n,r;let i=-1;t.headers=null!==(n=t.headers)&&void 0!==n?n:{};const s=t.headers[c.a.sequenceNumber];void 0!==s&&(i=s),t.headers[c.a.version]=null!==(r=e.version)&&void 0!==r?r:t.headers[c.a.version];return{canCache:this.canCacheForRequest(t.headers),fromSequenceNumber:i}}async loadContainer(e,t,n){var r,i,s,a,o;return Ne.load(this,{canReconnect:null===(r=e.headers)||void 0===r?void 0:r[c.a.reconnect],clientDetailsOverride:null===(i=e.headers)||void 0===i?void 0:i[c.a.clientDetails],resolvedUrl:t,version:null!==(a=null===(s=e.headers)||void 0===s?void 0:s[c.a.version])&&void 0!==a?a:void 0,loadMode:null===(o=e.headers)||void 0===o?void 0:o[c.a.loadMode]},n)}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class je{constructor(e){this.maxRequests=e,this.tasks=[],this.release=()=>{const e=this.tasks.shift();if(void 0!==e)return e();this.maxRequests++},Object(w.a)(e>0,174)}get waitQueueLength(){return this.tasks.length}async acquire(){if(!(this.maxRequests>0))return new Promise(e=>{this.tasks.push(e)});this.maxRequests--}async schedule(e){return await this.acquire(),e().finally(this.release)}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */var Re;!function(e){e[e.NoCaching=0]="NoCaching",e[e.Prefetch=1]="Prefetch"}(Re||(Re={}));var Me=n(185),_e=n(186),Be=n(95),Le=n.n(Be),qe=n(132),ze=n.n(qe);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 *
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY
 */
const He=Object(l.debug)("fluid:services-client");He("Package: @fluidframework/server-services-client - Version: 0.1036.5000");
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class Ue extends Error{constructor(e,t,n,r,i){super(t),this.code=e,this.canRetry=n,this.isFatal=r,this.retryAfterMs=i,this.name="NetworkError",this.retryAfter=void 0!==i?i/1e3:void 0}get details(){return void 0===this.canRetry&&void 0===this.isFatal&&void 0===this.retryAfterMs?this.message:{message:this.message,canRetry:this.canRetry,isFatal:this.isFatal,retryAfter:this.retryAfter,retryAfterMs:this.retryAfterMs}}toJSON(){return{code:this.code,message:this.message,canRetry:this.canRetry,isFatal:this.isFatal,retryAfterMs:this.retryAfterMs,retryAfter:this.retryAfter}}}function Ve(e,t){var n;let r,i,s,a;switch(t&&"object"==typeof t?(r=null!==(n=t.message)&&void 0!==n?n:"Unknown Error",i=t.canRetry,s=t.isFatal,a=t.retryAfter):r=t&&"string"==typeof t?t:"Unknown Error",e){case 401:case 403:case 404:return new Ue(e,r,!1,!1);case 413:case 422:return new Ue(e,r,null!=i&&i,null!=s&&s,i?a:void 0);case 429:return new Ue(e,r,!0,!1,a);case 500:return new Ue(e,r,null==i||i,null!=s&&s,i?a:void 0);case 502:case 503:case 504:return new Ue(e,r,!0,!1,a);default:return new Ue(e,r,!1,!0)}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class Ge{constructor(e,t={},n=1048576e3,r=1048576e3){this.baseurl=e,this.defaultQueryString=t,this.maxBodyLength=n,this.maxContentLength=r}async get(e,t,n){const r={baseURL:this.baseurl,headers:n,maxBodyLength:this.maxBodyLength,maxContentLength:this.maxContentLength,method:"GET",url:`${e}${this.generateQueryString(t)}`};return this.request(r,200)}async post(e,t,n,r){const i={baseURL:this.baseurl,data:t,headers:r,maxBodyLength:this.maxBodyLength,maxContentLength:this.maxContentLength,method:"POST",url:`${e}${this.generateQueryString(n)}`};return this.request(i,201)}async delete(e,t,n){const r={baseURL:this.baseurl,headers:n,maxBodyLength:this.maxBodyLength,maxContentLength:this.maxContentLength,method:"DELETE",url:`${e}${this.generateQueryString(t)}`};return this.request(r,204)}async patch(e,t,n,r){const i={baseURL:this.baseurl,data:t,headers:r,maxBodyLength:this.maxBodyLength,maxContentLength:this.maxContentLength,method:"PATCH",url:`${e}${this.generateQueryString(n)}`};return this.request(i,200)}generateQueryString(e){if(this.defaultQueryString||e){const t=Object.assign(Object.assign({},this.defaultQueryString),e),n=_e.stringify(t);if(""!==n)return"?"+n}return""}}class We extends Ge{constructor(e,t={},n=1048576e3,r=1048576e3,i={},s=ze.a,a,o,c){super(e,t,n,r),this.defaultHeaders=i,this.axios=s,this.refreshDefaultQueryString=a,this.refreshDefaultHeaders=o,this.getCorrelationId=c}async request(e,t,n=!0){var r,i;const s=Object.assign({},e);return s.headers=this.generateHeaders(s.headers,null!==(i=null===(r=this.getCorrelationId)||void 0===r?void 0:r.call(this))&&void 0!==i?i:Object(o.a)()),new Promise((r,i)=>{this.axios.request(s).then(e=>{r(e.data)}).catch(a=>{var o,c,u,h,l,d,m,p,f,g,y,v,b,S;if((null===(o=null==a?void 0:a.response)||void 0===o?void 0:o.status)===t&&r(null===(c=null==a?void 0:a.response)||void 0===c?void 0:c.data),(null==a?void 0:a.config)?He(`[${a.config.method}] request to [${null!==(u=a.config.baseURL)&&void 0!==u?u:""}${null!==(h=a.config.url)&&void 0!==h?h:""}] failed with [${null===(l=a.response)||void 0===l?void 0:l.status}] [${Le()(null===(d=a.response)||void 0===d?void 0:d.data,void 0,2)}]`):He(`request to ${s.url} failed ${a?a.message:""}`),429===(null===(m=null==a?void 0:a.response)||void 0===m?void 0:m.status)&&(null===(f=null===(p=null==a?void 0:a.response)||void 0===p?void 0:p.data)||void 0===f?void 0:f.retryAfter)>0&&n)setTimeout(()=>{this.request(s,t).then(r).catch(i)},1e3*a.response.data.retryAfter);else if(401===(null===(g=null==a?void 0:a.response)||void 0===g?void 0:g.status)&&n&&this.refreshOnAuthError()){const n=Object.assign({},e);n.headers=this.generateHeaders(n.headers,s.headers["x-correlation-id"]),this.request(n,t,!1).then(r).catch(i)}else if(null==a?void 0:a.response)i(Ve(null===(y=null==a?void 0:a.response)||void 0===y?void 0:y.status,null===(v=null==a?void 0:a.response)||void 0===v?void 0:v.data));else if(null==a?void 0:a.request)i(Ve(502,"Network Error: "+(null!==(b=null==a?void 0:a.message)&&void 0!==b?b:"undefined")));else{const e={canRetry:!1,isFatal:!1,message:null!==(S=null==a?void 0:a.message)&&void 0!==S?S:"Unknown Error"};i(Ve(500,e))}})})}generateHeaders(e,t){let n=null!=e?e:{};return this.defaultHeaders&&(n=Object.assign(Object.assign({},this.defaultHeaders),e)),n["x-correlation-id"]?n:Object.assign({"x-correlation-id":t},n)}refreshOnAuthError(){return(void 0!==this.refreshDefaultQueryString||void 0!==this.refreshDefaultHeaders)&&(void 0!==this.refreshDefaultHeaders&&(this.defaultHeaders=this.refreshDefaultHeaders()),void 0!==this.refreshDefaultQueryString&&(this.defaultQueryString=this.refreshDefaultQueryString()),!0)}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */function Ke(e,t){for(const n of t)if(e.endsWith(n))return!0;return!1}class $e{constructor(e,t,n,r){this.endpoint=e,this.historianApi=t,this.restWrapper=r,this.defaultQueryString={},n&&this.historianApi?(this.defaultQueryString.disableCache=n,this.cacheBust=!1):this.cacheBust=n,void 0===this.restWrapper&&(this.restWrapper=new We(this.endpoint))}async getHeader(e){return this.historianApi?this.restWrapper.get("/headers/"+encodeURIComponent(e),this.getQueryString()):this.getHeaderDirect(e)}async getFullTree(e){return this.restWrapper.get("/tree/"+encodeURIComponent(e),this.getQueryString())}async getBlob(e){return this.restWrapper.get("/git/blobs/"+encodeURIComponent(e),this.getQueryString())}async createBlob(e){return this.restWrapper.post("/git/blobs",e,this.getQueryString())}async getContent(e,t){return this.restWrapper.get("/contents/"+e,this.getQueryString({ref:t}))}async getCommits(e,t){return this.restWrapper.get("/commits",this.getQueryString({count:t,sha:e})).catch(e=>400===e||404===e?[]:Promise.reject(e))}async getCommit(e){return this.restWrapper.get("/git/commits/"+encodeURIComponent(e),this.getQueryString())}async createCommit(e){return this.restWrapper.post("/git/commits",e,this.getQueryString())}async getRefs(){return this.restWrapper.get("/git/refs",this.getQueryString())}async getRef(e){return this.restWrapper.get("/git/refs/"+e,this.getQueryString())}async createRef(e){return this.restWrapper.post("/git/refs",e,this.getQueryString())}async updateRef(e,t){return this.restWrapper.patch("/git/refs/"+e,t,this.getQueryString())}async deleteRef(e){await this.restWrapper.delete("/git/refs/"+e,this.getQueryString())}async createTag(e){return this.restWrapper.post("/git/tags",e,this.getQueryString())}async getTag(e){return this.restWrapper.get("/git/tags/"+e,this.getQueryString())}async createTree(e){return this.restWrapper.post("/git/trees",e,this.getQueryString())}async getTree(e,t){return this.restWrapper.get("/git/trees/"+encodeURIComponent(e),this.getQueryString({recursive:t?1:0}))}async createSummary(e){return this.restWrapper.post("/git/summaries",e,this.getQueryString())}async deleteSummary(e){const t={"Soft-Delete":e};return this.restWrapper.delete("/git/summaries",this.getQueryString(),t)}async getSummary(e){return this.restWrapper.get("/git/summaries/"+e,this.getQueryString())}async getHeaderDirect(e){const t=await this.getTree(e,!0),n=[".attributes",".blobs",".messages","header"],r=[];for(const e of t.tree)if("blob"===e.type&&Ke(e.path,n)){const t=this.getBlob(e.sha);r.push(t)}return{blobs:await Promise.all(r),tree:t}}getQueryString(e){return this.cacheBust?Object.assign(Object.assign({cacheBust:Date.now()},this.defaultQueryString),e):Object.assign(Object.assign({},this.defaultQueryString),e)}}var Je=n(140),Qe=n(20);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class Ye{constructor(e){this.historian=e,this.blobCache=new Map,this.commitCache=new Map,this.treeCache=new Map,this.refCache=new Map}async getHeader(e,t){const n=await this.historian.getHeader(t);for(const e of n.blobs)this.blobCache.set(e.sha,e);return Object(Je.d)(n.tree)}async getFullTree(e){return this.historian.getFullTree(e)}async getCommit(e){return this.commitCache.has(e)?(He("Cache hit on "+e),this.commitCache.get(e)):this.historian.getCommit(e)}async getCommits(e,t){let n=e;if(this.refCache.has(e)&&(He("Commit cache hit on "+e),n=this.refCache.get(e),this.refCache.delete(e),!n))return[];if(this.commitCache.has(n)){const e=this.commitCache.get(n);return[{commit:{author:e.author,committer:e.committer,message:e.message,tree:e.tree,url:e.url},parents:e.parents,sha:e.sha,url:e.url}]}return this.historian.getCommits(n,t)}async getTree(e,t=!0){return this.treeCache.has(e)?(He("Tree cache hit on "+e),this.treeCache.get(e)):this.historian.getTree(e,t)}async getBlob(e){return this.blobCache.has(e)?(He("Blob cache hit on "+e),this.blobCache.get(e)):this.historian.getBlob(e)}getRawUrl(e){return`${this.historian.endpoint}/git/blobs/raw/${e}`}async getContent(e,t){return this.historian.getContent(t,e)}async createBlob(e,t){const n={content:e,encoding:t};return this.historian.createBlob(n)}async createGitTree(e){return this.historian.createTree(e)}async createTree(e){return this.createTreeCore(e,0)}async createCommit(e){return this.historian.createCommit(e)}async createSummary(e){return this.historian.createSummary(e)}async deleteSummary(e){return this.historian.deleteSummary(e)}async getSummary(e){return this.historian.getSummary(e)}async getRef(e){return this.historian.getRef("heads/"+e).catch(e=>{if(400===e||404===e)return null;throw e})}async createRef(e,t){const n={ref:"refs/heads/"+e,sha:t,config:{enabled:!0}};return this.historian.createRef(n)}async upsertRef(e,t){const n={force:!0,sha:t,config:{enabled:!0}};return this.historian.updateRef("heads/"+e,n)}addRef(e,t){this.refCache.set(e,t)}addCommit(e){this.commitCache.set(e.sha,e)}addTree(e){this.treeCache.set(e.sha,e)}addBlob(e){this.blobCache.set(e.sha,e)}async write(e,t,n,r){const i=await this.createTree(t),s={author:{date:(new Date).toISOString(),email:"kurtb@microsoft.com",name:"Kurt Berglund"},message:r,parents:n,tree:i.sha},a=await this.historian.createCommit(s);return await this.getRef(e)?await this.upsertRef(e,a.sha):await this.createRef(e,a.sha),a}async createTreeCore(e,t){if(e.id)return this.getTree(e.id);const n=[];for(const r of e.entries)switch(Qe.b[r.type]){case Qe.b.Blob:{const e=r.value;r.mode===Qe.a.Symlink&&(e.contents=this.translateSymlink(e.contents,t));const i=this.createBlob(e.contents,e.encoding);n.push(i);break}case Qe.b.Tree:{const e=r.value,i=this.createTreeCore(e,t+1);n.push(i);break}default:throw new Error("Unknown entry type")}const r=await Promise.all(n),i=[];Object(w.a)(r.length===e.entries.length,"File entries length is not correct");for(let t=0;t<e.entries.length;t++){const n=e.entries[t].type===Qe.b.Tree?"tree":e.entries[t].type===Qe.b.Blob?"blob":"commit";i.push({mode:e.entries[t].mode,path:e.entries[t].path,sha:r[t].sha,type:n})}const s={tree:i};return this.historian.createTree(s)}translateSymlink(e,t){let n="";for(let e=0;e<=t;e++)n+="../";return`${n}${e}`}}var Xe=n(70),Ze=n(133),et=n(72),tt=n(42);let nt=!1;try{nt="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){}const rt=nt;var it=n(32);function st(e){const t=e.xdomain;try{if("undefined"!=typeof XMLHttpRequest&&(!t||rt))return new XMLHttpRequest}catch(e){}if(!t)try{return new(it.a[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}var at=n(30),ot=n(31);function ct(){}const ut=null!=new st({xdomain:!1}).responseType;class ht extends Xe.a{constructor(e){if(super(e),this.polling=!1,"undefined"!=typeof location){const t="https:"===location.protocol;let n=location.port;n||(n=t?"443":"80"),this.xd="undefined"!=typeof location&&e.hostname!==location.hostname||n!==e.port,this.xs=e.secure!==t}const t=e&&e.forceBase64;this.supportsBinary=ut&&!t}get name(){return"polling"}doOpen(){this.poll()}pause(e){this.readyState="pausing";const t=()=>{this.readyState="paused",e()};if(this.polling||!this.writable){let e=0;this.polling&&(e++,this.once("pollComplete",(function(){--e||t()}))),this.writable||(e++,this.once("drain",(function(){--e||t()})))}else t()}poll(){this.polling=!0,this.doPoll(),this.emitReserved("poll")}onData(e){Object(tt.b)(e,this.socket.binaryType).forEach(e=>{if("opening"===this.readyState&&"open"===e.type&&this.onOpen(),"close"===e.type)return this.onClose({description:"transport closed by the server"}),!1;this.onPacket(e)}),"closed"!==this.readyState&&(this.polling=!1,this.emitReserved("pollComplete"),"open"===this.readyState&&this.poll())}doClose(){const e=()=>{this.write([{type:"close"}])};"open"===this.readyState?e():this.once("open",e)}write(e){this.writable=!1,Object(tt.d)(e,e=>{this.doWrite(e,()=>{this.writable=!0,this.emitReserved("drain")})})}uri(){let e=this.query||{};const t=this.opts.secure?"https":"http";let n="";!1!==this.opts.timestampRequests&&(e[this.opts.timestampParam]=Object(Ze.a)()),this.supportsBinary||e.sid||(e.b64=1),this.opts.port&&("https"===t&&443!==Number(this.opts.port)||"http"===t&&80!==Number(this.opts.port))&&(n=":"+this.opts.port);const r=Object(et.b)(e);return t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+(r.length?"?"+r:"")}request(e={}){return Object.assign(e,{xd:this.xd,xs:this.xs},this.opts),new lt(this.uri(),e)}doWrite(e,t){const n=this.request({method:"POST",data:e});n.on("success",t),n.on("error",(e,t)=>{this.onError("xhr post error",e,t)})}doPoll(){const e=this.request();e.on("data",this.onData.bind(this)),e.on("error",(e,t)=>{this.onError("xhr poll error",e,t)}),this.pollXhr=e}}class lt extends at.a{constructor(e,t){super(),Object(ot.b)(this,t),this.opts=t,this.method=t.method||"GET",this.uri=e,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.create()}create(){const e=Object(ot.c)(this.opts,"agent","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");e.xdomain=!!this.opts.xd,e.xscheme=!!this.opts.xs;const t=this.xhr=new st(e);try{t.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){t.setDisableHeaderCheck&&t.setDisableHeaderCheck(!0);for(let e in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(e)&&t.setRequestHeader(e,this.opts.extraHeaders[e])}}catch(e){}if("POST"===this.method)try{t.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{t.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in t&&(t.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(t.timeout=this.opts.requestTimeout),t.onreadystatechange=()=>{4===t.readyState&&(200===t.status||1223===t.status?this.onLoad():this.setTimeoutFn(()=>{this.onError("number"==typeof t.status?t.status:0)},0))},t.send(this.data)}catch(e){return void this.setTimeoutFn(()=>{this.onError(e)},0)}"undefined"!=typeof document&&(this.index=lt.requestsCount++,lt.requests[this.index]=this)}onError(e){this.emitReserved("error",e,this.xhr),this.cleanup(!0)}cleanup(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.xhr.onreadystatechange=ct,e)try{this.xhr.abort()}catch(e){}"undefined"!=typeof document&&delete lt.requests[this.index],this.xhr=null}}onLoad(){const e=this.xhr.responseText;null!==e&&(this.emitReserved("data",e),this.emitReserved("success"),this.cleanup())}abort(){this.cleanup()}}if(lt.requestsCount=0,lt.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",dt);else if("function"==typeof addEventListener){const e="onpagehide"in it.a?"pagehide":"unload";addEventListener(e,dt,!1)}function dt(){for(let e in lt.requests)lt.requests.hasOwnProperty(e)&&lt.requests[e].abort()}const mt={websocket:n(303).a,polling:ht},pt=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,ft=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];function gt(e){const t=e,n=e.indexOf("["),r=e.indexOf("]");-1!=n&&-1!=r&&(e=e.substring(0,n)+e.substring(n,r).replace(/:/g,";")+e.substring(r,e.length));let i=pt.exec(e||""),s={},a=14;for(;a--;)s[ft[a]]=i[a]||"";return-1!=n&&-1!=r&&(s.source=t,s.host=s.host.substring(1,s.host.length-1).replace(/;/g,":"),s.authority=s.authority.replace("[","").replace("]","").replace(/;/g,":"),s.ipv6uri=!0),s.pathNames=function(e,t){const n=t.replace(/\/{2,9}/g,"/").split("/");"/"!=t.substr(0,1)&&0!==t.length||n.splice(0,1);"/"==t.substr(t.length-1,1)&&n.splice(n.length-1,1);return n}(0,s.path),s.queryKey=function(e,t){const n={};return t.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(e,t,r){t&&(n[t]=r)})),n}(0,s.query),s}class yt extends at.a{constructor(e,t={}){super(),e&&"object"==typeof e&&(t=e,e=null),e?(e=gt(e),t.hostname=e.host,t.secure="https"===e.protocol||"wss"===e.protocol,t.port=e.port,e.query&&(t.query=e.query)):t.host&&(t.hostname=gt(t.host).host),Object(ot.b)(this,t),this.secure=null!=t.secure?t.secure:"undefined"!=typeof location&&"https:"===location.protocol,t.hostname&&!t.port&&(t.port=this.secure?"443":"80"),this.hostname=t.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=t.port||("undefined"!=typeof location&&location.port?location.port:this.secure?"443":"80"),this.transports=t.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,timestampParam:"t",rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!0},t),this.opts.path=this.opts.path.replace(/\/$/,"")+"/","string"==typeof this.opts.query&&(this.opts.query=Object(et.a)(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(this.opts.closeOnBeforeunload&&addEventListener("beforeunload",()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())},!1),"localhost"!==this.hostname&&(this.offlineEventListener=()=>{this.onClose("transport close",{description:"network connection lost"})},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(e){const t=Object.assign({},this.opts.query);t.EIO=tt.e,t.transport=e,this.id&&(t.sid=this.id);const n=Object.assign({},this.opts.transportOptions[e],this.opts,{query:t,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return new mt[e](n)}open(){let e;if(this.opts.rememberUpgrade&&yt.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length)return void this.setTimeoutFn(()=>{this.emitReserved("error","No transports available")},0);e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return this.transports.shift(),void this.open()}e.open(),this.setTransport(e)}setTransport(e){this.transport&&this.transport.removeAllListeners(),this.transport=e,e.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",e=>this.onClose("transport close",e))}probe(e){let t=this.createTransport(e),n=!1;yt.priorWebsocketSuccess=!1;const r=()=>{n||(t.send([{type:"ping",data:"probe"}]),t.once("packet",e=>{if(!n)if("pong"===e.type&&"probe"===e.data){if(this.upgrading=!0,this.emitReserved("upgrading",t),!t)return;yt.priorWebsocketSuccess="websocket"===t.name,this.transport.pause(()=>{n||"closed"!==this.readyState&&(u(),this.setTransport(t),t.send([{type:"upgrade"}]),this.emitReserved("upgrade",t),t=null,this.upgrading=!1,this.flush())})}else{const e=new Error("probe error");e.transport=t.name,this.emitReserved("upgradeError",e)}}))};function i(){n||(n=!0,u(),t.close(),t=null)}const s=e=>{const n=new Error("probe error: "+e);n.transport=t.name,i(),this.emitReserved("upgradeError",n)};function a(){s("transport closed")}function o(){s("socket closed")}function c(e){t&&e.name!==t.name&&i()}const u=()=>{t.removeListener("open",r),t.removeListener("error",s),t.removeListener("close",a),this.off("close",o),this.off("upgrading",c)};t.once("open",r),t.once("error",s),t.once("close",a),this.once("close",o),this.once("upgrading",c),t.open()}onOpen(){if(this.readyState="open",yt.priorWebsocketSuccess="websocket"===this.transport.name,this.emitReserved("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade&&this.transport.pause){let e=0;const t=this.upgrades.length;for(;e<t;e++)this.probe(this.upgrades[e])}}onPacket(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(this.emitReserved("packet",e),this.emitReserved("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emitReserved("ping"),this.emitReserved("pong");break;case"error":const t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emitReserved("data",e.data),this.emitReserved("message",e.data)}}onHandshake(e){this.emitReserved("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.maxPayload=e.maxPayload,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){this.clearTimeoutFn(this.pingTimeoutTimer),this.pingTimeoutTimer=this.setTimeoutFn(()=>{this.onClose("ping timeout")},this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emitReserved("drain"):this.flush()}flush(){if("closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length){const e=this.getWritablePackets();this.transport.send(e),this.prevBufferLen=e.length,this.emitReserved("flush")}}getWritablePackets(){if(!(this.maxPayload&&"polling"===this.transport.name&&this.writeBuffer.length>1))return this.writeBuffer;let e=1;for(let t=0;t<this.writeBuffer.length;t++){const n=this.writeBuffer[t].data;if(n&&(e+=Object(ot.a)(n)),t>0&&e>this.maxPayload)return this.writeBuffer.slice(0,t);e+=2}return this.writeBuffer}write(e,t,n){return this.sendPacket("message",e,t,n),this}send(e,t,n){return this.sendPacket("message",e,t,n),this}sendPacket(e,t,n,r){if("function"==typeof t&&(r=t,t=void 0),"function"==typeof n&&(r=n,n=null),"closing"===this.readyState||"closed"===this.readyState)return;(n=n||{}).compress=!1!==n.compress;const i={type:e,data:t,options:n};this.emitReserved("packetCreate",i),this.writeBuffer.push(i),r&&this.once("flush",r),this.flush()}close(){const e=()=>{this.onClose("forced close"),this.transport.close()},t=()=>{this.off("upgrade",t),this.off("upgradeError",t),e()},n=()=>{this.once("upgrade",t),this.once("upgradeError",t)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",()=>{this.upgrading?n():e()}):this.upgrading?n():e()),this}onError(e){yt.priorWebsocketSuccess=!1,this.emitReserved("error",e),this.onClose("transport error",e)}onClose(e,t){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(this.clearTimeoutFn(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&removeEventListener("offline",this.offlineEventListener,!1),this.readyState="closed",this.id=null,this.emitReserved("close",e,t),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(e){const t=[];let n=0;const r=e.length;for(;n<r;n++)~this.transports.indexOf(e[n])&&t.push(e[n]);return t}}yt.protocol=tt.e;yt.protocol;const vt="function"==typeof ArrayBuffer,bt=Object.prototype.toString,St="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===bt.call(Blob),wt="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===bt.call(File);function Ct(e){return vt&&(e instanceof ArrayBuffer||(e=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):e.buffer instanceof ArrayBuffer)(e))||St&&e instanceof Blob||wt&&e instanceof File}function xt(e){const t=[],n=e.data,r=e;return r.data=function e(t,n){if(!t)return t;if(Ct(t)){const e={_placeholder:!0,num:n.length};return n.push(t),e}if(Array.isArray(t)){const r=new Array(t.length);for(let i=0;i<t.length;i++)r[i]=e(t[i],n);return r}if("object"==typeof t&&!(t instanceof Date)){const r={};for(const i in t)Object.prototype.hasOwnProperty.call(t,i)&&(r[i]=e(t[i],n));return r}return t}(n,t),r.attachments=t.length,{packet:r,buffers:t}}function Et(e,t){return e.data=function e(t,n){if(!t)return t;if(t&&!0===t._placeholder){if("number"==typeof t.num&&t.num>=0&&t.num<n.length)return n[t.num];throw new Error("illegal attachments")}if(Array.isArray(t))for(let r=0;r<t.length;r++)t[r]=e(t[r],n);else if("object"==typeof t)for(const r in t)Object.prototype.hasOwnProperty.call(t,r)&&(t[r]=e(t[r],n));return t}(e.data,t),e.attachments=void 0,e}const Ot=5;var Tt;!function(e){e[e.CONNECT=0]="CONNECT",e[e.DISCONNECT=1]="DISCONNECT",e[e.EVENT=2]="EVENT",e[e.ACK=3]="ACK",e[e.CONNECT_ERROR=4]="CONNECT_ERROR",e[e.BINARY_EVENT=5]="BINARY_EVENT",e[e.BINARY_ACK=6]="BINARY_ACK"}(Tt||(Tt={}));class Pt{constructor(e){this.replacer=e}encode(e){return e.type!==Tt.EVENT&&e.type!==Tt.ACK||!function e(t,n){if(!t||"object"!=typeof t)return!1;if(Array.isArray(t)){for(let n=0,r=t.length;n<r;n++)if(e(t[n]))return!0;return!1}if(Ct(t))return!0;if(t.toJSON&&"function"==typeof t.toJSON&&1===arguments.length)return e(t.toJSON(),!0);for(const n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&e(t[n]))return!0;return!1}(e)?[this.encodeAsString(e)]:(e.type=e.type===Tt.EVENT?Tt.BINARY_EVENT:Tt.BINARY_ACK,this.encodeAsBinary(e))}encodeAsString(e){let t=""+e.type;return e.type!==Tt.BINARY_EVENT&&e.type!==Tt.BINARY_ACK||(t+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(t+=e.nsp+","),null!=e.id&&(t+=e.id),null!=e.data&&(t+=JSON.stringify(e.data,this.replacer)),t}encodeAsBinary(e){const t=xt(e),n=this.encodeAsString(t.packet),r=t.buffers;return r.unshift(n),r}}class At extends at.a{constructor(e){super(),this.reviver=e}add(e){let t;if("string"==typeof e){if(this.reconstructor)throw new Error("got plaintext data when reconstructing a packet");t=this.decodeString(e),t.type===Tt.BINARY_EVENT||t.type===Tt.BINARY_ACK?(this.reconstructor=new Nt(t),0===t.attachments&&super.emitReserved("decoded",t)):super.emitReserved("decoded",t)}else{if(!Ct(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");t=this.reconstructor.takeBinaryData(e),t&&(this.reconstructor=null,super.emitReserved("decoded",t))}}decodeString(e){let t=0;const n={type:Number(e.charAt(0))};if(void 0===Tt[n.type])throw new Error("unknown packet type "+n.type);if(n.type===Tt.BINARY_EVENT||n.type===Tt.BINARY_ACK){const r=t+1;for(;"-"!==e.charAt(++t)&&t!=e.length;);const i=e.substring(r,t);if(i!=Number(i)||"-"!==e.charAt(t))throw new Error("Illegal attachments");n.attachments=Number(i)}if("/"===e.charAt(t+1)){const r=t+1;for(;++t;){if(","===e.charAt(t))break;if(t===e.length)break}n.nsp=e.substring(r,t)}else n.nsp="/";const r=e.charAt(t+1);if(""!==r&&Number(r)==r){const r=t+1;for(;++t;){const n=e.charAt(t);if(null==n||Number(n)!=n){--t;break}if(t===e.length)break}n.id=Number(e.substring(r,t+1))}if(e.charAt(++t)){const r=this.tryParse(e.substr(t));if(!At.isPayloadValid(n.type,r))throw new Error("invalid payload");n.data=r}return n}tryParse(e){try{return JSON.parse(e,this.reviver)}catch(e){return!1}}static isPayloadValid(e,t){switch(e){case Tt.CONNECT:return"object"==typeof t;case Tt.DISCONNECT:return void 0===t;case Tt.CONNECT_ERROR:return"string"==typeof t||"object"==typeof t;case Tt.EVENT:case Tt.BINARY_EVENT:return Array.isArray(t)&&t.length>0;case Tt.ACK:case Tt.BINARY_ACK:return Array.isArray(t)}}destroy(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}class Nt{constructor(e){this.packet=e,this.buffers=[],this.reconPack=e}takeBinaryData(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){const e=Et(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}function It(e,t,n){return e.on(t,n),function(){e.off(t,n)}}const kt=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class Dt extends at.a{constructor(e,t,n){super(),this.connected=!1,this.receiveBuffer=[],this.sendBuffer=[],this.ids=0,this.acks={},this.flags={},this.io=e,this.nsp=t,n&&n.auth&&(this.auth=n.auth),this.io._autoConnect&&this.open()}get disconnected(){return!this.connected}subEvents(){if(this.subs)return;const e=this.io;this.subs=[It(e,"open",this.onopen.bind(this)),It(e,"packet",this.onpacket.bind(this)),It(e,"error",this.onerror.bind(this)),It(e,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...e){return e.unshift("message"),this.emit.apply(this,e),this}emit(e,...t){if(kt.hasOwnProperty(e))throw new Error('"'+e+'" is a reserved event name');t.unshift(e);const n={type:Tt.EVENT,data:t,options:{}};if(n.options.compress=!1!==this.flags.compress,"function"==typeof t[t.length-1]){const e=this.ids++,r=t.pop();this._registerAckCallback(e,r),n.id=e}const r=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return this.flags.volatile&&(!r||!this.connected)||(this.connected?(this.notifyOutgoingListeners(n),this.packet(n)):this.sendBuffer.push(n)),this.flags={},this}_registerAckCallback(e,t){const n=this.flags.timeout;if(void 0===n)return void(this.acks[e]=t);const r=this.io.setTimeoutFn(()=>{delete this.acks[e];for(let t=0;t<this.sendBuffer.length;t++)this.sendBuffer[t].id===e&&this.sendBuffer.splice(t,1);t.call(this,new Error("operation has timed out"))},n);this.acks[e]=(...e)=>{this.io.clearTimeoutFn(r),t.apply(this,[null,...e])}}packet(e){e.nsp=this.nsp,this.io._packet(e)}onopen(){"function"==typeof this.auth?this.auth(e=>{this.packet({type:Tt.CONNECT,data:e})}):this.packet({type:Tt.CONNECT,data:this.auth})}onerror(e){this.connected||this.emitReserved("connect_error",e)}onclose(e,t){this.connected=!1,delete this.id,this.emitReserved("disconnect",e,t)}onpacket(e){if(e.nsp===this.nsp)switch(e.type){case Tt.CONNECT:if(e.data&&e.data.sid){const t=e.data.sid;this.onconnect(t)}else this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case Tt.EVENT:case Tt.BINARY_EVENT:this.onevent(e);break;case Tt.ACK:case Tt.BINARY_ACK:this.onack(e);break;case Tt.DISCONNECT:this.ondisconnect();break;case Tt.CONNECT_ERROR:this.destroy();const t=new Error(e.data.message);t.data=e.data.data,this.emitReserved("connect_error",t)}}onevent(e){const t=e.data||[];null!=e.id&&t.push(this.ack(e.id)),this.connected?this.emitEvent(t):this.receiveBuffer.push(Object.freeze(t))}emitEvent(e){if(this._anyListeners&&this._anyListeners.length){const t=this._anyListeners.slice();for(const n of t)n.apply(this,e)}super.emit.apply(this,e)}ack(e){const t=this;let n=!1;return function(...r){n||(n=!0,t.packet({type:Tt.ACK,id:e,data:r}))}}onack(e){const t=this.acks[e.id];"function"==typeof t&&(t.apply(this,e.data),delete this.acks[e.id])}onconnect(e){this.id=e,this.connected=!0,this.emitBuffered(),this.emitReserved("connect")}emitBuffered(){this.receiveBuffer.forEach(e=>this.emitEvent(e)),this.receiveBuffer=[],this.sendBuffer.forEach(e=>{this.notifyOutgoingListeners(e),this.packet(e)}),this.sendBuffer=[]}ondisconnect(){this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach(e=>e()),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&this.packet({type:Tt.DISCONNECT}),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(e){return this.flags.compress=e,this}get volatile(){return this.flags.volatile=!0,this}timeout(e){return this.flags.timeout=e,this}onAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(e),this}prependAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(e),this}offAny(e){if(!this._anyListeners)return this;if(e){const t=this._anyListeners;for(let n=0;n<t.length;n++)if(e===t[n])return t.splice(n,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}onAnyOutgoing(e){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.push(e),this}prependAnyOutgoing(e){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.unshift(e),this}offAnyOutgoing(e){if(!this._anyOutgoingListeners)return this;if(e){const t=this._anyOutgoingListeners;for(let n=0;n<t.length;n++)if(e===t[n])return t.splice(n,1),this}else this._anyOutgoingListeners=[];return this}listenersAnyOutgoing(){return this._anyOutgoingListeners||[]}notifyOutgoingListeners(e){if(this._anyOutgoingListeners&&this._anyOutgoingListeners.length){const t=this._anyOutgoingListeners.slice();for(const n of t)n.apply(this,e.data)}}}function Ft(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}Ft.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),n=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-n:e+n}return 0|Math.min(e,this.max)},Ft.prototype.reset=function(){this.attempts=0},Ft.prototype.setMin=function(e){this.ms=e},Ft.prototype.setMax=function(e){this.max=e},Ft.prototype.setJitter=function(e){this.jitter=e};class jt extends at.a{constructor(e,t){var n;super(),this.nsps={},this.subs=[],e&&"object"==typeof e&&(t=e,e=void 0),(t=t||{}).path=t.path||"/socket.io",this.opts=t,Object(ot.b)(this,t),this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(null!==(n=t.randomizationFactor)&&void 0!==n?n:.5),this.backoff=new Ft({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this._readyState="closed",this.uri=e;const i=t.parser||r;this.encoder=new i.Encoder,this.decoder=new i.Decoder,this._autoConnect=!1!==t.autoConnect,this._autoConnect&&this.open()}reconnection(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection}reconnectionAttempts(e){return void 0===e?this._reconnectionAttempts:(this._reconnectionAttempts=e,this)}reconnectionDelay(e){var t;return void 0===e?this._reconnectionDelay:(this._reconnectionDelay=e,null===(t=this.backoff)||void 0===t||t.setMin(e),this)}randomizationFactor(e){var t;return void 0===e?this._randomizationFactor:(this._randomizationFactor=e,null===(t=this.backoff)||void 0===t||t.setJitter(e),this)}reconnectionDelayMax(e){var t;return void 0===e?this._reconnectionDelayMax:(this._reconnectionDelayMax=e,null===(t=this.backoff)||void 0===t||t.setMax(e),this)}timeout(e){return arguments.length?(this._timeout=e,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(e){if(~this._readyState.indexOf("open"))return this;this.engine=new yt(this.uri,this.opts);const t=this.engine,n=this;this._readyState="opening",this.skipReconnect=!1;const r=It(t,"open",(function(){n.onopen(),e&&e()})),i=It(t,"error",t=>{n.cleanup(),n._readyState="closed",this.emitReserved("error",t),e?e(t):n.maybeReconnectOnOpen()});if(!1!==this._timeout){const e=this._timeout;0===e&&r();const n=this.setTimeoutFn(()=>{r(),t.close(),t.emit("error",new Error("timeout"))},e);this.opts.autoUnref&&n.unref(),this.subs.push((function(){clearTimeout(n)}))}return this.subs.push(r),this.subs.push(i),this}connect(e){return this.open(e)}onopen(){this.cleanup(),this._readyState="open",this.emitReserved("open");const e=this.engine;this.subs.push(It(e,"ping",this.onping.bind(this)),It(e,"data",this.ondata.bind(this)),It(e,"error",this.onerror.bind(this)),It(e,"close",this.onclose.bind(this)),It(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(e){this.decoder.add(e)}ondecoded(e){this.emitReserved("packet",e)}onerror(e){this.emitReserved("error",e)}socket(e,t){let n=this.nsps[e];return n||(n=new Dt(this,e,t),this.nsps[e]=n),n}_destroy(e){const t=Object.keys(this.nsps);for(const e of t){if(this.nsps[e].active)return}this._close()}_packet(e){const t=this.encoder.encode(e);for(let n=0;n<t.length;n++)this.engine.write(t[n],e.options)}cleanup(){this.subs.forEach(e=>e()),this.subs.length=0,this.decoder.destroy()}_close(){this.skipReconnect=!0,this._reconnecting=!1,this.onclose("forced close"),this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(e,t){this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",e,t),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const e=this;if(this.backoff.attempts>=this._reconnectionAttempts)this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const t=this.backoff.duration();this._reconnecting=!0;const n=this.setTimeoutFn(()=>{e.skipReconnect||(this.emitReserved("reconnect_attempt",e.backoff.attempts),e.skipReconnect||e.open(t=>{t?(e._reconnecting=!1,e.reconnect(),this.emitReserved("reconnect_error",t)):e.onreconnect()}))},t);this.opts.autoUnref&&n.unref(),this.subs.push((function(){clearTimeout(n)}))}}onreconnect(){const e=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",e)}}const Rt={};function Mt(e,t){"object"==typeof e&&(t=e,e=void 0);const n=function(e,t="",n){let r=e;n=n||"undefined"!=typeof location&&location,null==e&&(e=n.protocol+"//"+n.host),"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?n.protocol+e:n.host+e),/^(https?|wss?):\/\//.test(e)||(e=void 0!==n?n.protocol+"//"+e:"https://"+e),r=gt(e)),r.port||(/^(http|ws)$/.test(r.protocol)?r.port="80":/^(http|ws)s$/.test(r.protocol)&&(r.port="443")),r.path=r.path||"/";const i=-1!==r.host.indexOf(":")?"["+r.host+"]":r.host;return r.id=r.protocol+"://"+i+":"+r.port+t,r.href=r.protocol+"://"+i+(n&&n.port===r.port?"":":"+r.port),r}(e,(t=t||{}).path||"/socket.io"),r=n.source,i=n.id,s=n.path,a=Rt[i]&&s in Rt[i].nsps;let o;return t.forceNew||t["force new connection"]||!1===t.multiplex||a?o=new jt(r,t):(Rt[i]||(Rt[i]=new jt(r,t)),o=Rt[i]),n.query&&!t.query&&(t.query=n.queryKey),o.socket(n.path,t)}Object.assign(Mt,{Manager:jt,Socket:Dt,io:Mt,connect:Mt});class _t{constructor(e,t,n,r,i,s){this.to=t,this.payloadSize=n,this.logger=r,this.requestCallback=i,this.responseCallback=s,this.results=new Map,this.workingState="working",this.requestsInFlight=0,this.endEvent=new $.a,this.requests=0,this.latestRequested=e,this.nextToDeliver=e,this.knewTo=void 0!==t}get working(){return"working"===this.workingState}get canceled(){return"canceled"===this.workingState}cancel(){this.working&&(this.workingState="canceled",this.endEvent.resolve())}async run(e){Object(w.a)(e>0,258),Object(w.a)(this.working,259);let t=e;for(;t>0;)t--,this.addRequest();return this.dispatch(),this.endEvent.promise}done(){Object(w.a)(void 0!==this.to,260),Object(w.a)(this.nextToDeliver>=this.to,261),this.working&&(this.workingState="done",this.endEvent.resolve())}fail(e){this.working&&(this.workingState="done",this.endEvent.reject(e))}dispatch(){for(;this.working;){const e=this.results.get(this.nextToDeliver);if(void 0===e)break;this.results.delete(this.nextToDeliver),Object(w.a)(e.length<=this.payloadSize,473),this.nextToDeliver+=e.length,this.responseCallback(e)}this.working&&(0===this.requestsInFlight?(Object(w.a)(0===this.results.size,263),this.done()):void 0!==this.to&&this.nextToDeliver>=this.to&&(Object(w.a)(!this.knewTo,264),this.done()))}getNextChunk(){if(!this.working)return;const e=this.latestRequested;return void 0!==this.to&&this.to<=e?void 0:(this.latestRequested+=this.payloadSize,void 0!==this.to&&(this.latestRequested=Math.min(this.to,this.latestRequested)),Object(w.a)(e<this.latestRequested,265),{from:e,to:this.latestRequested})}addRequest(){const e=this.getNextChunk();void 0!==e&&this.addRequestCore(e.from,e.to).catch(this.fail.bind(this))}async addRequestCore(e,t){Object(w.a)(this.working,266);let n=e,r=t;for(this.requestsInFlight++;this.working;){const e=r-n;Object(w.a)(e>0,267),void 0!==this.to&&(Object(w.a)(n<this.to,268),Object(w.a)(r<=this.to,269)),this.requests++;const t=this.requestCallback(this.requests,n,r,void 0!==this.to,{});this.dispatch();const{payload:i,cancel:s,partial:a}=await t;if(s&&this.cancel(),void 0!==this.to&&n>=this.to){Object(w.a)(!this.knewTo,270),0!==i.length&&this.logger.sendErrorEvent({eventName:"ParallelRequests_GotExtra",from:n,to:r,end:this.to,length:i.length});break}if(this.working){const t=n,s=i.length;let o=e<=s;if(0!==s){e<s&&this.logger.sendTelemetryEvent({eventName:"ParallelRequests_Over",from:n,to:r,length:s});const t=i.splice(0,e);this.results.set(n,t),n+=t.length}else Object(w.a)(!a,271),Object(w.a)(!this.knewTo,272);if(!a&&!o){if(!this.knewTo){(void 0===this.to||this.to>n)&&(this.to=n);break}this.logger.sendPerformanceEvent({eventName:"ParallelRequests_Partial",from:t,to:r,length:s})}if(r===this.latestRequested&&(0!==i.length&&(this.results.set(n,i),n+=i.length),this.latestRequested=n,o=!0),o){const e=this.getNextChunk();if(void 0===e)break;n=e.from,r=e.to}}}this.requestsInFlight--,this.dispatch()}}class Bt{constructor(){this.queue=[],this.done=!1}pushValue(e){this.pushCore(Promise.resolve({done:!1,value:e}))}pushError(e){this.pushCore(Promise.reject(e)),this.done=!0}pushDone(){this.pushCore(Promise.resolve({done:!0})),this.done=!0}pushCore(e){Object(w.a)(!this.done,274),this.deferred?(Object(w.a)(0===this.queue.length,275),this.deferred.resolve(e),this.deferred=void 0):this.queue.push(e)}async read(){Object(w.a)(void 0===this.deferred,276);const e=this.queue.shift();return void 0!==e?e:(Object(w.a)(!this.done,277),this.deferred=new $.a,this.deferred.promise)}}function Lt(e,t,n,r,i,s,a,o){let c,u=0,l=0;const m=new Bt,p={fromTotal:n,toTotal:r},f=d.c.start(s,Object.assign(Object.assign({eventName:"GetDeltas"},p),{fetchReason:o})),g=new _t(n,r,i,s,async(t,n,r,i,c)=>(u++,async function(e,t,n,r,i,s){let a,o=0;const c=[];for(;!0!==(null==i?void 0:i.aborted);){o++;let i=Math.min(1e4,100*Math.pow(2,o));const u=h.a.now();try{const r=e(Object.assign(Object.assign({},t),{retry:o})),{messages:i,partialResult:s}=await r;c.push(...i);if(0!==i.length||!n)return{payload:c,cancel:!1,partial:s};if(void 0===a)a=h.a.now();else if(h.a.now()-a>3e4)throw Object(k.g)("Failed to retrieve ops from storage (Too Many Retries)",{canRetry:!1},Object.assign({retry:o,driverVersion:"0.59.4002"},t))}catch(e){const n=Object(k.f)(e);a=void 0;const c=Object(k.i)(e);if(xe(r,Object.assign(Object.assign({eventName:"GetDeltas_Error"},t),{retry:o,duration:h.a.now()-u,retryAfter:c,fetchReason:s}),e),!n)throw e;void 0!==c&&c>=0&&(i=c)}await Ee(i)}return{partial:!1,cancel:!0,payload:[]}}(async t=>e(n,r,t),Object.assign(Object.assign({request:t,from:n,to:r},p),c),i,s,a,o)),e=>{void 0===c?Object(w.a)(e[0].sequenceNumber===n,621):Object(w.a)(e[0].sequenceNumber===c+1,622),c=e[e.length-1].sequenceNumber,Object(w.a)(c-e[0].sequenceNumber+1===e.length,623),l+=e.length,m.pushValue(e)}),y=e=>{g.cancel()};return void 0!==a&&a.addEventListener("abort",y),g.run(t).finally(()=>{void 0!==a&&a.removeEventListener("abort",y)}).then(()=>{const e={lastFetch:c,length:l,requests:u};g.canceled?f.cancel(Object.assign(Object.assign({},e),{error:"ops request cancelled by client"})):(Object(w.a)(void 0===r||void 0!==c&&c>=r-1,624),f.end(e)),m.pushDone()}).catch(e=>{f.cancel({lastFetch:c,length:l,requests:u},e),m.pushError(e)}),m}const qt={read:async()=>({done:!0})};var zt=n(184);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class Ht{constructor(e,t,n,r){this.tenantId=e,this.id=t,this.storageService=n,this.documentStorageService=r,this.logtailSha=this.documentStorageService.logTailSha}fetchMessages(e,t,n,r,i){return r?qt:Lt(this.getCore.bind(this),1,e,t,2e3,new zt.b,n,i)}async getCore(e,t){const n=this.logtailSha?await Object(F.a)(this.documentStorageService,this.logtailSha):[];if(this.logtailSha=void 0,n.length>0){const t=n.filter(t=>t.sequenceNumber>=e);if(t.length>0)return{messages:t,partialResult:!0}}return this.storageService.get(this.tenantId,this.id,e,t)}}class Ut{constructor(e,t,n){this.url=e,this.restWrapper=t,this.logger=n}async get(e,t,n,r){return{messages:await d.c.timedExecAsync(this.logger,{eventName:"getDeltas",from:n,to:r},async e=>{const t=await this.restWrapper.get(this.url,{from:n-1,to:r});return e.end({count:t.length}),t}),partialResult:!1}}}var Vt=n(131);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class Gt extends Vt.a{constructor(){super(...arguments),this.prefetchCache=new Map,this.prefetchEnabled=!0}get policies(){const e=this.internalStorageService.policies;if(e)return Object.assign(Object.assign({},e),{caching:Re.NoCaching})}async getSnapshotTree(e){const t=this.internalStorageService.getSnapshotTree(e);return this.prefetchEnabled&&t.then(e=>{null!=e&&this.prefetchTree(e)}),t}async readBlob(e){return this.cachedRead(e)}stopPrefetch(){this.prefetchEnabled=!1,this.prefetchCache.clear()}async cachedRead(e){if(this.prefetchEnabled){const t=this.prefetchCache.get(e);if(void 0!==t)return t;const n=this.internalStorageService.readBlob(e);return this.prefetchCache.set(e,n.catch(t=>{throw Object(k.f)(t)&&this.prefetchCache.delete(e),t})),n}return this.internalStorageService.readBlob(e)}prefetchTree(e){const t=[];this.prefetchTreeCore(e,t);for(const e of t)this.cachedRead(e)}prefetchTreeCore(e,t){for(const n of Object.keys(e.blobs)){const r=e.blobs[n];n.startsWith(".")||"header"===n||n.startsWith("quorum")?null!==r&&this.cachedRead(r):n.startsWith("deltas")||null!==r&&t.push(r)}for(const n of Object.keys(e.trees))this.prefetchTreeCore(e.trees[n],t)}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class Wt{constructor(e){this.props=e,this.attachmentCounter=0,this.summaryTree={}}get summary(){var e;return{type:P.a.Tree,tree:Object.assign({},this.summaryTree),unreferenced:null===(e=this.props)||void 0===e?void 0:e.unreferenced}}addBlob(e,t){this.summaryTree[e]={type:P.a.Blob,content:t}}addHandle(e,t,n){this.summaryTree[e]={type:P.a.Handle,handleType:t,handle:n}}addTree(e,t){this.summaryTree[e]=t}addAttachment(e){this.summaryTree[this.attachmentCounter++]={id:e,type:P.a.Attachment}}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
const Kt=(...e)=>e.map(e=>e.replace(/^\//,"").replace(/\/$/,"")).filter(e=>!!e).join("/");function $t(e,t=".app"){var n;const r=new Map;e.blobs&&e.blobs.forEach(e=>{var t;r.set(e.id,Object(me.e)(e.content,null!==(t=e.encoding)&&void 0!==t?t:"utf-8"))});const i=null===(n=e.trees)||void 0===n?void 0:n[0],s=null==i?void 0:i.sequenceNumber,a=function(e,t){const n={},r={id:e.id,blobs:{},trees:{}};n[""]=r;for(const r of e.entries){const e=r.path.replace(new RegExp(`^${t}/`),""),i=e.lastIndexOf("/"),s=e.slice(0,Math.max(0,i)),a=e.slice(i+1),o=n[s];if("tree"===r.type){const t={blobs:{},trees:{},unreferenced:r.unreferenced};o.trees[decodeURIComponent(a)]=t,n[e]=t}else{if("blob"!==r.type)throw new Error("Unknown entry type!!");o.blobs[decodeURIComponent(a)]=r.id}}return r}(i,t);return{blobs:r,snapshotTree:a,sequenceNumber:s}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class Jt{constructor(e){this.manager=e}async writeSummaryTree(e,t,n,r){const i=await this.writeSummaryTreeCore(t,e,n,null!=r?r:0);if(!i)throw new Error("Failed to write summary tree");return i}async writeSummaryTreeCore(e,t,n,r){const i={entries:function e(t,n,r="",i=""){const s={type:"tree",entries:[]},a=Object.keys(n.tree);for(const o of a){const a=n.tree[o];let c,u,h;const l=Kt(""===r?i:r,o);switch(a.type){case P.a.Tree:u=e(t,a,l,i),h=a.unreferenced||void 0;break;case P.a.Blob:u="string"==typeof a.content?{type:"blob",content:a.content,encoding:"utf-8"}:{type:"blob",content:Object(me.b)(a.content,"base64"),encoding:"base64"};break;case P.a.Handle:if(a.embedded)c=a.handle;else{if(!t)throw Error("Parent summary does not exist to reference by handle.");c=Kt(t,i,a.handle)}break;case P.a.Attachment:c=a.id;break;default:Object(C.a)(a,"Unknown type: "+a.type)}const d={path:encodeURIComponent(o),type:Object(Je.f)(a)};let m;if(u)Object(w.a)(void 0===c,173),m=Object.assign({value:u,unreferenced:h},d);else{if(!c)throw new Error("Invalid tree entry for "+a.type);m=Object.assign(Object.assign({},d),{id:c})}s.entries.push(m)}return s}(e,t,"","channel"===n?".app":"").entries,message:void 0,sequenceNumber:r,type:n};return this.manager.createSummary(i).then(e=>e.id)}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class Qt{constructor(){this.cache=new Map}async get(e){return this.cache.get(e)}async put(e,t){this.cache.set(e,t)}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class Yt{constructor(e,t,n,r={},i,s=new Qt,a=new Qt,o){this.id=e,this.manager=t,this.logger=n,this.policies=r,this.driverPolicies=i,this.blobCache=s,this.snapshotTreeCache=a,this.noCacheGitManager=o,this.firstVersionsCall=!0,this.summaryUploadManager=new Jt(t)}get repositoryUrl(){return""}async getVersions(e,t){var n;if(e!==this.id&&null!==e)return[{id:e,treeId:void 0}];if(this.firstVersionsCall&&1===t){this.firstVersionsCall=!1;const{id:e,snapshotTree:t}=(null===(n=this.driverPolicies)||void 0===n?void 0:n.enableDiscovery)?await this.fetchAndCacheSnapshotTree("latest",!0):await this.fetchAndCacheSnapshotTree("latest",!1);return[{id:e,treeId:t.id}]}const r=e||this.id;return(await d.c.timedExecAsync(this.logger,{eventName:"getVersions",versionId:r,count:t},async()=>this.manager.getCommits(r,t))).map(e=>({date:e.commit.author.date,id:e.sha,treeId:e.commit.tree.sha}))}async getSnapshotTree(e){let t=e;if(!t){const e=await this.getVersions(this.id,1);if(0===e.length)return null;t=e[0]}return(await this.fetchAndCacheSnapshotTree(t.id)).snapshotTree}async readBlob(e){const t=await this.blobCache.get(e);if(void 0!==t)return t;const n=await d.c.timedExecAsync(this.logger,{eventName:"readBlob",blobId:e},async t=>{const n=await this.manager.getBlob(e);return t.end({size:n.size}),n}),r=Object(me.e)(n.content,n.encoding);return await this.blobCache.put(n.sha,r),r}async uploadSummaryWithContext(e,t){return await d.c.timedExecAsync(this.logger,{eventName:"uploadSummaryWithContext"},async()=>{var n;return this.summaryUploadManager.writeSummaryTree(e,null!==(n=t.ackHandle)&&void 0!==n?n:"","channel")})}async downloadSummary(e){const t=await d.c.timedExecAsync(this.logger,{eventName:"getWholeFlatSummary",treeId:e.handle},async t=>{var n;const r=await this.manager.getSummary(e.handle);return t.end({size:null===(n=r.trees[0])||void 0===n?void 0:n.entries.length}),r}),{blobs:n,snapshotTree:r}=$t(t,"");return function e(t,n){const r=new Wt({unreferenced:t.unreferenced});for(const[e,i]of Object.entries(t.blobs)){const t=n.get(i);Object(w.a)(void 0!==t,733),r.addBlob(e,me.a.from(t).toString("utf-8"))}for(const[i,s]of Object.entries(t.trees)){const t=e(s,n);r.addTree(i,t)}return r.summary}(r,n)}async write(e,t,n,r){throw new Error("NOT IMPLEMENTED!")}async createBlob(e){const t=new Uint8Array(e);return d.c.timedExecAsync(this.logger,{eventName:"createBlob",size:t.length},async e=>{const n=await this.manager.createBlob(Object(me.b)(t,"base64"),"base64").then(e=>({id:e.sha,url:e.url}));return e.end({blobId:n.id}),n})}async fetchAndCacheSnapshotTree(e,t){const n=await this.snapshotTreeCache.get(e);if(void 0!==n)return{id:n.id,snapshotTree:n.snapshotTree};const r=await d.c.timedExecAsync(this.logger,{eventName:"getWholeFlatSummary",treeId:e},async n=>{var r;const i=t&&void 0!==this.noCacheGitManager?await this.noCacheGitManager.getSummary(e):await this.manager.getSummary(e);return n.end({size:null===(r=i.trees[0])||void 0===r?void 0:r.entries.length}),i}),i=$t(r),s=r.id,a=i.snapshotTree.id;Object(w.a)(void 0!==a,629);const o={id:s,snapshotTree:i.snapshotTree},c=[this.snapshotTreeCache.put(a,o),this.initBlobCache(i.blobs)];return a!==e&&c.push(this.snapshotTreeCache.put(e,o)),await Promise.all(c),o}async initBlobCache(e){const t=[];e.forEach((e,n)=>{t.push(this.blobCache.put(n,e))}),await Promise.all(t)}}var Xt=n(237);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class Zt{constructor(e,t,n){this.manager=e,this.blobsShaCache=t,this.getPreviousFullSnapshot=n}async writeSummaryTree(e,t,n,r){const i=await this.getPreviousFullSnapshot(t);return this.writeSummaryTreeCore(e,null!=i?i:void 0)}async writeSummaryTreeCore(e,t){const n=await Promise.all(Object.keys(e.tree).map(async n=>{const r=e.tree[n],i=await this.writeSummaryTreeObject(r,t);return{mode:Object(Je.e)(r),path:encodeURIComponent(n),sha:i,type:Object(Je.f)(r)}}));return(await this.manager.createGitTree({tree:n})).sha}async writeSummaryTreeObject(e,t){switch(e.type){case P.a.Blob:return this.writeSummaryBlob(e.content);case P.a.Handle:if(void 0===t)throw Error("Parent summary does not exist to reference by handle.");return this.getIdFromPath(e.handleType,e.handle,t);case P.a.Tree:return this.writeSummaryTreeCore(e,t);case P.a.Attachment:return e.id;default:Object(C.a)(e,"Unknown type: "+e.type)}}async writeSummaryBlob(e){const{parsedContent:t,encoding:n}="string"==typeof e?{parsedContent:e,encoding:"utf-8"}:{parsedContent:Object(me.b)(e,"base64"),encoding:"base64"},r=await Object(Xt.a)(me.a.from(t,n));if(!this.blobsShaCache.has(r)){this.blobsShaCache.set(r,"");const e=await this.manager.createBlob(t,n);Object(w.a)(r===e.sha,182)}return r}getIdFromPath(e,t,n){const r=t.split("/").map(e=>decodeURIComponent(e));return""===r[0]&&r.shift(),0===r.length?n.id:this.getIdFromPathCore(e,r,n)}getIdFromPathCore(e,t,n){var r;Object(w.a)(t.length>0,179);const i=t[0];if(1===t.length)switch(e){case P.a.Blob:{const e=n.blobs[i];return Object(w.a)(!!e,180),e}case P.a.Tree:{const e=null===(r=n.trees[i])||void 0===r?void 0:r.id;return Object(w.a)(!!e,181),e}default:throw Error(`Unexpected handle summary object type: "${e}".`)}return this.getIdFromPathCore(e,t.slice(1),n.trees[i])}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class en{constructor(e,t){this.internalGitManager=e,this.logger=t}async getHeader(e,t){return this.runWithRetry(async()=>this.internalGitManager.getHeader(e,t),"gitManager_getHeader")}async getFullTree(e){return this.runWithRetry(async()=>this.internalGitManager.getFullTree(e),"gitManager_getFullTree")}async getCommit(e){return this.runWithRetry(async()=>this.internalGitManager.getCommit(e),"gitManager_getCommit")}async getCommits(e,t){return this.runWithRetry(async()=>this.internalGitManager.getCommits(e,t),"gitManager_getCommits")}async getTree(e,t){return this.runWithRetry(async()=>this.internalGitManager.getTree(e,t),"gitManager_getTree")}async getBlob(e){return this.runWithRetry(async()=>this.internalGitManager.getBlob(e),"gitManager_getBlob")}getRawUrl(e){return this.internalGitManager.getRawUrl(e)}async getContent(e,t){return this.runWithRetry(async()=>this.internalGitManager.getContent(e,t),"gitManager_getContent")}async createBlob(e,t){return this.runWithRetry(async()=>this.internalGitManager.createBlob(e,t),"gitManager_createBlob")}async createGitTree(e){return this.runWithRetry(async()=>this.internalGitManager.createGitTree(e),"gitManager_createGitTree")}async createTree(e){return this.runWithRetry(async()=>this.internalGitManager.createTree(e),"gitManager_createTree")}async createCommit(e){return this.runWithRetry(async()=>this.internalGitManager.createCommit(e),"gitManager_createCommit")}async getRef(e){return this.runWithRetry(async()=>this.internalGitManager.getRef(e),"gitManager_getRef")}async createRef(e,t){return this.runWithRetry(async()=>this.internalGitManager.createRef(e,t),"gitManager_createRef")}async upsertRef(e,t){return this.runWithRetry(async()=>this.internalGitManager.upsertRef(e,t),"gitManager_upsertRef")}async write(e,t,n,r){return this.runWithRetry(async()=>this.internalGitManager.write(e,t,n,r),"gitManager_write")}async createSummary(e){return this.runWithRetry(async()=>this.internalGitManager.createSummary(e),"gitManager_createSummary")}async deleteSummary(e){return this.runWithRetry(async()=>this.internalGitManager.deleteSummary(e),"gitManager_deleteSummary")}async getSummary(e){return this.runWithRetry(async()=>this.internalGitManager.getSummary(e),"gitManager_getSummary")}async runWithRetry(e,t){return D(e,t,this.logger,{})}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */const tn="undefined"==typeof window;class nn{constructor(e,t,n,r={},i,s,a){this.id=e,this.manager=t,this.logger=n,this.policies=r,this.blobsShaCache=new Map,this.summaryUploadManager=new Zt(new en(t,n),this.blobsShaCache,this.getPreviousFullSnapshot.bind(this)),(!0===(null==i?void 0:i.enableRestLess)||tn)&&(this.blobCache=null!=s?s:new Qt,this.snapshotTreeCache=null!=a?a:new Qt)}get repositoryUrl(){return""}async getVersions(e,t){const n=e||this.id;return(await d.c.timedExecAsync(this.logger,{eventName:"getVersions",versionId:n,count:t},async()=>this.manager.getCommits(n,t))).map(e=>({date:e.commit.author.date,id:e.sha,treeId:e.commit.tree.sha}))}async getSnapshotTree(e){var t,n;let r=e;if(!r){const e=await this.getVersions(this.id,1);if(0===e.length)return null;r=e[0]}const i=await(null===(t=this.snapshotTreeCache)||void 0===t?void 0:t.get(r.treeId));if(i)return i.snapshotTree;const s=await d.c.timedExecAsync(this.logger,{eventName:"getSnapshotTree",treeId:r.treeId},async e=>{const t=await this.manager.getTree(r.treeId);return e.end({size:t.tree.length}),t}),a=Object(Je.d)(s,this.blobsShaCache,!0);return await(null===(n=this.snapshotTreeCache)||void 0===n?void 0:n.put(a.id,{id:r.id,snapshotTree:a})),a}async readBlob(e){var t,n;const r=await(null===(t=this.blobCache)||void 0===t?void 0:t.get(e));if(r)return r;const i=await d.c.timedExecAsync(this.logger,{eventName:"readBlob",blobId:e},async t=>{const n=await this.manager.getBlob(e);return t.end({size:n.size}),n});this.blobsShaCache.set(i.sha,"");const s=Object(me.e)(i.content,i.encoding);return await(null===(n=this.blobCache)||void 0===n?void 0:n.put(i.sha,s)),s}async write(e,t,n,r){const i=r?`datastores/${this.id}/${r}`:this.id,s=await d.c.timedExecAsync(this.logger,{eventName:"write",id:i},async()=>this.manager.write(i,e,t,n));return{date:s.committer.date,id:s.sha,treeId:s.tree.sha}}async uploadSummaryWithContext(e,t){return await d.c.timedExecAsync(this.logger,{eventName:"uploadSummaryWithContext"},async()=>{var n;return this.summaryUploadManager.writeSummaryTree(e,null!==(n=t.ackHandle)&&void 0!==n?n:"","channel")})}async downloadSummary(e){throw new Error("NOT IMPLEMENTED!")}async createBlob(e){const t=new Uint8Array(e);return d.c.timedExecAsync(this.logger,{eventName:"createBlob",size:t.length},async e=>{const n=await this.manager.createBlob(Object(me.b)(t,"base64"),"base64").then(e=>({id:e.sha,url:e.url}));return e.end({blobId:n.id}),n})}async getPreviousFullSnapshot(e){return e?this.getVersions(e,1).then(async e=>(this.blobsShaCache.clear(),this.getSnapshotTree(e[0]))):void 0}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class rn extends Vt.a{constructor(e,t,n,r={},i,s,a,o){super(rn.loadInternalDocumentStorageService(e,t,n,r,i,s,a,o)),this.id=e,this.manager=t,this.noCacheGitManager=o,this._logTailSha=void 0}get logTailSha(){return this._logTailSha}static loadInternalDocumentStorageService(e,t,n,r,i,s,a,o){const c=(null==i?void 0:i.enableWholeSummaryUpload)?new Yt(e,t,n,r,i,s,a,o):new nn(e,t,n,r,i,s,a);return(null==i?void 0:i.enableWholeSummaryUpload)||r.caching!==Re.Prefetch?c:new Gt(c)}async getSnapshotTree(e){const t=await this.internalStorageService.getSnapshotTree(e);return null!==t&&(this._logTailSha=".logTail"in t.trees?t.trees[".logTail"].blobs.logTail:void 0),t}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 *
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY
 */
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class sn extends i.a{constructor(e,t,n,r=!1){super(),this.socket=e,this.documentId=t,this.enableLongPollingDowngrades=r,this.queuedMessages=[],this.queuedSignals=[],this.earlyOpHandlerAttached=!1,this.connectionListeners=new Map,this.trackedListeners=new Map,this._disposed=!1,this.earlyOpHandler=(e,t)=>{this.queuedMessages.push(...t)},this.earlySignalHandler=e=>{this.queuedSignals.push(e)},this.mc=Object(u.c)(d.a.create(n,"DeltaConnection")),this.on("newListener",(e,t)=>{if(Object(w.a)(!this.disposed,522),sn.eventsAlwaysForwarded.includes(e))Object(w.a)(this.trackedListeners.has(e),581);else{if(!sn.eventsToForward.includes(e))throw new Error("DocumentDeltaConnection: Registering for unknown event: "+e);Object(w.a)(0!==this.listeners(e).length===this.trackedListeners.has(e),523),this.trackedListeners.has(e)||this.addTrackedListener(e,(...t)=>{this.emit(e,...t)})}})}get hasDetails(){return!!this._details}get disposed(){return Object(w.a)(this._disposed||this.socket.connected,580),this._disposed}get logger(){return this.mc.logger}get details(){if(!this._details)throw new Error("Internal error: calling method before _details is initialized!");return this._details}get clientId(){return this.details.clientId}get mode(){return this.details.mode}get claims(){return this.details.claims}get existing(){return this.details.existing}get maxMessageSize(){return this.details.serviceConfiguration.maxMessageSize}get version(){return this.details.version}get serviceConfiguration(){return this.details.serviceConfiguration}checkNotClosed(){Object(w.a)(!this.disposed,524)}get initialMessages(){return this.checkNotClosed(),Object(w.a)(this.earlyOpHandlerAttached,142),Object(w.a)(0!==this.listeners("op").length,143),this.removeEarlyOpHandler(),this.queuedMessages.length>0&&(this.details.initialMessages.push(...this.queuedMessages),this.details.initialMessages.sort((e,t)=>e.sequenceNumber-t.sequenceNumber),this.queuedMessages.length=0),this.details.initialMessages}get initialSignals(){return this.checkNotClosed(),Object(w.a)(0!==this.listeners("signal").length,144),this.removeEarlySignalHandler(),this.queuedSignals.length>0&&(this.details.initialSignals.push(...this.queuedSignals),this.queuedSignals.length=0),this.details.initialSignals}get initialClients(){return this.checkNotClosed(),this.details.initialClients}emitMessages(e,t){this.disposed||this.socket.emit(e,this.clientId,t)}submitCore(e,t){this.emitMessages(e,[t])}submit(e){this.checkNotClosed(),this.submitCore("submitOp",e)}submitSignal(e){this.checkNotClosed(),this.submitCore("submitSignal",[e])}dispose(){this.disposeCore(!1,Object(k.g)("Client closing delta connection",{canRetry:!0},{driverVersion:"0.59.4002"}))}disposeCore(e,t){this._disposed||(this._disposed=!0,this.removeTrackedListeners(),this.disconnect(e,t))}disconnect(e,t){this.socket.disconnect()}async initialize(e,t){this.socket.on("op",this.earlyOpHandler),this.socket.on("signal",this.earlySignalHandler),this.earlyOpHandlerAttached=!0;let n=0;const r=()=>this.socket.io.reconnection(),i=()=>r()?this.socket.io.reconnectionAttempts():0;this._details=await new Promise((s,a)=>{const o=(e,t)=>{this.disposeCore(e,t),a(t)};this.addConnectionListener("connect_error",e=>{var t;n++;let s=!1;try{const t=null==e?void 0:e.description;t&&"object"==typeof t&&("TransportError"===e.type&&(s=!0),t.target=void 0)}catch(e){}s&&this.enableLongPollingDowngrades&&"polling"!==(null===(t=this.socket.io.opts.transports)||void 0===t?void 0:t[0])&&(this.socket.io.opts.transports=["polling","websocket"],r()||(this.socket.io.reconnection(!0),this.socket.io.reconnectionAttempts(1))),r()&&n<i()+1||o(!0,this.createErrorObject("connect_error",e))}),this.addConnectionListener("connect_timeout",()=>{o(!0,this.createErrorObject("connect_timeout"))}),this.addConnectionListener("connect_document_success",t=>{if(void 0!==e.nonce&&void 0!==t.nonce&&t.nonce!==e.nonce)return;const n=e.mode,r=t.mode;if(t.claims.scopes.includes(Oe.DocWrite)){if(r!==n)return void o(!1,this.createErrorObject("connect_document_success","Connected in a different mode than was requested",!1))}else if("write"===r)return void o(!1,this.createErrorObject("connect_document_success","Connected in write mode without write permissions",!1));this.checkpointSequenceNumber=t.checkpointSequenceNumber,this.removeConnectionListeners(),s(t)}),this.addTrackedListener("disconnect",e=>{const t=this.createErrorObject("disconnect",e);this.emit("disconnect",t),o(!0,t)}),this.addTrackedListener("error",e=>{const t=this.createErrorObject("error",e,"Invalid namespace"!==e);this.emit("error",t),o(!0,t)}),this.addConnectionListener("connect_document_error",t=>{void 0!==e.nonce&&void 0!==t.nonce&&t.nonce!==e.nonce||o(!1,this.createErrorObject("connect_document_error",t))}),this.socket.emit("connect_document",e),this.socketConnectionTimeout=setTimeout(()=>{o(!1,this.createErrorObject("orderingServiceHandshakeTimeout"))},t+2e3)}),Object(w.a)(!this.disposed,582)}removeEarlyOpHandler(){this.socket.removeListener("op",this.earlyOpHandler),this.earlyOpHandlerAttached=!1}removeEarlySignalHandler(){this.socket.removeListener("signal",this.earlySignalHandler)}addConnectionListener(e,t){Object(w.a)(!sn.eventsAlwaysForwarded.includes(e),583),Object(w.a)(!sn.eventsToForward.includes(e),584),this.socket.on(e,t),Object(w.a)(!this.connectionListeners.has(e),525),this.connectionListeners.set(e,t)}addTrackedListener(e,t){this.socket.on(e,t),Object(w.a)(!this.trackedListeners.has(e),526),this.trackedListeners.set(e,t)}removeTrackedListeners(){for(const[e,t]of this.trackedListeners.entries())this.socket.off(e,t);this.removeConnectionListeners(),this.removeEarlyOpHandler(),this.removeEarlySignalHandler(),this.trackedListeners.clear()}removeConnectionListeners(){void 0!==this.socketConnectionTimeout&&clearTimeout(this.socketConnectionTimeout);for(const[e,t]of this.connectionListeners.entries())this.socket.off(e,t);this.connectionListeners.clear()}createErrorObject(e,t,n=!0){let r;if("TransportError"===(null==t?void 0:t.type)){r=`${void 0!==(null==t?void 0:t.message)?t.message+": ":""}${JSON.stringify(t,Object(V.e)())}`}else r=Object(zt.c)(t).message;return Object(k.g)(`socket.io (${e}): ${r}`,{canRetry:n},{driverVersion:"0.59.4002"})}}sn.eventsToForward=["nack","op","signal","pong"],sn.eventsAlwaysForwarded=["disconnect","error"];
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
var an;function on(e,t,n){const r={statusCode:t,driverVersion:"0.59.4002"};switch(t){case void 0:return new k.c(e,e.startsWith("NetworkError"),r);case 401:case 403:return new k.a(e,void 0,void 0,r);case 404:const t=an.fileNotFoundOrAccessDeniedError;return new k.d(e,t,r);case 429:return Object(k.g)(e,{canRetry:!0,retryAfterMs:n},r);case 500:case 502:return new k.c(e,!0,r);default:const i={canRetry:void 0!==n,retryAfterMs:n};return Object(k.g)(e,i,r)}}function cn(e,t,n){throw on(e,t,n)}!function(e){e.fileNotFoundOrAccessDeniedError="fileNotFoundOrAccessDeniedError"}(an||(an={}));
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
const un=["^0.4.0","^0.3.0","^0.2.0","^0.1.0"];class hn extends sn{static async create(e,t,n,r,i,s,a,o=2e4){const c=r(s,{query:{documentId:t,tenantId:e},reconnection:!1,transports:["websocket"],timeout:o}),u={client:i,id:t,mode:i.mode,tenantId:e,token:n,versions:un,relayUserAgent:[i.details.environment," driverVersion:0.59.4002"].join(";")},h=new hn(c,t,a,!0);return await h.initialize(u,o),h}createErrorObject(e,t,n=!0){return n&&Number.isInteger(null==t?void 0:t.code)&&"string"==typeof(null==t?void 0:t.message)?function(e,t){return on(`R11s socket error (${t}): ${e.message}`,e.code,e.retryAfterMs)}(t,e):super.createErrorObject(e,t,n)}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class ln{get repositoryUrl(){throw new Error("Invalid operation")}async getSnapshotTree(e){return e?Promise.reject(new Error("Invalid operation")):null}async getVersions(e,t){return[]}async write(e,t,n,r){return Promise.reject(new Error("Null blob storage can not write commit"))}async uploadSummaryWithContext(e,t){return Promise.reject(new Error("Invalid operation"))}async downloadSummary(e){return Promise.reject(new Error("Invalid operation"))}async createBlob(e){return Promise.reject(new Error("Null blob storage can not create blob"))}async readBlob(e){return Promise.reject(new Error("Null blob storage can not read blob"))}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */var dn;!function(e){e.Method="method",e.Header="header",e.Body="body"}(dn||(dn={}));const mn=(e,t)=>`${e}: ${t}`;class pn{translate(e){var t,n;const r=Object.assign({},e),i=new URLSearchParams;if(i.append(dn.Method,null!==(t=r.method)&&void 0!==t?t:"GET"),r.headers)for(const[e,t]of Object.entries(r.headers)){const n=mn(e,t);i.append(dn.Header,n)}if(r.data&&["post","put","patch"].includes(null===(n=r.method)||void 0===n?void 0:n.toLowerCase())){const e=JSON.stringify(r.data);i.append(dn.Body,e)}return r.data=i.toString(),r.method="POST",r.headers={"Content-Type":"application/x-www-form-urlencoded;restless"},r}}var fn=n(302),gn=n.n(fn);class yn extends Ge{constructor(e,t,n,r,i,s={}){super(i,s),this.rateLimiter=t,this.getAuthorizationHeader=n,this.useRestLess=r,this.restLess=new pn}async load(){this.authorizationHeader=await this.getAuthorizationHeader()}async request(e,t,n=!0){var r;const i=Object.assign(Object.assign({},e),{headers:this.generateHeaders(e.headers)}),s=(e=>{var t,n;return[void 0!==e.baseURL?`${e.baseURL}${null!==(t=e.url)&&void 0!==t?t:""}`:null!==(n=e.url)&&void 0!==n?n:"",{method:e.method,headers:e.headers,body:e.data}]})(this.useRestLess?this.restLess.translate(i):i),a=await this.rateLimiter.schedule(async()=>gn()(...s).catch(async e=>{cn(["TypeError","FetchError"].includes(null==e?void 0:e.name)?"NetworkError: "+e.message:Le()(e))})),o=(null===(r=a.headers.get("content-type"))||void 0===r?void 0:r.includes("application/json"))?await a.json():await a.text();if(a.ok||a.status===t){return o}if(401===a.status&&n)return this.authorizationHeader=await this.getAuthorizationHeader(!0),this.request(i,t,!1);if(429===a.status&&(null==o?void 0:o.retryAfter)>0)return new Promise((e,n)=>setTimeout(()=>{this.request(i,t).then(e).catch(n)},1e3*o.retryAfter));cn("R11s fetch error: "+(void 0!==o?"string"==typeof o?o:Le()(o):a.statusText),a.status,null==o?void 0:o.retryAfter)}generateHeaders(e){const t=(null==e?void 0:e["x-correlation-id"])||Object(o.a)();return Object.assign(Object.assign({},e),{"x-correlation-id":t,"x-driver-version":"0.59.4002",Authorization:this.authorizationHeader})}}class vn extends yn{constructor(e,t,n,r,i,s={}){super(e,t,n,r,i,s)}static async load(e,t,n,r,i,s,a){const o={token:""+Object(Me.b)(e)},c=new vn(r,i,async r=>(e=>"Basic "+Object(Me.b)(`${e.user}:${e.password}`))({password:(await n.fetchStorageToken(e,t,r)).jwt,user:e}),s,a,o);try{await c.load()}catch(e){r.sendErrorEvent({eventName:"R11sRestWrapperLoadFailure"},e),await c.load()}return c}}class bn extends yn{constructor(e,t,n,r,i,s={}){super(e,t,n,r,i,s)}static async load(e,t,n,r,i,s,a){const o=new bn(r,i,async r=>"Basic "+(await n.fetchOrdererToken(e,t,r)).jwt,s,a);try{await o.load()}catch(e){r.sendErrorEvent({eventName:"R11sRestWrapperLoadFailure"},e),await o.load()}return o}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class Sn{constructor(e,t,n,r,i,s,a,o,c,u,h){this.resolvedUrl=e,this.ordererUrl=t,this.deltaStorageUrl=n,this.gitUrl=r,this.logger=i,this.tokenProvider=s,this.tenantId=a,this.documentId=o,this.driverPolicies=c,this.blobCache=u,this.snapshotTreeCache=h}dispose(){}async connectToStorage(){if(void 0!==this.documentStorageService)return this.documentStorageService;if(void 0===this.gitUrl)return new ln;const e=new je(this.driverPolicies.maxConcurrentStorageRequests),t=await vn.load(this.tenantId,this.documentId,this.tokenProvider,this.logger,e,this.driverPolicies.enableRestLess,this.gitUrl),n=new $e(this.gitUrl,!0,!1,t),r=new Ye(n),i=new $e(this.gitUrl,!0,!0,t),s=new Ye(i),a={caching:this.driverPolicies.enablePrefetch?Re.Prefetch:Re.NoCaching,minBlobSize:this.driverPolicies.aggregateBlobsSmallerThanBytes};return this.documentStorageService=new rn(this.documentId,r,this.logger,a,this.driverPolicies,this.blobCache,this.snapshotTreeCache,s),this.documentStorageService}async connectToDeltaStorage(){await this.connectToStorage(),Object(w.a)(!!this.documentStorageService,177);const e=new je(this.driverPolicies.maxConcurrentOrdererRequests),t=await bn.load(this.tenantId,this.documentId,this.tokenProvider,this.logger,e,this.driverPolicies.enableRestLess),n=new Ut(this.deltaStorageUrl,t,this.logger);return new Ht(this.tenantId,this.documentId,n,this.documentStorageService)}async connectToDeltaStream(e){const t=async t=>{const n=await this.tokenProvider.fetchOrdererToken(this.tenantId,this.documentId,t);return hn.create(this.tenantId,this.documentId,n.jwt,Mt,e,this.ordererUrl,this.logger)};try{return await t()}catch(e){if(401===(null==e?void 0:e.statusCode))return t(!0);throw e}}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */function wn(e){const t=Object.keys(e.tree);for(const n of t){const t=e.tree[n];switch(t.type){case P.a.Tree:e.tree[n]=wn(t);break;case P.a.Blob:t.content="string"==typeof t.content?t.content:Object(me.b)(t.content,"utf8");break;case P.a.Handle:throw new Error("No handle should be present for first summary!!");default:throw new Error("Unknown tree type "+t.type)}}return e}var Cn=n(68),xn=n.n(Cn);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
const En=e=>new xn.a(e,!0),On=(e,t)=>e.split("/").slice(0,-1).concat([t]).join("/"),Tn=(e,t)=>{if(t){const n=new xn.a(t.ordererUrl),r=new xn.a(e.endpoints.deltaStorageUrl);r.set("host",n.host);const i=new xn.a(t.historianUrl),s=new xn.a(e.endpoints.storageUrl);s.set("host",i.host);const a=En(e.url);return{endpoints:{deltaStorageUrl:r.toString(),ordererUrl:t.ordererUrl,storageUrl:s.toString()},id:e.id,tokens:e.tokens,type:e.type,url:new xn.a(`fluid://${n.host}${a.pathname}`).toString()}}return e},Pn={enablePrefetch:!0,maxConcurrentStorageRequests:100,maxConcurrentOrdererRequests:100,aggregateBlobsSmallerThanBytes:void 0,enableDiscovery:!1,enableWholeSummaryUpload:!1,enableRestLess:!0};class An{constructor(e,t={}){this.tokenProvider=e,this.protocolName="fluid:",this.blobCache=new Qt,this.snapshotTreeCache=new Qt,this.driverPolicies=Object.assign(Object.assign({},Pn),t)}async createContainer(e,t,n,r){if(f(t),void 0===e)throw new Error("Empty file summary creation isn't supported in this driver.");Object(w.a)(!!t.endpoints.ordererUrl,178);let i=En(t.url);if(!i.pathname)throw new Error("Parsed url should contain tenant and doc Id!!");const[,s]=i.pathname.split("/"),a=e.tree[".protocol"],o=e.tree[".app"];if(!a||!o)throw new Error("Protocol and App Summary required in the full summary");const c=function(e){var t;const n=e.tree.attributes,r=JSON.parse(n.content);return r.term=null!==(t=r.term)&&void 0!==t?t:1,r}(a),u=function(e){const t=e.tree.quorumValues;return JSON.parse(t.content)}(a),h=d.a.create(n,"RouterliciousDriver"),l=new je(this.driverPolicies.maxConcurrentOrdererRequests),m=await bn.load(s,void 0,this.tokenProvider,h,l,this.driverPolicies.enableRestLess,t.endpoints.ordererUrl),p=await m.post("/documents/"+s,{summary:wn(o),sequenceNumber:c.sequenceNumber,values:u,enableDiscovery:this.driverPolicies.enableDiscovery,generateToken:void 0!==this.tokenProvider.documentPostCreateCallback});let g,y,v,b;"string"==typeof p?g=p:(g=p.id,y=p.token,v=p.session),b=v&&this.driverPolicies.enableDiscovery?Tn(t,v):t,i=En(b.url),y&&void 0!==this.tokenProvider.documentPostCreateCallback&&await this.tokenProvider.documentPostCreateCallback(g,y),i.set("pathname",On(i.pathname,g));const S=b.endpoints.deltaStorageUrl;if(!S)throw new Error(`All endpoints urls must be provided. [deltaStorageUrl:${S}]`);const C=new URL(S);return C.pathname=On(C.pathname,g),this.createDocumentService(Object.assign(Object.assign({},b),{url:i.toString(),id:g,endpoints:Object.assign(Object.assign({},b.endpoints),{deltaStorageUrl:C.toString()})}),n,r,!0)}async createDocumentService(e,t,n,r){f(e);const i=En(e.url),[,s,a]=i.pathname.split("/");if(!a||!s)throw new Error(`Couldn't parse documentId and/or tenantId. [documentId:${a}][tenantId:${s}]`);const o=d.a.create(t,"RouterliciousDriver",{all:{driverVersion:"0.59.4002"}});let c;if(!r&&this.driverPolicies.enableDiscovery){const t=new je(this.driverPolicies.maxConcurrentOrdererRequests),n=await bn.load(s,a,this.tokenProvider,o,t,this.driverPolicies.enableRestLess,e.endpoints.ordererUrl),r=await n.get(`/documents/${s}/session/${a}`);c=Tn(e,r)}else c=e;const u=c.endpoints.storageUrl,h=c.endpoints.ordererUrl,l=c.endpoints.deltaStorageUrl;if(!h||!l)throw new Error(`All endpoints urls must be provided. [ordererUrl:${h}][deltaStorageUrl:${l}]`);return new Sn(c,h,l,u,o,this.tokenProvider,s,a,this.driverPolicies,this.blobCache,this.snapshotTreeCache)}}var Nn=n(78);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class In extends i.a{constructor(e,t){super(),this.container=e,this.rootDataObject=t,this.connectedHandler=()=>this.emit("connected"),this.disconnectedHandler=()=>this.emit("disconnected"),this.disposedHandler=()=>this.emit("disposed"),this.savedHandler=()=>this.emit("saved"),this.dirtyHandler=()=>this.emit("dirty"),e.on("connected",this.connectedHandler),e.on("closed",this.disposedHandler),e.on("disconnected",this.disconnectedHandler),e.on("saved",this.savedHandler),e.on("dirty",this.dirtyHandler)}get isDirty(){return this.container.isDirty}get attachState(){return this.container.attachState}get disposed(){return this.container.closed}get connected(){return this.container.connected}get connectionState(){return this.container.connectionState}get initialObjects(){return this.rootDataObject.initialObjects}async attach(){throw new Error("Cannot attach container. Container is not in detached state")}async connect(){var e,t;null===(t=(e=this.container).connect)||void 0===t||t.call(e)}async disconnect(){var e,t;null===(t=(e=this.container).disconnect)||void 0===t||t.call(e)}async create(e){return this.rootDataObject.create(e)}dispose(){this.container.close(),this.container.off("connected",this.connectedHandler),this.container.off("closed",this.disposedHandler),this.container.off("disconnected",this.disconnectedHandler),this.container.off("saved",this.savedHandler),this.container.off("dirty",this.dirtyHandler)}}var kn=n(235),Dn=n(128),Fn=n(209),jn=n(230);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
const Rn=e=>void 0!==(null==e?void 0:e.factory),Mn=e=>void 0!==(null==e?void 0:e.getFactory);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class _n extends kn.a{constructor(){super(...arguments),this.initialObjectsDirKey="initial-objects-key",this._initialObjects={}}get initialObjectsDir(){const e=this.root.getSubDirectory(this.initialObjectsDirKey);if(void 0===e)throw new Error("InitialObjects sub-directory was not initialized");return e}async initializingFirstTime(e){this.root.createSubDirectory(this.initialObjectsDirKey);const t=[];Object.entries(e.initialObjects).forEach(([e,n])=>{t.push((async()=>{const t=await this.create(n);this.initialObjectsDir.set(e,t.handle)})())}),await Promise.all(t)}async hasInitialized(){const e=[];for(const[t,n]of Array.from(this.initialObjectsDir.entries())){const r=async()=>{const e=await n.get();Object.assign(this._initialObjects,{[t]:e})};e.push(r())}await Promise.all(e)}get initialObjects(){if(0===Object.keys(this._initialObjects).length)throw new Error("Initial Objects were not correctly initialized");return this._initialObjects}async create(e){if(Rn(e))return this.createDataObject(e);if(Mn(e))return this.createSharedObject(e);throw new Error("Could not create new Fluid object because an unknown object was passed")}async createDataObject(e){const t=e.factory,n=[...this.context.packagePath,t.type],r=await this.context.containerRuntime.createDataStore(n);return Object(Nn.d)(r,"/")}createSharedObject(e){const t=e.getFactory();return this.runtime.createChannel(void 0,t.type)}}class Bn extends Dn.a{constructor(e){const[t,n]=(e=>{const t=new Set,n=new Set,r=e=>{if(Mn(e))n.add(e.getFactory());else{if(!Rn(e))throw new Error("Entry is neither a DataObject or a SharedObject");t.add([e.factory.type,Promise.resolve(e.factory)])}};if(Object.values(e.initialObjects).forEach(e=>{r(e)}),e.dynamicObjectTypes)for(const t of e.dynamicObjectTypes)r(t);if(0===t.size&&0===n.size)throw new Error("Container cannot be initialized without any DataTypes");return[Array.from(t),Array.from(n)]})(e),r=new Fn.a("rootDO",_n,n,{},t);super([r.registryEntry],void 0,[Object(jn.b)("rootDOId")]),this.rootDataObjectFactory=r,this.initialObjects=e.initialObjects}async containerInitializingFirstTime(e){await this.rootDataObjectFactory.createRootInstance("rootDOId",e,{initialObjects:this.initialObjects})}}var Ln=n(592);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class qn{constructor(){}async resolve(e){const{ordererUrl:t,storageUrl:n,tenantId:r,containerId:i}=function(e){const t=new URL(e),n=t.origin,r=t.searchParams,i=r.get("storage");if(null===i)throw new Error("Azure URL did not contain a storage URL");const s=r.get("tenantId");if(null===s)throw new Error("Azure URL did not contain a tenant ID");const a=decodeURIComponent(i),o=decodeURIComponent(s),c=r.get("containerId"),u=null!==c?decodeURIComponent(c):void 0;return{ordererUrl:n,storageUrl:a,tenantId:o,containerId:u}}(e.url);if(e.headers&&!0===e.headers[Ln.a.createNew])return{endpoints:{deltaStorageUrl:`${t}/deltas/${r}/new`,ordererUrl:t,storageUrl:`${n}/repos/${r}`},id:"",tokens:{},type:"fluid",url:`${t}/${r}/new`};if(void 0===i)throw new Error("Azure URL did not contain containerId");const s=`${t}/${r}/${i}`;return Promise.resolve({endpoints:{deltaStorageUrl:`${t}/deltas/${r}/${i}`,ordererUrl:t,storageUrl:`${n}/repos/${r}`},id:i,tokens:{},type:"fluid",url:s})}async getAbsoluteUrl(e,t){if("fluid"!==e.type)throw Error("Invalid Resolved Url");return`${e.url}/${t}`}}const zn="local";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class Hn{constructor(e){this.props=e,this.urlResolver=new qn;const t=this.props.connection.tenantId!==zn;this.documentServiceFactory=new An(this.props.connection.tokenProvider,{enableWholeSummaryUpload:t})}async createContainer(e){const t=this.createLoader(e),n=await t.createDetachedContainer({package:"no-dynamic-package",config:{}}),r=await Object(Nn.d)(n,"/"),i=((e,t,n)=>{const r=new URL(e);return r.searchParams.append("storage",encodeURIComponent(t)),r.searchParams.append("tenantId",encodeURIComponent(n)),{url:r.href,headers:{[Ln.a.createNew]:!0}}})(this.props.connection.orderer,this.props.connection.storage,this.props.connection.tenantId);return{container:new class extends In{async attach(){if(this.attachState!==x.a.Detached)throw new Error("Cannot attach container. Container is not in detached state");await n.attach(i);const e=n.resolvedUrl;return f(e),e.id}}(n,r),services:this.getContainerServices(n)}}async getContainer(e,t){const n=this.createLoader(t),r=new URL(this.props.connection.orderer);r.searchParams.append("storage",encodeURIComponent(this.props.connection.storage)),r.searchParams.append("tenantId",encodeURIComponent(this.props.connection.tenantId)),r.searchParams.append("containerId",encodeURIComponent(e));const i=await n.resolve({url:r.href}),s=await Object(Nn.d)(i,"/");return{container:new In(i,s),services:this.getContainerServices(i)}}getContainerServices(e){return{audience:new a(e)}}createLoader(e){const t=new Bn(e),n={load:async()=>({module:{fluidExport:t},details:{package:"no-dynamic-package",config:{}}})};return new Fe({urlResolver:this.urlResolver,documentServiceFactory:this.documentServiceFactory,codeLoader:n,logger:this.props.logger})}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class Un{constructor(e,t){this.azFunctionUrl=e,this.user=t}async fetchOrdererToken(e,t){return{jwt:await this.getToken(e,t)}}async fetchStorageToken(e,t){return{jwt:await this.getToken(e,t)}}async getToken(e,t){var n,r,i;return(await ze.a.get(this.azFunctionUrl,{params:{tenantId:e,documentId:t,userId:null===(n=this.user)||void 0===n?void 0:n.userId,userName:null===(r=this.user)||void 0===r?void 0:r.userName,additionalDetails:null===(i=this.user)||void 0===i?void 0:i.additionalDetails}})).data}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */},function(e,t,n){"use strict";var r=n(129),i=n(51);t.a=function(e,t,n){var s=(e=e||{}).random||(e.rng||r.a)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,t){n=n||0;for(var a=0;a<16;++a)t[n+a]=s[a];return t}return Object(i.a)(s)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class r{constructor(e){this.valueGenerator=e,this._evaluated=!1}get evaluated(){return this._evaluated}get value(){return this._evaluated||(this._evaluated=!0,this._value=this.valueGenerator()),this._value}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return i})),n.d(t,"c",(function(){return s}));
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class r{send(e){}}class i{send(e){}sendTelemetryEvent(e,t){}sendErrorEvent(e,t){}sendPerformanceEvent(e,t){}}function s(e){const t={message:"string"==typeof(null==e?void 0:e.message)?e.message:String(e)};if(null!==(n=e)&&!Array.isArray(n)&&"object"==typeof n){const{errorType:n,stack:r,name:i}=e;if("string"==typeof n&&(t.errorType=n),"string"==typeof r){const e="string"==typeof i?i:void 0;t.stack=((e,t)=>{const n=e.split("\n");return n.shift(),void 0!==t&&n.unshift(t),n.join("\n")})(r,e)}}var n;return t}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return s})),n.d(t,"c",(function(){return a}));var r=n(33);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */const i=e=>r.a.from(e,"base64").toString("utf-8"),s=e=>r.a.from(e,"utf8").toString("base64"),a=(e,t)=>{switch(t){case"utf8":case"utf-8":return e;default:return r.a.from(e,t).toString()}}},function(e,t,n){"use strict";t.decode=t.parse=n(404),t.encode=t.stringify=n(405)},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
var r,i;n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return i})),function(e){e.NoOp="noop",e.ClientJoin="join",e.ClientLeave="leave",e.Propose="propose",e.Reject="reject",e.Summarize="summarize",e.SummaryAck="summaryAck",e.SummaryNack="summaryNack",e.Operation="op",e.RemoteHelp="remoteHelp",e.NoClient="noClient",e.RoundTrip="tripComplete",e.Control="control"}(r||(r={})),function(e){e.ThrottlingError="ThrottlingError",e.InvalidScopeError="InvalidScopeError",e.BadRequestError="BadRequestError",e.LimitExceededError="LimitExceededError"}(i||(i={}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class r{constructor(e){this.valueGenerator=e,this._evaluated=!1}get evaluated(){return this._evaluated}get value(){return this._evaluated||(this._evaluated=!0,this._value=this.valueGenerator()),this._value}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return i})),n.d(t,"c",(function(){return s}));
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class r{send(e){}}class i{send(e){}sendTelemetryEvent(e,t){}sendErrorEvent(e,t){}sendPerformanceEvent(e,t){}}function s(e){const t={message:"string"==typeof(null==e?void 0:e.message)?e.message:String(e)};if(null!==(n=e)&&!Array.isArray(n)&&"object"==typeof n){const{errorType:n,stack:r,name:i}=e;if("string"==typeof n&&(t.errorType=n),"string"==typeof r){const e="string"==typeof i?i:void 0;t.stack=((e,t)=>{const n=e.split("\n");return n.shift(),void 0!==t&&n.unshift(t),n.join("\n")})(r,e)}}var n;return t}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return s})),n.d(t,"c",(function(){return a}));var r=n(34);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */const i=e=>r.a.from(e,"base64").toString("utf-8"),s=e=>r.a.from(e,"utf8").toString("base64"),a=(e,t)=>{switch(t){case"utf8":case"utf-8":return e;default:return r.a.from(e,t).toString()}}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function r(e,t){if(""===e)return void 0===t?"":t.absolutePath;{let n=e.startsWith("/")?e.slice(1):e;return n=n.endsWith("/")?n.slice(0,-1):n,void 0===t?"/"+n:`${"/"===t.absolutePath?"":t.absolutePath}/${n}`}}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.r(t),n.d(t,"DefaultColorResolver",(function(){return r})),n.d(t,"colorToCssColor",(function(){return i}));class r{toCSSColor(e){return i(e)}}function i(e){return`rgba(${e.r},${e.g},${e.b},${e.a})`}},function(e,t,n){"use strict";n.r(t),n.d(t,"IncrementalNumberUniqueIdGenerator",(function(){return r}));class r{constructor(){this.baseId=0}generate(){return this.baseId+=1}setBaseId(e){this.baseId=e}}},function(e,t,n){"use strict";n.r(t),n.d(t,"isPointerEventSupported",(function(){return i})),n.d(t,"isPressureInPointerEventSupported",(function(){return s}));var r=n(138);function i(){return void 0!==window.PointerEvent}function s(){return!Object(r.a)()}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));class r{constructor(e){this.map=new Map(e)}get IFluidDataStoreRegistry(){return this}async get(e){if(this.map.has(e))return this.map.get(e)}}},function(e,t,n){"use strict";const{AbortController:r,AbortSignal:i}="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0;e.exports=r,e.exports.AbortSignal=i,e.exports.default=r},function(e,t,n){(function(r){t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let r=0,i=0;t[0].replace(/%[a-zA-Z%]/g,e=>{"%%"!==e&&(r++,"%c"===e&&(i=r))}),t.splice(i,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG);return e},t.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=n(456)(t);const{formatters:i}=e.exports;i.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}}).call(this,n(61))},function(e,t,n){"use strict";function r(e){if(this._capacity=s(e),this._length=0,this._front=0,i(e)){for(var t=e.length,n=0;n<t;++n)this[n]=e[n];this._length=t}}r.prototype.toArray=function(){for(var e=this._length,t=new Array(e),n=this._front,r=this._capacity,i=0;i<e;++i)t[i]=this[n+i&r-1];return t},r.prototype.push=function(e){var t=arguments.length,n=this._length;if(t>1){var r=this._capacity;if(n+t>r){for(var i=0;i<t;++i){this._checkCapacity(n+1),this[s=this._front+n&this._capacity-1]=arguments[i],n++,this._length=n}return n}for(var s=this._front,i=0;i<t;++i)this[s+n&r-1]=arguments[i],s++;return this._length=n+t,n+t}return 0===t?n:(this._checkCapacity(n+1),this[i=this._front+n&this._capacity-1]=e,this._length=n+1,n+1)},r.prototype.pop=function(){var e=this._length;if(0!==e){var t=this._front+e-1&this._capacity-1,n=this[t];return this[t]=void 0,this._length=e-1,n}},r.prototype.shift=function(){var e=this._length;if(0!==e){var t=this._front,n=this[t];return this[t]=void 0,this._front=t+1&this._capacity-1,this._length=e-1,n}},r.prototype.unshift=function(e){var t=this._length,n=arguments.length;if(n>1){if(t+n>(i=this._capacity)){for(var r=n-1;r>=0;r--){this._checkCapacity(t+1);var i=this._capacity;this[a=(this._front-1&i-1^i)-i]=arguments[r],t++,this._length=t,this._front=a}return t}var s=this._front;for(r=n-1;r>=0;r--){var a;this[a=(s-1&i-1^i)-i]=arguments[r],s=a}return this._front=s,this._length=t+n,t+n}if(0===n)return t;this._checkCapacity(t+1);i=this._capacity;return this[r=(this._front-1&i-1^i)-i]=e,this._length=t+1,this._front=r,t+1},r.prototype.peekBack=function(){var e=this._length;if(0!==e)return this[this._front+e-1&this._capacity-1]},r.prototype.peekFront=function(){if(0!==this._length)return this[this._front]},r.prototype.get=function(e){var t=e;if(t===(0|t)){var n=this._length;if(t<0&&(t+=n),!(t<0||t>=n))return this[this._front+t&this._capacity-1]}},r.prototype.isEmpty=function(){return 0===this._length},r.prototype.clear=function(){for(var e=this._length,t=this._front,n=this._capacity,r=0;r<e;++r)this[t+r&n-1]=void 0;this._length=0,this._front=0},r.prototype.toString=function(){return this.toArray().toString()},r.prototype.valueOf=r.prototype.toString,r.prototype.removeFront=r.prototype.shift,r.prototype.removeBack=r.prototype.pop,r.prototype.insertFront=r.prototype.unshift,r.prototype.insertBack=r.prototype.push,r.prototype.enqueue=r.prototype.push,r.prototype.dequeue=r.prototype.shift,r.prototype.toJSON=r.prototype.toArray,Object.defineProperty(r.prototype,"length",{get:function(){return this._length},set:function(){throw new RangeError("")}}),r.prototype._checkCapacity=function(e){this._capacity<e&&this._resizeTo(s(1.5*this._capacity+16))},r.prototype._resizeTo=function(e){var t=this._capacity;this._capacity=e;var n=this._front,r=this._length;n+r>t&&function(e,t,n,r,i){for(var s=0;s<i;++s)n[s+r]=e[s+t],e[s+t]=void 0}(this,0,this,t,n+r&t-1)};var i=Array.isArray;function s(e){if("number"!=typeof e){if(!i(e))return 16;e=e.length}return t=Math.min(Math.max(16,e),1073741824),t>>>=0,t-=1,t|=t>>1,t|=t>>2,t|=t>>4,t|=t>>8,1+(t|=t>>16);var t}e.exports=r},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));class r{constructor(e){this.request=e;const t=this.request.url.indexOf("?");this.query=t>=0?this.request.url.substring(t):""}static getPathParts(e){const t=e.indexOf("?");return e.substring(0,t<0?e.length:t).split("/").reduce((e,t)=>(void 0!==t&&t.length>0&&e.push(decodeURIComponent(t)),e),[])}static create(e){return e instanceof r?e:new r(e)}get url(){return this.request.url}get headers(){return this.request.headers}get pathParts(){return void 0===this.requestPathParts&&(this.requestPathParts=r.getPathParts(this.url)),this.requestPathParts}isLeaf(e){return""===this.query&&this.pathParts.length===e}createSubRequest(e){const t=this.pathParts.length;if(e<0||e>t)throw new Error("incorrect sub-request");if(e===t&&this.url.includes("?"))return{url:"/"+this.query,headers:this.headers};const n="/"+this.pathParts.slice(e).join("/");return{url:""===this.query?n:`${n}/${this.query}`,headers:this.headers}}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return y})),n.d(t,"b",(function(){return v}));var r,i,s=n(5),a=n(71),o=n(578),c=n(308),u=n(79),h=n(577),l=n(141),d=n(63),m=n(300),p=n(66),f=n(130);const g=m.posix;class y{get type(){return y.Type}get attributes(){return y.Attributes}async load(e,t,n,r){const i=new v(t,e,r);return await i.load(n),i}create(e,t){const n=new v(t,e,y.Attributes);return n.initializeLocal(),n}}y.Type="https://graph.microsoft.com/types/directory",y.Attributes={type:y.Type,snapshotFormatVersion:"0.1",packageVersion:f.a};class v extends h.a{constructor(e,t,n){super(e,t,n),this[r]="SharedDirectory",this.root=new b(this,this.runtime,this.serializer,g.sep),this.messageHandlers=new Map,this.localValueMaker=new p.a(this.serializer),this.setMessageHandlers(),this.root.on("containedValueChanged",(e,t)=>{this.emit("containedValueChanged",e,t,this)}),this.root.on("subDirectoryCreated",(e,t)=>{this.emit("subDirectoryCreated",e,t,this)}),this.root.on("subDirectoryDeleted",(e,t)=>{this.emit("subDirectoryDeleted",e,t,this)})}static create(e,t){return e.createChannel(t,y.Type)}static getFactory(){return new y}get absolutePath(){return this.root.absolutePath}get(e){return this.root.get(e)}set(e,t){return this.root.set(e,t),this}dispose(e){this.root.dispose(e)}get disposed(){return this.root.disposed}delete(e){return this.root.delete(e)}clear(){this.root.clear()}has(e){return this.root.has(e)}get size(){return this.root.size}forEach(e){this.root.forEach(e)}[(r=Symbol.toStringTag,Symbol.iterator)](){return this.root[Symbol.iterator]()}entries(){return this.root.entries()}countSubDirectory(){return this.root.countSubDirectory()}keys(){return this.root.keys()}values(){return this.root.values()}createSubDirectory(e){return this.root.createSubDirectory(e)}getSubDirectory(e){return this.root.getSubDirectory(e)}hasSubDirectory(e){return this.root.hasSubDirectory(e)}deleteSubDirectory(e){return this.root.deleteSubDirectory(e)}subdirectories(){return this.root.subdirectories()}getWorkingDirectory(e){const t=this.makeAbsolute(e);if(t===g.sep)return this.root;let n=this.root;const r=t.substr(1).split(g.sep);for(const e of r)if(n=n.getSubDirectory(e),!n)return;return n}summarizeCore(e){return function(e,t){const n=new d.a;let r=0;const i=[],s=[],a={};for(s.push([e,a]);s.length>0;){const[e,a]=s.pop();for(const[s,o]of e.getSerializedStorage(t)){a.storage||(a.storage={});const t={type:o.type,value:o.value&&JSON.parse(o.value)};if(o.value&&o.value.length>=8192){const a={};let o=a;if(e.absolutePath!==g.sep)for(const t of e.absolutePath.substr(1).split(g.sep)){const e={};o.subdirectories={[t]:e},o=e}o.storage={[s]:t};const c="blob"+r;r++,i.push(c),n.addBlob(c,JSON.stringify(a))}else a.storage[s]=t}for(const[t,n]of e.subdirectories()){a.subdirectories||(a.subdirectories={});const e={};a.subdirectories[t]=e,s.push([n,e])}}const o={blobs:i,content:a};return n.addBlob("header",JSON.stringify(o)),n.getSummaryTree()}(this.root,e)}submitDirectoryMessage(e,t){this.submitLocalMessage(e,t)}onDisconnect(){}reSubmitCore(e,t){const n=e,r=this.messageHandlers.get(n.type);Object(s.a)(void 0!==r,13),r.submit(n,t)}async loadCore(e){const t=await Object(c.a)(e,"header"),n=t;Array.isArray(n.blobs)?(this.populate(n.content),await Promise.all(n.blobs.map(async t=>{const n=await Object(c.a)(e,t);this.populate(n)}))):this.populate(t)}populate(e){const t=[];for(t.push([this.root,e]);t.length>0;){const[e,n]=t.pop();if(n.subdirectories)for(const[r,i]of Object.entries(n.subdirectories)){let n=e.getSubDirectory(r);n||(n=new b(this,this.runtime,this.serializer,g.join(e.absolutePath,r)),e.populateSubDirectory(r,n)),t.push([n,i])}if(n.storage)for(const[t,r]of Object.entries(n.storage)){const n=this.makeLocal(t,e.absolutePath,r);e.populateStorage(t,n)}}}processCore(e,t,n){if(e.type===u.a.Operation){const r=e.contents,i=this.messageHandlers.get(r.type);Object(s.a)(void 0!==i,14),i.process(r,t,n)}}makeAbsolute(e){return g.resolve(g.sep,e)}makeLocal(e,t,n){return Object(s.a)(n.type===l.a[l.a.Plain]||n.type===l.a[l.a.Shared],484),this.localValueMaker.fromSerializable(n)}setMessageHandlers(){this.messageHandlers.set("clear",{process:(e,t,n)=>{const r=this.getWorkingDirectory(e.path);r&&r.processClearMessage(e,t,n)},submit:(e,t)=>{const n=this.getWorkingDirectory(e.path);n&&n.submitClearMessage(e)}}),this.messageHandlers.set("delete",{process:(e,t,n)=>{const r=this.getWorkingDirectory(e.path);r&&r.processDeleteMessage(e,t,n)},submit:(e,t)=>{const n=this.getWorkingDirectory(e.path);n&&n.submitKeyMessage(e)}}),this.messageHandlers.set("set",{process:(e,t,n)=>{const r=this.getWorkingDirectory(e.path);if(r){const i=t?void 0:this.makeLocal(e.key,e.path,e.value);r.processSetMessage(e,i,t,n)}},submit:(e,t)=>{const n=this.getWorkingDirectory(e.path);n&&n.submitKeyMessage(e)}}),this.messageHandlers.set("createSubDirectory",{process:(e,t,n)=>{const r=this.getWorkingDirectory(e.path);r&&r.processCreateSubDirectoryMessage(e,t,n)},submit:(e,t)=>{const n=this.getWorkingDirectory(e.path);n&&n.submitSubDirectoryMessage(e)}}),this.messageHandlers.set("deleteSubDirectory",{process:(e,t,n)=>{const r=this.getWorkingDirectory(e.path);r&&r.processDeleteSubDirectoryMessage(e,t,n)},submit:(e,t)=>{const n=this.getWorkingDirectory(e.path);n&&n.submitSubDirectoryMessage(e)}})}applyStashedOp(){throw new Error("not implemented")}}class b extends a.a{constructor(e,t,n,r){super(),this.directory=e,this.runtime=t,this.serializer=n,this.absolutePath=r,this._disposed=!1,this[i]="SubDirectory",this._storage=new Map,this._subdirectories=new Map,this.pendingKeys=new Map,this.pendingSubDirectories=new Map,this.pendingMessageId=-1,this.pendingClearMessageId=-1}dispose(e){this._disposed=!0,this.emit("disposed",this)}get disposed(){return this._disposed}throwIfDisposed(){if(this._disposed)throw new o.f("Cannot access Disposed subDirectory")}has(e){return this.throwIfDisposed(),this._storage.has(e)}get(e){var t;return this.throwIfDisposed(),null===(t=this._storage.get(e))||void 0===t?void 0:t.value}set(e,t){if(this.throwIfDisposed(),null==e)throw new Error("Undefined and null keys are not supported");const n=this.directory.localValueMaker.fromInMemory(t),r=Object(p.b)(n,this.serializer,this.directory.handle);if(this.setCore(e,n,!0),!this.directory.isAttached())return this;const i={key:e,path:this.absolutePath,type:"set",value:r};return this.submitKeyMessage(i),this}countSubDirectory(){return this._subdirectories.size}createSubDirectory(e){if(this.throwIfDisposed(),null==e)throw new Error("SubDirectory name may not be undefined or null");if(e.includes(g.sep))throw new Error("SubDirectory name may not contain "+g.sep);this.createSubDirectoryCore(e,!0);const t=this._subdirectories.get(e);if(!this.directory.isAttached())return t;const n={path:this.absolutePath,subdirName:e,type:"createSubDirectory"};return this.submitSubDirectoryMessage(n),t}getSubDirectory(e){return this.throwIfDisposed(),this._subdirectories.get(e)}hasSubDirectory(e){return this.throwIfDisposed(),this._subdirectories.has(e)}deleteSubDirectory(e){this.throwIfDisposed();const t=this.deleteSubDirectoryCore(e,!0);if(!this.directory.isAttached())return t;const n={path:this.absolutePath,subdirName:e,type:"deleteSubDirectory"};return this.submitSubDirectoryMessage(n),t}subdirectories(){return this.throwIfDisposed(),this._subdirectories.entries()}getWorkingDirectory(e){return this.throwIfDisposed(),this.directory.getWorkingDirectory(this.makeAbsolute(e))}delete(e){this.throwIfDisposed();const t=this.deleteCore(e,!0);if(!this.directory.isAttached())return t;const n={key:e,path:this.absolutePath,type:"delete"};return this.submitKeyMessage(n),t}clear(){if(this.throwIfDisposed(),this.clearCore(!0),!this.directory.isAttached())return;const e={path:this.absolutePath,type:"clear"};this.submitClearMessage(e)}forEach(e){this.throwIfDisposed(),this._storage.forEach((t,n,r)=>{e(t.value,n,r)})}get size(){return this.throwIfDisposed(),this._storage.size}entries(){this.throwIfDisposed();const e=this._storage.entries();return{next(){const t=e.next();return t.done?{value:void 0,done:!0}:{value:[t.value[0],t.value[1].value],done:!1}},[Symbol.iterator](){return this}}}keys(){return this.throwIfDisposed(),this._storage.keys()}values(){this.throwIfDisposed();const e=this._storage.values();return{next(){const t=e.next();return t.done?{value:void 0,done:!0}:{value:t.value.value,done:!1}},[Symbol.iterator](){return this}}}[(i=Symbol.toStringTag,Symbol.iterator)](){return this.throwIfDisposed(),this.entries()}processClearMessage(e,t,n){if(this.throwIfDisposed(),t){Object(s.a)(void 0!==n,15);const e=n;this.pendingClearMessageId===e&&(this.pendingClearMessageId=-1)}else this.clearExceptPendingKeys(),this.directory.emit("clear",t,this.directory)}processDeleteMessage(e,t,n){this.throwIfDisposed(),this.needProcessStorageOperation(e,t,n)&&this.deleteCore(e.key,t)}processSetMessage(e,t,n,r){this.throwIfDisposed(),this.needProcessStorageOperation(e,n,r)&&this.setCore(e.key,t,n)}processCreateSubDirectoryMessage(e,t,n){this.throwIfDisposed(),this.needProcessSubDirectoryOperations(e,t,n)&&this.createSubDirectoryCore(e.subdirName,t)}processDeleteSubDirectoryMessage(e,t,n){this.throwIfDisposed(),this.needProcessSubDirectoryOperations(e,t,n)&&this.deleteSubDirectoryCore(e.subdirName,t)}submitClearMessage(e){this.throwIfDisposed();const t=++this.pendingMessageId;this.directory.submitDirectoryMessage(e,t),this.pendingClearMessageId=t}submitKeyMessage(e){this.throwIfDisposed();const t=++this.pendingMessageId;this.directory.submitDirectoryMessage(e,t),this.pendingKeys.set(e.key,t)}submitSubDirectoryMessage(e){this.throwIfDisposed();const t=++this.pendingMessageId;this.directory.submitDirectoryMessage(e,t),this.pendingSubDirectories.set(e.subdirName,t)}*getSerializedStorage(e){this.throwIfDisposed();for(const[t,n]of this._storage){const r=[t,n.makeSerialized(e,this.directory.handle)];yield r}}populateStorage(e,t){this.throwIfDisposed(),this._storage.set(e,t)}populateSubDirectory(e,t){this.throwIfDisposed(),this._subdirectories.set(e,t)}getLocalValue(e){return this.throwIfDisposed(),this._storage.get(e)}makeAbsolute(e){return g.resolve(this.absolutePath,e)}needProcessStorageOperation(e,t,n){if(-1!==this.pendingClearMessageId)return t&&Object(s.a)(void 0!==n&&n<this.pendingClearMessageId,16),!1;if(this.pendingKeys.has(e.key)){if(t){Object(s.a)(void 0!==n,17);const t=n;this.pendingKeys.get(e.key)===t&&this.pendingKeys.delete(e.key)}return!1}return!t}needProcessSubDirectoryOperations(e,t,n){if(this.pendingSubDirectories.has(e.subdirName)){if(t){Object(s.a)(void 0!==n,18);const t=n;this.pendingSubDirectories.get(e.subdirName)===t&&this.pendingSubDirectories.delete(e.subdirName)}return!1}return!t}clearExceptPendingKeys(){const e=new Map;this.pendingKeys.forEach((t,n,r)=>{e.set(n,this._storage.get(n))}),this._storage.clear(),e.forEach((e,t,n)=>{this._storage.set(t,e)})}clearCore(e){this._storage.clear(),this.directory.emit("clear",e,this.directory)}deleteCore(e,t){const n=this.get(e),r=this._storage.delete(e);if(r){const r={key:e,path:this.absolutePath,previousValue:n};this.directory.emit("valueChanged",r,t,this.directory);const i={key:e,previousValue:n};this.emit("containedValueChanged",i,t,this)}return r}setCore(e,t,n){const r=this.get(e);this._storage.set(e,t);const i={key:e,path:this.absolutePath,previousValue:r};this.directory.emit("valueChanged",i,n,this.directory);const s={key:e,previousValue:r};this.emit("containedValueChanged",s,n,this)}createSubDirectoryCore(e,t){if(!this._subdirectories.has(e)){const n=g.join(this.absolutePath,e),r=new b(this.directory,this.runtime,this.serializer,n);this.registerEventsOnSubDirectory(r,e),this._subdirectories.set(e,r),this.emit("subDirectoryCreated",e,t,this)}}registerEventsOnSubDirectory(e,t){e.on("subDirectoryCreated",(e,n)=>{this.emit("subDirectoryCreated",g.join(t,e),n,this)}),e.on("subDirectoryDeleted",(e,n)=>{this.emit("subDirectoryDeleted",g.join(t,e),n,this)})}deleteSubDirectoryCore(e,t){const n=this.getSubDirectory(e),r=this._subdirectories.delete(e);return void 0!==n&&(this.disposeSubDirectoryTree(n),this.emit("subDirectoryDeleted",e,t,this)),r}disposeSubDirectoryTree(e){if(!e)return;const t=e.subdirectories();for(const[e,n]of t)this.disposeSubDirectoryTree(n);"function"==typeof e.dispose&&e.dispose()}}},function(e,t,n){"use strict";n.d(t,"f",(function(){return i})),n.d(t,"b",(function(){return a})),n.d(t,"g",(function(){return o})),n.d(t,"h",(function(){return c})),n.d(t,"e",(function(){return u})),n.d(t,"d",(function(){return h})),n.d(t,"c",(function(){return l})),n.d(t,"a",(function(){return d}));var r=n(1);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */function i(e){return e.replace(/^\/+|\/+$/g,"")}function s(e){return e.replace(/\/+$/g,"")}function a(e){const t={};for(const[n,r]of Object.entries(e.gcNodes))t[n]=Array.from(r);return{gcNodes:t}}function o(e){const t=new Map;if(void 0===e.gcData)return t;const n=e.gcData.gcNodes;delete n["/"];for(const[e,i]of Object.entries(n)){Object(r.a)(e.startsWith("/"),686);const n=e.split("/")[1];let s=e.slice(n.length+1);""===s&&(s="/");let a=t.get(n);void 0===a&&(a={gcData:{gcNodes:{}},usedRoutes:[]}),Object(r.a)(void 0!==a.gcData,687),a.gcData.gcNodes[s]=[...new Set(i)],t.set(n,a)}if(void 0===e.usedRoutes)return t;const i=e.usedRoutes.filter(e=>""!==e&&"/"!==e);for(const e of i){Object(r.a)(e.startsWith("/"),688);const n=e.split("/")[1],i=e.slice(n.length+1),s=t.get(n);Object(r.a)(void 0!==(null==s?void 0:s.usedRoutes),689),s.usedRoutes.push(i),t.set(n,s)}return t}function c(e){const t=e.filter(e=>""!==e&&"/"!==e),n=new Map;for(const e of t){Object(r.a)(e.startsWith("/"),408);const t=e.split("/")[1],i=e.slice(t.length+1),s=n.get(t);void 0!==s?s.push(i):n.set(t,[i])}return n}function u(e,t){const n=Object.entries(e);for(const[r,i]of n){const n=new Set(i);n.delete(t),e[r]=[...n]}}function h(e,t){var n;const i={};for(const[t,n]of Object.entries(e.gcNodes))i[t]={outboundRoutes:Array.from(n.outboundRoutes),unreferencedTimestampMs:n.unreferencedTimestampMs};for(const[e,s]of Object.entries(t.gcNodes)){let t=i[e];void 0===t?t={outboundRoutes:Array.from(s.outboundRoutes),unreferencedTimestampMs:s.unreferencedTimestampMs}:(void 0!==s.unreferencedTimestampMs&&void 0!==t.unreferencedTimestampMs&&Object(r.a)(s.unreferencedTimestampMs===t.unreferencedTimestampMs,690),t={outboundRoutes:[...new Set([...s.outboundRoutes,...t.outboundRoutes])],unreferencedTimestampMs:null!==(n=s.unreferencedTimestampMs)&&void 0!==n?n:t.unreferencedTimestampMs}),i[e]=t}return{gcNodes:i}}function l(e,t){const n=a(e);for(const[e,r]of Object.entries(t.gcNodes))if(void 0===n.gcNodes[e])n.gcNodes[e]=Array.from(r);else{const t=[...r,...n.gcNodes[e]];n.gcNodes[e]=[...new Set(t)]}return n}class d{constructor(){this.gcNodesSet={}}get gcNodes(){const e={};for(const[t,n]of Object.entries(this.gcNodesSet))e[t]=[...n];return e}addNode(e,t){this.gcNodesSet[e]=new Set(t)}prefixAndAddNodes(e,t){for(const[n,r]of Object.entries(t)){let t=n.replace(/^\/+/g,"");t=`/${e}/${t}`,t=s(t),this.gcNodesSet[t]=new Set(r)}}addNodes(e){for(const[t,n]of Object.entries(e))this.gcNodesSet[t]=new Set(n)}addRouteToAllNodes(e){for(const t of Object.values(this.gcNodesSet))t.add(e)}getGCData(){return{gcNodes:this.gcNodes}}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return M})),n.d(t,"b",(function(){return _}));var r=n(585),i=n(578),s=n(71),a=n(126),o=n(5),c=n(93),u=n(67),h=n(587),l=n(588),d=n(15),m=n(2),p=n(573),f=n(199),g=n(78),y=n(63),v=n(584),b=n(182);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class S{constructor(e,t,n,r,i){this.objectId=e,this._connected=t,this.submit=n,this.dirty=r,this.addedGCOutboundReference=i}get handler(){return Object(o.a)(!!this._handler,375),this._handler}get connected(){return this._connected}attach(e){Object(o.a)(void 0===this._handler,376),this._handler=e}setConnectionState(e){this._connected=e,this.handler.setConnectionState(e)}process(e,t,n){try{this.handler.process(e,t,n)}catch(t){throw i.c.wrapIfUnrecognized(t,"channelDeltaConnectionFailedToProcessMessage",e)}}reSubmit(e,t){this.handler.reSubmit(e,t)}applyStashedOp(e){return this.handler.applyStashedOp(e)}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */function w(e){let t=e;return t.startsWith("/")&&(t=t.substr(1)),t.endsWith("/")&&(t=t.substr(0,t.length-1)),t.length>0?t.split("/"):[]}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class C{constructor(e,t,n,r){this.tree=e,this.storage=t,this.logger=n,this.extraBlobs=r,this.flattenedTree={},void 0!==e&&C.flattenTree("",e,this.flattenedTree)}static flattenTree(e,t,n){for(const r in t.trees)C.flattenTree(`${e}${r}/`,t.trees[r],n);for(const r in t.blobs)n[`${e}${r}`]=t.blobs[r]}async contains(e){return void 0!==this.flattenedTree[e]}async readBlob(e){const t=await this.getIdForPath(e),n=void 0!==this.extraBlobs?this.extraBlobs.get(t):void 0;if(void 0!==n)return n;const r=this.storage.readBlob(t);return r.catch(e=>this.logger.sendErrorEvent({eventName:"ChannelStorageBlobError"},e)),r}async list(e){var t;let n=this.tree;const r=w(e);for(;void 0!==n&&r.length>0;){const e=r.shift();n=n.trees[e]}if(void 0===n||0!==r.length)throw new Error("path does not exist");return Object.keys(null!==(t=null==n?void 0:n.blobs)&&void 0!==t?t:{})}async getIdForPath(e){return this.flattenedTree[e]}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */function x(e,t,n,r,i,s,a,o,c){return{deltaConnection:new S(e,t,(e,t)=>n(e,t),r,i),objectStorage:new C(o,s,a,c)}}function E(e,t=!1,n=!1){const r=e.getAttachSummary(t,n);return Object(y.b)(r,".attributes",JSON.stringify(e.attributes)),r}async function O(e,t=!1,n=!1){const r=await e.summarize(t,n);return Object(y.b)(r,".attributes",JSON.stringify(e.attributes)),r}var T=n(47),P=n.n(T),A=n(308),N=n(183);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class I{constructor(e,t,n,r){this.id=e,this.registry=t,this.runtime=n,this.servicesGetter=r,this.globallyVisible=!1,this.pending=[]}async getChannel(){return Object(o.a)(void 0!==this.channel,519),this.channel}get isLoaded(){return void 0!==this.channel}setConnectionState(e,t){this.globallyVisible&&this.isLoaded&&this.servicesGetter().value.deltaConnection.setConnectionState(e)}processOp(e,t,n){Object(o.a)(this.globallyVisible,723),this.isLoaded?this.servicesGetter().value.deltaConnection.process(e,t,n):(Object(o.a)(!1===t,393),this.pending.push(e))}reSubmit(e,t){Object(o.a)(this.isLoaded,394),Object(o.a)(this.globallyVisible,724),this.servicesGetter().value.deltaConnection.reSubmit(e,t)}applyStashedOp(){throw new Error("no stashed ops on local channel")}async summarize(e=!1,t=!1){return Object(o.a)(this.isLoaded&&void 0!==this.channel,396),O(this.channel,e,t)}getAttachSummary(){return Object(o.a)(this.isLoaded&&void 0!==this.channel,397),E(this.channel,!0,!1)}makeVisible(){if(this.globallyVisible)throw new Error("Channel is already globally visible");this.isLoaded&&(Object(o.a)(!!this.channel,402),this.channel.connect(this.servicesGetter().value)),this.globallyVisible=!0}async getGCData(e=!1){return Object(o.a)(this.isLoaded&&void 0!==this.channel,403),this.channel.getGCData(e)}updateUsedRoutes(e,t){}}class k extends I{constructor(e,t,n,r,i,s,a,o,c,u){super(e,t,n,()=>this.services),this.snapshotTree=u;const h=new Map,l=P()(this.snapshotTree);this.isSnapshotInOldFormatAndCollectBlobs(l,h)&&this.sanitizeSnapshot(l),this.services=new N.a(()=>x(this.id,r.connected,a,this.dirtyFn,c,i,s,l,h)),this.dirtyFn=()=>{o(e)}}async getChannel(){return void 0===this.channel&&(this.channel=await this.loadChannel().catch(e=>{throw i.c.wrapIfUnrecognized(e,"rehydratedLocalChannelContextFailedToLoadChannel",void 0)})),this.channel}async loadChannel(){Object(o.a)(!this.isLoaded,398),Object(o.a)(await this.services.value.objectStorage.contains(".attributes"),400);const e=await Object(A.a)(this.services.value.objectStorage,".attributes");if(Object(o.a)(void 0===this.factory,520),this.factory=this.registry.get(e.type),void 0===this.factory)throw new Error(`Channel Factory ${e.type} not registered`);const t=await this.factory.load(this.runtime,this.id,this.services.value,e);this.channel=t;for(const e of this.pending)this.services.value.deltaConnection.process(e,!1,void 0);return this.channel}isSnapshotInOldFormatAndCollectBlobs(e,t){let n=!1;const r=e.blobsContents;Object.entries(r).forEach(([r,i])=>{t.set(r,i),void 0!==e.blobs[r]&&(n=!0)});for(const r of Object.values(e.trees))n=n||this.isSnapshotInOldFormatAndCollectBlobs(r,t);return n}sanitizeSnapshot(e){const t=new Map(Object.entries(e.blobs));for(const[n,r]of t.entries()){void 0===t.get(r)&&delete e.blobs[n]}for(const t of Object.values(e.trees))this.sanitizeSnapshot(t)}}class D extends I{constructor(e,t,n,r,i,s,a,c,u,h){if(super(e,t,r,()=>this.services),Object(o.a)(void 0!==n,521),this.factory=t.get(n),void 0===this.factory)throw new Error(`Channel Factory ${n} not registered`);this.channel=this.factory.create(r,e),this.services=new N.a(()=>x(this.id,i.connected,c,this.dirtyFn,h,s,a)),this.dirtyFn=()=>{u(e)}}}var F,j=n(586);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class R{constructor(e,t,n,r,i,s,a,o,c,h,l,d,m){this.runtime=e,this.dataStoreContext=t,this.id=a,this.registry=c,this.attachMessageType=m,this.isLoaded=!1,this.pending=[],this.subLogger=u.a.create(this.runtime.logger,"RemoteChannelContext"),this.services=x(this.id,this.dataStoreContext.connected,r,()=>i(this.id),s,n,this.subLogger,o,h);this.summarizerNode=l(async(e,t)=>this.summarizeInternal(e,t),async e=>this.getGCDataInternal(e),async()=>d()),this.thresholdOpsCounter=new j.a(R.pendingOpsCountThreshold,this.subLogger)}getChannel(){return void 0===this.channelP&&(this.channelP=this.loadChannel()),this.channelP}setConnectionState(e,t){this.isLoaded&&this.services.deltaConnection.setConnectionState(e)}applyStashedOp(e){return Object(o.a)(this.isLoaded,404),this.services.deltaConnection.applyStashedOp(e)}processOp(e,t,n){this.summarizerNode.invalidate(e.sequenceNumber),this.isLoaded?this.services.deltaConnection.process(e,t,n):(Object(o.a)(!t,405),Object(o.a)(void 0!==this.pending,574),this.pending.push(e),this.thresholdOpsCounter.sendIfMultiple("StorePendingOps",this.pending.length))}reSubmit(e,t){Object(o.a)(this.isLoaded,406),this.services.deltaConnection.reSubmit(e,t)}async summarize(e=!1,t=!0){return this.summarizerNode.summarize(e,t)}async summarizeInternal(e,t){const n=await this.getChannel(),r=await O(n,e,t);return Object.assign(Object.assign({},r),{id:this.id})}async loadChannel(){let e,t;if(Object(o.a)(!this.isLoaded,407),await this.services.objectStorage.contains(".attributes")&&(e=await Object(A.a)(this.services.objectStorage,".attributes")),void 0===e){if(void 0===this.attachMessageType)throw new i.b("channelTypeNotAvailable",{channelId:{value:this.id,tag:u.e.PackageData},dataStoreId:{value:this.dataStoreContext.id,tag:u.e.PackageData},dataStorePackagePath:this.dataStoreContext.packagePath.join("/")});if(t=this.registry.get(this.attachMessageType),void 0===t)throw new i.b("channelFactoryNotRegisteredForAttachMessageType",{channelId:{value:this.id,tag:u.e.PackageData},dataStoreId:{value:this.dataStoreContext.id,tag:u.e.PackageData},dataStorePackagePath:this.dataStoreContext.packagePath.join("/"),channelFactoryType:this.attachMessageType});e=t.attributes}else if(t=this.registry.get(e.type),void 0===t)throw new i.b("channelFactoryNotRegisteredForGivenType",{channelId:{value:this.id,tag:u.e.PackageData},dataStoreId:{value:this.dataStoreContext.id,tag:u.e.PackageData},dataStorePackagePath:this.dataStoreContext.packagePath.join("/"),channelFactoryType:e.type});void 0!==e.snapshotFormatVersion&&e.snapshotFormatVersion!==t.attributes.snapshotFormatVersion&&this.subLogger.sendTelemetryEvent({eventName:"ChannelAttributesVersionMismatch",channelType:{value:e.type,tag:u.e.PackageData},channelSnapshotVersion:{value:`${e.snapshotFormatVersion}@${e.packageVersion}`,tag:u.e.PackageData},channelCodeVersion:{value:`${t.attributes.snapshotFormatVersion}@${t.attributes.packageVersion}`,tag:u.e.PackageData}});const n=await t.load(this.runtime,this.id,this.services,e);Object(o.a)(void 0!==this.pending,575);for(const e of this.pending)this.services.deltaConnection.process(e,!1,void 0);return this.thresholdOpsCounter.send("ProcessPendingOps",this.pending.length),this.channel=n,this.pending=void 0,this.isLoaded=!0,this.services.deltaConnection.setConnectionState(this.dataStoreContext.connected),this.channel}async getGCData(e=!1){return this.summarizerNode.getGCData(e)}async getGCDataInternal(e=!1){return(await this.getChannel()).getGCData(e)}updateUsedRoutes(e,t){this.summarizerNode.updateUsedRoutes([""])}}R.pendingOpsCountThreshold=1e3,function(e){e.Attach="attach",e.ChannelOp="op"}(F||(F={}));class M extends s.a{constructor(e,t,n){super(),this.dataStoreContext=e,this.sharedObjectRegistry=t,this._disposed=!1,this.contexts=new Map,this.contextsDeferred=new Map,this.pendingAttach=new Map,this.deferredAttached=new a.a,this.localChannelContextQueue=new Map,this.notBoundedChannelContextSet=new Set,this.pendingHandlesToMakeVisible=new Set,this.logger=u.a.create(e.logger,"FluidDataStoreRuntime",{all:{dataStoreId:Object(b.a)()}}),this.id=e.id,this.options=e.options,this.deltaManager=e.deltaManager,this.quorum=e.getQuorum(),this.audience=e.getAudience();const i=e.baseSnapshot;this.channelsBaseGCDetails=new a.b(async()=>{var e,t,n;const r=await(null!==(n=null===(t=(e=this.dataStoreContext).getBaseGCDetails)||void 0===t?void 0:t.call(e))&&void 0!==n?n:this.dataStoreContext.getInitialGCSummaryDetails());return Object(v.g)(r)}),void 0!==(null==i?void 0:i.trees)&&Object.keys(i.trees).forEach(t=>{if("_search"===t)return;let n;e.isLocalDataStore?(n=new k(t,this.sharedObjectRegistry,this,this.dataStoreContext,this.dataStoreContext.storage,this.logger,(e,n)=>this.submitChannelOp(t,e,n),e=>this.setChannelDirty(e),(e,t)=>this.addedGCOutboundReference(e,t),i.trees[t]),e.attachState!==r.a.Detached?n.makeVisible():this.localChannelContextQueue.set(t,n)):n=new R(this,e,e.storage,(e,n)=>this.submitChannelOp(t,e,n),e=>this.setChannelDirty(e),(e,t)=>this.addedGCOutboundReference(e,t),t,i.trees[t],this.sharedObjectRegistry,void 0,this.dataStoreContext.getCreateChildSummarizerNodeFn(t,{type:m.CreateSummarizerNodeSource.FromSummary}),async()=>this.getChannelBaseGCDetails(t));const s=new a.a;s.resolve(n),this.contexts.set(t,n),this.contextsDeferred.set(t,s)}),this.attachListener(),this.bindState=n?r.b.Bound:r.b.NotBound,this._attachState=e.attachState,this.visibilityState=n?e.attachState===r.a.Detached?m.VisibilityState.LocallyVisible:m.VisibilityState.GloballyVisible:m.VisibilityState.NotVisible,n&&this.deferredAttached.resolve()}static load(e,t,n){return new M(e,t,n)}get IFluidRouter(){return this}get connected(){return this.dataStoreContext.connected}get clientId(){return this.dataStoreContext.clientId}get clientDetails(){return this.dataStoreContext.clientDetails}get isAttached(){return this.attachState!==r.a.Detached}get attachState(){return this._attachState}get absolutePath(){return Object(p.a)(this.id,this.routeContext)}get routeContext(){return this.dataStoreContext.IFluidHandleContext}get IFluidHandleContext(){return this}get rootRoutingContext(){return this}get channelsRoutingContext(){return this}get objectsRoutingContext(){return this}get disposed(){return this._disposed}dispose(){this._disposed||(this._disposed=!0,this.emit("dispose"),this.removeAllListeners())}async resolveHandle(e){return this.request(e)}async request(e){try{const t=f.a.create(e),n=t.pathParts[0];if("_channels"===n||"_custom"===n)return this.request(t.createSubRequest(1));if(this.contextsDeferred.has(n)&&t.isLeaf(1))try{const e=await this.contextsDeferred.get(n).promise;return{mimeType:"fluid/object",status:200,value:await e.getChannel()}}catch(t){return this.logger.sendErrorEvent({eventName:"GetChannelFailedInRequest"},t),Object(g.b)(500,"Failed to get Channel: "+t,e)}return Object(g.a)(e)}catch(e){return Object(g.c)(e)}}async getChannel(e){this.verifyNotClosed(),this.contextsDeferred.has(e)||this.contextsDeferred.set(e,new a.a);const t=await this.contextsDeferred.get(e).promise;return await t.getChannel()}createChannel(e=Object(b.a)(),t){this.verifyNotClosed(),Object(o.a)(!this.contexts.has(e),377),this.notBoundedChannelContextSet.add(e);const n=new D(e,this.sharedObjectRegistry,t,this,this.dataStoreContext,this.dataStoreContext.storage,this.logger,(t,n)=>this.submitChannelOp(e,t,n),e=>this.setChannelDirty(e),(e,t)=>this.addedGCOutboundReference(e,t));if(this.contexts.set(e,n),this.contextsDeferred.has(e))this.contextsDeferred.get(e).resolve(n);else{const t=new a.a;t.resolve(n),this.contextsDeferred.set(e,t)}return Object(o.a)(!!n.channel,378),n.channel}bindChannel(e){Object(o.a)(this.notBoundedChannelContextSet.has(e.id),379),this.notBoundedChannelContextSet.delete(e.id),this.isAttached?this.attachChannel(e):this.pendingHandlesToMakeVisible.has(e.handle)||(this.bind(e.handle),this.localChannelContextQueue.has(e.id)||this.localChannelContextQueue.set(e.id,this.contexts.get(e.id)))}makeVisibleAndAttachGraph(){this.visibilityState===m.VisibilityState.NotVisible&&(this.visibilityState=m.VisibilityState.LocallyVisible,this.pendingHandlesToMakeVisible.forEach(e=>{e.attachGraph()}),this.pendingHandlesToMakeVisible.clear(),this.bindToContext())}attachGraph(){this.makeVisibleAndAttachGraph()}bindToContext(){this.bindState===r.b.NotBound&&(this.bindState=r.b.Binding,this.dataStoreContext.bindToContext(),this.bindState=r.b.Bound)}bind(e){this.visibilityState===m.VisibilityState.NotVisible?this.pendingHandlesToMakeVisible.add(e):e.attachGraph()}setConnectionState(e,t){this.verifyNotClosed();for(const[,n]of this.contexts)n.setConnectionState(e,t);Object(h.c)(this.logger,this,e,t)}getQuorum(){return this.quorum}getAudience(){return this.audience}async uploadBlob(e){return this.verifyNotClosed(),this.dataStoreContext.uploadBlob(e)}process(e,t,n){this.verifyNotClosed();try{switch(e.type){case F.Attach:{const n=e.contents,r=n.id;if(t)Object(o.a)(this.pendingAttach.has(r),380),this.pendingAttach.delete(r);else{Object(o.a)(!this.contexts.has(r),381);const t=new Map,i=Object(l.a)(n.snapshot.entries,t),s=new R(this,this.dataStoreContext,this.dataStoreContext.storage,(e,t)=>this.submitChannelOp(r,e,t),e=>this.setChannelDirty(e),(e,t)=>this.addedGCOutboundReference(e,t),r,i,this.sharedObjectRegistry,t,this.dataStoreContext.getCreateChildSummarizerNodeFn(r,{type:m.CreateSummarizerNodeSource.FromAttach,sequenceNumber:e.sequenceNumber,snapshot:n.snapshot}),async()=>this.getChannelBaseGCDetails(r),n.type);if(this.contexts.set(r,s),this.contextsDeferred.has(r))this.contextsDeferred.get(r).resolve(s);else{const e=new a.a;e.resolve(s),this.contextsDeferred.set(r,e)}}break}case F.ChannelOp:this.processChannelOp(e,t,n)}this.emit("op",e)}catch(t){throw i.c.wrapIfUnrecognized(t,"fluidDataStoreRuntimeFailedToProcessMessage",e)}}processSignal(e,t){this.emit("signal",e,t)}isChannelAttached(e){return!this.notBoundedChannelContextSet.has(e)&&!this.localChannelContextQueue.has(e)&&!this.pendingAttach.has(e)}getOutboundRoutes(){const e=[];for(const[t]of this.contexts)e.push(`${this.absolutePath}/${t}`);return e}updateGCNodes(e){e.addRouteToAllNodes(this.absolutePath),e.addNode("/",this.getOutboundRoutes())}async getGCData(e=!1){const t=new v.a;return await Promise.all(Array.from(this.contexts).filter(([e,t])=>this.isChannelAttached(e)).map(async([n,r])=>{const i=await r.getGCData(e);t.prefixAndAddNodes(n,i.gcNodes)})),this.updateGCNodes(t),t.getGCData()}updateUsedRoutes(e,t){var n;const r=Object(v.h)(e);for(const[e]of r)Object(o.a)(this.contexts.has(e),382);for(const[e,i]of this.contexts)i.updateUsedRoutes(null!==(n=r.get(e))&&void 0!==n?n:[],t)}addedGCOutboundReference(e,t){var n,r;null===(r=(n=this.dataStoreContext).addedGCOutboundReference)||void 0===r||r.call(n,e,t)}async getChannelBaseGCDetails(e){var t;let n=(await this.channelsBaseGCDetails).get(e);return void 0===n?n={}:void 0!==(null===(t=n.gcData)||void 0===t?void 0:t.gcNodes)&&Object(v.e)(n.gcData.gcNodes,this.absolutePath),void 0!==n.usedRoutes&&0!==n.usedRoutes.length||(n.usedRoutes=[""]),n}async summarize(e=!1,t=!0){const n=new y.a;return await Promise.all(Array.from(this.contexts).filter(([e,t])=>{const n=this.isChannelAttached(e);return Object(o.a)(n,383),n}).map(async([r,i])=>{const s=await i.summarize(e,t);n.addWithStats(r,s)})),n.getSummaryTree()}getAttachSummary(){this.attachGraph();const e=new y.a;for(const[t,n]of this.contexts){if(!(n instanceof I))throw new Error("Should only be called with local channel handles");if(!this.notBoundedChannelContextSet.has(t)){let r;if(n.isLoaded){const e=n.getAttachSummary();Object(o.a)(e.summary.type===d.a.Tree,384),r={stats:e.stats,summary:e.summary}}else Object(o.a)(!!this.dataStoreContext.baseSnapshot,385),r=Object(y.f)(this.dataStoreContext.baseSnapshot.trees[t]);e.addWithStats(t,r)}}return e.getSummaryTree()}submitMessage(e,t,n){this.submit(e,t,n)}submitSignal(e,t){return this.verifyNotClosed(),this.dataStoreContext.submitSignal(e,t)}async waitAttached(){return this.deferredAttached.promise}attachChannel(e){if(this.verifyNotClosed(),e.handle.isAttached)return;e.handle.attachGraph(),Object(o.a)(this.isAttached,386),Object(o.a)(this.visibilityState===m.VisibilityState.GloballyVisible,720);const t=E(e,!0,!1),n=Object(y.g)(t.summary),r={id:e.id,snapshot:n,type:e.attributes.type};this.pendingAttach.set(e.id,r),this.submit(F.Attach,r);this.contexts.get(e.id).makeVisible()}submitChannelOp(e,t,n){const r={address:e,contents:t};this.submit(F.ChannelOp,r,n)}submit(e,t,n){this.verifyNotClosed(),this.dataStoreContext.submitMessage(e,t,n)}reSubmit(e,t,n){switch(this.verifyNotClosed(),e){case F.ChannelOp:{const e=t,r=this.contexts.get(e.address);Object(o.a)(!!r,387),r.reSubmit(e.contents,n);break}case F.Attach:this.submit(e,t,n);break;default:Object(c.a)(e)}}async applyStashedOp(e){const t=e,n=this.contexts.get(t.address);return Object(o.a)(!!n,388),await n.getChannel(),n.applyStashedOp(t.contents)}setChannelDirty(e){this.verifyNotClosed(),this.dataStoreContext.setChannelDirty(e)}processChannelOp(e,t,n){this.verifyNotClosed();const r=e.contents,i=Object.assign(Object.assign({},e),{contents:r.contents}),s=this.contexts.get(r.address);return Object(o.a)(!!s,389),s.processOp(i,t,n),s}attachListener(){this.setMaxListeners(Number.MAX_SAFE_INTEGER),this.dataStoreContext.once("attaching",()=>{this.attachGraph(),this._attachState=r.a.Attaching,Object(o.a)(this.visibilityState===m.VisibilityState.LocallyVisible,721),this.visibilityState=m.VisibilityState.GloballyVisible,this.localChannelContextQueue.forEach(e=>{e.makeVisible()}),this.localChannelContextQueue.clear(),this.deferredAttached.resolve(),this.emit("attaching")}),this.dataStoreContext.once("attached",()=>{Object(o.a)(this.visibilityState===m.VisibilityState.GloballyVisible,722),this._attachState=r.a.Attached,this.emit("attached")})}verifyNotClosed(){if(this._disposed)throw new Error("Runtime is closed")}}const _=(e,t=M)=>class extends t{async request(t){const n=await super.request(t);return 404===n.status?e(t,this):n}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return p}));var r=n(79),i=n(308),s=n(577),a=n(63),o=n(141),c=n(5),u=n(66);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class h{constructor(e,t,n,r,i){this.serializer=e,this.handle=t,this.submitMessage=n,this.isAttached=r,this.eventEmitter=i,this.messageHandlers=new Map,this.data=new Map,this.pendingKeys=new Map,this.pendingMessageId=-1,this.pendingClearMessageId=-1,this.localValueMaker=new u.a(e),this.messageHandlers=this.getMessageHandlers()}get size(){return this.data.size}keys(){return this.data.keys()}entries(){const e=this.data.entries();return{next(){const t=e.next();return t.done?{value:void 0,done:!0}:{value:[t.value[0],t.value[1].value],done:!1}},[Symbol.iterator](){return this}}}values(){const e=this.data.values();return{next(){const t=e.next();return t.done?{value:void 0,done:!0}:{value:t.value.value,done:!1}},[Symbol.iterator](){return this}}}[Symbol.iterator](){return this.entries()}forEach(e){this.data.forEach((t,n,r)=>{e(t.value,n,r)})}get(e){if(!this.data.has(e))return;return this.data.get(e).value}has(e){return this.data.has(e)}set(e,t){if(null==e)throw new Error("Undefined and null keys are not supported");const n=this.localValueMaker.fromInMemory(t),r=Object(u.b)(n,this.serializer,this.handle);if(this.setCore(e,n,!0),!this.isAttached())return;const i={key:e,type:"set",value:r};this.submitMapKeyMessage(i)}delete(e){const t=this.deleteCore(e,!0);if(!this.isAttached())return t;const n={key:e,type:"delete"};return this.submitMapKeyMessage(n),t}clear(){if(this.clearCore(!0),!this.isAttached())return;this.submitMapClearMessage({type:"clear"})}getSerializedStorage(e){const t={};return this.data.forEach((n,r)=>{t[r]=n.makeSerialized(e,this.handle)}),t}getSerializableStorage(e){const t={};return this.data.forEach((n,r)=>{t[r]=Object(u.b)(n,e,this.handle)}),t}serialize(e){return JSON.stringify(this.getSerializableStorage(e))}populateFromSerializable(e){for(const[t,n]of Object.entries(e)){const e={key:t,value:this.makeLocal(t,n)};this.data.set(e.key,e.value)}}populate(e){this.populateFromSerializable(JSON.parse(e))}trySubmitMessage(e,t){const n=e.type;return!!this.messageHandlers.has(n)&&(this.messageHandlers.get(n).submit(e,t),!0)}tryGetStashedOpLocalMetadata(e){const t=e.type;if(this.messageHandlers.has(t))return this.messageHandlers.get(t).getStashedOpLocalMetadata(e);throw new Error("no apply stashed op handler")}tryProcessMessage(e,t,n){return!!this.messageHandlers.has(e.type)&&(this.messageHandlers.get(e.type).process(e,t,n),!0)}setCore(e,t,n){const r=this.get(e);this.data.set(e,t);const i={key:e,previousValue:r};this.eventEmitter.emit("valueChanged",i,n,this.eventEmitter)}clearCore(e){this.data.clear(),this.eventEmitter.emit("clear",e,this.eventEmitter)}deleteCore(e,t){const n=this.get(e),r=this.data.delete(e);if(r){const r={key:e,previousValue:n};this.eventEmitter.emit("valueChanged",r,t,this.eventEmitter)}return r}clearExceptPendingKeys(){const e=new Map;this.pendingKeys.forEach((t,n)=>{e.set(n,this.data.get(n))}),this.data.clear(),e.forEach((e,t)=>{this.data.set(t,e)})}makeLocal(e,t){if(t.type===o.a[o.a.Plain]||t.type===o.a[o.a.Shared])return this.localValueMaker.fromSerializable(t);throw new Error("Unknown local value type")}needProcessKeyOperation(e,t,n){if(-1!==this.pendingClearMessageId)return t&&Object(c.a)(void 0!==n&&n<this.pendingClearMessageId,19),!1;if(this.pendingKeys.has(e.key)){if(t){Object(c.a)(void 0!==n,20);const t=n;this.pendingKeys.get(e.key)===t&&this.pendingKeys.delete(e.key)}return!1}return!t}getMessageHandlers(){const e=new Map;return e.set("clear",{process:(e,t,n)=>{if(t){Object(c.a)(void 0!==n,21);const e=n;this.pendingClearMessageId===e&&(this.pendingClearMessageId=-1)}else 0===this.pendingKeys.size?this.clearCore(t):this.clearExceptPendingKeys()},submit:(e,t)=>{this.submitMapClearMessage(e)},getStashedOpLocalMetadata:e=>this.getMapClearMessageLocalMetadata(e)}),e.set("delete",{process:(e,t,n)=>{this.needProcessKeyOperation(e,t,n)&&this.deleteCore(e.key,t)},submit:(e,t)=>{this.submitMapKeyMessage(e)},getStashedOpLocalMetadata:e=>this.getMapKeyMessageLocalMetadata(e)}),e.set("set",{process:(e,t,n)=>{if(!this.needProcessKeyOperation(e,t,n))return;const r=this.makeLocal(e.key,e.value);this.setCore(e.key,r,t)},submit:(e,t)=>{this.submitMapKeyMessage(e)},getStashedOpLocalMetadata:e=>this.getMapKeyMessageLocalMetadata(e)}),e}getMapClearMessageLocalMetadata(e){const t=++this.pendingMessageId;return this.pendingClearMessageId=t,t}submitMapClearMessage(e){const t=this.getMapClearMessageLocalMetadata(e);this.submitMessage(e,t)}getMapKeyMessageLocalMetadata(e){const t=++this.pendingMessageId;return this.pendingKeys.set(e.key,t),t}submitMapKeyMessage(e){const t=this.getMapKeyMessageLocalMetadata(e);this.submitMessage(e,t)}}var l,d=n(130);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class m{get type(){return m.Type}get attributes(){return m.Attributes}async load(e,t,n,r){const i=new p(t,e,r);return await i.load(n),i}create(e,t){const n=new p(t,e,m.Attributes);return n.initializeLocal(),n}}m.Type="https://graph.microsoft.com/types/map",m.Attributes={type:m.Type,snapshotFormatVersion:"0.2",packageVersion:d.a};class p extends s.a{constructor(e,t,n){super(e,t,n),this[l]="SharedMap",this.kernel=new h(this.serializer,this.handle,(e,t)=>this.submitLocalMessage(e,t),()=>this.isAttached(),this)}static create(e,t){return e.createChannel(t,m.Type)}static getFactory(){return new m}keys(){return this.kernel.keys()}entries(){return this.kernel.entries()}values(){return this.kernel.values()}[(l=Symbol.toStringTag,Symbol.iterator)](){return this.kernel.entries()}get size(){return this.kernel.size}forEach(e){this.kernel.forEach(e)}get(e){return this.kernel.get(e)}has(e){return this.kernel.has(e)}set(e,t){return this.kernel.set(e,t),this}delete(e){return this.kernel.delete(e)}clear(){this.kernel.clear()}summarizeCore(e){let t=0,n=0,r={};const i=[],s=new a.a,o=this.kernel.getSerializedStorage(e);for(const e of Object.keys(o)){const a=o[e];if(a.value&&a.value.length>=8192){const t="blob"+n;n++,i.push(t);const r={[e]:{type:a.type,value:JSON.parse(a.value)}};s.addBlob(t,JSON.stringify(r))}else{if(t+=a.type.length+21,a.value&&(t+=a.value.length),t>16384){const e="blob"+n;n++,i.push(e),s.addBlob(e,JSON.stringify(r)),r={},t=0}r[e]={type:a.type,value:void 0===a.value?void 0:JSON.parse(a.value)}}}const c={blobs:i,content:r};return s.addBlob("header",JSON.stringify(c)),s.getSummaryTree()}async loadCore(e){const t=await Object(i.a)(e,"header"),n=t;Array.isArray(n.blobs)?(this.kernel.populateFromSerializable(n.content),await Promise.all(n.blobs.map(async t=>{const n=await Object(i.a)(e,t);this.kernel.populateFromSerializable(n)}))):this.kernel.populateFromSerializable(t)}onDisconnect(){}reSubmitCore(e,t){this.kernel.trySubmitMessage(e,t)}applyStashedOp(e){return this.kernel.tryProcessMessage(e,!1,void 0),this.kernel.tryGetStashedOpLocalMetadata(e)}processCore(e,t,n){e.type===r.a.Operation&&this.kernel.tryProcessMessage(e.contents,t,n)}}},,,,,,function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(200),i=n(203),s=n(202),a=n(125);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class o extends a.a{constructor(e,t,n=[],a,o,c=s.a){const u=[...n];n.find(e=>e.type===r.a.Type)||u.push(r.b.getFactory()),n.find(e=>e.type===i.a.Type)||u.push(i.b.getFactory()),super(e,t,u,a,o,c)}}},function(e,t,n){var r=n(104),i=n(335),s=n(336),a=n(337),o=n(338),c=n(339);function u(e){var t=this.__data__=new r(e);this.size=t.size}u.prototype.clear=i,u.prototype.delete=s,u.prototype.get=a,u.prototype.has=o,u.prototype.set=c,e.exports=u},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(69))},function(e,t){var n=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return n.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t,n){var r=n(151),i=n(106),s=Object.prototype.hasOwnProperty;e.exports=function(e,t,n){var a=e[t];s.call(e,t)&&i(a,n)&&(void 0!==n||t in e)||r(e,t,n)}},function(e,t,n){var r=n(58),i=function(){try{var e=r(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=i},function(e,t,n){var r=n(361),i=n(216),s=n(109),a=n(153),o=n(217),c=n(218),u=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=s(e),h=!n&&i(e),l=!n&&!h&&a(e),d=!n&&!h&&!l&&c(e),m=n||h||l||d,p=m?r(e.length,String):[],f=p.length;for(var g in e)!t&&!u.call(e,g)||m&&("length"==g||l&&("offset"==g||"parent"==g)||d&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||o(g,f))||p.push(g);return p}},function(e,t,n){var r=n(362),i=n(59),s=Object.prototype,a=s.hasOwnProperty,o=s.propertyIsEnumerable,c=r(function(){return arguments}())?r:function(e){return i(e)&&a.call(e,"callee")&&!o.call(e,"callee")};e.exports=c},function(e,t){var n=/^(?:0|[1-9]\d*)$/;e.exports=function(e,t){var r=typeof e;return!!(t=null==t?9007199254740991:t)&&("number"==r||"symbol"!=r&&n.test(e))&&e>-1&&e%1==0&&e<t}},function(e,t,n){var r=n(364),i=n(154),s=n(155),a=s&&s.isTypedArray,o=a?i(a):r;e.exports=o},function(e,t){e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},function(e,t){e.exports=function(e,t){return function(n){return e(t(n))}}},function(e,t,n){(function(e){var r=n(40),i=t&&!t.nodeType&&t,s=i&&"object"==typeof e&&e&&!e.nodeType&&e,a=s&&s.exports===i?r.Buffer:void 0,o=a?a.allocUnsafe:void 0;e.exports=function(e,t){if(t)return e.slice();var n=e.length,r=o?o(n):new e.constructor(n);return e.copy(r),r}}).call(this,n(60)(e))},function(e,t){e.exports=function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t}},function(e,t){e.exports=function(){return[]}},function(e,t,n){var r=n(225),i=n(158),s=n(157),a=n(223),o=Object.getOwnPropertySymbols?function(e){for(var t=[];e;)r(t,s(e)),e=i(e);return t}:a;e.exports=o},function(e,t){e.exports=function(e,t){for(var n=-1,r=t.length,i=e.length;++n<r;)e[i+n]=t[n];return e}},function(e,t,n){var r=n(225),i=n(109);e.exports=function(e,t,n){var s=t(e);return i(e)?s:r(s,n(e))}},function(e,t,n){var r=n(160);e.exports=function(e,t){var n=t?r(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}},function(e,t,n){var r=n(385),i=n(158),s=n(156);e.exports=function(e){return"function"!=typeof e.constructor||s(e)?{}:r(i(e))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(71);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class i extends r.a{constructor(e){if(super(),this.isDisposed=!1,this.forwardingEvents=new Map,void 0!==e){const t=t=>this.unforwardEvent(e,t),n=t=>this.forwardEvent(e,t);this.on(i.removeListenerEvent,t),this.on(i.newListenerEvent,n)}}static isEmitterEvent(e){return e===i.newListenerEvent||e===i.removeListenerEvent}get disposed(){return this.isDisposed}dispose(){this.isDisposed=!0;for(const e of this.forwardingEvents.values())for(const t of e.values())try{t()}catch(e){}this.removeAllListeners(),this.forwardingEvents.clear()}forwardEvent(e,...t){for(const n of t)if(void 0!==e&&void 0!==n&&!i.isEmitterEvent(n)){let t=this.forwardingEvents.get(n);if(void 0===t&&(t=new Map,this.forwardingEvents.set(n,t)),!t.has(e)){const r=(...e)=>this.emit(n,...e);t.set(e,()=>e.off(n,r)),e.on(n,r)}}}unforwardEvent(e,...t){for(const n of t)if(void 0!==n&&!i.isEmitterEvent(n)){const t=this.forwardingEvents.get(n);if((null==t?void 0:t.has(e))&&0===this.listenerCount(n)){const r=t.get(e);void 0!==r&&r(),t.delete(e),0===t.size&&this.forwardingEvents.delete(n)}}}}i.newListenerEvent="newListener",i.removeListenerEvent="removeListener"},function(e,t,n){"use strict";n.d(t,"c",(function(){return a})),n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return c}));var r=n(574),i=n(199),s=n(78);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
const a=(e,t)=>{const n=Object(r.a)(...t);return async(t,r)=>{var i;const s=!0===(null===(i=t.headers)||void 0===i?void 0:i.mountableView);let a=t;if(s){const e=Object.assign({},t.headers);delete e.mountableView,a={url:t.url,headers:e}}const o=await n(a,r);return s&&200===o.status&&e.canMount(o.value)?{status:200,mimeType:"fluid/object",value:new e(o.value)}:o}},o=e=>async(t,n)=>{const r=i.a.create(t);if(0===r.pathParts.length)return n.IFluidHandleContext.resolveHandle({url:`/${e}${r.query}`,headers:t.headers})};function c(e,t){return""===t.url||"/"===t.url||t.url.startsWith("/?")?{mimeType:"fluid/object",status:200,value:e}:Object(s.a)(t)}},function(e,t,n){"use strict";n.d(t,"c",(function(){return i})),n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return o}));var r=n(78);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */const i="_services";class s{constructor(e){this.runtime=e}get IFluidRouter(){return this}async request(e){return{status:200,mimeType:"fluid/object",value:this}}}class a{constructor(e){this.serviceFn=e}async getService(e){return this.service||(this.service=this.serviceFn(e)),this.service}}const o=e=>{const t=new Map;return new Map(e).forEach((e,n)=>{t.set(n,new a(e))}),async(e,n)=>{if(e.pathParts[0]!==i)return;if(e.pathParts.length<2)return Object(r.b)(400,"request did not specify a service to route to",e);const s=t.get(e.pathParts[1]);if(!s)return Object(r.a)(e);const a=await s.getService(n),o=a.IFluidRouter,c=e.createSubRequest(2);return o?o.request(c):e.isLeaf(2)?{status:200,mimeType:"fluid/object",value:a}:Object(r.b)(400,"request sub-url for service that doesn't support routing",e)}}},function(e,t,n){"use strict";n.d(t,"b",(function(){return s})),n.d(t,"a",(function(){return a}));var r=n(5),i=n(126);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class s{constructor(e,t,n=(()=>Date.now())){this.defaultTimeout=e,this.defaultHandler=t,this.getCurrentTick=n}get hasTimer(){return!!this.runningState}start(e=this.defaultTimeout,t=this.defaultHandler){this.startCore(e,t,e)}clear(){this.runningState&&(clearTimeout(this.runningState.timeout),this.runningState=void 0)}restart(e,t){var n,r;if(this.runningState){const i=null!=e?e:this.runningState.intendedDuration,s=null!==(r=null!=t?t:null===(n=this.runningState.restart)||void 0===n?void 0:n.handler)&&void 0!==r?r:this.runningState.handler,a=this.calculateRemainingTime(this.runningState);i<a?this.start(i,s):i===a?(this.runningState.handler=s,this.runningState.restart=void 0,this.runningState.intendedDuration=i):this.runningState.restart={startTick:this.getCurrentTick(),duration:i,handler:s}}else this.start(e,t)}startCore(e,t,n){this.clear(),this.runningState={startTick:this.getCurrentTick(),duration:e,intendedDuration:n,handler:t,timeout:setTimeout(()=>this.handler(),e)}}handler(){Object(r.a)(!!this.runningState,10);const e=this.runningState.restart;if(void 0!==e){const t=this.calculateRemainingTime(e);this.startCore(t,()=>e.handler(),e.duration)}else{const e=this.runningState.handler;this.clear(),e()}}calculateRemainingTime(e){const t=this.getCurrentTick()-e.startTick;return e.duration-t}}class a{constructor(e,t){this.timer=new s(e,()=>this.wrapHandler(t))}get hasTimer(){return this.timer.hasTimer}async start(e,t){return this.clear(),this.deferred=new i.a,this.timer.start(e,t?()=>this.wrapHandler(t):void 0),this.deferred.promise}clear(){this.timer.clear(),this.deferred&&(this.deferred.resolve({timerResult:"cancel"}),this.deferred=void 0)}wrapHandler(e){e(),Object(r.a)(!!this.deferred,11),this.deferred.resolve({timerResult:"timeout"}),this.deferred=void 0}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
const r=async e=>new Promise(t=>setTimeout(()=>t(),e))},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(75);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class i{constructor(e){this.startTick=e,this.lastTick=e}static start(){const e=r.a.now();return new i(e)}trace(){const e=r.a.now(),t={totalTimeElapsed:e-this.startTick,duration:e-this.lastTick,tick:e};return this.lastTick=e,t}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(200),i=n(203),s=n(199),a=n(78),o=n(91);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class c extends o.a{constructor(){super(...arguments),this.rootDirectoryId="root"}async request(e){const t=s.a.create(e);if("bigBlobs"===t.pathParts[0]){const e=this.root.get(t.pathParts.join("/"));return void 0===e?Object(a.a)(t):{mimeType:"fluid/object",status:200,value:e}}return super.request(t)}get root(){if(!this.internalRoot)throw new Error(this.getUninitializedErrorString("root"));return this.internalRoot}async initializeInternal(e){e?(this.internalRoot=await this.runtime.getChannel(this.rootDirectoryId),this.internalRoot.attributes.type===i.a.Type&&this.runtime.logger.send({category:"generic",eventName:"MapDataObject",message:"Legacy document, SharedMap is masquerading as SharedDirectory in DataObject"})):(this.internalRoot=r.b.create(this.runtime,this.rootDirectoryId),this.internalRoot.bindToContext()),await super.initializeInternal(e)}getUninitializedErrorString(e){return e+" must be initialized before being accessed."}}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.LocalTimestampProvider=void 0;class r{constructor(e=!1){e&&(r._warned=!0)}getTimestamp(){return r._warned||(console.warn("EphemeralEvent is using a LocalTimestampProvider which could cause issues when used across multiple clients."),r._warned=!0),(new Date).getTime()}}t.LocalTimestampProvider=r,r._warned=!1},function(e,t,n){"use strict";n.d(t,"b",(function(){return s})),n.d(t,"a",(function(){return a}));var r=n(92),i=n(33);async function s(e,t="SHA-1",i="hex"){if(void 0===crypto.subtle)return n.e(0).then(n.bind(null,580)).then(async n=>n.hashFile(e,t,i));return function(e,t){switch(t){case"hex":return Array.prototype.map.call(e,e=>e.toString(16).padStart(2,"0")).join("");case"base64":return r.fromByteArray(e)}}(await
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
async function(e,t){const n=await crypto.subtle.digest(t,e);return new Uint8Array(n)}(e,t),i)}async function a(e){const t=`blob ${e.byteLength.toString()}${String.fromCharCode(0)}`;return s(i.a.from(t+e.toString()))}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function r(e,t){return(...n)=>{if(e.disposed)throw new Error("Already disposed");return t(...n)}}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function r(e){return 0===e.byteOffset&&e.byteLength===e.buffer.byteLength?e.buffer:e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.EphemeralEventSource=void 0;t.EphemeralEventSource=class{constructor(e,t){this._scope=e,this._eventName=t}sendEvent(e={}){return this._scope.sendEvent(this._eventName,e)}}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{c(r.next(e))}catch(e){s(e)}}function o(e){try{c(r.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.LocalRoleVerifier=void 0;const i=n(163);class s{constructor(e=!1){this.roleCache=new Map,this.defaultRoles=[i.UserMeetingRole.organizer,i.UserMeetingRole.presenter,i.UserMeetingRole.attendee],e&&(s._warned=!0)}addClient(e,t){return this.roleCache.set(e,t),this}getClientRoles(e){if(s.ensureWarned(),!e)throw new Error("LocalRoleVerifier: called getClientRoles() without a clientId");let t;return t=this.roleCache.has(e)?this.roleCache.get(e):this.defaultRoles,Promise.resolve(t)}registerClientId(e){return this.addClient(e,this.defaultRoles),Promise.resolve(this.defaultRoles)}verifyRolesAllowed(e,t){return r(this,void 0,void 0,(function*(){if(s.ensureWarned(),!e)throw new Error("LocalRoleVerifier: called verifyRolesAllowed() without a clientId");if(Array.isArray(t)&&t.length>0){const n=yield this.getClientRoles(e);for(let e=0;e<t.length;e++){const r=t[e];if(n.indexOf(r)>=0)return!0}return!1}return!0}))}static ensureWarned(){s._warned||(console.warn("The LocalRoleVerifier is being used. This should only be used for local testing purposes."),s._warned=!0)}}t.LocalRoleVerifier=s,s._warned=!1},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.EphemeralPresenceUser=t.PresenceState=void 0;const r=n(49),i=n(114);var s;!function(e){e.online="online",e.away="away",e.offline="offline"}(s=t.PresenceState||(t.PresenceState={}));t.EphemeralPresenceUser=class{constructor(e,t,n){this._evt=e,this._expirationPeriod=t,this._isLocalUser=n,this._lastUpdateTime=r.EphemeralEvent.getTimestamp()}get isLocalUser(){return this._isLocalUser}get userId(){return this._evt.userId}get state(){return this.hasExpired()?s.offline:this._evt.state}get data(){return(0,i.cloneValue)(this._evt.data)}getRoles(){return this._isLocalUser?r.EphemeralEvent.registerClientId(this._evt.clientId):r.EphemeralEvent.getClientRoles(this._evt.clientId)}updateReceived(e){const t=this._evt;return!(!r.EphemeralEvent.isNewer(t,e)||(this._evt=e,this._lastUpdateTime=r.EphemeralEvent.getTimestamp(),e.state==t.state&&JSON.stringify(e.data)==JSON.stringify(t.data)))}hasExpired(){const e=r.EphemeralEvent.getTimestamp()-this._lastUpdateTime;return!this._isLocalUser&&e>this._expirationPeriod.milliseconds}}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.RequestCache=void 0;t.RequestCache=class{constructor(e){this._cache=new Map,this._cacheLifetime=e}cacheRequest(e,t){const n=(new Date).getTime();let r;if(this._cache.has(e)){r=this._cache.get(e);if(n<r.startTime+this._cacheLifetime)return r.promise}const i=t();return this._cache.set(e,{startTime:n,promise:i}),i}has(e){return this._cache.has(e)}}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(25);function i(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var s;if(n)s=n(t);else if(r.isURLSearchParams(t))s=t.toString();else{var a=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(i(t)+"="+i(e))})))})),s=a.join("&")}if(s){var o=e.indexOf("#");-1!==o&&(e=e.slice(0,o)),e+=(-1===e.indexOf("?")?"?":"&")+s}return e}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,i){return e.config=t,n&&(e.code=n),e.request=r,e.response=i,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}},e}},function(e,t,n){"use strict";e.exports={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1}},function(e,t,n){"use strict";var r=n(25),i=n(412),s=n(413),a=n(245),o=n(414),c=n(417),u=n(418),h=n(249),l=n(247),d=n(116);e.exports=function(e){return new Promise((function(t,n){var m,p=e.data,f=e.headers,g=e.responseType;function y(){e.cancelToken&&e.cancelToken.unsubscribe(m),e.signal&&e.signal.removeEventListener("abort",m)}r.isFormData(p)&&delete f["Content-Type"];var v=new XMLHttpRequest;if(e.auth){var b=e.auth.username||"",S=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";f.Authorization="Basic "+btoa(b+":"+S)}var w=o(e.baseURL,e.url);function C(){if(v){var r="getAllResponseHeaders"in v?c(v.getAllResponseHeaders()):null,s={data:g&&"text"!==g&&"json"!==g?v.response:v.responseText,status:v.status,statusText:v.statusText,headers:r,config:e,request:v};i((function(e){t(e),y()}),(function(e){n(e),y()}),s),v=null}}if(v.open(e.method.toUpperCase(),a(w,e.params,e.paramsSerializer),!0),v.timeout=e.timeout,"onloadend"in v?v.onloadend=C:v.onreadystatechange=function(){v&&4===v.readyState&&(0!==v.status||v.responseURL&&0===v.responseURL.indexOf("file:"))&&setTimeout(C)},v.onabort=function(){v&&(n(h("Request aborted",e,"ECONNABORTED",v)),v=null)},v.onerror=function(){n(h("Network Error",e,null,v)),v=null},v.ontimeout=function(){var t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",r=e.transitional||l;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(h(t,e,r.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",v)),v=null},r.isStandardBrowserEnv()){var x=(e.withCredentials||u(w))&&e.xsrfCookieName?s.read(e.xsrfCookieName):void 0;x&&(f[e.xsrfHeaderName]=x)}"setRequestHeader"in v&&r.forEach(f,(function(e,t){void 0===p&&"content-type"===t.toLowerCase()?delete f[t]:v.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(v.withCredentials=!!e.withCredentials),g&&"json"!==g&&(v.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&v.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&v.upload&&v.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(m=function(e){v&&(n(!e||e&&e.type?new d("canceled"):e),v.abort(),v=null)},e.cancelToken&&e.cancelToken.subscribe(m),e.signal&&(e.signal.aborted?m():e.signal.addEventListener("abort",m))),p||(p=null),v.send(p)}))}},function(e,t,n){"use strict";var r=n(246);e.exports=function(e,t,n,i,s){var a=new Error(e);return r(a,t,n,i,s)}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";var r=n(25);e.exports=function(e,t){t=t||{};var n={};function i(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function s(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:i(void 0,e[n]):i(e[n],t[n])}function a(e){if(!r.isUndefined(t[e]))return i(void 0,t[e])}function o(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:i(void 0,e[n]):i(void 0,t[n])}function c(n){return n in t?i(e[n],t[n]):n in e?i(void 0,e[n]):void 0}var u={url:a,method:a,data:a,baseURL:o,transformRequest:o,transformResponse:o,paramsSerializer:o,timeout:o,timeoutMessage:o,withCredentials:o,adapter:o,responseType:o,xsrfCookieName:o,xsrfHeaderName:o,onUploadProgress:o,onDownloadProgress:o,decompress:o,maxContentLength:o,maxBodyLength:o,transport:o,httpAgent:o,httpsAgent:o,cancelToken:o,socketPath:o,responseEncoding:o,validateStatus:c};return r.forEach(Object.keys(e).concat(Object.keys(t)),(function(e){var t=u[e]||s,i=t(e);r.isUndefined(i)&&t!==c||(n[e]=i)})),n}},function(e,t){e.exports={version:"0.26.1"}},function(e,t,n){var r=n(151),i=n(106);e.exports=function(e,t,n){(void 0!==n&&!i(e[t],n)||void 0===n&&!(t in e))&&r(e,t,n)}},function(e,t){e.exports=function(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}},function(e,t){e.exports=function(e){return e}},function(e,t,n){"use strict";(function(e){
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */
var n=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{c(r.next(e))}catch(e){s(e)}}function o(e){try{c(r.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}c((r=r.apply(e,t||[])).next())}))};function r(t){return"function"==typeof atob?atob(t):e.from(t,"base64").toString()}Object.defineProperty(t,"__esModule",{value:!0}),t.waitForResult=t.waitForDelay=t.parseJwt=t.decodeBase64=t.cloneValue=void 0,t.cloneValue=function(e){return"object"==typeof e?JSON.parse(JSON.stringify(e)):e},t.decodeBase64=r;function i(e){return new Promise(t=>{setTimeout(()=>t(),e)})}function s(e,t){return new Promise(r=>n(this,void 0,void 0,(function*(){const n=setTimeout(()=>{r(void 0)},t),i=yield e();clearTimeout(n),r(i)})))}t.parseJwt=e=>{try{return JSON.parse(r(e.split(".")[1]))}catch(e){return null}},t.waitForDelay=i,t.waitForResult=function(e,t,r,a){let o=0;return new Promise((c,u)=>n(this,void 0,void 0,(function*(){for(;;){const n=yield s(e,250*(o+1));if(t(n)){c(n);break}if(o>=a.length){u(r());break}yield i(a[o++])}})))}}).call(this,n(144).Buffer)},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(74);class i extends r.a{constructor(e){super(),this.errorHandler=e}emit(e,...t){try{return super.emit(e,...t)}catch(t){return this.errorHandler(e,t),!0}}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return i})),n.d(t,"d",(function(){return s})),n.d(t,"c",(function(){return a}));
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
const r="connected",i="disconnected";function s(e,t,n,...r){try{e.emit(n,...r)}catch(e){t.sendErrorEvent({eventName:"RaiseEventError",event:n},e)}}function a(e,t,n,s){try{n?t.emit(r,s):t.emit(i)}catch(t){e.sendErrorEvent({eventName:"RaiseConnectedEventError"},t)}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class r{constructor(e,t,n=e){this.threshold=e,this.logger=t,this.thresholdMultiple=n}send(e,t){t<this.threshold||this.logger.sendPerformanceEvent({eventName:e,value:t})}sendIfMultiple(e,t){t===this.thresholdMultiple&&(this.logger.sendPerformanceEvent({eventName:e,value:t}),this.thresholdMultiple=2*this.thresholdMultiple)}}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.MockDeltaManager=t.MockDeltaQueue=void 0;const r=n(19),i=n(4);class s extends r.EventEmitter{constructor(){super(),this.queue=[],this.pauseCount=0,this.processCallback=()=>{}}get disposed(){}get paused(){return 0!==this.pauseCount}get length(){return this.queue.length}get idle(){return 0===this.queue.length}process(){Promise.resolve().then(()=>{for(;0===this.pauseCount&&this.length>0;)this.processCallback(this.pop())})}push(e){this.queue.push(e),this.emit("push",e),this.process()}pop(){return this.queue.shift()}async pause(){this.pauseCount++}resume(){this.pauseCount--,this.process()}peek(){return this.queue[0]}toArray(){return this.queue}dispose(){}async waitTillProcessingDone(){(0,i.assert)(!1,"NYI")}}t.MockDeltaQueue=s;class a extends i.TypedEventEmitter{constructor(){super(),this.readOnlyInfo={readonly:!1},this.minimumSequenceNumber=0,this.lastSequenceNumber=0,this.lastKnownSeqNumber=0,this.initialSequenceNumber=0,this.hasCheckpointSequenceNumber=!1,this._inbound=new s,this._outbound=new s,this._inboundSignal=new s}get disposed(){}get IDeltaSender(){return this}get inbound(){return this._inbound}get outbound(){return this._outbound}get inboundSignal(){return this._inboundSignal}get version(){}get maxMessageSize(){return 0}get serviceConfiguration(){}get active(){return!0}close(){}submitSignal(e){}flush(){}submit(e,t,n=!1,r){return 0}dispose(){}}t.MockDeltaManager=a},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(74);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class i extends r.a{constructor(e){if(super(),this.isDisposed=!1,this.forwardingEvents=new Map,void 0!==e){const t=t=>this.unforwardEvent(e,t),n=t=>this.forwardEvent(e,t);this.on(i.removeListenerEvent,t),this.on(i.newListenerEvent,n)}}static isEmitterEvent(e){return e===i.newListenerEvent||e===i.removeListenerEvent}get disposed(){return this.isDisposed}dispose(){this.isDisposed=!0;for(const e of this.forwardingEvents.values())for(const t of e.values())try{t()}catch(e){}this.removeAllListeners(),this.forwardingEvents.clear()}forwardEvent(e,...t){for(const n of t)if(void 0!==e&&void 0!==n&&!i.isEmitterEvent(n)){let t=this.forwardingEvents.get(n);if(void 0===t&&(t=new Map,this.forwardingEvents.set(n,t)),!t.has(e)){const r=(...e)=>this.emit(n,...e);t.set(e,()=>e.off(n,r)),e.on(n,r)}}}unforwardEvent(e,...t){for(const n of t)if(void 0!==n&&!i.isEmitterEvent(n)){const t=this.forwardingEvents.get(n);if((null==t?void 0:t.has(e))&&0===this.listenerCount(n)){const r=t.get(e);void 0!==r&&r(),t.delete(e),0===t.size&&this.forwardingEvents.delete(n)}}}}i.newListenerEvent="newListener",i.removeListenerEvent="removeListener"},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,n){var r=n(120),i=n(87);e.exports=function(e){if(!i(e))return!1;var t=r(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(69))},function(e,t){var n=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return n.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t,n){var r=n(267),i=n(262),s=Object.prototype.hasOwnProperty;e.exports=function(e,t,n){var a=e[t];s.call(e,t)&&i(a,n)&&(void 0!==n||t in e)||r(e,t,n)}},function(e,t,n){var r=n(490);e.exports=function(e,t,n){"__proto__"==t&&r?r(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}},function(e,t,n){var r=n(492),i=n(493),s=n(170),a=n(269),o=n(496),c=n(497),u=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=s(e),h=!n&&i(e),l=!n&&!h&&a(e),d=!n&&!h&&!l&&c(e),m=n||h||l||d,p=m?r(e.length,String):[],f=p.length;for(var g in e)!t&&!u.call(e,g)||m&&("length"==g||l&&("offset"==g||"parent"==g)||d&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||o(g,f))||p.push(g);return p}},function(e,t,n){(function(e){var r=n(41),i=n(495),s=t&&!t.nodeType&&t,a=s&&"object"==typeof e&&e&&!e.nodeType&&e,o=a&&a.exports===s?r.Buffer:void 0,c=(o?o.isBuffer:void 0)||i;e.exports=c}).call(this,n(60)(e))},function(e,t){e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},function(e,t){e.exports=function(e,t){return function(n){return e(t(n))}}},function(e,t,n){var r=n(263),i=n(270);e.exports=function(e){return null!=e&&i(e.length)&&!r(e)}},function(e,t){e.exports=function(){return[]}},function(e,t,n){var r=n(275),i=n(276),s=n(175),a=n(273),o=Object.getOwnPropertySymbols?function(e){for(var t=[];e;)r(t,s(e)),e=i(e);return t}:a;e.exports=o},function(e,t){e.exports=function(e,t){for(var n=-1,r=t.length,i=e.length;++n<r;)e[i+n]=t[n];return e}},function(e,t,n){var r=n(271)(Object.getPrototypeOf,Object);e.exports=r},function(e,t,n){var r=n(275),i=n(170);e.exports=function(e,t,n){var s=t(e);return i(e)?s:r(s,n(e))}},function(e,t,n){"use strict";n.d(t,"b",(function(){return s})),n.d(t,"a",(function(){return a}));var r=n(1),i=n(90);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class s{constructor(e,t,n=(()=>Date.now())){this.defaultTimeout=e,this.defaultHandler=t,this.getCurrentTick=n}get hasTimer(){return!!this.runningState}start(e=this.defaultTimeout,t=this.defaultHandler){this.startCore(e,t,e)}clear(){this.runningState&&(clearTimeout(this.runningState.timeout),this.runningState=void 0)}restart(e,t){var n,r;if(this.runningState){const i=null!=e?e:this.runningState.intendedDuration,s=null!==(r=null!=t?t:null===(n=this.runningState.restart)||void 0===n?void 0:n.handler)&&void 0!==r?r:this.runningState.handler,a=this.calculateRemainingTime(this.runningState);i<a?this.start(i,s):i===a?(this.runningState.handler=s,this.runningState.restart=void 0,this.runningState.intendedDuration=i):this.runningState.restart={startTick:this.getCurrentTick(),duration:i,handler:s}}else this.start(e,t)}startCore(e,t,n){this.clear(),this.runningState={startTick:this.getCurrentTick(),duration:e,intendedDuration:n,handler:t,timeout:setTimeout(()=>this.handler(),e)}}handler(){Object(r.a)(!!this.runningState,10);const e=this.runningState.restart;if(void 0!==e){const t=this.calculateRemainingTime(e);this.startCore(t,()=>e.handler(),e.duration)}else{const e=this.runningState.handler;this.clear(),e()}}calculateRemainingTime(e){const t=this.getCurrentTick()-e.startTick;return e.duration-t}}class a{constructor(e,t){this.timer=new s(e,()=>this.wrapHandler(t))}get hasTimer(){return this.timer.hasTimer}async start(e,t){return this.clear(),this.deferred=new i.a,this.timer.start(e,t?()=>this.wrapHandler(t):void 0),this.deferred.promise}clear(){this.timer.clear(),this.deferred&&(this.deferred.resolve({timerResult:"cancel"}),this.deferred=void 0)}wrapHandler(e){e(),Object(r.a)(!!this.deferred,11),this.deferred.resolve({timerResult:"timeout"}),this.deferred=void 0}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(76);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class i{constructor(e){this.startTick=e,this.lastTick=e}static start(){const e=r.a.now();return new i(e)}trace(){const e=r.a.now(),t={totalTimeElapsed:e-this.startTick,duration:e-this.lastTick,tick:e};return this.lastTick=e,t}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
const r=async e=>new Promise(t=>setTimeout(()=>t(),e))},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
var r;n.d(t,"a",(function(){return r})),function(e){e.cache="fluid-cache",e.clientDetails="fluid-client-details",e.loadMode="loadMode",e.reconnect="fluid-reconnect",e.sequenceNumber="fluid-sequence-number",e.version="version"}(r||(r={}))},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
var r,i;n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return i})),n.d(t,"c",(function(){return s})),function(e){e.Detached="Detached",e.Attaching="Attaching",e.Attached="Attached"}(r||(r={})),function(e){e.NotBound="NotBound",e.Binding="Binding",e.Bound="Bound"}(i||(i={}));const s="IRuntimeFactory"},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.MockSharedObjectServices=t.MockObjectStorageService=t.MockEmptyDeltaConnection=t.MockFluidDataStoreRuntime=t.MockQuorum=t.MockContainerRuntimeFactory=t.MockContainerRuntime=t.MockDeltaConnection=void 0;const r=n(19),i=n(4),s=n(28),a=n(13),o=n(18),c=n(10),u=n(29),h=n(260);class l{constructor(e,t){this.submitFn=e,this.dirtyFn=t,this._connected=!0}get connected(){return this._connected}attach(e){this.handler=e,e.setConnectionState(this.connected)}submit(e,t){return this.submitFn(e,t)}dirty(){this.dirtyFn()}setConnectionState(e){var t;this._connected=e,null===(t=this.handler)||void 0===t||t.setConnectionState(e)}process(e,t,n){var r;null===(r=this.handler)||void 0===r||r.process(e,t,n)}reSubmit(e,t){var n;null===(n=this.handler)||void 0===n||n.reSubmit(e,t)}}t.MockDeltaConnection=l;class d{constructor(e,t){this.dataStoreRuntime=e,this.factory=t,this.clientSequenceNumber=0,this.deltaConnections=[],this.pendingMessages=[],this.deltaManager=new h.MockDeltaManager,this.dataStoreRuntime.deltaManager=this.deltaManager,this.dataStoreRuntime.quorum=t.quorum,this.clientId=this.dataStoreRuntime.clientId,t.quorum.addMember(this.clientId,{})}createDeltaConnection(){const e=new l((e,t)=>this.submit(e,t),()=>this.dirty());return this.deltaConnections.push(e),e}submit(e,t){const n=this.clientSequenceNumber++,r={clientId:this.clientId,clientSequenceNumber:n,contents:e,referenceSequenceNumber:this.deltaManager.lastSequenceNumber,type:o.MessageType.Operation};return this.factory.pushMessage(r),this.addPendingMessage(e,t,n),n}dirty(){}process(e){this.deltaManager.lastSequenceNumber=e.sequenceNumber,this.deltaManager.lastMessage=e,this.deltaManager.minimumSequenceNumber=e.minimumSequenceNumber;const[t,n]=this.processInternal(e);this.deltaConnections.forEach(r=>{r.process(e,t,n)})}addPendingMessage(e,t,n){const r={content:e,clientSequenceNumber:n,localOpMetadata:t};this.pendingMessages.push(r)}processInternal(e){let t;const n=this.clientId===e.clientId;if(n){const n=this.pendingMessages.shift();(0,i.assert)(n.clientSequenceNumber===e.clientSequenceNumber,"Unexpected client sequence number from message"),t=n.localOpMetadata}return[n,t]}}t.MockContainerRuntime=d;t.MockContainerRuntimeFactory=class{constructor(){this.sequenceNumber=0,this.minSeq=new Map,this.quorum=new m,this.messages=[],this.runtimes=[]}get outstandingMessageCount(){return this.messages.length}getMinSeq(){let e;for(const[,t]of this.minSeq)e=e?Math.min(e,t):t;return e||0}createContainerRuntime(e){const t=new d(e,this);return this.runtimes.push(t),t}pushMessage(e){this.minSeq.has(e.clientId)||this.minSeq.set(e.clientId,e.referenceSequenceNumber),this.messages.push(e)}processAllMessages(){for(;this.messages.length>0;){let e=this.messages.shift();e=JSON.parse(JSON.stringify(e)),this.minSeq.set(e.clientId,e.referenceSequenceNumber),e.sequenceNumber=++this.sequenceNumber,e.minimumSequenceNumber=this.getMinSeq();for(const t of this.runtimes)t.process(e)}}};class m{constructor(...e){var t;this.map=new Map,this.eventEmitter=new r.EventEmitter,this.disposed=!1,this.members=new Map(null!==(t=e)&&void 0!==t?t:[])}async propose(e,t){if(this.map.has(e))throw new Error(e+" exists");this.map.set(e,t),this.eventEmitter.emit("approveProposal",0,e,t)}has(e){return this.map.has(e)}get(e){return this.map.get(e)}getApprovalData(e){throw new Error("Method not implemented.")}addMember(e,t){this.members.set(e,t),this.eventEmitter.emit("addMember")}removeMember(e){this.members.delete(e)&&this.eventEmitter.emit("removeMember")}getMembers(){return this.members}getMember(e){return this.getMembers().get(e)}dispose(){throw new Error("Method not implemented.")}addListener(e,t){throw new Error("Method not implemented.")}on(e,t){switch(e){case"afterOn":return this.eventEmitter.on(e,t),this;case"addMember":case"removeMember":case"addProposal":case"approveProposal":return this.eventEmitter.on(e,t),this.eventEmitter.emit("afterOn",e),this;default:throw new Error("Method not implemented.")}}once(e,t){throw new Error("Method not implemented.")}prependListener(e,t){throw new Error("Method not implemented.")}prependOnceListener(e,t){throw new Error("Method not implemented.")}removeListener(e,t){return this.eventEmitter.removeListener(e,t),this}off(e,t){return this.eventEmitter.off(e,t),this}removeAllListeners(e){throw new Error("Method not implemented.")}setMaxListeners(e){throw new Error("Method not implemented.")}getMaxListeners(){throw new Error("Method not implemented.")}listeners(e){throw new Error("Method not implemented.")}rawListeners(e){throw new Error("Method not implemented.")}emit(e,...t){throw new Error("Method not implemented.")}eventNames(){throw new Error("Method not implemented.")}listenerCount(e){throw new Error("Method not implemented.")}}t.MockQuorum=m;class p extends r.EventEmitter{constructor(){super(...arguments),this.id=(0,u.v4)(),this.options={},this.clientId=(0,u.v4)(),this.path="",this.connected=!0,this.deltaManager=new h.MockDeltaManager,this.logger=a.DebugLogger.create("fluid:MockFluidDataStoreRuntime"),this.quorum=new m,this._local=!1,this._disposed=!1}get IFluidHandleContext(){return this}get rootRoutingContext(){return this}get channelsRoutingContext(){return this}get objectsRoutingContext(){return this}get IFluidRouter(){return this}get absolutePath(){return"/"+this.id}get local(){return this._local}set local(e){this._local=e}get disposed(){return this._disposed}dispose(){this._disposed=!0}async getChannel(e){return null}createChannel(e,t){return null}get isAttached(){return!this.local}get attachState(){return this.local?s.AttachState.Detached:s.AttachState.Attached}bindChannel(e){}attachGraph(){}bindToContext(){}bind(e){}getQuorum(){return this.quorum}getAudience(){return null}save(e){}async close(){return null}async uploadBlob(e){return null}async getBlob(e){return null}submitMessage(e,t){return null}submitSignal(e,t){return null}process(e,t){}processSignal(e,t){}updateMinSequenceNumber(e){}setConnectionState(e,t){}async resolveHandle(e){return this.request(e)}async request(e){return null}addedGCOutboundReference(e,t){}async summarize(e,t){const n=(0,c.mergeStats)();return n.treeNodeCount++,{summary:{type:o.SummaryType.Tree,tree:{}},stats:n}}async getGCData(){return{gcNodes:{}}}updateUsedRoutes(e,t){}getAttachSnapshot(){return[]}getAttachSummary(){const e=(0,c.mergeStats)();return e.treeNodeCount++,{summary:{type:o.SummaryType.Tree,tree:{}},stats:e}}setAttachState(e){}async waitAttached(){}async requestDataStore(e){return null}reSubmit(e,t){}async applyStashedOp(e){}}t.MockFluidDataStoreRuntime=p;class f{constructor(){this.connected=!1}attach(e){}submit(e){return(0,i.assert)(!1,"Throw submit error on mock empty delta connection"),0}dirty(){}}t.MockEmptyDeltaConnection=f;class g{constructor(e){this.contents=e}async readBlob(e){return(0,i.stringToBuffer)(this.contents[e],"utf8")}async contains(e){return void 0!==this.contents[e]}async list(e){const t=(0,c.getNormalizedObjectStoragePathParts)(e).length;return Object.keys(this.contents).filter(n=>n.startsWith(e)&&n.split("/").length===t+1)}}t.MockObjectStorageService=g;class y{constructor(e){this.deltaConnection=new f,this.objectStorage=new g(e)}static createFromSummary(e){const t={};for(const[n,r]of Object.entries(e.tree))(0,i.assert)(r.type===o.SummaryType.Blob,"Unexpected summary type on mock createFromSummary"),t[n]=r.content;return new y(t)}}t.MockSharedObjectServices=y},function(e,t,n){"use strict";n.d(t,"d",(function(){return s})),n.d(t,"f",(function(){return a})),n.d(t,"e",(function(){return o})),n.d(t,"a",(function(){return c})),n.d(t,"c",(function(){return u})),n.d(t,"b",(function(){return h}));var r=n(1),i=n(16);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function s(e){if(null!==e&&"object"==typeof e&&!0===e.errorFromRequestFluidObject){const t=e;return{mimeType:"text/plain",status:t.code,value:t.message,get stack(){return t.stack}}}const t=Object(i.c)();return{mimeType:"text/plain",status:500,value:""+e,get stack(){var n;return null!==(n=null==e?void 0:e.stack)&&void 0!==n?n:t.stack}}}function a(e,t){const n=e.value,r=Object(i.c)();return{errorFromRequestFluidObject:!0,message:n,name:"Error",code:e.status,get stack(){var t;return null!==(t=e.stack)&&void 0!==t?t:r.stack}}}async function o(e,t){const n="string"==typeof t?{url:t}:t,i=await e.request(n);if(200!==i.status||"fluid/object"!==i.mimeType)throw a(i);return Object(r.a)(i.value,410),i.value}const c=e=>u(404,"not found",e);function u(e,t,n){var s;Object(r.a)(200!==e,411);const a=null===(s=n.url)||void 0===s?void 0:s.split("?")[0],o=Object(i.c)();return{mimeType:"text/plain",status:e,value:void 0===a?t:`${t}: ${a}`,get stack(){return o.stack}}}function h(e,t){return{type:e,get IFluidDataStoreFactory(){return this},get IFluidDataStoreRegistry(){return this},instantiateDataStore:async(e,n)=>(await t).instantiateDataStore(e,n),get:async e=>{var n;return null===(n=(await t).IFluidDataStoreRegistry)||void 0===n?void 0:n.get(e)}}}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function r(e){let t=e;return t.startsWith("/")&&(t=t.substr(1)),t.endsWith("/")&&(t=t.substr(0,t.length-1)),t.length>0?t.split("/"):[]}async function i(e,t){const n=r(t);let i=e;for(;void 0!==(null==i?void 0:i.entries)&&n.length>0;){const e=n.shift(),t=i.entries.findIndex(t=>"Tree"===t.type&&t.path===e);if(-1===t)i=void 0;else{i=i.entries[t].value}}if(void 0===(null==i?void 0:i.entries)||0!==n.length)throw new Error("path does not exist");return i.entries.filter(e=>"Blob"===e.type).map(e=>e.path)}n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return i}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));class r{constructor(e){this.request=e;const t=this.request.url.indexOf("?");this.query=t>=0?this.request.url.substring(t):""}static getPathParts(e){const t=e.indexOf("?");return e.substring(0,t<0?e.length:t).split("/").reduce((e,t)=>(void 0!==t&&t.length>0&&e.push(decodeURIComponent(t)),e),[])}static create(e){return e instanceof r?e:new r(e)}get url(){return this.request.url}get headers(){return this.request.headers}get pathParts(){return void 0===this.requestPathParts&&(this.requestPathParts=r.getPathParts(this.url)),this.requestPathParts}isLeaf(e){return""===this.query&&this.pathParts.length===e}createSubRequest(e){const t=this.pathParts.length;if(e<0||e>t)throw new Error("incorrect sub-request");if(e===t&&this.url.includes("?"))return{url:"/"+this.query,headers:this.headers};const n="/"+this.pathParts.slice(e).join("/");return{url:""===this.query?n:`${n}/${this.query}`,headers:this.headers}}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class r{get IRuntimeFactory(){return this}async instantiateRuntime(e,t){const n=void 0===t?!0===e.existing:t,r=await this.preInitialize(e,n);return n?await this.instantiateFromExisting(r):await this.instantiateFirstTime(r),await this.hasInitialized(r),r}async instantiateFirstTime(e){}async instantiateFromExisting(e){}async hasInitialized(e){}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(90),i=n(1),s=n(201),a=n(3),o=n(127),c=n(14);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class u extends c.b{constructor(e,t){super(t),this.serializedUsedRoutes=e}}class h extends o.a{constructor(e,t,n,i,s,a,o,c,u){super(e,async e=>t(e,!0),n,i,s,a,o),this.summarizeFn=t,this.getGCDataFn=c,this.baseGCDetailsLoaded=!1,this.usedRoutes=[""],this.gcDisabled=!0===n.gcDisabled,this.baseGCDetailsP=new r.b(async()=>{var e;return null!==(e=await(null==u?void 0:u()))&&void 0!==e?e:{usedRoutes:[]}})}getGCSummaryDetails(){return this.getBaseGCDetails()}getBaseGCDetails(){return{gcData:this.gcData,usedRoutes:this.usedRoutes,unrefTimestamp:this.unreferencedTimestampMs}}async loadBaseGCDetails(){var e;const t=await this.baseGCDetailsP;this.baseGCDetailsLoaded||(this.baseGCDetailsLoaded=!0,void 0!==t.gcData&&(this.gcData=Object(s.b)(t.gcData)),this.referenceUsedRoutes=null===(e=t.usedRoutes)||void 0===e?void 0:e.sort(),this.unreferencedTimestampMs=t.unrefTimestamp)}async summarize(e,t=!0){return!this.gcDisabled&&this.isTrackingInProgress()&&Object(i.a)(void 0!==this.wipSerializedUsedRoutes,433),t?super.summarize(e):this.summarizeFn(e,t)}async getGCData(e=!1){if(Object(i.a)(!this.gcDisabled,434),Object(i.a)(void 0!==this.getGCDataFn,435),await this.loadBaseGCDetails(),!e&&!this.hasDataChanged()&&void 0!==this.gcData)return Object(s.b)(this.gcData);const t=await this.getGCDataFn(e);return this.gcData=Object(s.b)(t),t}startSummary(e,t){this.gcDisabled||Object(i.a)(void 0===this.wipSerializedUsedRoutes,436),super.startSummary(e,t)}completeSummaryCore(e,t,n){let r;if(this.gcDisabled||(r=this.wipSerializedUsedRoutes,Object(i.a)(void 0!==r,437)),super.completeSummaryCore(e,t,n),!this.gcDisabled){const t=this.pendingSummaries.get(e);if(void 0!==t){const n=new u(r,t);this.pendingSummaries.set(e,n)}}}clearSummary(){this.wipSerializedUsedRoutes=void 0,super.clearSummary()}refreshLatestSummaryFromPending(e,t){if(!this.gcDisabled){const t=this.pendingSummaries.get(e);void 0!==t&&(this.referenceUsedRoutes=JSON.parse(t.serializedUsedRoutes))}return super.refreshLatestSummaryFromPending(e,t)}async refreshLatestSummaryFromSnapshot(e,t,n,r,i,s){if(!this.gcDisabled){const n=t.blobs[a.gcBlobKey];if(void 0!==n){const t=await s(n);if(this.referenceSequenceNumber>=e)return;this.referenceUsedRoutes=t.usedRoutes}}return super.refreshLatestSummaryFromSnapshot(e,t,n,r,i,s)}createChild(e,t,n,r={},s,a){var o;Object(i.a)(!this.children.has(t),438);const c=this.getCreateDetailsForChild(t,n),u=new h(this.defaultLogger,e,Object.assign(Object.assign({},r),{gcDisabled:null!==(o=r.gcDisabled)&&void 0!==o?o:this.gcDisabled}),c.changeSequenceNumber,c.latestSummary,c.initialSummary,this.wipSummaryLogger,s,a);return this.maybeUpdateChildState(u),this.children.set(t,u),u}deleteChild(e){this.children.delete(e)}getChild(e){return this.children.get(e)}isReferenced(){return this.usedRoutes.includes("")||this.usedRoutes.includes("/")}updateUsedRoutes(e,t){this.usedRoutes=e.sort(),!this.gcDisabled&&this.isTrackingInProgress()&&(this.wipSerializedUsedRoutes=JSON.stringify(this.usedRoutes)),this.isReferenced()?this.unreferencedTimestampMs=void 0:void 0===this.unreferencedTimestampMs&&(this.unreferencedTimestampMs=t)}hasChanged(){return this.hasDataChanged()||this.hasUsedStateChanged()}hasDataChanged(){return super.hasChanged()}hasUsedStateChanged(){return!this.gcDisabled&&(void 0===this.referenceUsedRoutes||JSON.stringify(this.usedRoutes)!==JSON.stringify(this.referenceUsedRoutes))}}const l=(e,t,n,r,i={},s,a)=>new h(e,t,i,n,void 0===r?void 0:c.b.createForRoot(r),void 0,void 0,s,a)},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
async function r(e,t){const n=e.trees[".protocol"].blobs.attributes;return(await t(n)).sequenceNumber}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return y})),n.d(t,"b",(function(){return v}));var r,i,s=n(1),a=n(74),o=n(575),c=n(309),u=n(187),h=n(576),l=n(143),d=n(44),m=n(306),p=n(46),f=n(135);const g=m.posix;class y{get type(){return y.Type}get attributes(){return y.Attributes}async load(e,t,n,r){const i=new v(t,e,r);return await i.load(n),i}create(e,t){const n=new v(t,e,y.Attributes);return n.initializeLocal(),n}}y.Type="https://graph.microsoft.com/types/directory",y.Attributes={type:y.Type,snapshotFormatVersion:"0.1",packageVersion:f.a};class v extends h.a{constructor(e,t,n){super(e,t,n),this[r]="SharedDirectory",this.root=new b(this,this.runtime,this.serializer,g.sep),this.messageHandlers=new Map,this.localValueMaker=new p.a(this.serializer),this.setMessageHandlers(),this.root.on("containedValueChanged",(e,t)=>{this.emit("containedValueChanged",e,t,this)}),this.root.on("subDirectoryCreated",(e,t)=>{this.emit("subDirectoryCreated",e,t,this)}),this.root.on("subDirectoryDeleted",(e,t)=>{this.emit("subDirectoryDeleted",e,t,this)})}static create(e,t){return e.createChannel(t,y.Type)}static getFactory(){return new y}get absolutePath(){return this.root.absolutePath}get(e){return this.root.get(e)}set(e,t){return this.root.set(e,t),this}dispose(e){this.root.dispose(e)}get disposed(){return this.root.disposed}delete(e){return this.root.delete(e)}clear(){this.root.clear()}has(e){return this.root.has(e)}get size(){return this.root.size}forEach(e){this.root.forEach(e)}[(r=Symbol.toStringTag,Symbol.iterator)](){return this.root[Symbol.iterator]()}entries(){return this.root.entries()}countSubDirectory(){return this.root.countSubDirectory()}keys(){return this.root.keys()}values(){return this.root.values()}createSubDirectory(e){return this.root.createSubDirectory(e)}getSubDirectory(e){return this.root.getSubDirectory(e)}hasSubDirectory(e){return this.root.hasSubDirectory(e)}deleteSubDirectory(e){return this.root.deleteSubDirectory(e)}subdirectories(){return this.root.subdirectories()}getWorkingDirectory(e){const t=this.makeAbsolute(e);if(t===g.sep)return this.root;let n=this.root;const r=t.substr(1).split(g.sep);for(const e of r)if(n=n.getSubDirectory(e),!n)return;return n}summarizeCore(e){return function(e,t){const n=new d.a;let r=0;const i=[],s=[],a={};for(s.push([e,a]);s.length>0;){const[e,a]=s.pop();for(const[s,o]of e.getSerializedStorage(t)){a.storage||(a.storage={});const t={type:o.type,value:o.value&&JSON.parse(o.value)};if(o.value&&o.value.length>=8192){const a={};let o=a;if(e.absolutePath!==g.sep)for(const t of e.absolutePath.substr(1).split(g.sep)){const e={};o.subdirectories={[t]:e},o=e}o.storage={[s]:t};const c="blob"+r;r++,i.push(c),n.addBlob(c,JSON.stringify(a))}else a.storage[s]=t}for(const[t,n]of e.subdirectories()){a.subdirectories||(a.subdirectories={});const e={};a.subdirectories[t]=e,s.push([n,e])}}const o={blobs:i,content:a};return n.addBlob("header",JSON.stringify(o)),n.getSummaryTree()}(this.root,e)}submitDirectoryMessage(e,t){this.submitLocalMessage(e,t)}onDisconnect(){}reSubmitCore(e,t){const n=e,r=this.messageHandlers.get(n.type);Object(s.a)(void 0!==r,13),r.submit(n,t)}async loadCore(e){const t=await Object(c.a)(e,"header"),n=t;Array.isArray(n.blobs)?(this.populate(n.content),await Promise.all(n.blobs.map(async t=>{const n=await Object(c.a)(e,t);this.populate(n)}))):this.populate(t)}populate(e){const t=[];for(t.push([this.root,e]);t.length>0;){const[e,n]=t.pop();if(n.subdirectories)for(const[r,i]of Object.entries(n.subdirectories)){let n=e.getSubDirectory(r);n||(n=new b(this,this.runtime,this.serializer,g.join(e.absolutePath,r)),e.populateSubDirectory(r,n)),t.push([n,i])}if(n.storage)for(const[t,r]of Object.entries(n.storage)){const n=this.makeLocal(t,e.absolutePath,r);e.populateStorage(t,n)}}}processCore(e,t,n){if(e.type===u.a.Operation){const r=e.contents,i=this.messageHandlers.get(r.type);Object(s.a)(void 0!==i,14),i.process(r,t,n)}}makeAbsolute(e){return g.resolve(g.sep,e)}makeLocal(e,t,n){return Object(s.a)(n.type===l.a[l.a.Plain]||n.type===l.a[l.a.Shared],484),this.localValueMaker.fromSerializable(n)}setMessageHandlers(){this.messageHandlers.set("clear",{process:(e,t,n)=>{const r=this.getWorkingDirectory(e.path);r&&r.processClearMessage(e,t,n)},submit:(e,t)=>{const n=this.getWorkingDirectory(e.path);n&&n.submitClearMessage(e)}}),this.messageHandlers.set("delete",{process:(e,t,n)=>{const r=this.getWorkingDirectory(e.path);r&&r.processDeleteMessage(e,t,n)},submit:(e,t)=>{const n=this.getWorkingDirectory(e.path);n&&n.submitKeyMessage(e)}}),this.messageHandlers.set("set",{process:(e,t,n)=>{const r=this.getWorkingDirectory(e.path);if(r){const i=t?void 0:this.makeLocal(e.key,e.path,e.value);r.processSetMessage(e,i,t,n)}},submit:(e,t)=>{const n=this.getWorkingDirectory(e.path);n&&n.submitKeyMessage(e)}}),this.messageHandlers.set("createSubDirectory",{process:(e,t,n)=>{const r=this.getWorkingDirectory(e.path);r&&r.processCreateSubDirectoryMessage(e,t,n)},submit:(e,t)=>{const n=this.getWorkingDirectory(e.path);n&&n.submitSubDirectoryMessage(e)}}),this.messageHandlers.set("deleteSubDirectory",{process:(e,t,n)=>{const r=this.getWorkingDirectory(e.path);r&&r.processDeleteSubDirectoryMessage(e,t,n)},submit:(e,t)=>{const n=this.getWorkingDirectory(e.path);n&&n.submitSubDirectoryMessage(e)}})}applyStashedOp(){throw new Error("not implemented")}}class b extends a.a{constructor(e,t,n,r){super(),this.directory=e,this.runtime=t,this.serializer=n,this.absolutePath=r,this._disposed=!1,this[i]="SubDirectory",this._storage=new Map,this._subdirectories=new Map,this.pendingKeys=new Map,this.pendingSubDirectories=new Map,this.pendingMessageId=-1,this.pendingClearMessageId=-1}dispose(e){this._disposed=!0,this.emit("disposed",this)}get disposed(){return this._disposed}throwIfDisposed(){if(this._disposed)throw new o.e("Cannot access Disposed subDirectory")}has(e){return this.throwIfDisposed(),this._storage.has(e)}get(e){var t;return this.throwIfDisposed(),null===(t=this._storage.get(e))||void 0===t?void 0:t.value}set(e,t){if(this.throwIfDisposed(),null==e)throw new Error("Undefined and null keys are not supported");const n=this.directory.localValueMaker.fromInMemory(t),r=Object(p.b)(n,this.serializer,this.directory.handle);if(this.setCore(e,n,!0),!this.directory.isAttached())return this;const i={key:e,path:this.absolutePath,type:"set",value:r};return this.submitKeyMessage(i),this}countSubDirectory(){return this._subdirectories.size}createSubDirectory(e){if(this.throwIfDisposed(),null==e)throw new Error("SubDirectory name may not be undefined or null");if(e.includes(g.sep))throw new Error("SubDirectory name may not contain "+g.sep);this.createSubDirectoryCore(e,!0);const t=this._subdirectories.get(e);if(!this.directory.isAttached())return t;const n={path:this.absolutePath,subdirName:e,type:"createSubDirectory"};return this.submitSubDirectoryMessage(n),t}getSubDirectory(e){return this.throwIfDisposed(),this._subdirectories.get(e)}hasSubDirectory(e){return this.throwIfDisposed(),this._subdirectories.has(e)}deleteSubDirectory(e){this.throwIfDisposed();const t=this.deleteSubDirectoryCore(e,!0);if(!this.directory.isAttached())return t;const n={path:this.absolutePath,subdirName:e,type:"deleteSubDirectory"};return this.submitSubDirectoryMessage(n),t}subdirectories(){return this.throwIfDisposed(),this._subdirectories.entries()}getWorkingDirectory(e){return this.throwIfDisposed(),this.directory.getWorkingDirectory(this.makeAbsolute(e))}delete(e){this.throwIfDisposed();const t=this.deleteCore(e,!0);if(!this.directory.isAttached())return t;const n={key:e,path:this.absolutePath,type:"delete"};return this.submitKeyMessage(n),t}clear(){if(this.throwIfDisposed(),this.clearCore(!0),!this.directory.isAttached())return;const e={path:this.absolutePath,type:"clear"};this.submitClearMessage(e)}forEach(e){this.throwIfDisposed(),this._storage.forEach((t,n,r)=>{e(t.value,n,r)})}get size(){return this.throwIfDisposed(),this._storage.size}entries(){this.throwIfDisposed();const e=this._storage.entries();return{next(){const t=e.next();return t.done?{value:void 0,done:!0}:{value:[t.value[0],t.value[1].value],done:!1}},[Symbol.iterator](){return this}}}keys(){return this.throwIfDisposed(),this._storage.keys()}values(){this.throwIfDisposed();const e=this._storage.values();return{next(){const t=e.next();return t.done?{value:void 0,done:!0}:{value:t.value.value,done:!1}},[Symbol.iterator](){return this}}}[(i=Symbol.toStringTag,Symbol.iterator)](){return this.throwIfDisposed(),this.entries()}processClearMessage(e,t,n){if(this.throwIfDisposed(),t){Object(s.a)(void 0!==n,15);const e=n;this.pendingClearMessageId===e&&(this.pendingClearMessageId=-1)}else this.clearExceptPendingKeys(),this.directory.emit("clear",t,this.directory)}processDeleteMessage(e,t,n){this.throwIfDisposed(),this.needProcessStorageOperation(e,t,n)&&this.deleteCore(e.key,t)}processSetMessage(e,t,n,r){this.throwIfDisposed(),this.needProcessStorageOperation(e,n,r)&&this.setCore(e.key,t,n)}processCreateSubDirectoryMessage(e,t,n){this.throwIfDisposed(),this.needProcessSubDirectoryOperations(e,t,n)&&this.createSubDirectoryCore(e.subdirName,t)}processDeleteSubDirectoryMessage(e,t,n){this.throwIfDisposed(),this.needProcessSubDirectoryOperations(e,t,n)&&this.deleteSubDirectoryCore(e.subdirName,t)}submitClearMessage(e){this.throwIfDisposed();const t=++this.pendingMessageId;this.directory.submitDirectoryMessage(e,t),this.pendingClearMessageId=t}submitKeyMessage(e){this.throwIfDisposed();const t=++this.pendingMessageId;this.directory.submitDirectoryMessage(e,t),this.pendingKeys.set(e.key,t)}submitSubDirectoryMessage(e){this.throwIfDisposed();const t=++this.pendingMessageId;this.directory.submitDirectoryMessage(e,t),this.pendingSubDirectories.set(e.subdirName,t)}*getSerializedStorage(e){this.throwIfDisposed();for(const[t,n]of this._storage){const r=[t,n.makeSerialized(e,this.directory.handle)];yield r}}populateStorage(e,t){this.throwIfDisposed(),this._storage.set(e,t)}populateSubDirectory(e,t){this.throwIfDisposed(),this._subdirectories.set(e,t)}getLocalValue(e){return this.throwIfDisposed(),this._storage.get(e)}makeAbsolute(e){return g.resolve(this.absolutePath,e)}needProcessStorageOperation(e,t,n){if(-1!==this.pendingClearMessageId)return t&&Object(s.a)(void 0!==n&&n<this.pendingClearMessageId,16),!1;if(this.pendingKeys.has(e.key)){if(t){Object(s.a)(void 0!==n,17);const t=n;this.pendingKeys.get(e.key)===t&&this.pendingKeys.delete(e.key)}return!1}return!t}needProcessSubDirectoryOperations(e,t,n){if(this.pendingSubDirectories.has(e.subdirName)){if(t){Object(s.a)(void 0!==n,18);const t=n;this.pendingSubDirectories.get(e.subdirName)===t&&this.pendingSubDirectories.delete(e.subdirName)}return!1}return!t}clearExceptPendingKeys(){const e=new Map;this.pendingKeys.forEach((t,n,r)=>{e.set(n,this._storage.get(n))}),this._storage.clear(),e.forEach((e,t,n)=>{this._storage.set(t,e)})}clearCore(e){this._storage.clear(),this.directory.emit("clear",e,this.directory)}deleteCore(e,t){const n=this.get(e),r=this._storage.delete(e);if(r){const r={key:e,path:this.absolutePath,previousValue:n};this.directory.emit("valueChanged",r,t,this.directory);const i={key:e,previousValue:n};this.emit("containedValueChanged",i,t,this)}return r}setCore(e,t,n){const r=this.get(e);this._storage.set(e,t);const i={key:e,path:this.absolutePath,previousValue:r};this.directory.emit("valueChanged",i,n,this.directory);const s={key:e,previousValue:r};this.emit("containedValueChanged",s,n,this)}createSubDirectoryCore(e,t){if(!this._subdirectories.has(e)){const n=g.join(this.absolutePath,e),r=new b(this.directory,this.runtime,this.serializer,n);this.registerEventsOnSubDirectory(r,e),this._subdirectories.set(e,r),this.emit("subDirectoryCreated",e,t,this)}}registerEventsOnSubDirectory(e,t){e.on("subDirectoryCreated",(e,n)=>{this.emit("subDirectoryCreated",g.join(t,e),n,this)}),e.on("subDirectoryDeleted",(e,n)=>{this.emit("subDirectoryDeleted",g.join(t,e),n,this)})}deleteSubDirectoryCore(e,t){const n=this.getSubDirectory(e),r=this._subdirectories.delete(e);return void 0!==n&&(this.disposeSubDirectoryTree(n),this.emit("subDirectoryDeleted",e,t,this)),r}disposeSubDirectoryTree(e){if(!e)return;const t=e.subdirectories();for(const[e,n]of t)this.disposeSubDirectoryTree(n);"function"==typeof e.dispose&&e.dispose()}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RemoteWetInkStore=t.StrokeRemovedEvent=t.StrokeUpdatedEvent=t.StrokeAddedEvent=void 0;const r=n(19),i=n(36);t.StrokeAddedEvent=Symbol(),t.StrokeUpdatedEvent=Symbol(),t.StrokeRemovedEvent=Symbol();class s extends r.EventEmitter{constructor(){super(...arguments),this._strokes=new Map}has(e){return this._strokes.has(e)}add(e,n){const r=new i.PointArrayStroke;r.id=e,r.drawingAttributes=n,this._strokes.set(e,r),this.emit(t.StrokeAddedEvent,r)}addPoints(e,n){const r=this._strokes.get(e);void 0!==r&&(n.forEach(e=>{0!==r.points.length&&e.timestamp<r.points[r.points.length-1].timestamp||r.add(e)}),this.emit(t.StrokeUpdatedEvent,r))}remove(e){this._strokes.delete(e),this.emit(t.StrokeRemovedEvent,e)}}t.RemoteWetInkStore=s},function(e,t,n){"use strict";function r(e){e.save(),e.setTransform(1,0,0,1,0,0),e.clearRect(0,0,e.canvas.width,e.canvas.height),e.restore()}function i(e){e.clear(e.COLOR_BUFFER_BIT)}n.r(t),n.d(t,"clear2DCanvas",(function(){return r})),n.d(t,"clearWebGLCanvas",(function(){return i}))},function(e,t,n){"use strict";n.r(t),n.d(t,"NoopEffectResolver",(function(){return r}));class r{toCanvasImageSource(){}toSVGImageElement(){}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.InkingManager=void 0;const r=n(550),i=n(295),s=n(179),a=n(180),o=n(292),c=n(298),u=n(297),h=n(192),l=n(293),d=n(554),m=n(563),p=n(296);class f{constructor(e,t){this.canvas=document.createElement("canvas"),this.canvas.style.position="absolute",this.canvas.style.touchAction="none",this.canvas.style.width="100%",this.canvas.style.height="100%",e.appendChild(this.canvas),this.context=(0,c.getScaledCanvasRenderingContext2D)(this.canvas,window.devicePixelRatio,this.canvas.clientWidth,this.canvas.clientHeight),this.renderer=new u.CanvasStrokeRenderer(this.context,new l.NoopEffectResolver,new h.DefaultColorResolver),this.renderer.renderMode=t}clear(){(0,o.clear2DCanvas)(this.context)}enablePointerEvents(){this.canvas.style.pointerEvents="auto"}disablePointerEvents(){this.canvas.style.pointerEvents="none"}}class g{constructor(e,t=g.renderMode){this.allowIncrementalWetRendering=!0,this._wetInkRenderFPSMeasureInterval=500,this._wetInkRenderFPS=[],this._wetInkRenderFPSReferenceTimestamp=0,this._inputToStroke=new m.PointerEventToSmoothedStrokePathTransform(.5),this.rerender=()=>{this._dryCanvas.clear(),s.StrokeCollectionStore.INSTANCE.streamStrokes(this._dryCanvas.renderer,void 0)},this.renderDryStroke=e=>{e.stream(this._dryCanvas.renderer)},this.render=()=>{this._renderWet(),a.WetStrokeCollectionStore.INSTANCE.drySemiWet(s.StrokeCollectionStore.INSTANCE)},this.onStrokeBegin=()=>{this.allowIncrementalWetRendering&&i.ActiveDrawingAttributes.INSTANCE.supportsIncrementalRender()?(this._wetInkRenderFPS=[],this._renderWet=()=>{const e=performance.now();0===this._wetInkRenderFPSReferenceTimestamp||e-this._wetInkRenderFPSReferenceTimestamp>this._wetInkRenderFPSMeasureInterval?(this._wetInkRenderFPSReferenceTimestamp=e,this._wetInkRenderFPS.length>0&&(this._wetInkRenderFPS[this._wetInkRenderFPS.length-1]/=this._wetInkRenderFPSMeasureInterval/1e3),this._wetInkRenderFPS.push(1)):this._wetInkRenderFPS[this._wetInkRenderFPS.length-1]+=1,a.WetStrokeCollectionStore.INSTANCE.getLineMode()?(this._wetCanvas.clear(),a.WetStrokeCollectionStore.INSTANCE.streamWet(this._wetCanvas.renderer)):a.WetStrokeCollectionStore.INSTANCE.streamWetNewPoints(this._wetCanvas.renderer)}):this._renderWet=()=>{this._wetCanvas.clear(),a.WetStrokeCollectionStore.INSTANCE.streamWet(this._wetCanvas.renderer)},this._wetCanvas.clear(),this._renderLoop.onStrokeBegin()},this.onStrokeEnd=()=>{this._renderLoop.onStrokeEnd(),this.render(),this._wetCanvas.clear();const e=this._wetInkRenderFPS.slice(0,this._wetInkRenderFPS.length-1);console.log(`Wet ink rendering FPS (measured every ${this._wetInkRenderFPSMeasureInterval} ms): ${e.toString()}`)},this.createCanvasPoolHost(e),this._dryCanvas=new f(e,t),this._wetCanvas=new f(e,t),this._renderLoop=new r.StrokeRenderLoop(this.render),a.WetStrokeCollectionStore.INSTANCE.overrideCollector(p.EventingStrokeCollector.INSTANCE),a.WetStrokeCollectionStore.INSTANCE.setStrokeSource(this._inputToStroke)}createCanvasPoolHost(e){let t=document.getElementById(g.canvasPoolId);t||(t=document.createElement("div"),t.id=g.canvasPoolId,t.style.position="absolute",t.style.width="100%",t.style.height="100%",e.appendChild(t))}activate(){this.rerender(),a.WetStrokeCollectionStore.INSTANCE.on(a.StrokeBeginEvent,this.onStrokeBegin),a.WetStrokeCollectionStore.INSTANCE.on(a.StrokeEndEvent,this.onStrokeEnd),s.StrokeCollectionStore.INSTANCE.on(s.StrokeAddedEvent,this.renderDryStroke),s.StrokeCollectionStore.INSTANCE.on(s.ClearEvent,this.rerender),s.StrokeCollectionStore.INSTANCE.on(s.StrokeDeletedEvent,this.rerender),s.StrokeCollectionStore.INSTANCE.on(s.RerenderEvent,this.rerender),d.InputManager.INSTANCE.activate(this._wetCanvas.canvas,this._inputToStroke),this._wetCanvas.enablePointerEvents()}deactivate(){this._wetCanvas.disablePointerEvents(),d.InputManager.INSTANCE.deactivate(),a.WetStrokeCollectionStore.INSTANCE.off(a.StrokeBeginEvent,this.onStrokeBegin),a.WetStrokeCollectionStore.INSTANCE.off(a.StrokeEndEvent,this.onStrokeEnd),s.StrokeCollectionStore.INSTANCE.off(s.StrokeAddedEvent,this.renderDryStroke),s.StrokeCollectionStore.INSTANCE.off(s.ClearEvent,this.rerender),s.StrokeCollectionStore.INSTANCE.off(s.StrokeDeletedEvent,this.rerender),s.StrokeCollectionStore.INSTANCE.off(s.RerenderEvent,this.rerender),this.clear()}clear(){this._wetCanvas.clear(),this._dryCanvas.clear()}}t.InkingManager=g,g.canvasPoolId="@__wet-ink-canvas-pool__@",g.renderMode=1},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ActiveDrawingAttributes=void 0;const r=n(551),i=n(569);class s{constructor(){this._builder=new r.ToolBasedDrawingAttributesBuilder,this._injectors=[],this.current=this._builder.build()}createDrawingAttributesInjector(){const e=new i.DrawingAttributesInjector(this.current);return this._injectors.push(e),e}cleanup(){this._injectors=[]}applyChanges(e){e(this._builder),this.current=this._builder.build(),this._injectors.forEach(e=>{e.setDrawingAttributes(this.current)})}supportsIncrementalRender(){return 0===this.current.effect.type}}t.ActiveDrawingAttributes=s,s.INSTANCE=new s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EventingStrokeCollector=t.CurrentStrokeStreamedEvent=t.EndStrokeEvent=t.BeginStrokeEvent=void 0;const r=n(19),i=n(559),s=n(36),a=n(180),o=n(560);t.BeginStrokeEvent=Symbol(),t.EndStrokeEvent=Symbol(),t.CurrentStrokeStreamedEvent=Symbol();class c extends r.EventEmitter{constructor(){super(...arguments),this.idGenerator=new o.UuidUniqueIdGenerator,this._inputStrokes=new i.ArrayStrokeCollection,this._currentStroke=new s.PointArrayStroke,this._newPointsIndex=0}setDrawingAttributes(e){this._currentStroke.drawingAttributes=e}beginStroke(e){a.WetStrokeCollectionStore.INSTANCE.emit(a.StrokeBeginEvent),this._newPointsIndex=0,this._currentStroke.id=this.idGenerator.generate(),this.emit(t.BeginStrokeEvent,this._currentStroke),this.addPoint(e)}addPoint(e){this._currentStroke.add(e)}endStroke(e){this.addPoint(e),this._inputStrokes.add(this._currentStroke),this.emit(t.EndStrokeEvent,this._currentStroke),this._currentStroke=new s.PointArrayStroke,a.WetStrokeCollectionStore.INSTANCE.emit(a.StrokeEndEvent)}streamCollectedStrokes(e){this._inputStrokes.stream(e)}resetCollectedStrokes(){this._inputStrokes=new i.ArrayStrokeCollection}streamCurrentStroke(e){this._currentStroke.stream(e),this.emit(t.CurrentStrokeStreamedEvent,this._currentStroke)}streamCurrentStrokeNewPoints(e){this._newPointsIndex=(0,s.streamPointArrayStrokeFrom)(this._currentStroke,e,this._newPointsIndex),this.emit(t.CurrentStrokeStreamedEvent,this._currentStroke)}}t.EventingStrokeCollector=c,c.INSTANCE=new c},function(e,t,n){"use strict";function r(e){throw e}n.r(t),n.d(t,"CanvasStrokeRenderer",(function(){return P}));class i{constructor(e){this.context=e}beginPath(){this.context.beginPath()}arc(e,t,n,r,i,s){this.context.arc(e,t,n,r,i,s)}circularArc(e,t,n,r,i,s,a,o,c){let u=Math.atan2(t-r,e-n),h=Math.atan2(a-r,s-n);u=u<0?2*Math.PI+u:u,h=h<0?2*Math.PI+h:h,this.arc(n,r,i,u,h,c)}lineTo(e,t){this.context.lineTo(e,t)}moveTo(e,t){this.context.moveTo(e,t)}closePath(){this.context.closePath()}}var s=n(192);function a(e,t=1e-6){return e<-t||t<e}function o(e,t,n=1e-6){return function(e,t=1e-6){return-t<=e&&e<=t}(e-t,n)}function c(e){return 1.5*e+.25}class u{constructor(e,t,n){this.incomingTangent1={x:Number.NaN,y:Number.NaN},this.incomingTangent2={x:Number.NaN,y:Number.NaN},this.outgoingTangent1={x:Number.NaN,y:Number.NaN},this.outgoingTangent2={x:Number.NaN,y:Number.NaN},this.center={x:e,y:t},this.radius=n}}class h{constructor(e,t){this.stroke=[],this.builder=e,this.tipRadius=t.width/2}beginStroke(e){this.builder.beginPath(),this.stroke=[],this.addPoint(e)}addPoint(e){const t=new u(e.x,e.y,this.tipRadius*c(e.pressure));this.stroke.push(t)}endStroke(e){this.addPoint(e),function(e){for(let t=1;t<e.length;t++){const n=e[t-1],r=e[t],i=n.center.x,s=n.center.y,a=n.radius,o=r.center.x,c=r.center.y,u=r.radius,h=i-o,l=s-c,d=Math.sqrt(h*h+l*l),m=Math.abs(u-a);if(m>d)continue;const p=1/d,f=m*p;let g=Math.sqrt(1-f*f),y=h*p,v=l*p;a>u&&(g=-g,y=-y,v=-v);const b=y*f,S=v*f,w=y*g,C=v*g,x=b+C,E=S-w,O=b-C,T=S+w;n.outgoingTangent1.x=i+a*x,n.outgoingTangent1.y=s+a*E,n.outgoingTangent2.x=i+a*O,n.outgoingTangent2.y=s+a*T,r.incomingTangent1.x=o+u*x,r.incomingTangent1.y=c+u*E,r.incomingTangent2.x=o+u*O,r.incomingTangent2.y=c+u*T}}(this.stroke),function(e,t){let n=0;for(let r=0;r<t.length;r++)(r===t.length-1||isNaN(t[r].outgoingTangent1.x))&&(l(e,t,n,r),n=r+1)}(this.builder,this.stroke),this.builder.closePath()}}function l(e,t,n,r){if(n===r){const r=t[n];return e.moveTo(r.center.x-r.radius,r.center.y),e.circularArc(r.center.x-r.radius,r.center.y,r.center.x,r.center.y,r.radius,r.center.x+r.radius,r.center.y,!1,!0),void e.circularArc(r.center.x+r.radius,r.center.y,r.center.x,r.center.y,r.radius,r.center.x-r.radius,r.center.y,!1,!0)}let i=t[n];e.moveTo(i.outgoingTangent1.x,i.outgoingTangent1.y);let s,a=i;i=t[n+1];for(let o=n+1;o<r;o++){s=t[o+1];const n=d(a.outgoingTangent1,i.incomingTangent1,i.outgoingTangent1,s.incomingTangent1);void 0!==n?e.lineTo(n.x,n.y):(e.lineTo(i.incomingTangent1.x,i.incomingTangent1.y),e.circularArc(i.incomingTangent1.x,i.incomingTangent1.y,i.center.x,i.center.y,i.radius,i.outgoingTangent1.x,i.outgoingTangent1.y,!1,!0)),a=i,i=s}const o=i.radius>t[r-1].radius;e.lineTo(i.incomingTangent1.x,i.incomingTangent1.y),e.circularArc(i.incomingTangent1.x,i.incomingTangent1.y,i.center.x,i.center.y,i.radius,i.incomingTangent2.x,i.incomingTangent2.y,o,!0),a=i,i=t[r-1];for(let o=r-1;o>n;o--){s=t[o-1];const n=d(a.incomingTangent2,i.outgoingTangent2,i.incomingTangent2,s.outgoingTangent2);void 0!==n?e.lineTo(n.x,n.y):(e.lineTo(i.outgoingTangent2.x,i.outgoingTangent2.y),e.circularArc(i.outgoingTangent2.x,i.outgoingTangent2.y,i.center.x,i.center.y,i.radius,i.incomingTangent2.x,i.incomingTangent2.y,!1,!0)),a=i,i=s}const c=i.radius>t[n+1].radius;e.lineTo(i.outgoingTangent2.x,i.outgoingTangent2.y),e.circularArc(i.outgoingTangent2.x,i.outgoingTangent2.y,i.center.x,i.center.y,i.radius,i.outgoingTangent1.x,i.outgoingTangent1.y,c,!0)}function d(e,t,n,r){if((r.x-n.x)*(t.y-e.y)-(t.x-e.x)*(r.y-n.y)>0)return;const i=t.y-e.y,s=e.x-t.x,o=i*e.x+s*e.y,c=r.y-n.y,u=n.x-r.x,h=c*n.x+u*n.y,l=i*u-c*s;if(a(l)){const a=1/l,d=(u*o-s*h)*a,p=(i*h-c*o)*a;if(m(d,p,e,t)&&m(d,p,n,r))return{x:d,y:p}}}function m(e,t,n,r){return(Math.min(n.x,r.x)<e||o(Math.min(n.x,r.x),e))&&(Math.max(n.x,r.x)>e||o(Math.max(n.x,r.x),e))&&(Math.min(n.y,r.y)<t||o(Math.min(n.y,r.y),t))&&(Math.max(n.y,r.y)>t||o(Math.max(n.y,r.y),t))}function p(e,t,n,r,i){const s=n.x-e.x,a=n.y-e.y,o=Math.sqrt(s*s+a*a);if(o<=Math.abs(r-t))return!1;const c=s/o,u=-a/o,h=(r-t)/o,l=Math.sqrt(1-h*h),d=u*l+c*h,m=c*l-u*h,p=u*l-c*h,f=c*l+u*h;return i.p1.x=e.x-d*t,i.p1.y=e.y-m*t,i.p2.x=n.x-d*r,i.p2.y=n.y-m*r,i.p3.x=n.x+p*r,i.p3.y=n.y+f*r,i.p4.x=e.x+p*t,i.p4.y=e.y+f*t,!0}function f(e,t,n,r,i,s,a){const o=e.x-t,c=e.y-n,u=e.x+t,h=e.y+n,l=r.x-i,d=r.y-s,m=r.x+i,p=r.y+s;if(l>=o&&d>=c&&m<=u&&p<=h||o>=l&&c>=d&&u<=m&&h<=p)return!1;const f=r.x-e.x>0?1:-1,g=r.y-e.y>0?1:-1;return a.p1.x=e.x-g*t,a.p1.y=e.y+f*n,a.p2.x=e.x+g*t,a.p2.y=e.y-f*n,a.p3.x=r.x+g*i,a.p3.y=r.y-f*s,a.p4.x=r.x-g*i,a.p4.y=r.y+f*s,!0}const g=2*Math.PI;function y(e,t,n){e.arc(t.x,t.y,n,0,g)}function v(e,t,n,r){const i=t.x-n,s=t.x+n,a=t.y-r,o=t.y+r;e.moveTo(i,a),e.lineTo(s,a),e.lineTo(s,o),e.lineTo(i,o),e.lineTo(i,a)}function b(e,t){e.moveTo(t.p1.x,t.p1.y),e.lineTo(t.p2.x,t.p2.y),e.lineTo(t.p3.x,t.p3.y),e.lineTo(t.p4.x,t.p4.y),e.lineTo(t.p1.x,t.p1.y)}class S{constructor(e,t){this.quad={p1:{x:0,y:0},p2:{x:0,y:0},p3:{x:0,y:0},p4:{x:0,y:0}},this.builder=e,this.tipRadius=t.width/2}beginStroke(e){this.builder.beginPath(),this.updateRadius(e),y(this.builder,e,this.radius),this.lastPoint=e}addPoint(e){this.updateRadius(e),p(e,this.radius,this.lastPoint,this.lastRadius,this.quad)&&(b(this.builder,this.quad),y(this.builder,e,this.radius)),this.lastPoint=e}endStroke(e){this.addPoint(e),this.builder.closePath()}updateRadius(e){this.lastRadius=this.radius,this.radius=this.tipRadius*c(e.pressure)}}class w{constructor(e){this.builder=e}beginStroke(e){this.builder.beginPath(),this.builder.moveTo(e.x,e.y)}addPoint(e){this.builder.lineTo(e.x,e.y)}endStroke(e){this.addPoint(e)}}class C{constructor(e,t,n,r){this.center={x:e,y:t},this.halfWidth=n,this.halfHeight=r}}class x{constructor(e,t){this.stroke=[],this.quads=[],this.builder=e,this.tipWidth=t.width/2,this.tipHeight=t.height/2}beginStroke(e){this.builder.beginPath(),this.stroke=[],this.quads=[],this.addPoint(e)}addPoint(e){const t=c(e.pressure),n=new C(e.x,e.y,this.tipWidth*t,this.tipHeight*t),r=this.stroke.length;r>0&&function(e,t,n){const r={p1:{x:0,y:0},p2:{x:0,y:0},p3:{x:0,y:0},p4:{x:0,y:0}};f(e.center,e.halfWidth,e.halfHeight,t.center,t.halfWidth,t.halfHeight,r)&&n.push(r)}(this.stroke[r-1],n,this.quads),this.stroke.push(n)}endStroke(e){this.addPoint(e),function(e,t,n){if(E(e,t[0]),0===n.length)return;e.moveTo(n[0].p1.x,n[0].p1.y);for(let t=0;t<n.length;t++)e.lineTo(n[t].p2.x,n[t].p2.y),e.lineTo(n[t].p3.x,n[t].p3.y);for(let t=n.length-1;t>=0;t--)e.lineTo(n[t].p4.x,n[t].p4.y),e.lineTo(n[t].p1.x,n[t].p1.y);t.length>2&&E(e,t[t.length-2]);E(e,t[t.length-1])}(this.builder,this.stroke,this.quads),this.builder.closePath()}}function E(e,t){v(e,t.center,t.halfWidth,t.halfHeight)}class O{constructor(e,t){this.quad={p1:{x:0,y:0},p2:{x:0,y:0},p3:{x:0,y:0},p4:{x:0,y:0}},this.builder=e,this.tipHalfWidth=t.width/2,this.tipHalfHeight=t.height/2}beginStroke(e){this.builder.beginPath(),this.updateSize(e),v(this.builder,e,this.halfWidth,this.halfHeight),this.lastPoint=e}addPoint(e){this.updateSize(e),f(e,this.halfWidth,this.halfHeight,this.lastPoint,this.lastHalfWidth,this.lastHalfHeight,this.quad)&&(b(this.builder,this.quad),v(this.builder,e,this.halfWidth,this.halfHeight)),this.lastPoint=e}endStroke(e){this.addPoint(e),this.builder.closePath()}updateSize(e){this.lastHalfWidth=this.halfWidth,this.lastHalfHeight=this.halfHeight;const t=c(e.pressure);this.halfWidth=this.tipHalfWidth*t,this.halfHeight=this.tipHalfHeight*t}}function T(e,t,n,i,s){e.lineWidth=t.height;const a=function(e,t,n,r,i){if(1===t.effect.type){const r=t.effect,s=n.toCanvasImageSource(r);if(void 0!==s){const n=e.createPattern(s,"repeat");if(null!==n){const s=.5;return e.scale(s,s),e.lineWidth=t.width/s,e.translate(i.x-r.offsetX,i.y-r.offsetY),n}}}return r.toCSSColor(t.color,t)}(e,t,n,i,s);switch(e.strokeStyle=a,e.fillStyle=a,t.tip){case"ellipse":e.lineCap="round",e.lineJoin="round";break;case"rectangle":e.lineCap="butt",e.lineJoin="miter";break;default:r(t.tip)}switch(t.rasterOperation){case"copy":e.globalCompositeOperation="source-over";break;case"mask":e.globalCompositeOperation="darken";break;default:r(t.rasterOperation)}}class P{constructor(e,t,n=new s.DefaultColorResolver){this.renderMode=0,this.context=e,this.canvasPathBuilder=new i(e),this.effectResolver=t,this.colorResolver=n}setDrawingAttributes(e){this.attributes=e}beginStroke(e){this.pathBuilder=this.makeNewPathBuilder(),this.pathBuilder.beginStroke(e),this.beginPoint=e}addPoint(e){this.pathBuilder.addPoint(e)}endStroke(e){this.pathBuilder.endStroke(e),this.context.save(),T(this.context,this.attributes,this.effectResolver,this.colorResolver,this.beginPoint),2===this.renderMode?this.context.stroke():this.context.fill(),this.context.restore()}makeNewPathBuilder(){switch(this.renderMode){case 0:return"ellipse"===this.attributes.tip?new S(this.canvasPathBuilder,this.attributes):new O(this.canvasPathBuilder,this.attributes);case 1:return"ellipse"===this.attributes.tip?new h(this.canvasPathBuilder,this.attributes):new x(this.canvasPathBuilder,this.attributes);case 2:return new w(this.canvasPathBuilder);default:r(this.renderMode)}}}},function(e,t,n){"use strict";function r(e,t,n,r){e.style.width=n+"px",e.style.height=r+"px",e.width=n*t,e.height=r*t}n.r(t),n.d(t,"getCanvasRenderingContext2DWithOptions",(function(){return s})),n.d(t,"getCanvasRenderingContext2D",(function(){return a})),n.d(t,"getScaledCanvasRenderingContext2DWithOptions",(function(){return o})),n.d(t,"getScaledCanvasRenderingContext2D",(function(){return c})),n.d(t,"getWebGLRenderingContext",(function(){return u})),n.d(t,"getScaledWebGLRenderingContext",(function(){return h}));const i={alpha:!0,desynchronized:!1};function s(e,t){const n=e.getContext("2d",t);if(null===n)throw new Error("Could not get 2D context from canvas.");return n}function a(e){return s(e,i)}function o(e,t,n,i,a){const o=s(e,a);return function(e,t,n,i,s){r(e,t,i,s),n.setTransform(1,0,0,1,0,0),n.scale(t,t)}(e,t,o,n,i),o}function c(e,t,n,r){return o(e,t,n,r,i)}function u(e){const t=e.getContext("webgl",{preserveDrawingBuffer:!0});if(null===t)throw new Error("Could not get WebGL context from canvas.");return t}function h(e,t,n,i){const s=u(e);return function(e,t,n,i,s){r(e,t,i,s),n.viewport(0,0,e.width,e.height)}(e,t,s,n,i),s}},function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return p}));var r=n(187),i=n(309),s=n(576),a=n(44),o=n(143),c=n(1),u=n(46);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class h{constructor(e,t,n,r,i){this.serializer=e,this.handle=t,this.submitMessage=n,this.isAttached=r,this.eventEmitter=i,this.messageHandlers=new Map,this.data=new Map,this.pendingKeys=new Map,this.pendingMessageId=-1,this.pendingClearMessageId=-1,this.localValueMaker=new u.a(e),this.messageHandlers=this.getMessageHandlers()}get size(){return this.data.size}keys(){return this.data.keys()}entries(){const e=this.data.entries();return{next(){const t=e.next();return t.done?{value:void 0,done:!0}:{value:[t.value[0],t.value[1].value],done:!1}},[Symbol.iterator](){return this}}}values(){const e=this.data.values();return{next(){const t=e.next();return t.done?{value:void 0,done:!0}:{value:t.value.value,done:!1}},[Symbol.iterator](){return this}}}[Symbol.iterator](){return this.entries()}forEach(e){this.data.forEach((t,n,r)=>{e(t.value,n,r)})}get(e){if(!this.data.has(e))return;return this.data.get(e).value}has(e){return this.data.has(e)}set(e,t){if(null==e)throw new Error("Undefined and null keys are not supported");const n=this.localValueMaker.fromInMemory(t),r=Object(u.b)(n,this.serializer,this.handle);if(this.setCore(e,n,!0),!this.isAttached())return;const i={key:e,type:"set",value:r};this.submitMapKeyMessage(i)}delete(e){const t=this.deleteCore(e,!0);if(!this.isAttached())return t;const n={key:e,type:"delete"};return this.submitMapKeyMessage(n),t}clear(){if(this.clearCore(!0),!this.isAttached())return;this.submitMapClearMessage({type:"clear"})}getSerializedStorage(e){const t={};return this.data.forEach((n,r)=>{t[r]=n.makeSerialized(e,this.handle)}),t}getSerializableStorage(e){const t={};return this.data.forEach((n,r)=>{t[r]=Object(u.b)(n,e,this.handle)}),t}serialize(e){return JSON.stringify(this.getSerializableStorage(e))}populateFromSerializable(e){for(const[t,n]of Object.entries(e)){const e={key:t,value:this.makeLocal(t,n)};this.data.set(e.key,e.value)}}populate(e){this.populateFromSerializable(JSON.parse(e))}trySubmitMessage(e,t){const n=e.type;return!!this.messageHandlers.has(n)&&(this.messageHandlers.get(n).submit(e,t),!0)}tryGetStashedOpLocalMetadata(e){const t=e.type;if(this.messageHandlers.has(t))return this.messageHandlers.get(t).getStashedOpLocalMetadata(e);throw new Error("no apply stashed op handler")}tryProcessMessage(e,t,n){return!!this.messageHandlers.has(e.type)&&(this.messageHandlers.get(e.type).process(e,t,n),!0)}setCore(e,t,n){const r=this.get(e);this.data.set(e,t);const i={key:e,previousValue:r};this.eventEmitter.emit("valueChanged",i,n,this.eventEmitter)}clearCore(e){this.data.clear(),this.eventEmitter.emit("clear",e,this.eventEmitter)}deleteCore(e,t){const n=this.get(e),r=this.data.delete(e);if(r){const r={key:e,previousValue:n};this.eventEmitter.emit("valueChanged",r,t,this.eventEmitter)}return r}clearExceptPendingKeys(){const e=new Map;this.pendingKeys.forEach((t,n)=>{e.set(n,this.data.get(n))}),this.data.clear(),e.forEach((e,t)=>{this.data.set(t,e)})}makeLocal(e,t){if(t.type===o.a[o.a.Plain]||t.type===o.a[o.a.Shared])return this.localValueMaker.fromSerializable(t);throw new Error("Unknown local value type")}needProcessKeyOperation(e,t,n){if(-1!==this.pendingClearMessageId)return t&&Object(c.a)(void 0!==n&&n<this.pendingClearMessageId,19),!1;if(this.pendingKeys.has(e.key)){if(t){Object(c.a)(void 0!==n,20);const t=n;this.pendingKeys.get(e.key)===t&&this.pendingKeys.delete(e.key)}return!1}return!t}getMessageHandlers(){const e=new Map;return e.set("clear",{process:(e,t,n)=>{if(t){Object(c.a)(void 0!==n,21);const e=n;this.pendingClearMessageId===e&&(this.pendingClearMessageId=-1)}else 0===this.pendingKeys.size?this.clearCore(t):this.clearExceptPendingKeys()},submit:(e,t)=>{this.submitMapClearMessage(e)},getStashedOpLocalMetadata:e=>this.getMapClearMessageLocalMetadata(e)}),e.set("delete",{process:(e,t,n)=>{this.needProcessKeyOperation(e,t,n)&&this.deleteCore(e.key,t)},submit:(e,t)=>{this.submitMapKeyMessage(e)},getStashedOpLocalMetadata:e=>this.getMapKeyMessageLocalMetadata(e)}),e.set("set",{process:(e,t,n)=>{if(!this.needProcessKeyOperation(e,t,n))return;const r=this.makeLocal(e.key,e.value);this.setCore(e.key,r,t)},submit:(e,t)=>{this.submitMapKeyMessage(e)},getStashedOpLocalMetadata:e=>this.getMapKeyMessageLocalMetadata(e)}),e}getMapClearMessageLocalMetadata(e){const t=++this.pendingMessageId;return this.pendingClearMessageId=t,t}submitMapClearMessage(e){const t=this.getMapClearMessageLocalMetadata(e);this.submitMessage(e,t)}getMapKeyMessageLocalMetadata(e){const t=++this.pendingMessageId;return this.pendingKeys.set(e.key,t),t}submitMapKeyMessage(e){const t=this.getMapKeyMessageLocalMetadata(e);this.submitMessage(e,t)}}var l,d=n(135);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class m{get type(){return m.Type}get attributes(){return m.Attributes}async load(e,t,n,r){const i=new p(t,e,r);return await i.load(n),i}create(e,t){const n=new p(t,e,m.Attributes);return n.initializeLocal(),n}}m.Type="https://graph.microsoft.com/types/map",m.Attributes={type:m.Type,snapshotFormatVersion:"0.2",packageVersion:d.a};class p extends s.a{constructor(e,t,n){super(e,t,n),this[l]="SharedMap",this.kernel=new h(this.serializer,this.handle,(e,t)=>this.submitLocalMessage(e,t),()=>this.isAttached(),this)}static create(e,t){return e.createChannel(t,m.Type)}static getFactory(){return new m}keys(){return this.kernel.keys()}entries(){return this.kernel.entries()}values(){return this.kernel.values()}[(l=Symbol.toStringTag,Symbol.iterator)](){return this.kernel.entries()}get size(){return this.kernel.size}forEach(e){this.kernel.forEach(e)}get(e){return this.kernel.get(e)}has(e){return this.kernel.has(e)}set(e,t){return this.kernel.set(e,t),this}delete(e){return this.kernel.delete(e)}clear(){this.kernel.clear()}summarizeCore(e){let t=0,n=0,r={};const i=[],s=new a.a,o=this.kernel.getSerializedStorage(e);for(const e of Object.keys(o)){const a=o[e];if(a.value&&a.value.length>=8192){const t="blob"+n;n++,i.push(t);const r={[e]:{type:a.type,value:JSON.parse(a.value)}};s.addBlob(t,JSON.stringify(r))}else{if(t+=a.type.length+21,a.value&&(t+=a.value.length),t>16384){const e="blob"+n;n++,i.push(e),s.addBlob(e,JSON.stringify(r)),r={},t=0}r[e]={type:a.type,value:void 0===a.value?void 0:JSON.parse(a.value)}}}const c={blobs:i,content:r};return s.addBlob("header",JSON.stringify(c)),s.getSummaryTree()}async loadCore(e){const t=await Object(i.a)(e,"header"),n=t;Array.isArray(n.blobs)?(this.kernel.populateFromSerializable(n.content),await Promise.all(n.blobs.map(async t=>{const n=await Object(i.a)(e,t);this.kernel.populateFromSerializable(n)}))):this.kernel.populateFromSerializable(t)}onDisconnect(){}reSubmitCore(e,t){this.kernel.trySubmitMessage(e,t)}applyStashedOp(e){return this.kernel.tryProcessMessage(e,!1,void 0),this.kernel.tryGetStashedOpLocalMetadata(e)}processCore(e,t,n){e.type===r.a.Operation&&this.kernel.tryProcessMessage(e.contents,t,n)}}},function(e,t,n){"use strict";(function(t){function n(e){if("string"!=typeof e)throw new TypeError("Path must be a string. Received "+JSON.stringify(e))}function r(e,t){for(var n,r="",i=0,s=-1,a=0,o=0;o<=e.length;++o){if(o<e.length)n=e.charCodeAt(o);else{if(47===n)break;n=47}if(47===n){if(s===o-1||1===a);else if(s!==o-1&&2===a){if(r.length<2||2!==i||46!==r.charCodeAt(r.length-1)||46!==r.charCodeAt(r.length-2))if(r.length>2){var c=r.lastIndexOf("/");if(c!==r.length-1){-1===c?(r="",i=0):i=(r=r.slice(0,c)).length-1-r.lastIndexOf("/"),s=o,a=0;continue}}else if(2===r.length||1===r.length){r="",i=0,s=o,a=0;continue}t&&(r.length>0?r+="/..":r="..",i=2)}else r.length>0?r+="/"+e.slice(s+1,o):r=e.slice(s+1,o),i=o-s-1;s=o,a=0}else 46===n&&-1!==a?++a:a=-1}return r}var i={resolve:function(){for(var e,i="",s=!1,a=arguments.length-1;a>=-1&&!s;a--){var o;a>=0?o=arguments[a]:(void 0===e&&(e=t.cwd()),o=e),n(o),0!==o.length&&(i=o+"/"+i,s=47===o.charCodeAt(0))}return i=r(i,!s),s?i.length>0?"/"+i:"/":i.length>0?i:"."},normalize:function(e){if(n(e),0===e.length)return".";var t=47===e.charCodeAt(0),i=47===e.charCodeAt(e.length-1);return 0!==(e=r(e,!t)).length||t||(e="."),e.length>0&&i&&(e+="/"),t?"/"+e:e},isAbsolute:function(e){return n(e),e.length>0&&47===e.charCodeAt(0)},join:function(){if(0===arguments.length)return".";for(var e,t=0;t<arguments.length;++t){var r=arguments[t];n(r),r.length>0&&(void 0===e?e=r:e+="/"+r)}return void 0===e?".":i.normalize(e)},relative:function(e,t){if(n(e),n(t),e===t)return"";if((e=i.resolve(e))===(t=i.resolve(t)))return"";for(var r=1;r<e.length&&47===e.charCodeAt(r);++r);for(var s=e.length,a=s-r,o=1;o<t.length&&47===t.charCodeAt(o);++o);for(var c=t.length-o,u=a<c?a:c,h=-1,l=0;l<=u;++l){if(l===u){if(c>u){if(47===t.charCodeAt(o+l))return t.slice(o+l+1);if(0===l)return t.slice(o+l)}else a>u&&(47===e.charCodeAt(r+l)?h=l:0===l&&(h=0));break}var d=e.charCodeAt(r+l);if(d!==t.charCodeAt(o+l))break;47===d&&(h=l)}var m="";for(l=r+h+1;l<=s;++l)l!==s&&47!==e.charCodeAt(l)||(0===m.length?m+="..":m+="/..");return m.length>0?m+t.slice(o+h):(o+=h,47===t.charCodeAt(o)&&++o,t.slice(o))},_makeLong:function(e){return e},dirname:function(e){if(n(e),0===e.length)return".";for(var t=e.charCodeAt(0),r=47===t,i=-1,s=!0,a=e.length-1;a>=1;--a)if(47===(t=e.charCodeAt(a))){if(!s){i=a;break}}else s=!1;return-1===i?r?"/":".":r&&1===i?"//":e.slice(0,i)},basename:function(e,t){if(void 0!==t&&"string"!=typeof t)throw new TypeError('"ext" argument must be a string');n(e);var r,i=0,s=-1,a=!0;if(void 0!==t&&t.length>0&&t.length<=e.length){if(t.length===e.length&&t===e)return"";var o=t.length-1,c=-1;for(r=e.length-1;r>=0;--r){var u=e.charCodeAt(r);if(47===u){if(!a){i=r+1;break}}else-1===c&&(a=!1,c=r+1),o>=0&&(u===t.charCodeAt(o)?-1==--o&&(s=r):(o=-1,s=c))}return i===s?s=c:-1===s&&(s=e.length),e.slice(i,s)}for(r=e.length-1;r>=0;--r)if(47===e.charCodeAt(r)){if(!a){i=r+1;break}}else-1===s&&(a=!1,s=r+1);return-1===s?"":e.slice(i,s)},extname:function(e){n(e);for(var t=-1,r=0,i=-1,s=!0,a=0,o=e.length-1;o>=0;--o){var c=e.charCodeAt(o);if(47!==c)-1===i&&(s=!1,i=o+1),46===c?-1===t?t=o:1!==a&&(a=1):-1!==t&&(a=-1);else if(!s){r=o+1;break}}return-1===t||-1===i||0===a||1===a&&t===i-1&&t===r+1?"":e.slice(t,i)},format:function(e){if(null===e||"object"!=typeof e)throw new TypeError('The "pathObject" argument must be of type Object. Received type '+typeof e);return function(e,t){var n=t.dir||t.root,r=t.base||(t.name||"")+(t.ext||"");return n?n===t.root?n+r:n+e+r:r}("/",e)},parse:function(e){n(e);var t={root:"",dir:"",base:"",ext:"",name:""};if(0===e.length)return t;var r,i=e.charCodeAt(0),s=47===i;s?(t.root="/",r=1):r=0;for(var a=-1,o=0,c=-1,u=!0,h=e.length-1,l=0;h>=r;--h)if(47!==(i=e.charCodeAt(h)))-1===c&&(u=!1,c=h+1),46===i?-1===a?a=h:1!==l&&(l=1):-1!==a&&(l=-1);else if(!u){o=h+1;break}return-1===a||-1===c||0===l||1===l&&a===c-1&&a===o+1?-1!==c&&(t.base=t.name=0===o&&s?e.slice(1,c):e.slice(o,c)):(0===o&&s?(t.name=e.slice(1,a),t.base=e.slice(1,c)):(t.name=e.slice(o,a),t.base=e.slice(o,c)),t.ext=e.slice(a,c)),o>0?t.dir=e.slice(0,o-1):s&&(t.dir="/"),t},sep:"/",delimiter:":",win32:null,posix:null};i.posix=i,e.exports=i}).call(this,n(61))},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),i(n(396),t)},function(e,t){var n="undefined"!=typeof self?self:this,r=function(){function e(){this.fetch=!1,this.DOMException=n.DOMException}return e.prototype=n,new e}();!function(e){!function(t){var n="URLSearchParams"in e,r="Symbol"in e&&"iterator"in Symbol,i="FileReader"in e&&"Blob"in e&&function(){try{return new Blob,!0}catch(e){return!1}}(),s="FormData"in e,a="ArrayBuffer"in e;if(a)var o=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],c=ArrayBuffer.isView||function(e){return e&&o.indexOf(Object.prototype.toString.call(e))>-1};function u(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function h(e){return"string"!=typeof e&&(e=String(e)),e}function l(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return r&&(t[Symbol.iterator]=function(){return t}),t}function d(e){this.map={},e instanceof d?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function m(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function p(e){return new Promise((function(t,n){e.onload=function(){t(e.result)},e.onerror=function(){n(e.error)}}))}function f(e){var t=new FileReader,n=p(t);return t.readAsArrayBuffer(e),n}function g(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function y(){return this.bodyUsed=!1,this._initBody=function(e){var t;this._bodyInit=e,e?"string"==typeof e?this._bodyText=e:i&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:s&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:n&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():a&&i&&((t=e)&&DataView.prototype.isPrototypeOf(t))?(this._bodyArrayBuffer=g(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):a&&(ArrayBuffer.prototype.isPrototypeOf(e)||c(e))?this._bodyArrayBuffer=g(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):n&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},i&&(this.blob=function(){var e=m(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?m(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(f)}),this.text=function(){var e,t,n,r=m(this);if(r)return r;if(this._bodyBlob)return e=this._bodyBlob,t=new FileReader,n=p(t),t.readAsText(e),n;if(this._bodyArrayBuffer)return Promise.resolve(function(e){for(var t=new Uint8Array(e),n=new Array(t.length),r=0;r<t.length;r++)n[r]=String.fromCharCode(t[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},s&&(this.formData=function(){return this.text().then(S)}),this.json=function(){return this.text().then(JSON.parse)},this}d.prototype.append=function(e,t){e=u(e),t=h(t);var n=this.map[e];this.map[e]=n?n+", "+t:t},d.prototype.delete=function(e){delete this.map[u(e)]},d.prototype.get=function(e){return e=u(e),this.has(e)?this.map[e]:null},d.prototype.has=function(e){return this.map.hasOwnProperty(u(e))},d.prototype.set=function(e,t){this.map[u(e)]=h(t)},d.prototype.forEach=function(e,t){for(var n in this.map)this.map.hasOwnProperty(n)&&e.call(t,this.map[n],n,this)},d.prototype.keys=function(){var e=[];return this.forEach((function(t,n){e.push(n)})),l(e)},d.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),l(e)},d.prototype.entries=function(){var e=[];return this.forEach((function(t,n){e.push([n,t])})),l(e)},r&&(d.prototype[Symbol.iterator]=d.prototype.entries);var v=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function b(e,t){var n,r,i=(t=t||{}).body;if(e instanceof b){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new d(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,i||null==e._bodyInit||(i=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new d(t.headers)),this.method=(n=t.method||this.method||"GET",r=n.toUpperCase(),v.indexOf(r)>-1?r:n),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&i)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(i)}function S(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var n=e.split("="),r=n.shift().replace(/\+/g," "),i=n.join("=").replace(/\+/g," ");t.append(decodeURIComponent(r),decodeURIComponent(i))}})),t}function w(e,t){t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new d(t.headers),this.url=t.url||"",this._initBody(e)}b.prototype.clone=function(){return new b(this,{body:this._bodyInit})},y.call(b.prototype),y.call(w.prototype),w.prototype.clone=function(){return new w(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new d(this.headers),url:this.url})},w.error=function(){var e=new w(null,{status:0,statusText:""});return e.type="error",e};var C=[301,302,303,307,308];w.redirect=function(e,t){if(-1===C.indexOf(t))throw new RangeError("Invalid status code");return new w(null,{status:t,headers:{location:e}})},t.DOMException=e.DOMException;try{new t.DOMException}catch(e){t.DOMException=function(e,t){this.message=e,this.name=t;var n=Error(e);this.stack=n.stack},t.DOMException.prototype=Object.create(Error.prototype),t.DOMException.prototype.constructor=t.DOMException}function x(e,n){return new Promise((function(r,s){var a=new b(e,n);if(a.signal&&a.signal.aborted)return s(new t.DOMException("Aborted","AbortError"));var o=new XMLHttpRequest;function c(){o.abort()}o.onload=function(){var e,t,n={status:o.status,statusText:o.statusText,headers:(e=o.getAllResponseHeaders()||"",t=new d,e.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(e){var n=e.split(":"),r=n.shift().trim();if(r){var i=n.join(":").trim();t.append(r,i)}})),t)};n.url="responseURL"in o?o.responseURL:n.headers.get("X-Request-URL");var i="response"in o?o.response:o.responseText;r(new w(i,n))},o.onerror=function(){s(new TypeError("Network request failed"))},o.ontimeout=function(){s(new TypeError("Network request failed"))},o.onabort=function(){s(new t.DOMException("Aborted","AbortError"))},o.open(a.method,a.url,!0),"include"===a.credentials?o.withCredentials=!0:"omit"===a.credentials&&(o.withCredentials=!1),"responseType"in o&&i&&(o.responseType="blob"),a.headers.forEach((function(e,t){o.setRequestHeader(t,e)})),a.signal&&(a.signal.addEventListener("abort",c),o.onreadystatechange=function(){4===o.readyState&&a.signal.removeEventListener("abort",c)}),o.send(void 0===a._bodyInit?null:a._bodyInit)}))}x.polyfill=!0,e.fetch||(e.fetch=x,e.Headers=d,e.Request=b,e.Response=w),t.Headers=d,t.Request=b,t.Response=w,t.fetch=x,Object.defineProperty(t,"__esModule",{value:!0})}({})}(r),r.fetch.ponyfill=!0,delete r.fetch.polyfill;var i=r;(t=i.fetch).default=i.fetch,t.fetch=i.fetch,t.Headers=i.Headers,t.Request=i.Request,t.Response=i.Response,e.exports=t},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return h}));var r=n(70),i=n(72),s=n(133),a=n(31),o=n(43),c=n(42);const u="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();class h extends r.a{constructor(e){super(e),this.supportsBinary=!e.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const e=this.uri(),t=this.opts.protocols,n=u?{}:Object(a.c)(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(n.headers=this.opts.extraHeaders);try{this.ws=o.d&&!u?t?new o.a(e,t):new o.a(e):new o.a(e,t,n)}catch(e){return this.emitReserved("error",e)}this.ws.binaryType=this.socket.binaryType||o.b,this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=e=>this.onClose({description:"websocket connection closed",context:e}),this.ws.onmessage=e=>this.onData(e.data),this.ws.onerror=e=>this.onError("websocket error",e)}write(t){this.writable=!1;for(let n=0;n<t.length;n++){const r=t[n],i=n===t.length-1;Object(c.c)(r,this.supportsBinary,t=>{const n={};if(!o.d&&(r.options&&(n.compress=r.options.compress),this.opts.perMessageDeflate)){("string"==typeof t?e.byteLength(t):t.length)<this.opts.perMessageDeflate.threshold&&(n.compress=!1)}try{o.d?this.ws.send(t):this.ws.send(t,n)}catch(e){}i&&Object(o.c)(()=>{this.writable=!0,this.emitReserved("drain")},this.setTimeoutFn)})}}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){let e=this.query||{};const t=this.opts.secure?"wss":"ws";let n="";this.opts.port&&("wss"===t&&443!==Number(this.opts.port)||"ws"===t&&80!==Number(this.opts.port))&&(n=":"+this.opts.port),this.opts.timestampRequests&&(e[this.opts.timestampParam]=Object(s.a)()),this.supportsBinary||(e.b64=1);const r=Object(i.b)(e);return t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+(r.length?"?"+r:"")}check(){return!!o.a}}}).call(this,n(144).Buffer)},function(e,t,n){var r=n(427),i=n(434)((function(e,t,n){r(e,t,n)}));e.exports=i},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));class r{constructor(e){this.map=new Map(e)}get IFluidDataStoreRegistry(){return this}async get(e){if(this.map.has(e))return this.map.get(e)}}},function(e,t,n){"use strict";(function(t){function n(e){if("string"!=typeof e)throw new TypeError("Path must be a string. Received "+JSON.stringify(e))}function r(e,t){for(var n,r="",i=0,s=-1,a=0,o=0;o<=e.length;++o){if(o<e.length)n=e.charCodeAt(o);else{if(47===n)break;n=47}if(47===n){if(s===o-1||1===a);else if(s!==o-1&&2===a){if(r.length<2||2!==i||46!==r.charCodeAt(r.length-1)||46!==r.charCodeAt(r.length-2))if(r.length>2){var c=r.lastIndexOf("/");if(c!==r.length-1){-1===c?(r="",i=0):i=(r=r.slice(0,c)).length-1-r.lastIndexOf("/"),s=o,a=0;continue}}else if(2===r.length||1===r.length){r="",i=0,s=o,a=0;continue}t&&(r.length>0?r+="/..":r="..",i=2)}else r.length>0?r+="/"+e.slice(s+1,o):r=e.slice(s+1,o),i=o-s-1;s=o,a=0}else 46===n&&-1!==a?++a:a=-1}return r}var i={resolve:function(){for(var e,i="",s=!1,a=arguments.length-1;a>=-1&&!s;a--){var o;a>=0?o=arguments[a]:(void 0===e&&(e=t.cwd()),o=e),n(o),0!==o.length&&(i=o+"/"+i,s=47===o.charCodeAt(0))}return i=r(i,!s),s?i.length>0?"/"+i:"/":i.length>0?i:"."},normalize:function(e){if(n(e),0===e.length)return".";var t=47===e.charCodeAt(0),i=47===e.charCodeAt(e.length-1);return 0!==(e=r(e,!t)).length||t||(e="."),e.length>0&&i&&(e+="/"),t?"/"+e:e},isAbsolute:function(e){return n(e),e.length>0&&47===e.charCodeAt(0)},join:function(){if(0===arguments.length)return".";for(var e,t=0;t<arguments.length;++t){var r=arguments[t];n(r),r.length>0&&(void 0===e?e=r:e+="/"+r)}return void 0===e?".":i.normalize(e)},relative:function(e,t){if(n(e),n(t),e===t)return"";if((e=i.resolve(e))===(t=i.resolve(t)))return"";for(var r=1;r<e.length&&47===e.charCodeAt(r);++r);for(var s=e.length,a=s-r,o=1;o<t.length&&47===t.charCodeAt(o);++o);for(var c=t.length-o,u=a<c?a:c,h=-1,l=0;l<=u;++l){if(l===u){if(c>u){if(47===t.charCodeAt(o+l))return t.slice(o+l+1);if(0===l)return t.slice(o+l)}else a>u&&(47===e.charCodeAt(r+l)?h=l:0===l&&(h=0));break}var d=e.charCodeAt(r+l);if(d!==t.charCodeAt(o+l))break;47===d&&(h=l)}var m="";for(l=r+h+1;l<=s;++l)l!==s&&47!==e.charCodeAt(l)||(0===m.length?m+="..":m+="/..");return m.length>0?m+t.slice(o+h):(o+=h,47===t.charCodeAt(o)&&++o,t.slice(o))},_makeLong:function(e){return e},dirname:function(e){if(n(e),0===e.length)return".";for(var t=e.charCodeAt(0),r=47===t,i=-1,s=!0,a=e.length-1;a>=1;--a)if(47===(t=e.charCodeAt(a))){if(!s){i=a;break}}else s=!1;return-1===i?r?"/":".":r&&1===i?"//":e.slice(0,i)},basename:function(e,t){if(void 0!==t&&"string"!=typeof t)throw new TypeError('"ext" argument must be a string');n(e);var r,i=0,s=-1,a=!0;if(void 0!==t&&t.length>0&&t.length<=e.length){if(t.length===e.length&&t===e)return"";var o=t.length-1,c=-1;for(r=e.length-1;r>=0;--r){var u=e.charCodeAt(r);if(47===u){if(!a){i=r+1;break}}else-1===c&&(a=!1,c=r+1),o>=0&&(u===t.charCodeAt(o)?-1==--o&&(s=r):(o=-1,s=c))}return i===s?s=c:-1===s&&(s=e.length),e.slice(i,s)}for(r=e.length-1;r>=0;--r)if(47===e.charCodeAt(r)){if(!a){i=r+1;break}}else-1===s&&(a=!1,s=r+1);return-1===s?"":e.slice(i,s)},extname:function(e){n(e);for(var t=-1,r=0,i=-1,s=!0,a=0,o=e.length-1;o>=0;--o){var c=e.charCodeAt(o);if(47!==c)-1===i&&(s=!1,i=o+1),46===c?-1===t?t=o:1!==a&&(a=1):-1!==t&&(a=-1);else if(!s){r=o+1;break}}return-1===t||-1===i||0===a||1===a&&t===i-1&&t===r+1?"":e.slice(t,i)},format:function(e){if(null===e||"object"!=typeof e)throw new TypeError('The "pathObject" argument must be of type Object. Received type '+typeof e);return function(e,t){var n=t.dir||t.root,r=t.base||(t.name||"")+(t.ext||"");return n?n===t.root?n+r:n+e+r:r}("/",e)},parse:function(e){n(e);var t={root:"",dir:"",base:"",ext:"",name:""};if(0===e.length)return t;var r,i=e.charCodeAt(0),s=47===i;s?(t.root="/",r=1):r=0;for(var a=-1,o=0,c=-1,u=!0,h=e.length-1,l=0;h>=r;--h)if(47!==(i=e.charCodeAt(h)))-1===c&&(u=!1,c=h+1),46===i?-1===a?a=h:1!==l&&(l=1):-1!==a&&(l=-1);else if(!u){o=h+1;break}return-1===a||-1===c||0===l||1===l&&a===c-1&&a===o+1?-1!==c&&(t.base=t.name=0===o&&s?e.slice(1,c):e.slice(o,c)):(0===o&&s?(t.name=e.slice(1,a),t.base=e.slice(1,c)):(t.name=e.slice(o,a),t.base=e.slice(o,c)),t.ext=e.slice(a,c)),o>0?t.dir=e.slice(0,o-1):s&&(t.dir="/"),t},sep:"/",delimiter:":",win32:null,posix:null};i.posix=i,e.exports=i}).call(this,n(61))},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),i(n(547),t)},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(33);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */async function i(e,t){const n=await e.readBlob(t),i=Object(r.c)(n,"utf8");return JSON.parse(i)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(34);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */async function i(e,t){const n=await e.readBlob(t),i=Object(r.c)(n,"utf8");return JSON.parse(i)}},,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{c(r.next(e))}catch(e){s(e)}}function o(e){try{c(r.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const i=n(328),s=n(181),a=n(450),o=n(546),c=n(294),u={initialObjects:{inkingSession:o.SharedInkingSession}};(function(){return r(this,void 0,void 0,(function*(){new i.TeamsFluidClient({connection:{tenantId:s.LOCAL_MODE_TENANT_ID,tokenProvider:new a.InsecureTokenProvider("",{id:"123"}),orderer:"http://localhost:7070",storage:"http://localhost:7070"}}).joinContainer(u);const e=document.getElementById("inkingHost");if(e){new c.InkingManager(e).activate()}}))})().catch(e=>console.error(e))},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,i)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),i(n(49),t),i(n(85),t),i(n(240),t),i(n(86),t),i(n(397),t),i(n(164),t),i(n(165),t),i(n(398),t),i(n(242),t),i(n(447),t),i(n(448),t),i(n(163),t),i(n(241),t),i(n(236),t),i(n(449),t),i(n(113),t)},function(e,t,n){var r=n(210),i=n(359),s=n(213),a=n(360),o=n(367),c=n(221),u=n(222),h=n(370),l=n(372),d=n(373),m=n(374),p=n(159),f=n(379),g=n(380),y=n(228),v=n(109),b=n(153),S=n(386),w=n(50),C=n(388),x=n(152),E=n(84),O={};O["[object Arguments]"]=O["[object Array]"]=O["[object ArrayBuffer]"]=O["[object DataView]"]=O["[object Boolean]"]=O["[object Date]"]=O["[object Float32Array]"]=O["[object Float64Array]"]=O["[object Int8Array]"]=O["[object Int16Array]"]=O["[object Int32Array]"]=O["[object Map]"]=O["[object Number]"]=O["[object Object]"]=O["[object RegExp]"]=O["[object Set]"]=O["[object String]"]=O["[object Symbol]"]=O["[object Uint8Array]"]=O["[object Uint8ClampedArray]"]=O["[object Uint16Array]"]=O["[object Uint32Array]"]=!0,O["[object Error]"]=O["[object Function]"]=O["[object WeakMap]"]=!1,e.exports=function e(t,n,T,P,A,N){var I,k=1&n,D=2&n,F=4&n;if(T&&(I=A?T(t,P,A,N):T(t)),void 0!==I)return I;if(!w(t))return t;var j=v(t);if(j){if(I=f(t),!k)return u(t,I)}else{var R=p(t),M="[object Function]"==R||"[object GeneratorFunction]"==R;if(b(t))return c(t,k);if("[object Object]"==R||"[object Arguments]"==R||M&&!A){if(I=D||M?{}:y(t),!k)return D?l(t,o(I,t)):h(t,a(I,t))}else{if(!O[R])return A?t:{};I=g(t,R,k)}}N||(N=new r);var _=N.get(t);if(_)return _;N.set(t,I),C(t)?t.forEach((function(r){I.add(e(r,n,T,r,t,N))})):S(t)&&t.forEach((function(r,i){I.set(i,e(r,n,T,i,t,N))}));var B=j?void 0:(F?D?m:d:D?E:x)(t);return i(B||t,(function(r,i){B&&(r=t[i=r]),s(I,i,e(r,n,T,i,t,N))})),I}},function(e,t){e.exports=function(){this.__data__=[],this.size=0}},function(e,t,n){var r=n(105),i=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=r(t,e);return!(n<0)&&(n==t.length-1?t.pop():i.call(t,n,1),--this.size,!0)}},function(e,t,n){var r=n(105);e.exports=function(e){var t=this.__data__,n=r(t,e);return n<0?void 0:t[n][1]}},function(e,t,n){var r=n(105);e.exports=function(e){return r(this.__data__,e)>-1}},function(e,t,n){var r=n(105);e.exports=function(e,t){var n=this.__data__,i=r(n,e);return i<0?(++this.size,n.push([e,t])):n[i][1]=t,this}},function(e,t,n){var r=n(104);e.exports=function(){this.__data__=new r,this.size=0}},function(e,t){e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},function(e,t){e.exports=function(e){return this.__data__.get(e)}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t,n){var r=n(104),i=n(148),s=n(346);e.exports=function(e,t){var n=this.__data__;if(n instanceof r){var a=n.__data__;if(!i||a.length<199)return a.push([e,t]),this.size=++n.size,this;n=this.__data__=new s(a)}return n.set(e,t),this.size=n.size,this}},function(e,t,n){var r=n(149),i=n(343),s=n(50),a=n(212),o=/^\[object .+?Constructor\]$/,c=Function.prototype,u=Object.prototype,h=c.toString,l=u.hasOwnProperty,d=RegExp("^"+h.call(l).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!s(e)||i(e))&&(r(e)?d:o).test(a(e))}},function(e,t,n){var r=n(150),i=Object.prototype,s=i.hasOwnProperty,a=i.toString,o=r?r.toStringTag:void 0;e.exports=function(e){var t=s.call(e,o),n=e[o];try{e[o]=void 0;var r=!0}catch(e){}var i=a.call(e);return r&&(t?e[o]=n:delete e[o]),i}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t,n){var r,i=n(344),s=(r=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";e.exports=function(e){return!!s&&s in e}},function(e,t,n){var r=n(40)["__core-js_shared__"];e.exports=r},function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},function(e,t,n){var r=n(347),i=n(354),s=n(356),a=n(357),o=n(358);function c(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=i,c.prototype.get=s,c.prototype.has=a,c.prototype.set=o,e.exports=c},function(e,t,n){var r=n(348),i=n(104),s=n(148);e.exports=function(){this.size=0,this.__data__={hash:new r,map:new(s||i),string:new r}}},function(e,t,n){var r=n(349),i=n(350),s=n(351),a=n(352),o=n(353);function c(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=i,c.prototype.get=s,c.prototype.has=a,c.prototype.set=o,e.exports=c},function(e,t,n){var r=n(107);e.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(e,t){e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},function(e,t,n){var r=n(107),i=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(r){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return i.call(t,e)?t[e]:void 0}},function(e,t,n){var r=n(107),i=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return r?void 0!==t[e]:i.call(t,e)}},function(e,t,n){var r=n(107);e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=r&&void 0===t?"__lodash_hash_undefined__":t,this}},function(e,t,n){var r=n(108);e.exports=function(e){var t=r(this,e).delete(e);return this.size-=t?1:0,t}},function(e,t){e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},function(e,t,n){var r=n(108);e.exports=function(e){return r(this,e).get(e)}},function(e,t,n){var r=n(108);e.exports=function(e){return r(this,e).has(e)}},function(e,t,n){var r=n(108);e.exports=function(e,t){var n=r(this,e),i=n.size;return n.set(e,t),this.size+=n.size==i?0:1,this}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}},function(e,t,n){var r=n(83),i=n(152);e.exports=function(e,t){return e&&r(t,i(t),e)}},function(e,t){e.exports=function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}},function(e,t,n){var r=n(82),i=n(59);e.exports=function(e){return i(e)&&"[object Arguments]"==r(e)}},function(e,t){e.exports=function(){return!1}},function(e,t,n){var r=n(82),i=n(219),s=n(59),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,e.exports=function(e){return s(e)&&i(e.length)&&!!a[r(e)]}},function(e,t,n){var r=n(156),i=n(366),s=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return i(e);var t=[];for(var n in Object(e))s.call(e,n)&&"constructor"!=n&&t.push(n);return t}},function(e,t,n){var r=n(220)(Object.keys,Object);e.exports=r},function(e,t,n){var r=n(83),i=n(84);e.exports=function(e,t){return e&&r(t,i(t),e)}},function(e,t,n){var r=n(50),i=n(156),s=n(369),a=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return s(e);var t=i(e),n=[];for(var o in e)("constructor"!=o||!t&&a.call(e,o))&&n.push(o);return n}},function(e,t){e.exports=function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}},function(e,t,n){var r=n(83),i=n(157);e.exports=function(e,t){return r(e,i(e),t)}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,i=0,s=[];++n<r;){var a=e[n];t(a,n,e)&&(s[i++]=a)}return s}},function(e,t,n){var r=n(83),i=n(224);e.exports=function(e,t){return r(e,i(e),t)}},function(e,t,n){var r=n(226),i=n(157),s=n(152);e.exports=function(e){return r(e,s,i)}},function(e,t,n){var r=n(226),i=n(224),s=n(84);e.exports=function(e){return r(e,s,i)}},function(e,t,n){var r=n(58)(n(40),"DataView");e.exports=r},function(e,t,n){var r=n(58)(n(40),"Promise");e.exports=r},function(e,t,n){var r=n(58)(n(40),"Set");e.exports=r},function(e,t,n){var r=n(58)(n(40),"WeakMap");e.exports=r},function(e,t){var n=Object.prototype.hasOwnProperty;e.exports=function(e){var t=e.length,r=new e.constructor(t);return t&&"string"==typeof e[0]&&n.call(e,"index")&&(r.index=e.index,r.input=e.input),r}},function(e,t,n){var r=n(160),i=n(382),s=n(383),a=n(384),o=n(227);e.exports=function(e,t,n){var c=e.constructor;switch(t){case"[object ArrayBuffer]":return r(e);case"[object Boolean]":case"[object Date]":return new c(+e);case"[object DataView]":return i(e,n);case"[object Float32Array]":case"[object Float64Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return o(e,n);case"[object Map]":return new c;case"[object Number]":case"[object String]":return new c(e);case"[object RegExp]":return s(e);case"[object Set]":return new c;case"[object Symbol]":return a(e)}}},function(e,t,n){var r=n(40).Uint8Array;e.exports=r},function(e,t,n){var r=n(160);e.exports=function(e,t){var n=t?r(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}},function(e,t){var n=/\w*$/;e.exports=function(e){var t=new e.constructor(e.source,n.exec(e));return t.lastIndex=e.lastIndex,t}},function(e,t,n){var r=n(150),i=r?r.prototype:void 0,s=i?i.valueOf:void 0;e.exports=function(e){return s?Object(s.call(e)):{}}},function(e,t,n){var r=n(50),i=Object.create,s=function(){function e(){}return function(t){if(!r(t))return{};if(i)return i(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();e.exports=s},function(e,t,n){var r=n(387),i=n(154),s=n(155),a=s&&s.isMap,o=a?i(a):r;e.exports=o},function(e,t,n){var r=n(159),i=n(59);e.exports=function(e){return i(e)&&"[object Map]"==r(e)}},function(e,t,n){var r=n(389),i=n(154),s=n(155),a=s&&s.isSet,o=a?i(a):r;e.exports=o},function(e,t,n){var r=n(159),i=n(59);e.exports=function(e){return i(e)&&"[object Set]"==r(e)}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.IFluidDataStoreFactory=void 0,t.IFluidDataStoreFactory="IFluidDataStoreFactory"},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.IFluidDataStoreRegistry=void 0,t.IFluidDataStoreRegistry="IFluidDataStoreRegistry"},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.VisibilityState=t.FlushMode=void 0,function(e){e[e.Immediate=0]="Immediate",e[e.TurnBased=1]="TurnBased"}(t.FlushMode||(t.FlushMode={})),t.VisibilityState={NotVisible:"NotVisible",LocallyVisible:"LocallyVisible",GloballyVisible:"GloballyVisible"}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.gcBlobKey=void 0,t.gcBlobKey="gc"},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.channelsTreeName=t.CreateSummarizerNodeSource=void 0,function(e){e[e.FromSummary=0]="FromSummary",e[e.FromAttach=1]="FromAttach",e[e.Local=2]="Local"}(t.CreateSummarizerNodeSource||(t.CreateSummarizerNodeSource={})),t.channelsTreeName=".channels"},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.IContainerRuntime=void 0,t.IContainerRuntime="IContainerRuntime"},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.EphemeralEventTimer=void 0;const r=n(113);t.EphemeralEventTimer=class{constructor(e,t,n,i=!1){this._isRunning=!1,this._eventSource=e,this._createEvent=t,this._delay=new r.TimeInterval(n),this.repeat=i}get delay(){return this._delay.milliseconds}set delay(e){this._delay.milliseconds=e}get isRunning(){return this._isRunning}sendEvent(){const e=this._createEvent();this._eventSource.sendEvent(e)}start(){this.stop(),this._isRunning=!0,this.delayedEmit(this.delay)}stop(){null!=this._timer&&(clearTimeout(this._timer),this._timer=void 0),this._isRunning=!1}delayedEmit(e){this._timer=setTimeout(()=>{this._timer=void 0;const e=(new Date).getTime();if(this.sendEvent(),this._isRunning&&this.repeat){const t=((new Date).getTime()-e)%this.delay;this.delayedEmit(this.delay-t)}},e)}}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{c(r.next(e))}catch(e){s(e)}}function o(e){try{c(r.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.EphemeralPresence=t.EphemeralPresenceEvents=void 0;const i=n(89),s=n(85),a=n(86),o=n(242),c=n(165),u=n(164),h=n(114),l=n(113),d=n(27),m=n(49);var p;!function(e){e.presenceChanged="presenceChanged"}(p=t.EphemeralPresenceEvents||(t.EphemeralPresenceEvents={}));class f extends i.DataObject{constructor(){super(...arguments),this._logger=new u.EphemeralTelemetryLogger(this.runtime),this._expirationPeriod=new l.TimeInterval(2e4),this._users=[],this._currentPresence={name:"UpdatePresence",timestamp:0,userId:"",state:o.PresenceState.offline,data:void 0}}get isStarted(){return!!this._scope}get expirationPeriod(){return this._expirationPeriod.seconds}set expirationPeriod(e){this._expirationPeriod.seconds=e>.1?e:.1}get data(){return(0,h.cloneValue)(this._currentPresence.data)}get state(){return this._currentPresence.state}get userId(){return this._currentPresence.userId}start(e,t,n=o.PresenceState.online){return r(this,void 0,void 0,(function*(){if(this._scope)throw new Error("EphemeralPresence: already started.");this._currentPresence.timestamp=m.EphemeralEvent.getTimestamp(),this._currentPresence.userId=e||(0,d.v4)(),this._currentPresence.data=t,this._currentPresence.state=n,this._currentPresence.clientId=yield this.waitUntilConnected(),this._scope=new s.EphemeralEventScope(this.runtime),this._updatePresenceEvent=new a.EphemeralEventTarget(this._scope,"UpdatePresence",(e,t)=>{t||this.updateMembersList(e,t)}),this._synchronizer=new c.EphemeralObjectSynchronizer(this.id,this.context.containerRuntime,e=>this._currentPresence,(e,t,n)=>{this.updateMembersList(t,!1)}),this.updateMembersList(this._currentPresence,!0)}))}dispose(){super.dispose(),this._synchronizer&&this._synchronizer.dispose()}toArray(){const e=[];return this.forEach(t=>e.push(t)),e}updatePresence(e,t){if(!this._scope)throw new Error("EphemeralPresence: not started.");this.waitUntilConnected().then(n=>{var r;const i=this._updatePresenceEvent.sendEvent({userId:this._currentPresence.userId,state:null!=e?e:this._currentPresence.state,data:null!==(r=(0,h.cloneValue)(t))&&void 0!==r?r:this._currentPresence.data});i.clientId=n,this._currentPresence=i,this.updateMembersList(i,!0)})}forEach(e,t){this._users.forEach(n=>{null!=t&&n.state!=t||e(n)})}getCount(e){if(null!=e){let t=0;return this._users.forEach(n=>{n.state==e&&t++}),t}return this._users.length}getPresenceForUser(e){for(let t=0;t<this._users.length;t++){const n=this._users[t];if(n.userId==e)return n}}updateMembersList(e,t){const n=n=>{this.emit(p.presenceChanged,n,t),t?this._logger.sendTelemetryEvent(h.TelemetryEvents.EphemeralPresence.LocalPresenceChanged,{user:e}):this._logger.sendTelemetryEvent(h.TelemetryEvents.EphemeralPresence.RemotePresenceChanged,{user:e})};let r=0;const i=e.userId;for(;r<this._users.length;r++){const t=this._users[r],s=i.localeCompare(t.userId);if(0==s)return void(t.updateReceived(e)&&n(t));if(s>0)break}const s=new o.EphemeralPresenceUser(e,this._expirationPeriod,e.userId==this._currentPresence.userId);this._users.splice(r,0,s),n(s)}waitUntilConnected(){return new Promise(e=>{const t=n=>{this.runtime.off("connected",t),e(n)};this.runtime.connected?e(this.runtime.clientId):this.runtime.on("connected",t)})}}t.EphemeralPresence=f,f.TypeName="@microsoft/live-share:EphemeralPresence",f.factory=new i.DataObjectFactory(f.TypeName,f,[],{})},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.TelemetryEvents=void 0,t.TelemetryEvents={EphemeralPresence:{LocalPresenceChanged:"EphemeralPresence:LocalPresenceChange",RemotePresenceChanged:"EphemeralPresence:RemotePresenceChange"},EphemeralState:{StateChanged:"EphemeralState:StateChanged",RoleVerificationError:"EphemeralState:RoleVerificationError"}}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.ParticipantType=t.AuthType=t.UserState=t.ParticipantRole=void 0,function(e){e.organizer="organizer",e.participant="participant"}(t.ParticipantRole||(t.ParticipantRole={})),function(e){e.InChat="InChat",e.InCall="InCall",e.InCollaborationSession="InCollaborationSession"}(t.UserState||(t.UserState={})),function(e){e[e.Unauthenticated=0]="Unauthenticated",e[e.SkypeToken=1]="SkypeToken",e[e.CoWatchToken=2]="CoWatchToken"}(t.AuthType||(t.AuthType={})),function(e){e.Host="Host",e.Guest="Guest"}(t.ParticipantType||(t.ParticipantType={}))},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,i)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t},a=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{c(r.next(e))}catch(e){s(e)}}function o(e){try{c(r.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.RoleVerifier=void 0;const o=n(115),c=n(256),u=n(243),h=[100,200,200,400,600];t.RoleVerifier=class{constructor(){this._registerRequestCache=new u.RequestCache(36e5),this._getRequestCache=new u.RequestCache(36e5)}registerClientId(e){return a(this,void 0,void 0,(function*(){return this._registerRequestCache.cacheRequest(e,()=>(0,c.waitForResult)(()=>a(this,void 0,void 0,(function*(){const t=yield this.getTeamsClient();return yield t.interactive.registerClientId(e)})),e=>Array.isArray(e),()=>new Error("RoleVerifier: timed out registering local client ID"),h))}))}getClientRoles(e){return a(this,void 0,void 0,(function*(){if(!e)throw new Error("RoleVerifier: called getCLientRoles() without a clientId");return this._registerRequestCache.has(e)?yield this.registerClientId(e):this._getRequestCache.cacheRequest(e,()=>(0,c.waitForResult)(()=>a(this,void 0,void 0,(function*(){const t=yield this.getTeamsClient();return yield t.interactive.getClientRoles(e)})),e=>Array.isArray(e),()=>new Error("RoleVerifier: timed out getting roles for a remote client ID"),h))}))}verifyRolesAllowed(e,t){return a(this,void 0,void 0,(function*(){if(!e)throw new Error("RoleVerifier: called verifyRolesAllowed() without a clientId");if(Array.isArray(t)&&t.length>0){const n=yield this.getClientRoles(e);for(let e=0;e<t.length;e++){const r=t[e];if(n.indexOf(r)>=0)return!0}return!1}return!0}))}getTeamsClient(){return a(this,void 0,void 0,(function*(){return this._teamsClient||(window?this._teamsClient=yield Promise.resolve().then(()=>s(n(117))):this._teamsClient=new o.TestTeamsClientApi),this._teamsClient}))}}},function(e,t,n){"use strict";e.exports=function(e,t){if(t=t.split(":")[0],!(e=+e))return!1;switch(t){case"http":case"ws":return 80!==e;case"https":case"wss":return 443!==e;case"ftp":return 21!==e;case"gopher":return 70!==e;case"file":return!1}return 0!==e}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function i(e){try{return decodeURIComponent(e.replace(/\+/g," "))}catch(e){return null}}function s(e){try{return encodeURIComponent(e)}catch(e){return null}}t.stringify=function(e,t){t=t||"";var n,i,a=[];for(i in"string"!=typeof t&&(t="?"),e)if(r.call(e,i)){if((n=e[i])||null!=n&&!isNaN(n)||(n=""),i=s(i),n=s(n),null===i||null===n)continue;a.push(i+"="+n)}return a.length?t+a.join("&"):""},t.parse=function(e){for(var t,n=/([^=?#&]+)=?([^&]*)/g,r={};t=n.exec(e);){var s=i(t[1]),a=i(t[2]);null===s||null===a||s in r||(r[s]=a)}return r}},function(e,t,n){"use strict";function r(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,t,n,s){t=t||"&",n=n||"=";var a={};if("string"!=typeof e||0===e.length)return a;var o=/\+/g;e=e.split(t);var c=1e3;s&&"number"==typeof s.maxKeys&&(c=s.maxKeys);var u=e.length;c>0&&u>c&&(u=c);for(var h=0;h<u;++h){var l,d,m,p,f=e[h].replace(o,"%20"),g=f.indexOf(n);g>=0?(l=f.substr(0,g),d=f.substr(g+1)):(l=f,d=""),m=decodeURIComponent(l),p=decodeURIComponent(d),r(a,m)?i(a[m])?a[m].push(p):a[m]=[a[m],p]:a[m]=p}return a};var i=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)}},function(e,t,n){"use strict";var r=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,t,n,o){return t=t||"&",n=n||"=",null===e&&(e=void 0),"object"==typeof e?s(a(e),(function(a){var o=encodeURIComponent(r(a))+n;return i(e[a])?s(e[a],(function(e){return o+encodeURIComponent(r(e))})).join(t):o+encodeURIComponent(r(e[a]))})).join(t):o?encodeURIComponent(r(o))+n+encodeURIComponent(r(e)):""};var i=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};function s(e,t){if(e.map)return e.map(t);for(var n=[],r=0;r<e.length;r++)n.push(t(e[r],r));return n}var a=Object.keys||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.push(n);return t}},function(e,t,n){"use strict";var r=n(25),i=n(244),s=n(407),a=n(251);var o=function e(t){var n=new s(t),o=i(s.prototype.request,n);return r.extend(o,s.prototype,n),r.extend(o,n),o.create=function(n){return e(a(t,n))},o}(n(166));o.Axios=s,o.Cancel=n(116),o.CancelToken=n(420),o.isCancel=n(250),o.VERSION=n(252).version,o.all=function(e){return Promise.all(e)},o.spread=n(421),o.isAxiosError=n(422),e.exports=o,e.exports.default=o},function(e,t,n){"use strict";var r=n(25),i=n(245),s=n(408),a=n(409),o=n(251),c=n(419),u=c.validators;function h(e){this.defaults=e,this.interceptors={request:new s,response:new s}}h.prototype.request=function(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},(t=o(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var n=t.transitional;void 0!==n&&c.assertOptions(n,{silentJSONParsing:u.transitional(u.boolean),forcedJSONParsing:u.transitional(u.boolean),clarifyTimeoutError:u.transitional(u.boolean)},!1);var r=[],i=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(i=i&&e.synchronous,r.unshift(e.fulfilled,e.rejected))}));var s,h=[];if(this.interceptors.response.forEach((function(e){h.push(e.fulfilled,e.rejected)})),!i){var l=[a,void 0];for(Array.prototype.unshift.apply(l,r),l=l.concat(h),s=Promise.resolve(t);l.length;)s=s.then(l.shift(),l.shift());return s}for(var d=t;r.length;){var m=r.shift(),p=r.shift();try{d=m(d)}catch(e){p(e);break}}try{s=a(d)}catch(e){return Promise.reject(e)}for(;h.length;)s=s.then(h.shift(),h.shift());return s},h.prototype.getUri=function(e){return e=o(this.defaults,e),i(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){h.prototype[e]=function(t,n){return this.request(o(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){h.prototype[e]=function(t,n,r){return this.request(o(r||{},{method:e,url:t,data:n}))}})),e.exports=h},function(e,t,n){"use strict";var r=n(25);function i(){this.handlers=[]}i.prototype.use=function(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1},i.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},i.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=i},function(e,t,n){"use strict";var r=n(25),i=n(410),s=n(250),a=n(166),o=n(116);function c(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new o("canceled")}e.exports=function(e){return c(e),e.headers=e.headers||{},e.data=i.call(e,e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return c(e),t.data=i.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return s(t)||(c(e),t&&t.response&&(t.response.data=i.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(25),i=n(166);e.exports=function(e,t,n){var s=this||i;return r.forEach(n,(function(n){e=n.call(s,e,t)})),e}},function(e,t,n){"use strict";var r=n(25);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(249);e.exports=function(e,t,n){var i=n.config.validateStatus;n.status&&i&&!i(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";var r=n(25);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,i,s,a){var o=[];o.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&o.push("expires="+new Date(n).toGMTString()),r.isString(i)&&o.push("path="+i),r.isString(s)&&o.push("domain="+s),!0===a&&o.push("secure"),document.cookie=o.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(415),i=n(416);e.exports=function(e,t){return e&&!r(t)?i(e,t):t}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(25),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,s,a={};return e?(r.forEach(e.split("\n"),(function(e){if(s=e.indexOf(":"),t=r.trim(e.substr(0,s)).toLowerCase(),n=r.trim(e.substr(s+1)),t){if(a[t]&&i.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}})),a):a}},function(e,t,n){"use strict";var r=n(25);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function i(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=i(window.location.href),function(t){var n=r.isString(t)?i(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(252).version,i={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){i[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));var s={};i.transitional=function(e,t,n){function i(e,t){return"[Axios v"+r+"] Transitional option '"+e+"'"+t+(n?". "+n:"")}return function(n,r,a){if(!1===e)throw new Error(i(r," has been removed"+(t?" in "+t:"")));return t&&!s[r]&&(s[r]=!0,console.warn(i(r," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,r,a)}},e.exports={assertOptions:function(e,t,n){if("object"!=typeof e)throw new TypeError("options must be an object");for(var r=Object.keys(e),i=r.length;i-- >0;){var s=r[i],a=t[s];if(a){var o=e[s],c=void 0===o||a(o,s,e);if(!0!==c)throw new TypeError("option "+s+" must be "+c)}else if(!0!==n)throw Error("Unknown option "+s)}},validators:i}},function(e,t,n){"use strict";var r=n(116);function i(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;this.promise.then((function(e){if(n._listeners){var t,r=n._listeners.length;for(t=0;t<r;t++)n._listeners[t](e);n._listeners=null}})),this.promise.then=function(e){var t,r=new Promise((function(e){n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},i.prototype.unsubscribe=function(e){if(this._listeners){var t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}},i.source=function(){var e;return{token:new i((function(t){e=t})),cancel:e}},e.exports=i},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";var r=n(25);e.exports=function(e){return r.isObject(e)&&!0===e.isAxiosError}},function(e,t,n){e.exports=function(e){function t(e){let n,i,s,a=null;function o(...e){if(!o.enabled)return;const r=o,i=Number(new Date),s=i-(n||i);r.diff=s,r.prev=n,r.curr=i,n=i,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let a=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,(n,i)=>{if("%%"===n)return"%";a++;const s=t.formatters[i];if("function"==typeof s){const t=e[a];n=s.call(r,t),e.splice(a,1),a--}return n}),t.formatArgs.call(r,e);(r.log||t.log).apply(r,e)}return o.namespace=e,o.useColors=t.useColors(),o.color=t.selectColor(e),o.extend=r,o.destroy=t.destroy,Object.defineProperty(o,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==a?a:(i!==t.namespaces&&(i=t.namespaces,s=t.enabled(e)),s),set:e=>{a=e}}),"function"==typeof t.init&&t.init(o),o}function r(e,n){const r=t(this.namespace+(void 0===n?":":n)+e);return r.log=this.log,r}function i(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){if(e instanceof Error)return e.stack||e.message;return e},t.disable=function(){const e=[...t.names.map(i),...t.skips.map(i).map(e=>"-"+e)].join(",");return t.enable(""),e},t.enable=function(e){let n;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const r=("string"==typeof e?e:"").split(/[\s,]+/),i=r.length;for(n=0;n<i;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.slice(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(424),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach(n=>{t[n]=e[n]}),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let n=0;for(let t=0;t<e.length;t++)n=(n<<5)-n+e.charCodeAt(t),n|=0;return t.colors[Math.abs(n)%t.colors.length]},t.enable(t.load()),t}},function(e,t){var n=1e3,r=6e4,i=60*r,s=24*i;function a(e,t,n,r){var i=t>=1.5*n;return Math.round(e/n)+" "+r+(i?"s":"")}e.exports=function(e,t){t=t||{};var o=typeof e;if("string"===o&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!t)return;var a=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*a;case"weeks":case"week":case"w":return 6048e5*a;case"days":case"day":case"d":return a*s;case"hours":case"hour":case"hrs":case"hr":case"h":return a*i;case"minutes":case"minute":case"mins":case"min":case"m":return a*r;case"seconds":case"second":case"secs":case"sec":case"s":return a*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}(e);if("number"===o&&isFinite(e))return t.long?function(e){var t=Math.abs(e);if(t>=s)return a(e,t,s,"day");if(t>=i)return a(e,t,i,"hour");if(t>=r)return a(e,t,r,"minute");if(t>=n)return a(e,t,n,"second");return e+" ms"}(e):function(e){var t=Math.abs(e);if(t>=s)return Math.round(e/s)+"d";if(t>=i)return Math.round(e/i)+"h";if(t>=r)return Math.round(e/r)+"m";if(t>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
t.read=function(e,t,n,r,i){var s,a,o=8*i-r-1,c=(1<<o)-1,u=c>>1,h=-7,l=n?i-1:0,d=n?-1:1,m=e[t+l];for(l+=d,s=m&(1<<-h)-1,m>>=-h,h+=o;h>0;s=256*s+e[t+l],l+=d,h-=8);for(a=s&(1<<-h)-1,s>>=-h,h+=r;h>0;a=256*a+e[t+l],l+=d,h-=8);if(0===s)s=1-u;else{if(s===c)return a?NaN:1/0*(m?-1:1);a+=Math.pow(2,r),s-=u}return(m?-1:1)*a*Math.pow(2,s-r)},t.write=function(e,t,n,r,i,s){var a,o,c,u=8*s-i-1,h=(1<<u)-1,l=h>>1,d=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,m=r?0:s-1,p=r?1:-1,f=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(o=isNaN(t)?1:0,a=h):(a=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-a))<1&&(a--,c*=2),(t+=a+l>=1?d/c:d*Math.pow(2,1-l))*c>=2&&(a++,c/=2),a+l>=h?(o=0,a=h):a+l>=1?(o=(t*c-1)*Math.pow(2,i),a+=l):(o=t*Math.pow(2,l-1)*Math.pow(2,i),a=0));i>=8;e[n+m]=255&o,m+=p,o/=256,i-=8);for(a=a<<i|o,u+=i;u>0;e[n+m]=255&a,m+=p,a/=256,u-=8);e[n+m-p]|=128*f}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t,n){var r=n(210),i=n(253),s=n(428),a=n(430),o=n(50),c=n(84),u=n(254);e.exports=function e(t,n,h,l,d){t!==n&&s(n,(function(s,c){if(d||(d=new r),o(s))a(t,n,c,h,e,l,d);else{var m=l?l(u(t,c),s,c+"",t,n,d):void 0;void 0===m&&(m=s),i(t,c,m)}}),c)}},function(e,t,n){var r=n(429)();e.exports=r},function(e,t){e.exports=function(e){return function(t,n,r){for(var i=-1,s=Object(t),a=r(t),o=a.length;o--;){var c=a[e?o:++i];if(!1===n(s[c],c,s))break}return t}}},function(e,t,n){var r=n(253),i=n(221),s=n(227),a=n(222),o=n(228),c=n(216),u=n(109),h=n(431),l=n(153),d=n(149),m=n(50),p=n(432),f=n(218),g=n(254),y=n(433);e.exports=function(e,t,n,v,b,S,w){var C=g(e,n),x=g(t,n),E=w.get(x);if(E)r(e,n,E);else{var O=S?S(C,x,n+"",e,t,w):void 0,T=void 0===O;if(T){var P=u(x),A=!P&&l(x),N=!P&&!A&&f(x);O=x,P||A||N?u(C)?O=C:h(C)?O=a(C):A?(T=!1,O=i(x,!0)):N?(T=!1,O=s(x,!0)):O=[]:p(x)||c(x)?(O=C,c(C)?O=y(C):m(C)&&!d(C)||(O=o(x))):T=!1}T&&(w.set(x,O),b(O,x,v,S,w),w.delete(x)),r(e,n,O)}}},function(e,t,n){var r=n(110),i=n(59);e.exports=function(e){return i(e)&&r(e)}},function(e,t,n){var r=n(82),i=n(158),s=n(59),a=Function.prototype,o=Object.prototype,c=a.toString,u=o.hasOwnProperty,h=c.call(Object);e.exports=function(e){if(!s(e)||"[object Object]"!=r(e))return!1;var t=i(e);if(null===t)return!0;var n=u.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&c.call(n)==h}},function(e,t,n){var r=n(83),i=n(84);e.exports=function(e){return r(e,i(e))}},function(e,t,n){var r=n(435),i=n(442);e.exports=function(e){return r((function(t,n){var r=-1,s=n.length,a=s>1?n[s-1]:void 0,o=s>2?n[2]:void 0;for(a=e.length>3&&"function"==typeof a?(s--,a):void 0,o&&i(n[0],n[1],o)&&(a=s<3?void 0:a,s=1),t=Object(t);++r<s;){var c=n[r];c&&e(t,c,r,a)}return t}))}},function(e,t,n){var r=n(255),i=n(436),s=n(438);e.exports=function(e,t){return s(i(e,t,r),e+"")}},function(e,t,n){var r=n(437),i=Math.max;e.exports=function(e,t,n){return t=i(void 0===t?e.length-1:t,0),function(){for(var s=arguments,a=-1,o=i(s.length-t,0),c=Array(o);++a<o;)c[a]=s[t+a];a=-1;for(var u=Array(t+1);++a<t;)u[a]=s[a];return u[t]=n(c),r(e,this,u)}}},function(e,t){e.exports=function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}},function(e,t,n){var r=n(439),i=n(441)(r);e.exports=i},function(e,t,n){var r=n(440),i=n(214),s=n(255),a=i?function(e,t){return i(e,"toString",{configurable:!0,enumerable:!1,value:r(t),writable:!0})}:s;e.exports=a},function(e,t){e.exports=function(e){return function(){return e}}},function(e,t){var n=Date.now;e.exports=function(e){var t=0,r=0;return function(){var i=n(),s=16-(i-r);if(r=i,s>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}},function(e,t,n){var r=n(106),i=n(110),s=n(217),a=n(50);e.exports=function(e,t,n){if(!a(n))return!1;var o=typeof t;return!!("number"==o?i(n)&&s(t,n.length):"string"==o&&t in n)&&r(n[t],e)}},function(e,t,n){(function(e,r){var i;/*! https://mths.be/punycode v1.4.1 by @mathias */!function(s){t&&t.nodeType,e&&e.nodeType;var a="object"==typeof r&&r;a.global!==a&&a.window!==a&&a.self;var o,c=2147483647,u=/^xn--/,h=/[^\x20-\x7E]/,l=/[\x2E\u3002\uFF0E\uFF61]/g,d={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},m=Math.floor,p=String.fromCharCode;function f(e){throw new RangeError(d[e])}function g(e,t){for(var n=e.length,r=[];n--;)r[n]=t(e[n]);return r}function y(e,t){var n=e.split("@"),r="";return n.length>1&&(r=n[0]+"@",e=n[1]),r+g((e=e.replace(l,".")).split("."),t).join(".")}function v(e){for(var t,n,r=[],i=0,s=e.length;i<s;)(t=e.charCodeAt(i++))>=55296&&t<=56319&&i<s?56320==(64512&(n=e.charCodeAt(i++)))?r.push(((1023&t)<<10)+(1023&n)+65536):(r.push(t),i--):r.push(t);return r}function b(e){return g(e,(function(e){var t="";return e>65535&&(t+=p((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+=p(e)})).join("")}function S(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function w(e,t,n){var r=0;for(e=n?m(e/700):e>>1,e+=m(e/t);e>455;r+=36)e=m(e/35);return m(r+36*e/(e+38))}function C(e){var t,n,r,i,s,a,o,u,h,l,d,p=[],g=e.length,y=0,v=128,S=72;for((n=e.lastIndexOf("-"))<0&&(n=0),r=0;r<n;++r)e.charCodeAt(r)>=128&&f("not-basic"),p.push(e.charCodeAt(r));for(i=n>0?n+1:0;i<g;){for(s=y,a=1,o=36;i>=g&&f("invalid-input"),((u=(d=e.charCodeAt(i++))-48<10?d-22:d-65<26?d-65:d-97<26?d-97:36)>=36||u>m((c-y)/a))&&f("overflow"),y+=u*a,!(u<(h=o<=S?1:o>=S+26?26:o-S));o+=36)a>m(c/(l=36-h))&&f("overflow"),a*=l;S=w(y-s,t=p.length+1,0==s),m(y/t)>c-v&&f("overflow"),v+=m(y/t),y%=t,p.splice(y++,0,v)}return b(p)}function x(e){var t,n,r,i,s,a,o,u,h,l,d,g,y,b,C,x=[];for(g=(e=v(e)).length,t=128,n=0,s=72,a=0;a<g;++a)(d=e[a])<128&&x.push(p(d));for(r=i=x.length,i&&x.push("-");r<g;){for(o=c,a=0;a<g;++a)(d=e[a])>=t&&d<o&&(o=d);for(o-t>m((c-n)/(y=r+1))&&f("overflow"),n+=(o-t)*y,t=o,a=0;a<g;++a)if((d=e[a])<t&&++n>c&&f("overflow"),d==t){for(u=n,h=36;!(u<(l=h<=s?1:h>=s+26?26:h-s));h+=36)C=u-l,b=36-l,x.push(p(S(l+C%b,0))),u=m(C/b);x.push(p(S(u,0))),s=w(n,y,r==i),n=0,++r}++n,++t}return x.join("")}o={version:"1.4.1",ucs2:{decode:v,encode:b},decode:C,encode:x,toASCII:function(e){return y(e,(function(e){return h.test(e)?"xn--"+x(e):e}))},toUnicode:function(e){return y(e,(function(e){return u.test(e)?C(e.slice(4).toLowerCase()):e}))}},void 0===(i=function(){return o}.call(t,n,t,e))||(e.exports=i)}()}).call(this,n(60)(e),n(69))},function(e,t,n){"use strict";e.exports={isString:function(e){return"string"==typeof e},isObject:function(e){return"object"==typeof e&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,i)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t},a=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{c(r.next(e))}catch(e){s(e)}}function o(e){try{c(r.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.SharedClock=void 0;const o=n(115);t.SharedClock=class{constructor(){this._retries=0,this._lastTimeSent=0}isRunning(){return!!this._serverTime}getTimestamp(){if(!this._serverTime)throw new Error("SharedClock: can't call getTime() before calling start().");return this._lastTimeSent=Math.max((new Date).getTime()+this._serverTime.offset,this._lastTimeSent)}start(){return a(this,void 0,void 0,(function*(){this.stop(),performance.mark("TeamsSync: starting clock");try{yield this.improveAccuracy()}finally{performance.measure("TeamsSync: clock startup","TeamsSync: starting clock")}}))}stop(){this._serverTime=void 0,this._retries=0,this._syncTimer&&(clearTimeout(this._syncTimer),this._syncTimer=void 0)}improveAccuracy(){return a(this,void 0,void 0,(function*(){const e=yield this.getSessionTimeOffset();!this._serverTime||e.requestLatency<this._serverTime.requestLatency?(this._serverTime=e,this._retries=0):this._retries++,this._retries<=5?this._syncTimer=setTimeout(this.improveAccuracy.bind(this),5e3):this._syncTimer=void 0}))}getSessionTimeOffset(){return a(this,void 0,void 0,(function*(){const e=yield this.getTeamsClient(),t=performance.now(),n=yield e.interactive.getNtpTime(),r=performance.now(),i=(new Date).getTime(),s=r-t,a=n.ntpTimeInUTC+Math.floor(s/2);return{serverTimeInUtc:a,localTimeInUtc:i,requestLatency:s,offset:a-i}}))}getTeamsClient(){return a(this,void 0,void 0,(function*(){return this._teamsClient||(window?this._teamsClient=yield Promise.resolve().then(()=>s(n(117))):this._teamsClient=new o.TestTeamsClientApi),this._teamsClient}))}}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,i)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t},a=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{c(r.next(e))}catch(e){s(e)}}function o(e){try{c(r.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.TeamsFluidTokenProvider=void 0;const o=n(115);t.TeamsFluidTokenProvider=class{fetchOrdererToken(e,t,n){return a(this,void 0,void 0,(function*(){return yield this.fetchFluidToken(e,t,n)}))}fetchStorageToken(e,t,n){return a(this,void 0,void 0,(function*(){return yield this.fetchFluidToken(e,t,n)}))}fetchFluidToken(e,t,n){return a(this,void 0,void 0,(function*(){const r=yield this.getTeamsClient();let i;return!this._frsToken||n||this._tenantId!==e||this._documentId!==t?(this._frsToken=yield r.interactive.getFluidToken(t),i=!1):i=!0,this._tenantId=e,t&&(this._documentId=t),{jwt:this._frsToken,fromCache:i}}))}getTeamsClient(){return a(this,void 0,void 0,(function*(){return this._teamsClient||(window?this._teamsClient=yield Promise.resolve().then(()=>s(n(117))):this._teamsClient=new o.TestTeamsClientApi),this._teamsClient}))}}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{c(r.next(e))}catch(e){s(e)}}function o(e){try{c(r.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.EphemeralState=t.EphemeralStateEvents=void 0;const i=n(89),s=n(114),a=n(85),o=n(86),c=n(164),u=n(49),h=n(165);var l;!function(e){e.stateChanged="stateChanged"}(l=t.EphemeralStateEvents||(t.EphemeralStateEvents={}));class d extends i.DataObject{constructor(){super(...arguments),this._logger=new c.EphemeralTelemetryLogger(this.runtime),this._allowedRoles=[],this._currentState={name:"ChangeState",timestamp:0,state:d.INITIAL_STATE}}get isStarted(){return!!this._scope}get data(){return(0,s.cloneValue)(this._currentState.data)}get state(){return this._currentState.state}start(e,t=d.INITIAL_STATE,n){return r(this,void 0,void 0,(function*(){if(this._scope)throw new Error("EphemeralState already started.");return this._allowedRoles=e||[],this._scope=new a.EphemeralEventScope(this.runtime,e),this._changeStateEvent=new o.EphemeralEventTarget(this._scope,"ChangeState",(e,t)=>{t||this.remoteStateReceived(e,e.clientId)}),this._synchronizer=new h.EphemeralObjectSynchronizer(this.id,this.context.containerRuntime,e=>this._currentState,(e,t,n)=>{this.remoteStateReceived(t,n)}),Promise.resolve()}))}dispose(){super.dispose(),this._synchronizer&&this._synchronizer.dispose()}changeState(e,t){if(!this._scope)throw new Error("EphemeralState not started.");const n=(0,s.cloneValue)(t),r=this._changeStateEvent.sendEvent({state:e,data:n});this.updateState(r,!0)}remoteStateReceived(e,t){u.EphemeralEvent.verifyRolesAllowed(t,this._allowedRoles).then(t=>{t&&u.EphemeralEvent.isNewer(this._currentState,e)&&e.state!==d.INITIAL_STATE&&this.updateState(e,!1)}).catch(e=>{this._logger.sendErrorEvent(s.TelemetryEvents.EphemeralState.RoleVerificationError,e)})}updateState(e,t){const n=this._currentState.state,r=e.state;this._currentState=e,this.emit(l.stateChanged,e.state,(0,s.cloneValue)(e.data),t),this._logger.sendTelemetryEvent(s.TelemetryEvents.EphemeralState.StateChanged,{oldState:n,newState:r})}}t.EphemeralState=d,d.INITIAL_STATE="",d.TypeName="@microsoft/live-share:EphemeralState",d.factory=new i.DataObjectFactory(d.TypeName,d,[],{})},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.EphemeralTimer=void 0;const r=n(89),i=n(85),s=n(86),a=n(113),o=n(49);class c extends r.DataObject{constructor(){super(...arguments),this._hasStarted=!1,this._timerInterval=new a.TimeInterval(100)}get isStarted(){return!!this._hasStarted}start(e){if(this.isStarted)throw new Error("Timer already started.");this._hasStarted=!0;const t=new i.EphemeralEventScope(this.runtime,e);return this._beginEvent=new s.EphemeralEventTarget(t,"begin",(e,t)=>this._handleBegin(e,t)),this._playEvent=new s.EphemeralEventTarget(t,"play",(e,t)=>this._handlePlayEvent(e,t)),this._pauseEvent=new s.EphemeralEventTarget(t,"pause",(e,t)=>this._handlePauseEvent(e,t)),this._resetEvent=new s.EphemeralEventTarget(t,"reset",(e,t)=>this._handleReset(t)),Promise.resolve()}begin(e){this._beginEvent.sendEvent({duration:e})}play(){if(!this._state)throw Error("Cannot call togglePlayPause before timer is started");this._playEvent.sendEvent({position:this._state.position})}pause(){if(!this._state)throw Error("Cannot call togglePlayPause before timer is started");this._pauseEvent.sendEvent({position:this._state.position})}reset(){if(!this._state)throw Error("Cannot call reset before timer is started");this._resetEvent.sendEvent({})}_handleBegin(e,t){this._state={timeStarted:o.EphemeralEvent.getTimestamp(),position:0,duration:e.duration,running:!0},this._emitState(t),this._handleTimerInterval()}_handlePlayEvent(e,t){this._state.duration-this._timerInterval.milliseconds>=this._state.position?(this._state={timeStarted:this._state.timeStarted,position:e.position,duration:this._state.duration,running:!0},this._emitState(t),this._handleTimerInterval()):this._handleReset(t)}_handlePauseEvent(e,t){this._state={timeStarted:this._state.timeStarted,position:e.position,duration:this._state.duration,running:!0},this._emitState(t),this._cancelTimerIfRunning()}_handleReset(e){this._state={timeStarted:o.EphemeralEvent.getTimestamp(),position:0,duration:this._state.duration,running:this._state.running},this._emitState(e),this._state.running&&this._handleTimerInterval()}_emitState(e){const t=Object.assign({},this._state);this.emit("valueChanged",t,e)}_handleTimerInterval(){this._cancelTimerIfRunning();this._intervalId=setInterval((()=>{const e=Math.min(o.EphemeralEvent.getTimestamp()-this._state.timeStarted,this._state.duration);this._state.position=e,e>=this._state.duration&&(this._state.running=!1,this._cancelTimerIfRunning()),this._emitState(!0)}).bind(this),this._timerInterval.milliseconds)}_cancelTimerIfRunning(){this._intervalId&&(clearInterval(this._intervalId),this._intervalId=void 0)}}t.EphemeralTimer=c,c.TypeName="@microsoft/live-share:EphemeralTimer",c.factory=new r.DataObjectFactory(c.TypeName,c,[],{})},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,i)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t},a=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{c(r.next(e))}catch(e){s(e)}}function o(e){try{c(r.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.TeamsFluidClient=void 0;const o=n(114),c=n(181),u=n(49);t.TeamsFluidClient=class{constructor(e){this.maxContainerLookupTries=3,this._options=Object.assign({},e)}get isTesting(){var e;return(null===(e=this._options.connection)||void 0===e?void 0:e.tenantId)==c.LOCAL_MODE_TENANT_ID}joinContainer(e,t){return a(this,void 0,void 0,(function*(){performance.mark("TeamsSync: join container");try{const n=yield this.getTeamsClient(),r=this.initializeRoleVerifier(),i=this.initializeTimestampProvider();let s=this._options.connection;if(!s){const e=yield n.interactive.getFluidTenantInfo();s={tenantId:e.tenantId,tokenProvider:new o.TeamsFluidTokenProvider,orderer:e.ordererEndpoint,storage:e.storageEndpoint}}const u=new c.AzureClient({connection:s,logger:this._options.logger}),h=this.getOrCreateContainer(u,e,0,t),l=yield Promise.all([h,r,i]);performance.mark("TeamsSync: container connecting");let d=!1;const{container:m,services:p}=l[0];return m.on("connected",()=>a(this,void 0,void 0,(function*(){var e,t,n,r;if(d||(d=!0,performance.measure("TeamsSync: container connected","TeamsSync: container connecting")),this._roleVerifier){const i=null!==(t=null===(e=p.audience.getMyself())||void 0===e?void 0:e.connections)&&void 0!==t?t:[];for(let e=0;e<i.length;e++)try{const t=null===(n=i[e])||void 0===n?void 0:n.id;t&&(yield null===(r=this._roleVerifier)||void 0===r?void 0:r.registerClientId(t))}catch(e){console.error(e.toString())}}}))),l[0]}finally{performance.measure("TeamsSync: container joined","TeamsSync: join container")}}))}initializeRoleVerifier(){return this._roleVerifier||this.isTesting||(this._roleVerifier=new o.RoleVerifier,u.EphemeralEvent.setRoleVerifier(this._roleVerifier)),Promise.resolve()}initializeTimestampProvider(){return this._clock||this.isTesting?Promise.resolve():(this._clock=new o.SharedClock,u.EphemeralEvent.setTimestampProvider(this._clock),this._clock.start())}getOrCreateContainer(e,t,n,r){return a(this,void 0,void 0,(function*(){const i=yield this.getTeamsClient(),s=yield i.interactive.getFluidContainerId();if(s.shouldCreate)return yield this.createNewContainer(e,t,n,r);if(s.containerId)return Object.assign({created:!1},yield e.getContainer(s.containerId,t));if(n<this.maxContainerLookupTries&&s.retryAfter>0)return yield this.wait(s.retryAfter),yield this.getOrCreateContainer(e,t,n+1,r);throw new Error("TeamsFluidClient: timed out attempting to create or get container for current context.")}))}createNewContainer(e,t,n,r){return a(this,void 0,void 0,(function*(){const n=yield this.getTeamsClient(),{container:i,services:s}=yield e.createContainer(t);r&&r(i);const a=yield i.attach(),c=yield n.interactive.setFluidContainerId(a);return c.containerState!=o.ContainerState.added?(i.dispose(),Object.assign({created:!1},yield e.getContainer(c.containerId,t))):{container:i,services:s,created:!0}}))}wait(e){return new Promise(t=>{setTimeout(()=>t(),e)})}getTeamsClient(){return a(this,void 0,void 0,(function*(){return this._teamsClient||(window&&!this.isTesting?this._teamsClient=yield Promise.resolve().then(()=>s(n(117))):this._teamsClient=new o.TestTeamsClientApi(this._options.getLocalTestContainerId,this._options.setLocalTestContainerId)),this._teamsClient}))}}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.generateTestUser=t.InsecureTokenProvider=void 0;var r=n(451);Object.defineProperty(t,"InsecureTokenProvider",{enumerable:!0,get:function(){return r.InsecureTokenProvider}});var i=n(544);Object.defineProperty(t,"generateTestUser",{enumerable:!0,get:function(){return i.generateTestUser}})},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),i(n(452),t),i(n(455),t),i(n(260),t),i(n(528),t),i(n(283),t),i(n(535),t),i(n(536),t),i(n(537),t)},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.InsecureTokenProvider=void 0;const r=n(18),i=n(453);t.InsecureTokenProvider=class{constructor(e,t){this.tenantKey=e,this.user=t}async fetchOrdererToken(e,t){return{fromCache:!0,jwt:(0,i.generateToken)(e,this.tenantKey,[r.ScopeType.DocRead,r.ScopeType.DocWrite,r.ScopeType.SummaryWrite],t,this.user)}}async fetchStorageToken(e,t){return{fromCache:!0,jwt:(0,i.generateToken)(e,this.tenantKey,[r.ScopeType.DocRead,r.ScopeType.DocWrite,r.ScopeType.SummaryWrite],t,this.user)}}}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.generateUser=t.generateToken=void 0;const r=n(454),i=n(29);function s(){return{id:(0,i.v4)(),name:(0,i.v4)()}}t.generateToken=function(e,t,n,a,o,c=3600,u="1.0"){let h=o||s();""!==h.id&&void 0!==h.id||(h=s());const l=Math.round(Date.now()/1e3),d={documentId:null!=a?a:"",scopes:n,tenantId:e,user:h,iat:l,exp:l+c,ver:u,jti:(0,i.v4)()},m={utf8:t};return r.KJUR.jws.JWS.sign(null,JSON.stringify({alg:"HS256",typ:"JWT"}),d,m)},t.generateUser=s},function(e,t,n){(function(e){var n,r,i,s,a,o,c,u,h,l,d,m={userAgent:!1},p={},f=f||(n=Math,i=(r={}).lib={},s=i.Base=function(){function e(){}return{extend:function(t){e.prototype=this;var n=new e;return t&&n.mixIn(t),n.hasOwnProperty("init")||(n.init=function(){n.$super.init.apply(this,arguments)}),n.init.prototype=n,n.$super=this,n},create:function(){var e=this.extend();return e.init.apply(e,arguments),e},init:function(){},mixIn:function(e){for(var t in e)e.hasOwnProperty(t)&&(this[t]=e[t]);e.hasOwnProperty("toString")&&(this.toString=e.toString)},clone:function(){return this.init.prototype.extend(this)}}}(),a=i.WordArray=s.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=null!=t?t:4*e.length},toString:function(e){return(e||c).stringify(this)},concat:function(e){var t=this.words,n=e.words,r=this.sigBytes,i=e.sigBytes;if(this.clamp(),r%4)for(var s=0;s<i;s++){var a=n[s>>>2]>>>24-s%4*8&255;t[r+s>>>2]|=a<<24-(r+s)%4*8}else for(s=0;s<i;s+=4)t[r+s>>>2]=n[s>>>2];return this.sigBytes+=i,this},clamp:function(){var e=this.words,t=this.sigBytes;e[t>>>2]&=4294967295<<32-t%4*8,e.length=n.ceil(t/4)},clone:function(){var e=s.clone.call(this);return e.words=this.words.slice(0),e},random:function(e){for(var t=[],r=0;r<e;r+=4)t.push(4294967296*n.random()|0);return new a.init(t,e)}}),o=r.enc={},c=o.Hex={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],i=0;i<n;i++){var s=t[i>>>2]>>>24-i%4*8&255;r.push((s>>>4).toString(16)),r.push((15&s).toString(16))}return r.join("")},parse:function(e){for(var t=e.length,n=[],r=0;r<t;r+=2)n[r>>>3]|=parseInt(e.substr(r,2),16)<<24-r%8*4;return new a.init(n,t/2)}},u=o.Latin1={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],i=0;i<n;i++){var s=t[i>>>2]>>>24-i%4*8&255;r.push(String.fromCharCode(s))}return r.join("")},parse:function(e){for(var t=e.length,n=[],r=0;r<t;r++)n[r>>>2]|=(255&e.charCodeAt(r))<<24-r%4*8;return new a.init(n,t)}},h=o.Utf8={stringify:function(e){try{return decodeURIComponent(escape(u.stringify(e)))}catch(e){throw new Error("Malformed UTF-8 data")}},parse:function(e){return u.parse(unescape(encodeURIComponent(e)))}},l=i.BufferedBlockAlgorithm=s.extend({reset:function(){this._data=new a.init,this._nDataBytes=0},_append:function(e){"string"==typeof e&&(e=h.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function(e){var t=this._data,r=t.words,i=t.sigBytes,s=this.blockSize,o=i/(4*s),c=(o=e?n.ceil(o):n.max((0|o)-this._minBufferSize,0))*s,u=n.min(4*c,i);if(c){for(var h=0;h<c;h+=s)this._doProcessBlock(r,h);var l=r.splice(0,c);t.sigBytes-=u}return new a.init(l,u)},clone:function(){var e=s.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0}),i.Hasher=l.extend({cfg:s.extend(),init:function(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function(){l.reset.call(this),this._doReset()},update:function(e){return this._append(e),this._process(),this},finalize:function(e){return e&&this._append(e),this._doFinalize()},blockSize:16,_createHelper:function(e){return function(t,n){return new e.init(n).finalize(t)}},_createHmacHelper:function(e){return function(t,n){return new d.HMAC.init(e,n).finalize(t)}}}),d=r.algo={},r);!function(e){var t,n=(t=f).lib,r=n.Base,i=n.WordArray;(t=t.x64={}).Word=r.extend({init:function(e,t){this.high=e,this.low=t}}),t.WordArray=r.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=null!=t?t:8*e.length},toX32:function(){for(var e=this.words,t=e.length,n=[],r=0;r<t;r++){var s=e[r];n.push(s.high),n.push(s.low)}return i.create(n,this.sigBytes)},clone:function(){for(var e=r.clone.call(this),t=e.words=this.words.slice(0),n=t.length,i=0;i<n;i++)t[i]=t[i].clone();return e}})}(),f.lib.Cipher||function(e){var t=(m=f).lib,n=t.Base,r=t.WordArray,i=t.BufferedBlockAlgorithm,s=m.enc.Base64,a=m.algo.EvpKDF,o=t.Cipher=i.extend({cfg:n.extend(),createEncryptor:function(e,t){return this.create(this._ENC_XFORM_MODE,e,t)},createDecryptor:function(e,t){return this.create(this._DEC_XFORM_MODE,e,t)},init:function(e,t,n){this.cfg=this.cfg.extend(n),this._xformMode=e,this._key=t,this.reset()},reset:function(){i.reset.call(this),this._doReset()},process:function(e){return this._append(e),this._process()},finalize:function(e){return e&&this._append(e),this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(e){return{encrypt:function(t,n,r){return("string"==typeof n?p:d).encrypt(e,t,n,r)},decrypt:function(t,n,r){return("string"==typeof n?p:d).decrypt(e,t,n,r)}}}});t.StreamCipher=o.extend({_doFinalize:function(){return this._process(!0)},blockSize:1});var c=m.mode={},u=function(e,t,n){var r=this._iv;r?this._iv=void 0:r=this._prevBlock;for(var i=0;i<n;i++)e[t+i]^=r[i]},h=(t.BlockCipherMode=n.extend({createEncryptor:function(e,t){return this.Encryptor.create(e,t)},createDecryptor:function(e,t){return this.Decryptor.create(e,t)},init:function(e,t){this._cipher=e,this._iv=t}})).extend();h.Encryptor=h.extend({processBlock:function(e,t){var n=this._cipher,r=n.blockSize;u.call(this,e,t,r),n.encryptBlock(e,t),this._prevBlock=e.slice(t,t+r)}}),h.Decryptor=h.extend({processBlock:function(e,t){var n=this._cipher,r=n.blockSize,i=e.slice(t,t+r);n.decryptBlock(e,t),u.call(this,e,t,r),this._prevBlock=i}}),c=c.CBC=h,h=(m.pad={}).Pkcs7={pad:function(e,t){for(var n,i=(n=(n=4*t)-e.sigBytes%n)<<24|n<<16|n<<8|n,s=[],a=0;a<n;a+=4)s.push(i);n=r.create(s,n),e.concat(n)},unpad:function(e){e.sigBytes-=255&e.words[e.sigBytes-1>>>2]}},t.BlockCipher=o.extend({cfg:o.cfg.extend({mode:c,padding:h}),reset:function(){o.reset.call(this);var e=(t=this.cfg).iv,t=t.mode;if(this._xformMode==this._ENC_XFORM_MODE)var n=t.createEncryptor;else n=t.createDecryptor,this._minBufferSize=1;this._mode=n.call(t,this,e&&e.words)},_doProcessBlock:function(e,t){this._mode.processBlock(e,t)},_doFinalize:function(){var e=this.cfg.padding;if(this._xformMode==this._ENC_XFORM_MODE){e.pad(this._data,this.blockSize);var t=this._process(!0)}else t=this._process(!0),e.unpad(t);return t},blockSize:4});var l=t.CipherParams=n.extend({init:function(e){this.mixIn(e)},toString:function(e){return(e||this.formatter).stringify(this)}}),d=(c=(m.format={}).OpenSSL={stringify:function(e){var t=e.ciphertext;return((e=e.salt)?r.create([1398893684,1701076831]).concat(e).concat(t):t).toString(s)},parse:function(e){var t=(e=s.parse(e)).words;if(1398893684==t[0]&&1701076831==t[1]){var n=r.create(t.slice(2,4));t.splice(0,4),e.sigBytes-=16}return l.create({ciphertext:e,salt:n})}},t.SerializableCipher=n.extend({cfg:n.extend({format:c}),encrypt:function(e,t,n,r){r=this.cfg.extend(r);var i=e.createEncryptor(n,r);return t=i.finalize(t),i=i.cfg,l.create({ciphertext:t,key:n,iv:i.iv,algorithm:e,mode:i.mode,padding:i.padding,blockSize:e.blockSize,formatter:r.format})},decrypt:function(e,t,n,r){return r=this.cfg.extend(r),t=this._parse(t,r.format),e.createDecryptor(n,r).finalize(t.ciphertext)},_parse:function(e,t){return"string"==typeof e?t.parse(e,this):e}})),m=(m.kdf={}).OpenSSL={execute:function(e,t,n,i){return i||(i=r.random(8)),e=a.create({keySize:t+n}).compute(e,i),n=r.create(e.words.slice(t),4*n),e.sigBytes=4*t,l.create({key:e,iv:n,salt:i})}},p=t.PasswordBasedCipher=d.extend({cfg:d.cfg.extend({kdf:m}),encrypt:function(e,t,n,r){return n=(r=this.cfg.extend(r)).kdf.execute(n,e.keySize,e.ivSize),r.iv=n.iv,(e=d.encrypt.call(this,e,t,n.key,r)).mixIn(n),e},decrypt:function(e,t,n,r){return r=this.cfg.extend(r),t=this._parse(t,r.format),n=r.kdf.execute(n,e.keySize,e.ivSize,t.salt),r.iv=n.iv,d.decrypt.call(this,e,t,n.key,r)}})}(),function(){for(var e=f,t=e.lib.BlockCipher,n=e.algo,r=[],i=[],s=[],a=[],o=[],c=[],u=[],h=[],l=[],d=[],m=[],p=0;256>p;p++)m[p]=128>p?p<<1:p<<1^283;var g=0,y=0;for(p=0;256>p;p++){var v=(v=y^y<<1^y<<2^y<<3^y<<4)>>>8^255&v^99;r[g]=v,i[v]=g;var b=m[g],S=m[b],w=m[S],C=257*m[v]^16843008*v;s[g]=C<<24|C>>>8,a[g]=C<<16|C>>>16,o[g]=C<<8|C>>>24,c[g]=C,C=16843009*w^65537*S^257*b^16843008*g,u[v]=C<<24|C>>>8,h[v]=C<<16|C>>>16,l[v]=C<<8|C>>>24,d[v]=C,g?(g=b^m[m[m[w^b]]],y^=m[m[y]]):g=y=1}var x=[0,1,2,4,8,16,32,64,128,27,54];n=n.AES=t.extend({_doReset:function(){for(var e=(n=this._key).words,t=n.sigBytes/4,n=4*((this._nRounds=t+6)+1),i=this._keySchedule=[],s=0;s<n;s++)if(s<t)i[s]=e[s];else{var a=i[s-1];s%t?6<t&&4==s%t&&(a=r[a>>>24]<<24|r[a>>>16&255]<<16|r[a>>>8&255]<<8|r[255&a]):(a=r[(a=a<<8|a>>>24)>>>24]<<24|r[a>>>16&255]<<16|r[a>>>8&255]<<8|r[255&a],a^=x[s/t|0]<<24),i[s]=i[s-t]^a}for(e=this._invKeySchedule=[],t=0;t<n;t++)s=n-t,a=t%4?i[s]:i[s-4],e[t]=4>t||4>=s?a:u[r[a>>>24]]^h[r[a>>>16&255]]^l[r[a>>>8&255]]^d[r[255&a]]},encryptBlock:function(e,t){this._doCryptBlock(e,t,this._keySchedule,s,a,o,c,r)},decryptBlock:function(e,t){var n=e[t+1];e[t+1]=e[t+3],e[t+3]=n,this._doCryptBlock(e,t,this._invKeySchedule,u,h,l,d,i),n=e[t+1],e[t+1]=e[t+3],e[t+3]=n},_doCryptBlock:function(e,t,n,r,i,s,a,o){for(var c=this._nRounds,u=e[t]^n[0],h=e[t+1]^n[1],l=e[t+2]^n[2],d=e[t+3]^n[3],m=4,p=1;p<c;p++){var f=r[u>>>24]^i[h>>>16&255]^s[l>>>8&255]^a[255&d]^n[m++],g=r[h>>>24]^i[l>>>16&255]^s[d>>>8&255]^a[255&u]^n[m++],y=r[l>>>24]^i[d>>>16&255]^s[u>>>8&255]^a[255&h]^n[m++];d=r[d>>>24]^i[u>>>16&255]^s[h>>>8&255]^a[255&l]^n[m++],u=f,h=g,l=y}f=(o[u>>>24]<<24|o[h>>>16&255]<<16|o[l>>>8&255]<<8|o[255&d])^n[m++],g=(o[h>>>24]<<24|o[l>>>16&255]<<16|o[d>>>8&255]<<8|o[255&u])^n[m++],y=(o[l>>>24]<<24|o[d>>>16&255]<<16|o[u>>>8&255]<<8|o[255&h])^n[m++],d=(o[d>>>24]<<24|o[u>>>16&255]<<16|o[h>>>8&255]<<8|o[255&l])^n[m++],e[t]=f,e[t+1]=g,e[t+2]=y,e[t+3]=d},keySize:8});e.AES=t._createHelper(n)}(),function(){function e(e,t){var n=(this._lBlock>>>e^this._rBlock)&t;this._rBlock^=n,this._lBlock^=n<<e}function t(e,t){var n=(this._rBlock>>>e^this._lBlock)&t;this._lBlock^=n,this._rBlock^=n<<e}var n=f,r=(i=n.lib).WordArray,i=i.BlockCipher,s=n.algo,a=[57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4],o=[14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32],c=[1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28],u=[{0:8421888,268435456:32768,536870912:8421378,805306368:2,1073741824:512,1342177280:8421890,1610612736:8389122,1879048192:8388608,2147483648:514,2415919104:8389120,2684354560:33280,2952790016:8421376,3221225472:32770,3489660928:8388610,3758096384:0,4026531840:33282,134217728:0,402653184:8421890,671088640:33282,939524096:32768,1207959552:8421888,1476395008:512,1744830464:8421378,2013265920:2,2281701376:8389120,2550136832:33280,2818572288:8421376,3087007744:8389122,3355443200:8388610,3623878656:32770,3892314112:514,4160749568:8388608,1:32768,268435457:2,536870913:8421888,805306369:8388608,1073741825:8421378,1342177281:33280,1610612737:512,1879048193:8389122,2147483649:8421890,2415919105:8421376,2684354561:8388610,2952790017:33282,3221225473:514,3489660929:8389120,3758096385:32770,4026531841:0,134217729:8421890,402653185:8421376,671088641:8388608,939524097:512,1207959553:32768,1476395009:8388610,1744830465:2,2013265921:33282,2281701377:32770,2550136833:8389122,2818572289:514,3087007745:8421888,3355443201:8389120,3623878657:0,3892314113:33280,4160749569:8421378},{0:1074282512,16777216:16384,33554432:524288,50331648:1074266128,67108864:1073741840,83886080:1074282496,100663296:1073758208,117440512:16,134217728:540672,150994944:1073758224,167772160:1073741824,184549376:540688,201326592:524304,218103808:0,234881024:16400,251658240:1074266112,8388608:1073758208,25165824:540688,41943040:16,58720256:1073758224,75497472:1074282512,92274688:1073741824,109051904:524288,125829120:1074266128,142606336:524304,159383552:0,176160768:16384,192937984:1074266112,209715200:1073741840,226492416:540672,243269632:1074282496,260046848:16400,268435456:0,285212672:1074266128,301989888:1073758224,318767104:1074282496,335544320:1074266112,352321536:16,369098752:540688,385875968:16384,402653184:16400,419430400:524288,436207616:524304,452984832:1073741840,469762048:540672,486539264:1073758208,503316480:1073741824,520093696:1074282512,276824064:540688,293601280:524288,310378496:1074266112,327155712:16384,343932928:1073758208,360710144:1074282512,377487360:16,394264576:1073741824,411041792:1074282496,427819008:1073741840,444596224:1073758224,461373440:524304,478150656:0,494927872:16400,511705088:1074266128,528482304:540672},{0:260,1048576:0,2097152:67109120,3145728:65796,4194304:65540,5242880:67108868,6291456:67174660,7340032:67174400,8388608:67108864,9437184:67174656,10485760:65792,11534336:67174404,12582912:67109124,13631488:65536,14680064:4,15728640:256,524288:67174656,1572864:67174404,2621440:0,3670016:67109120,4718592:67108868,5767168:65536,6815744:65540,7864320:260,8912896:4,9961472:256,11010048:67174400,12058624:65796,13107200:65792,14155776:67109124,15204352:67174660,16252928:67108864,16777216:67174656,17825792:65540,18874368:65536,19922944:67109120,20971520:256,22020096:67174660,23068672:67108868,24117248:0,25165824:67109124,26214400:67108864,27262976:4,28311552:65792,29360128:67174400,30408704:260,31457280:65796,32505856:67174404,17301504:67108864,18350080:260,19398656:67174656,20447232:0,21495808:65540,22544384:67109120,23592960:256,24641536:67174404,25690112:65536,26738688:67174660,27787264:65796,28835840:67108868,29884416:67109124,30932992:67174400,31981568:4,33030144:65792},{0:2151682048,65536:2147487808,131072:4198464,196608:2151677952,262144:0,327680:4198400,393216:2147483712,458752:4194368,524288:2147483648,589824:4194304,655360:64,720896:2147487744,786432:2151678016,851968:4160,917504:4096,983040:2151682112,32768:2147487808,98304:64,163840:2151678016,229376:2147487744,294912:4198400,360448:2151682112,425984:0,491520:2151677952,557056:4096,622592:2151682048,688128:4194304,753664:4160,819200:2147483648,884736:4194368,950272:4198464,1015808:2147483712,1048576:4194368,1114112:4198400,1179648:2147483712,1245184:0,1310720:4160,1376256:2151678016,1441792:2151682048,1507328:2147487808,1572864:2151682112,1638400:2147483648,1703936:2151677952,1769472:4198464,1835008:2147487744,1900544:4194304,1966080:64,2031616:4096,1081344:2151677952,1146880:2151682112,1212416:0,1277952:4198400,1343488:4194368,1409024:2147483648,1474560:2147487808,1540096:64,1605632:2147483712,1671168:4096,1736704:2147487744,1802240:2151678016,1867776:4160,1933312:2151682048,1998848:4194304,2064384:4198464},{0:128,4096:17039360,8192:262144,12288:536870912,16384:537133184,20480:16777344,24576:553648256,28672:262272,32768:16777216,36864:537133056,40960:536871040,45056:553910400,49152:553910272,53248:0,57344:17039488,61440:553648128,2048:17039488,6144:553648256,10240:128,14336:17039360,18432:262144,22528:537133184,26624:553910272,30720:536870912,34816:537133056,38912:0,43008:553910400,47104:16777344,51200:536871040,55296:553648128,59392:16777216,63488:262272,65536:262144,69632:128,73728:536870912,77824:553648256,81920:16777344,86016:553910272,90112:537133184,94208:16777216,98304:553910400,102400:553648128,106496:17039360,110592:537133056,114688:262272,118784:536871040,122880:0,126976:17039488,67584:553648256,71680:16777216,75776:17039360,79872:537133184,83968:536870912,88064:17039488,92160:128,96256:553910272,100352:262272,104448:553910400,108544:0,112640:553648128,116736:16777344,120832:262144,124928:537133056,129024:536871040},{0:268435464,256:8192,512:270532608,768:270540808,1024:268443648,1280:2097152,1536:2097160,1792:268435456,2048:0,2304:268443656,2560:2105344,2816:8,3072:270532616,3328:2105352,3584:8200,3840:270540800,128:270532608,384:270540808,640:8,896:2097152,1152:2105352,1408:268435464,1664:268443648,1920:8200,2176:2097160,2432:8192,2688:268443656,2944:270532616,3200:0,3456:270540800,3712:2105344,3968:268435456,4096:268443648,4352:270532616,4608:270540808,4864:8200,5120:2097152,5376:268435456,5632:268435464,5888:2105344,6144:2105352,6400:0,6656:8,6912:270532608,7168:8192,7424:268443656,7680:270540800,7936:2097160,4224:8,4480:2105344,4736:2097152,4992:268435464,5248:268443648,5504:8200,5760:270540808,6016:270532608,6272:270540800,6528:270532616,6784:8192,7040:2105352,7296:2097160,7552:0,7808:268435456,8064:268443656},{0:1048576,16:33555457,32:1024,48:1049601,64:34604033,80:0,96:1,112:34603009,128:33555456,144:1048577,160:33554433,176:34604032,192:34603008,208:1025,224:1049600,240:33554432,8:34603009,24:0,40:33555457,56:34604032,72:1048576,88:33554433,104:33554432,120:1025,136:1049601,152:33555456,168:34603008,184:1048577,200:1024,216:34604033,232:1,248:1049600,256:33554432,272:1048576,288:33555457,304:34603009,320:1048577,336:33555456,352:34604032,368:1049601,384:1025,400:34604033,416:1049600,432:1,448:0,464:34603008,480:33554433,496:1024,264:1049600,280:33555457,296:34603009,312:1,328:33554432,344:1048576,360:1025,376:34604032,392:33554433,408:34603008,424:0,440:34604033,456:1049601,472:1024,488:33555456,504:1048577},{0:134219808,1:131072,2:134217728,3:32,4:131104,5:134350880,6:134350848,7:2048,8:134348800,9:134219776,10:133120,11:134348832,12:2080,13:0,14:134217760,15:133152,2147483648:2048,2147483649:134350880,2147483650:134219808,2147483651:134217728,2147483652:134348800,2147483653:133120,2147483654:133152,2147483655:32,2147483656:134217760,2147483657:2080,2147483658:131104,2147483659:134350848,2147483660:0,2147483661:134348832,2147483662:134219776,2147483663:131072,16:133152,17:134350848,18:32,19:2048,20:134219776,21:134217760,22:134348832,23:131072,24:0,25:131104,26:134348800,27:134219808,28:134350880,29:133120,30:2080,31:134217728,2147483664:131072,2147483665:2048,2147483666:134348832,2147483667:133152,2147483668:32,2147483669:134348800,2147483670:134217728,2147483671:134219808,2147483672:134350880,2147483673:134217760,2147483674:134219776,2147483675:0,2147483676:133120,2147483677:2080,2147483678:131104,2147483679:134350848}],h=[4160749569,528482304,33030144,2064384,129024,8064,504,2147483679],l=s.DES=i.extend({_doReset:function(){for(var e=this._key.words,t=[],n=0;56>n;n++){var r=a[n]-1;t[n]=e[r>>>5]>>>31-r%32&1}for(e=this._subKeys=[],r=0;16>r;r++){var i=e[r]=[],s=c[r];for(n=0;24>n;n++)i[n/6|0]|=t[(o[n]-1+s)%28]<<31-n%6,i[4+(n/6|0)]|=t[28+(o[n+24]-1+s)%28]<<31-n%6;for(i[0]=i[0]<<1|i[0]>>>31,n=1;7>n;n++)i[n]>>>=4*(n-1)+3;i[7]=i[7]<<5|i[7]>>>27}for(t=this._invSubKeys=[],n=0;16>n;n++)t[n]=e[15-n]},encryptBlock:function(e,t){this._doCryptBlock(e,t,this._subKeys)},decryptBlock:function(e,t){this._doCryptBlock(e,t,this._invSubKeys)},_doCryptBlock:function(n,r,i){this._lBlock=n[r],this._rBlock=n[r+1],e.call(this,4,252645135),e.call(this,16,65535),t.call(this,2,858993459),t.call(this,8,16711935),e.call(this,1,1431655765);for(var s=0;16>s;s++){for(var a=i[s],o=this._lBlock,c=this._rBlock,l=0,d=0;8>d;d++)l|=u[d][((c^a[d])&h[d])>>>0];this._lBlock=c,this._rBlock=o^l}i=this._lBlock,this._lBlock=this._rBlock,this._rBlock=i,e.call(this,1,1431655765),t.call(this,8,16711935),t.call(this,2,858993459),e.call(this,16,65535),e.call(this,4,252645135),n[r]=this._lBlock,n[r+1]=this._rBlock},keySize:2,ivSize:2,blockSize:2});n.DES=i._createHelper(l),s=s.TripleDES=i.extend({_doReset:function(){var e=this._key.words;this._des1=l.createEncryptor(r.create(e.slice(0,2))),this._des2=l.createEncryptor(r.create(e.slice(2,4))),this._des3=l.createEncryptor(r.create(e.slice(4,6)))},encryptBlock:function(e,t){this._des1.encryptBlock(e,t),this._des2.decryptBlock(e,t),this._des3.encryptBlock(e,t)},decryptBlock:function(e,t){this._des3.decryptBlock(e,t),this._des2.encryptBlock(e,t),this._des1.decryptBlock(e,t)},keySize:6,ivSize:2,blockSize:2}),n.TripleDES=i._createHelper(s)}(),function(){var e=f,t=e.lib.WordArray;e.enc.Base64={stringify:function(e){var t=e.words,n=e.sigBytes,r=this._map;e.clamp(),e=[];for(var i=0;i<n;i+=3)for(var s=(t[i>>>2]>>>24-i%4*8&255)<<16|(t[i+1>>>2]>>>24-(i+1)%4*8&255)<<8|t[i+2>>>2]>>>24-(i+2)%4*8&255,a=0;4>a&&i+.75*a<n;a++)e.push(r.charAt(s>>>6*(3-a)&63));if(t=r.charAt(64))for(;e.length%4;)e.push(t);return e.join("")},parse:function(e){var n=e.length,r=this._map;(i=r.charAt(64))&&(-1!=(i=e.indexOf(i))&&(n=i));for(var i=[],s=0,a=0;a<n;a++)if(a%4){var o=r.indexOf(e.charAt(a-1))<<a%4*2,c=r.indexOf(e.charAt(a))>>>6-a%4*2;i[s>>>2]|=(o|c)<<24-s%4*8,s++}return t.create(i,s)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="}}(),function(e){function t(e,t,n,r,i,s,a){return((e=e+(t&n|~t&r)+i+a)<<s|e>>>32-s)+t}function n(e,t,n,r,i,s,a){return((e=e+(t&r|n&~r)+i+a)<<s|e>>>32-s)+t}function r(e,t,n,r,i,s,a){return((e=e+(t^n^r)+i+a)<<s|e>>>32-s)+t}function i(e,t,n,r,i,s,a){return((e=e+(n^(t|~r))+i+a)<<s|e>>>32-s)+t}for(var s=f,a=(c=s.lib).WordArray,o=c.Hasher,c=s.algo,u=[],h=0;64>h;h++)u[h]=4294967296*e.abs(e.sin(h+1))|0;c=c.MD5=o.extend({_doReset:function(){this._hash=new a.init([1732584193,4023233417,2562383102,271733878])},_doProcessBlock:function(e,s){for(var a=0;16>a;a++){var o=e[c=s+a];e[c]=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8)}a=this._hash.words;var c=e[s+0],h=(o=e[s+1],e[s+2]),l=e[s+3],d=e[s+4],m=e[s+5],p=e[s+6],f=e[s+7],g=e[s+8],y=e[s+9],v=e[s+10],b=e[s+11],S=e[s+12],w=e[s+13],C=e[s+14],x=e[s+15],E=t(E=a[0],P=a[1],T=a[2],O=a[3],c,7,u[0]),O=t(O,E,P,T,o,12,u[1]),T=t(T,O,E,P,h,17,u[2]),P=t(P,T,O,E,l,22,u[3]);E=t(E,P,T,O,d,7,u[4]),O=t(O,E,P,T,m,12,u[5]),T=t(T,O,E,P,p,17,u[6]),P=t(P,T,O,E,f,22,u[7]),E=t(E,P,T,O,g,7,u[8]),O=t(O,E,P,T,y,12,u[9]),T=t(T,O,E,P,v,17,u[10]),P=t(P,T,O,E,b,22,u[11]),E=t(E,P,T,O,S,7,u[12]),O=t(O,E,P,T,w,12,u[13]),T=t(T,O,E,P,C,17,u[14]),E=n(E,P=t(P,T,O,E,x,22,u[15]),T,O,o,5,u[16]),O=n(O,E,P,T,p,9,u[17]),T=n(T,O,E,P,b,14,u[18]),P=n(P,T,O,E,c,20,u[19]),E=n(E,P,T,O,m,5,u[20]),O=n(O,E,P,T,v,9,u[21]),T=n(T,O,E,P,x,14,u[22]),P=n(P,T,O,E,d,20,u[23]),E=n(E,P,T,O,y,5,u[24]),O=n(O,E,P,T,C,9,u[25]),T=n(T,O,E,P,l,14,u[26]),P=n(P,T,O,E,g,20,u[27]),E=n(E,P,T,O,w,5,u[28]),O=n(O,E,P,T,h,9,u[29]),T=n(T,O,E,P,f,14,u[30]),E=r(E,P=n(P,T,O,E,S,20,u[31]),T,O,m,4,u[32]),O=r(O,E,P,T,g,11,u[33]),T=r(T,O,E,P,b,16,u[34]),P=r(P,T,O,E,C,23,u[35]),E=r(E,P,T,O,o,4,u[36]),O=r(O,E,P,T,d,11,u[37]),T=r(T,O,E,P,f,16,u[38]),P=r(P,T,O,E,v,23,u[39]),E=r(E,P,T,O,w,4,u[40]),O=r(O,E,P,T,c,11,u[41]),T=r(T,O,E,P,l,16,u[42]),P=r(P,T,O,E,p,23,u[43]),E=r(E,P,T,O,y,4,u[44]),O=r(O,E,P,T,S,11,u[45]),T=r(T,O,E,P,x,16,u[46]),E=i(E,P=r(P,T,O,E,h,23,u[47]),T,O,c,6,u[48]),O=i(O,E,P,T,f,10,u[49]),T=i(T,O,E,P,C,15,u[50]),P=i(P,T,O,E,m,21,u[51]),E=i(E,P,T,O,S,6,u[52]),O=i(O,E,P,T,l,10,u[53]),T=i(T,O,E,P,v,15,u[54]),P=i(P,T,O,E,o,21,u[55]),E=i(E,P,T,O,g,6,u[56]),O=i(O,E,P,T,x,10,u[57]),T=i(T,O,E,P,p,15,u[58]),P=i(P,T,O,E,w,21,u[59]),E=i(E,P,T,O,d,6,u[60]),O=i(O,E,P,T,b,10,u[61]),T=i(T,O,E,P,h,15,u[62]),P=i(P,T,O,E,y,21,u[63]);a[0]=a[0]+E|0,a[1]=a[1]+P|0,a[2]=a[2]+T|0,a[3]=a[3]+O|0},_doFinalize:function(){var t=this._data,n=t.words,r=8*this._nDataBytes,i=8*t.sigBytes;n[i>>>5]|=128<<24-i%32;var s=e.floor(r/4294967296);for(n[15+(i+64>>>9<<4)]=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),n[14+(i+64>>>9<<4)]=16711935&(r<<8|r>>>24)|4278255360&(r<<24|r>>>8),t.sigBytes=4*(n.length+1),this._process(),n=(t=this._hash).words,r=0;4>r;r++)i=n[r],n[r]=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8);return t},clone:function(){var e=o.clone.call(this);return e._hash=this._hash.clone(),e}}),s.MD5=o._createHelper(c),s.HmacMD5=o._createHmacHelper(c)}(Math),function(){var e=f,t=(i=e.lib).WordArray,n=i.Hasher,r=[],i=e.algo.SHA1=n.extend({_doReset:function(){this._hash=new t.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(e,t){for(var n=this._hash.words,i=n[0],s=n[1],a=n[2],o=n[3],c=n[4],u=0;80>u;u++){if(16>u)r[u]=0|e[t+u];else{var h=r[u-3]^r[u-8]^r[u-14]^r[u-16];r[u]=h<<1|h>>>31}h=(i<<5|i>>>27)+c+r[u],h=20>u?h+(1518500249+(s&a|~s&o)):40>u?h+(1859775393+(s^a^o)):60>u?h+((s&a|s&o|a&o)-1894007588):h+((s^a^o)-899497514),c=o,o=a,a=s<<30|s>>>2,s=i,i=h}n[0]=n[0]+i|0,n[1]=n[1]+s|0,n[2]=n[2]+a|0,n[3]=n[3]+o|0,n[4]=n[4]+c|0},_doFinalize:function(){var e=this._data,t=e.words,n=8*this._nDataBytes,r=8*e.sigBytes;return t[r>>>5]|=128<<24-r%32,t[14+(r+64>>>9<<4)]=Math.floor(n/4294967296),t[15+(r+64>>>9<<4)]=n,e.sigBytes=4*t.length,this._process(),this._hash},clone:function(){var e=n.clone.call(this);return e._hash=this._hash.clone(),e}});e.SHA1=n._createHelper(i),e.HmacSHA1=n._createHmacHelper(i)}(),function(e){for(var t=f,n=(i=t.lib).WordArray,r=i.Hasher,i=t.algo,s=[],a=[],o=function(e){return 4294967296*(e-(0|e))|0},c=2,u=0;64>u;){var h;e:{h=c;for(var l=e.sqrt(h),d=2;d<=l;d++)if(!(h%d)){h=!1;break e}h=!0}h&&(8>u&&(s[u]=o(e.pow(c,.5))),a[u]=o(e.pow(c,1/3)),u++),c++}var m=[];i=i.SHA256=r.extend({_doReset:function(){this._hash=new n.init(s.slice(0))},_doProcessBlock:function(e,t){for(var n=this._hash.words,r=n[0],i=n[1],s=n[2],o=n[3],c=n[4],u=n[5],h=n[6],l=n[7],d=0;64>d;d++){if(16>d)m[d]=0|e[t+d];else{var p=m[d-15],f=m[d-2];m[d]=((p<<25|p>>>7)^(p<<14|p>>>18)^p>>>3)+m[d-7]+((f<<15|f>>>17)^(f<<13|f>>>19)^f>>>10)+m[d-16]}p=l+((c<<26|c>>>6)^(c<<21|c>>>11)^(c<<7|c>>>25))+(c&u^~c&h)+a[d]+m[d],f=((r<<30|r>>>2)^(r<<19|r>>>13)^(r<<10|r>>>22))+(r&i^r&s^i&s),l=h,h=u,u=c,c=o+p|0,o=s,s=i,i=r,r=p+f|0}n[0]=n[0]+r|0,n[1]=n[1]+i|0,n[2]=n[2]+s|0,n[3]=n[3]+o|0,n[4]=n[4]+c|0,n[5]=n[5]+u|0,n[6]=n[6]+h|0,n[7]=n[7]+l|0},_doFinalize:function(){var t=this._data,n=t.words,r=8*this._nDataBytes,i=8*t.sigBytes;return n[i>>>5]|=128<<24-i%32,n[14+(i+64>>>9<<4)]=e.floor(r/4294967296),n[15+(i+64>>>9<<4)]=r,t.sigBytes=4*n.length,this._process(),this._hash},clone:function(){var e=r.clone.call(this);return e._hash=this._hash.clone(),e}});t.SHA256=r._createHelper(i),t.HmacSHA256=r._createHmacHelper(i)}(Math),function(){var e=f,t=e.lib.WordArray,n=(r=e.algo).SHA256,r=r.SHA224=n.extend({_doReset:function(){this._hash=new t.init([3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428])},_doFinalize:function(){var e=n._doFinalize.call(this);return e.sigBytes-=4,e}});e.SHA224=n._createHelper(r),e.HmacSHA224=n._createHmacHelper(r)}(),function(){function e(){return r.create.apply(r,arguments)}for(var t=f,n=t.lib.Hasher,r=(s=t.x64).Word,i=s.WordArray,s=t.algo,a=[e(1116352408,3609767458),e(1899447441,602891725),e(3049323471,3964484399),e(3921009573,2173295548),e(961987163,4081628472),e(1508970993,3053834265),e(2453635748,2937671579),e(2870763221,3664609560),e(3624381080,2734883394),e(310598401,1164996542),e(607225278,1323610764),e(1426881987,3590304994),e(1925078388,4068182383),e(2162078206,991336113),e(2614888103,633803317),e(3248222580,3479774868),e(3835390401,2666613458),e(4022224774,944711139),e(264347078,2341262773),e(604807628,2007800933),e(770255983,1495990901),e(1249150122,1856431235),e(1555081692,3175218132),e(1996064986,2198950837),e(2554220882,3999719339),e(2821834349,766784016),e(2952996808,2566594879),e(3210313671,3203337956),e(3336571891,1034457026),e(3584528711,2466948901),e(113926993,3758326383),e(338241895,168717936),e(666307205,1188179964),e(773529912,1546045734),e(1294757372,1522805485),e(1396182291,2643833823),e(1695183700,2343527390),e(1986661051,1014477480),e(2177026350,1206759142),e(2456956037,344077627),e(2730485921,1290863460),e(2820302411,3158454273),e(3259730800,3505952657),e(3345764771,106217008),e(3516065817,3606008344),e(3600352804,1432725776),e(4094571909,1467031594),e(275423344,851169720),e(430227734,3100823752),e(506948616,1363258195),e(659060556,3750685593),e(883997877,3785050280),e(958139571,3318307427),e(1322822218,3812723403),e(1537002063,2003034995),e(1747873779,3602036899),e(1955562222,1575990012),e(2024104815,1125592928),e(2227730452,2716904306),e(2361852424,442776044),e(2428436474,593698344),e(2756734187,3733110249),e(3204031479,2999351573),e(3329325298,3815920427),e(3391569614,3928383900),e(3515267271,566280711),e(3940187606,3454069534),e(4118630271,4000239992),e(116418474,1914138554),e(174292421,2731055270),e(289380356,3203993006),e(460393269,320620315),e(685471733,587496836),e(852142971,1086792851),e(1017036298,365543100),e(1126000580,2618297676),e(1288033470,3409855158),e(1501505948,4234509866),e(1607167915,987167468),e(1816402316,1246189591)],o=[],c=0;80>c;c++)o[c]=e();s=s.SHA512=n.extend({_doReset:function(){this._hash=new i.init([new r.init(1779033703,4089235720),new r.init(3144134277,2227873595),new r.init(1013904242,4271175723),new r.init(2773480762,1595750129),new r.init(1359893119,2917565137),new r.init(2600822924,725511199),new r.init(528734635,4215389547),new r.init(1541459225,327033209)])},_doProcessBlock:function(e,t){for(var n=(l=this._hash.words)[0],r=l[1],i=l[2],s=l[3],c=l[4],u=l[5],h=l[6],l=l[7],d=n.high,m=n.low,p=r.high,f=r.low,g=i.high,y=i.low,v=s.high,b=s.low,S=c.high,w=c.low,C=u.high,x=u.low,E=h.high,O=h.low,T=l.high,P=l.low,A=d,N=m,I=p,k=f,D=g,F=y,j=v,R=b,M=S,_=w,B=C,L=x,q=E,z=O,H=T,U=P,V=0;80>V;V++){var G=o[V];if(16>V)var W=G.high=0|e[t+2*V],K=G.low=0|e[t+2*V+1];else{W=((K=(W=o[V-15]).high)>>>1|($=W.low)<<31)^(K>>>8|$<<24)^K>>>7;var $=($>>>1|K<<31)^($>>>8|K<<24)^($>>>7|K<<25),J=((K=(J=o[V-2]).high)>>>19|(Q=J.low)<<13)^(K<<3|Q>>>29)^K>>>6,Q=(Q>>>19|K<<13)^(Q<<3|K>>>29)^(Q>>>6|K<<26),Y=(K=o[V-7]).high,X=(Z=o[V-16]).high,Z=Z.low;W=(W=(W=W+Y+((K=$+K.low)>>>0<$>>>0?1:0))+J+((K=K+Q)>>>0<Q>>>0?1:0))+X+((K=K+Z)>>>0<Z>>>0?1:0);G.high=W,G.low=K}Y=M&B^~M&q,Z=_&L^~_&z,G=A&I^A&D^I&D;var ee=N&k^N&F^k&F,te=($=(A>>>28|N<<4)^(A<<30|N>>>2)^(A<<25|N>>>7),J=(N>>>28|A<<4)^(N<<30|A>>>2)^(N<<25|A>>>7),(Q=a[V]).high),ne=Q.low;X=H+((M>>>14|_<<18)^(M>>>18|_<<14)^(M<<23|_>>>9))+((Q=U+((_>>>14|M<<18)^(_>>>18|M<<14)^(_<<23|M>>>9)))>>>0<U>>>0?1:0),H=q,U=z,q=B,z=L,B=M,L=_,M=j+(X=(X=(X=X+Y+((Q=Q+Z)>>>0<Z>>>0?1:0))+te+((Q=Q+ne)>>>0<ne>>>0?1:0))+W+((Q=Q+K)>>>0<K>>>0?1:0))+((_=R+Q|0)>>>0<R>>>0?1:0)|0,j=D,R=F,D=I,F=k,I=A,k=N,A=X+(G=$+G+((K=J+ee)>>>0<J>>>0?1:0))+((N=Q+K|0)>>>0<Q>>>0?1:0)|0}m=n.low=m+N,n.high=d+A+(m>>>0<N>>>0?1:0),f=r.low=f+k,r.high=p+I+(f>>>0<k>>>0?1:0),y=i.low=y+F,i.high=g+D+(y>>>0<F>>>0?1:0),b=s.low=b+R,s.high=v+j+(b>>>0<R>>>0?1:0),w=c.low=w+_,c.high=S+M+(w>>>0<_>>>0?1:0),x=u.low=x+L,u.high=C+B+(x>>>0<L>>>0?1:0),O=h.low=O+z,h.high=E+q+(O>>>0<z>>>0?1:0),P=l.low=P+U,l.high=T+H+(P>>>0<U>>>0?1:0)},_doFinalize:function(){var e=this._data,t=e.words,n=8*this._nDataBytes,r=8*e.sigBytes;return t[r>>>5]|=128<<24-r%32,t[30+(r+128>>>10<<5)]=Math.floor(n/4294967296),t[31+(r+128>>>10<<5)]=n,e.sigBytes=4*t.length,this._process(),this._hash.toX32()},clone:function(){var e=n.clone.call(this);return e._hash=this._hash.clone(),e},blockSize:32}),t.SHA512=n._createHelper(s),t.HmacSHA512=n._createHmacHelper(s)}(),function(){var e=f,t=(i=e.x64).Word,n=i.WordArray,r=(i=e.algo).SHA512,i=i.SHA384=r.extend({_doReset:function(){this._hash=new n.init([new t.init(3418070365,3238371032),new t.init(1654270250,914150663),new t.init(2438529370,812702999),new t.init(355462360,4144912697),new t.init(1731405415,4290775857),new t.init(2394180231,1750603025),new t.init(3675008525,1694076839),new t.init(1203062813,3204075428)])},_doFinalize:function(){var e=r._doFinalize.call(this);return e.sigBytes-=16,e}});e.SHA384=r._createHelper(i),e.HmacSHA384=r._createHmacHelper(i)}(),function(){var e=f,t=(r=e.lib).WordArray,n=r.Hasher,r=e.algo,i=t.create([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13]),s=t.create([5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11]),a=t.create([11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6]),o=t.create([8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]),c=t.create([0,1518500249,1859775393,2400959708,2840853838]),u=t.create([1352829926,1548603684,1836072691,2053994217,0]);r=r.RIPEMD160=n.extend({_doReset:function(){this._hash=t.create([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(e,t){for(var n=0;16>n;n++){var r=e[S=t+n];e[S]=16711935&(r<<8|r>>>24)|4278255360&(r<<24|r>>>8)}var h,l,d,m,p,f,g,y,v,b,S=this._hash.words,w=(r=c.words,u.words),C=i.words,x=s.words,E=a.words,O=o.words;f=h=S[0],g=l=S[1],y=d=S[2],v=m=S[3],b=p=S[4];var T;for(n=0;80>n;n+=1)T=h+e[t+C[n]]|0,T=16>n?T+((l^d^m)+r[0]):32>n?T+((l&d|~l&m)+r[1]):48>n?T+(((l|~d)^m)+r[2]):64>n?T+((l&m|d&~m)+r[3]):T+((l^(d|~m))+r[4]),T=(T=(T|=0)<<E[n]|T>>>32-E[n])+p|0,h=p,p=m,m=d<<10|d>>>22,d=l,l=T,T=f+e[t+x[n]]|0,T=16>n?T+((g^(y|~v))+w[0]):32>n?T+((g&v|y&~v)+w[1]):48>n?T+(((g|~y)^v)+w[2]):64>n?T+((g&y|~g&v)+w[3]):T+((g^y^v)+w[4]),T=(T=(T|=0)<<O[n]|T>>>32-O[n])+b|0,f=b,b=v,v=y<<10|y>>>22,y=g,g=T;T=S[1]+d+v|0,S[1]=S[2]+m+b|0,S[2]=S[3]+p+f|0,S[3]=S[4]+h+g|0,S[4]=S[0]+l+y|0,S[0]=T},_doFinalize:function(){var e=this._data,t=e.words,n=8*this._nDataBytes,r=8*e.sigBytes;for(t[r>>>5]|=128<<24-r%32,t[14+(r+64>>>9<<4)]=16711935&(n<<8|n>>>24)|4278255360&(n<<24|n>>>8),e.sigBytes=4*(t.length+1),this._process(),t=(e=this._hash).words,n=0;5>n;n++)r=t[n],t[n]=16711935&(r<<8|r>>>24)|4278255360&(r<<24|r>>>8);return e},clone:function(){var e=n.clone.call(this);return e._hash=this._hash.clone(),e}});e.RIPEMD160=n._createHelper(r),e.HmacRIPEMD160=n._createHmacHelper(r)}(Math),function(){var e=f,t=e.enc.Utf8;e.algo.HMAC=e.lib.Base.extend({init:function(e,n){e=this._hasher=new e.init,"string"==typeof n&&(n=t.parse(n));var r=e.blockSize,i=4*r;n.sigBytes>i&&(n=e.finalize(n)),n.clamp();for(var s=this._oKey=n.clone(),a=this._iKey=n.clone(),o=s.words,c=a.words,u=0;u<r;u++)o[u]^=1549556828,c[u]^=909522486;s.sigBytes=a.sigBytes=i,this.reset()},reset:function(){var e=this._hasher;e.reset(),e.update(this._iKey)},update:function(e){return this._hasher.update(e),this},finalize:function(e){var t=this._hasher;return e=t.finalize(e),t.reset(),t.finalize(this._oKey.clone().concat(e))}})}(),function(){var e,t=f,n=(e=t.lib).Base,r=e.WordArray,i=(e=t.algo).HMAC,s=e.PBKDF2=n.extend({cfg:n.extend({keySize:4,hasher:e.SHA1,iterations:1}),init:function(e){this.cfg=this.cfg.extend(e)},compute:function(e,t){var n=this.cfg,s=i.create(n.hasher,e),a=r.create(),o=r.create([1]),c=a.words,u=o.words,h=n.keySize;for(n=n.iterations;c.length<h;){var l=s.update(t).finalize(o);s.reset();for(var d=l.words,m=d.length,p=l,f=1;f<n;f++){p=s.finalize(p),s.reset();for(var g=p.words,y=0;y<m;y++)d[y]^=g[y]}a.concat(l),u[0]++}return a.sigBytes=4*h,a}});t.PBKDF2=function(e,t,n){return s.create(n).compute(e,t)}}();
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
var g,y="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";function v(e){var t,n,r="";for(t=0;t+3<=e.length;t+=3)n=parseInt(e.substring(t,t+3),16),r+=y.charAt(n>>6)+y.charAt(63&n);for(t+1==e.length?(n=parseInt(e.substring(t,t+1),16),r+=y.charAt(n<<2)):t+2==e.length&&(n=parseInt(e.substring(t,t+2),16),r+=y.charAt(n>>2)+y.charAt((3&n)<<4)),"=";(3&r.length)>0;)r+="=";return r}function b(e){var t,n,r,i="",s=0;for(t=0;t<e.length&&"="!=e.charAt(t);++t)(r=y.indexOf(e.charAt(t)))<0||(0==s?(i+=T(r>>2),n=3&r,s=1):1==s?(i+=T(n<<2|r>>4),n=15&r,s=2):2==s?(i+=T(n),i+=T(r>>2),n=3&r,s=3):(i+=T(n<<2|r>>4),i+=T(15&r),s=0));return 1==s&&(i+=T(n<<2)),i}function S(e){var t,n=b(e),r=new Array;for(t=0;2*t<n.length;++t)r[t]=parseInt(n.substring(2*t,2*t+2),16);return r}function w(e,t,n){null!=e&&("number"==typeof e?this.fromNumber(e,t,n):null==t&&"string"!=typeof e?this.fromString(e,256):this.fromString(e,t))}function C(){return new w(null)}"Microsoft Internet Explorer"==m.appName?(w.prototype.am=function(e,t,n,r,i,s){for(var a=32767&t,o=t>>15;--s>=0;){var c=32767&this[e],u=this[e++]>>15,h=o*c+u*a;i=((c=a*c+((32767&h)<<15)+n[r]+(1073741823&i))>>>30)+(h>>>15)+o*u+(i>>>30),n[r++]=1073741823&c}return i},g=30):"Netscape"!=m.appName?(w.prototype.am=function(e,t,n,r,i,s){for(;--s>=0;){var a=t*this[e++]+n[r]+i;i=Math.floor(a/67108864),n[r++]=67108863&a}return i},g=26):(w.prototype.am=function(e,t,n,r,i,s){for(var a=16383&t,o=t>>14;--s>=0;){var c=16383&this[e],u=this[e++]>>14,h=o*c+u*a;i=((c=a*c+((16383&h)<<14)+n[r]+i)>>28)+(h>>14)+o*u,n[r++]=268435455&c}return i},g=28),w.prototype.DB=g,w.prototype.DM=(1<<g)-1,w.prototype.DV=1<<g;w.prototype.FV=Math.pow(2,52),w.prototype.F1=52-g,w.prototype.F2=2*g-52;var x,E,O=new Array;for(x="0".charCodeAt(0),E=0;E<=9;++E)O[x++]=E;for(x="a".charCodeAt(0),E=10;E<36;++E)O[x++]=E;for(x="A".charCodeAt(0),E=10;E<36;++E)O[x++]=E;function T(e){return"0123456789abcdefghijklmnopqrstuvwxyz".charAt(e)}function P(e,t){var n=O[e.charCodeAt(t)];return null==n?-1:n}function A(e){var t=C();return t.fromInt(e),t}function N(e){var t,n=1;return 0!=(t=e>>>16)&&(e=t,n+=16),0!=(t=e>>8)&&(e=t,n+=8),0!=(t=e>>4)&&(e=t,n+=4),0!=(t=e>>2)&&(e=t,n+=2),0!=(t=e>>1)&&(e=t,n+=1),n}function I(e){this.m=e}function k(e){this.m=e,this.mp=e.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<e.DB-15)-1,this.mt2=2*e.t}function D(e,t){return e&t}function F(e,t){return e|t}function j(e,t){return e^t}function R(e,t){return e&~t}function M(e){if(0==e)return-1;var t=0;return 0==(65535&e)&&(e>>=16,t+=16),0==(255&e)&&(e>>=8,t+=8),0==(15&e)&&(e>>=4,t+=4),0==(3&e)&&(e>>=2,t+=2),0==(1&e)&&++t,t}function _(e){for(var t=0;0!=e;)e&=e-1,++t;return t}function B(){}function L(e){return e}function q(e){this.r2=C(),this.q3=C(),w.ONE.dlShiftTo(2*e.t,this.r2),this.mu=this.r2.divide(e),this.m=e}I.prototype.convert=function(e){return e.s<0||e.compareTo(this.m)>=0?e.mod(this.m):e},I.prototype.revert=function(e){return e},I.prototype.reduce=function(e){e.divRemTo(this.m,null,e)},I.prototype.mulTo=function(e,t,n){e.multiplyTo(t,n),this.reduce(n)},I.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)},k.prototype.convert=function(e){var t=C();return e.abs().dlShiftTo(this.m.t,t),t.divRemTo(this.m,null,t),e.s<0&&t.compareTo(w.ZERO)>0&&this.m.subTo(t,t),t},k.prototype.revert=function(e){var t=C();return e.copyTo(t),this.reduce(t),t},k.prototype.reduce=function(e){for(;e.t<=this.mt2;)e[e.t++]=0;for(var t=0;t<this.m.t;++t){var n=32767&e[t],r=n*this.mpl+((n*this.mph+(e[t]>>15)*this.mpl&this.um)<<15)&e.DM;for(e[n=t+this.m.t]+=this.m.am(0,r,e,t,0,this.m.t);e[n]>=e.DV;)e[n]-=e.DV,e[++n]++}e.clamp(),e.drShiftTo(this.m.t,e),e.compareTo(this.m)>=0&&e.subTo(this.m,e)},k.prototype.mulTo=function(e,t,n){e.multiplyTo(t,n),this.reduce(n)},k.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)},w.prototype.copyTo=function(e){for(var t=this.t-1;t>=0;--t)e[t]=this[t];e.t=this.t,e.s=this.s},w.prototype.fromInt=function(e){this.t=1,this.s=e<0?-1:0,e>0?this[0]=e:e<-1?this[0]=e+this.DV:this.t=0},w.prototype.fromString=function(e,t){var n;if(16==t)n=4;else if(8==t)n=3;else if(256==t)n=8;else if(2==t)n=1;else if(32==t)n=5;else{if(4!=t)return void this.fromRadix(e,t);n=2}this.t=0,this.s=0;for(var r=e.length,i=!1,s=0;--r>=0;){var a=8==n?255&e[r]:P(e,r);a<0?"-"==e.charAt(r)&&(i=!0):(i=!1,0==s?this[this.t++]=a:s+n>this.DB?(this[this.t-1]|=(a&(1<<this.DB-s)-1)<<s,this[this.t++]=a>>this.DB-s):this[this.t-1]|=a<<s,(s+=n)>=this.DB&&(s-=this.DB))}8==n&&0!=(128&e[0])&&(this.s=-1,s>0&&(this[this.t-1]|=(1<<this.DB-s)-1<<s)),this.clamp(),i&&w.ZERO.subTo(this,this)},w.prototype.clamp=function(){for(var e=this.s&this.DM;this.t>0&&this[this.t-1]==e;)--this.t},w.prototype.dlShiftTo=function(e,t){var n;for(n=this.t-1;n>=0;--n)t[n+e]=this[n];for(n=e-1;n>=0;--n)t[n]=0;t.t=this.t+e,t.s=this.s},w.prototype.drShiftTo=function(e,t){for(var n=e;n<this.t;++n)t[n-e]=this[n];t.t=Math.max(this.t-e,0),t.s=this.s},w.prototype.lShiftTo=function(e,t){var n,r=e%this.DB,i=this.DB-r,s=(1<<i)-1,a=Math.floor(e/this.DB),o=this.s<<r&this.DM;for(n=this.t-1;n>=0;--n)t[n+a+1]=this[n]>>i|o,o=(this[n]&s)<<r;for(n=a-1;n>=0;--n)t[n]=0;t[a]=o,t.t=this.t+a+1,t.s=this.s,t.clamp()},w.prototype.rShiftTo=function(e,t){t.s=this.s;var n=Math.floor(e/this.DB);if(n>=this.t)t.t=0;else{var r=e%this.DB,i=this.DB-r,s=(1<<r)-1;t[0]=this[n]>>r;for(var a=n+1;a<this.t;++a)t[a-n-1]|=(this[a]&s)<<i,t[a-n]=this[a]>>r;r>0&&(t[this.t-n-1]|=(this.s&s)<<i),t.t=this.t-n,t.clamp()}},w.prototype.subTo=function(e,t){for(var n=0,r=0,i=Math.min(e.t,this.t);n<i;)r+=this[n]-e[n],t[n++]=r&this.DM,r>>=this.DB;if(e.t<this.t){for(r-=e.s;n<this.t;)r+=this[n],t[n++]=r&this.DM,r>>=this.DB;r+=this.s}else{for(r+=this.s;n<e.t;)r-=e[n],t[n++]=r&this.DM,r>>=this.DB;r-=e.s}t.s=r<0?-1:0,r<-1?t[n++]=this.DV+r:r>0&&(t[n++]=r),t.t=n,t.clamp()},w.prototype.multiplyTo=function(e,t){var n=this.abs(),r=e.abs(),i=n.t;for(t.t=i+r.t;--i>=0;)t[i]=0;for(i=0;i<r.t;++i)t[i+n.t]=n.am(0,r[i],t,i,0,n.t);t.s=0,t.clamp(),this.s!=e.s&&w.ZERO.subTo(t,t)},w.prototype.squareTo=function(e){for(var t=this.abs(),n=e.t=2*t.t;--n>=0;)e[n]=0;for(n=0;n<t.t-1;++n){var r=t.am(n,t[n],e,2*n,0,1);(e[n+t.t]+=t.am(n+1,2*t[n],e,2*n+1,r,t.t-n-1))>=t.DV&&(e[n+t.t]-=t.DV,e[n+t.t+1]=1)}e.t>0&&(e[e.t-1]+=t.am(n,t[n],e,2*n,0,1)),e.s=0,e.clamp()},w.prototype.divRemTo=function(e,t,n){var r=e.abs();if(!(r.t<=0)){var i=this.abs();if(i.t<r.t)return null!=t&&t.fromInt(0),void(null!=n&&this.copyTo(n));null==n&&(n=C());var s=C(),a=this.s,o=e.s,c=this.DB-N(r[r.t-1]);c>0?(r.lShiftTo(c,s),i.lShiftTo(c,n)):(r.copyTo(s),i.copyTo(n));var u=s.t,h=s[u-1];if(0!=h){var l=h*(1<<this.F1)+(u>1?s[u-2]>>this.F2:0),d=this.FV/l,m=(1<<this.F1)/l,p=1<<this.F2,f=n.t,g=f-u,y=null==t?C():t;for(s.dlShiftTo(g,y),n.compareTo(y)>=0&&(n[n.t++]=1,n.subTo(y,n)),w.ONE.dlShiftTo(u,y),y.subTo(s,s);s.t<u;)s[s.t++]=0;for(;--g>=0;){var v=n[--f]==h?this.DM:Math.floor(n[f]*d+(n[f-1]+p)*m);if((n[f]+=s.am(0,v,n,g,0,u))<v)for(s.dlShiftTo(g,y),n.subTo(y,n);n[f]<--v;)n.subTo(y,n)}null!=t&&(n.drShiftTo(u,t),a!=o&&w.ZERO.subTo(t,t)),n.t=u,n.clamp(),c>0&&n.rShiftTo(c,n),a<0&&w.ZERO.subTo(n,n)}}},w.prototype.invDigit=function(){if(this.t<1)return 0;var e=this[0];if(0==(1&e))return 0;var t=3&e;return(t=(t=(t=(t=t*(2-(15&e)*t)&15)*(2-(255&e)*t)&255)*(2-((65535&e)*t&65535))&65535)*(2-e*t%this.DV)%this.DV)>0?this.DV-t:-t},w.prototype.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},w.prototype.exp=function(e,t){if(e>4294967295||e<1)return w.ONE;var n=C(),r=C(),i=t.convert(this),s=N(e)-1;for(i.copyTo(n);--s>=0;)if(t.sqrTo(n,r),(e&1<<s)>0)t.mulTo(r,i,n);else{var a=n;n=r,r=a}return t.revert(n)},w.prototype.toString=function(e){if(this.s<0)return"-"+this.negate().toString(e);var t;if(16==e)t=4;else if(8==e)t=3;else if(2==e)t=1;else if(32==e)t=5;else{if(4!=e)return this.toRadix(e);t=2}var n,r=(1<<t)-1,i=!1,s="",a=this.t,o=this.DB-a*this.DB%t;if(a-- >0)for(o<this.DB&&(n=this[a]>>o)>0&&(i=!0,s=T(n));a>=0;)o<t?(n=(this[a]&(1<<o)-1)<<t-o,n|=this[--a]>>(o+=this.DB-t)):(n=this[a]>>(o-=t)&r,o<=0&&(o+=this.DB,--a)),n>0&&(i=!0),i&&(s+=T(n));return i?s:"0"},w.prototype.negate=function(){var e=C();return w.ZERO.subTo(this,e),e},w.prototype.abs=function(){return this.s<0?this.negate():this},w.prototype.compareTo=function(e){var t=this.s-e.s;if(0!=t)return t;var n=this.t;if(0!=(t=n-e.t))return this.s<0?-t:t;for(;--n>=0;)if(0!=(t=this[n]-e[n]))return t;return 0},w.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+N(this[this.t-1]^this.s&this.DM)},w.prototype.mod=function(e){var t=C();return this.abs().divRemTo(e,null,t),this.s<0&&t.compareTo(w.ZERO)>0&&e.subTo(t,t),t},w.prototype.modPowInt=function(e,t){var n;return n=e<256||t.isEven()?new I(t):new k(t),this.exp(e,n)},w.ZERO=A(0),w.ONE=A(1),B.prototype.convert=L,B.prototype.revert=L,B.prototype.mulTo=function(e,t,n){e.multiplyTo(t,n)},B.prototype.sqrTo=function(e,t){e.squareTo(t)},q.prototype.convert=function(e){if(e.s<0||e.t>2*this.m.t)return e.mod(this.m);if(e.compareTo(this.m)<0)return e;var t=C();return e.copyTo(t),this.reduce(t),t},q.prototype.revert=function(e){return e},q.prototype.reduce=function(e){for(e.drShiftTo(this.m.t-1,this.r2),e.t>this.m.t+1&&(e.t=this.m.t+1,e.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);e.compareTo(this.r2)<0;)e.dAddOffset(1,this.m.t+1);for(e.subTo(this.r2,e);e.compareTo(this.m)>=0;)e.subTo(this.m,e)},q.prototype.mulTo=function(e,t,n){e.multiplyTo(t,n),this.reduce(n)},q.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)};var z=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],H=(1<<26)/z[z.length-1];
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function U(){this.i=0,this.j=0,this.S=new Array}w.prototype.chunkSize=function(e){return Math.floor(Math.LN2*this.DB/Math.log(e))},w.prototype.toRadix=function(e){if(null==e&&(e=10),0==this.signum()||e<2||e>36)return"0";var t=this.chunkSize(e),n=Math.pow(e,t),r=A(n),i=C(),s=C(),a="";for(this.divRemTo(r,i,s);i.signum()>0;)a=(n+s.intValue()).toString(e).substr(1)+a,i.divRemTo(r,i,s);return s.intValue().toString(e)+a},w.prototype.fromRadix=function(e,t){this.fromInt(0),null==t&&(t=10);for(var n=this.chunkSize(t),r=Math.pow(t,n),i=!1,s=0,a=0,o=0;o<e.length;++o){var c=P(e,o);c<0?"-"==e.charAt(o)&&0==this.signum()&&(i=!0):(a=t*a+c,++s>=n&&(this.dMultiply(r),this.dAddOffset(a,0),s=0,a=0))}s>0&&(this.dMultiply(Math.pow(t,s)),this.dAddOffset(a,0)),i&&w.ZERO.subTo(this,this)},w.prototype.fromNumber=function(e,t,n){if("number"==typeof t)if(e<2)this.fromInt(1);else for(this.fromNumber(e,n),this.testBit(e-1)||this.bitwiseTo(w.ONE.shiftLeft(e-1),F,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(t);)this.dAddOffset(2,0),this.bitLength()>e&&this.subTo(w.ONE.shiftLeft(e-1),this);else{var r=new Array,i=7&e;r.length=1+(e>>3),t.nextBytes(r),i>0?r[0]&=(1<<i)-1:r[0]=0,this.fromString(r,256)}},w.prototype.bitwiseTo=function(e,t,n){var r,i,s=Math.min(e.t,this.t);for(r=0;r<s;++r)n[r]=t(this[r],e[r]);if(e.t<this.t){for(i=e.s&this.DM,r=s;r<this.t;++r)n[r]=t(this[r],i);n.t=this.t}else{for(i=this.s&this.DM,r=s;r<e.t;++r)n[r]=t(i,e[r]);n.t=e.t}n.s=t(this.s,e.s),n.clamp()},w.prototype.changeBit=function(e,t){var n=w.ONE.shiftLeft(e);return this.bitwiseTo(n,t,n),n},w.prototype.addTo=function(e,t){for(var n=0,r=0,i=Math.min(e.t,this.t);n<i;)r+=this[n]+e[n],t[n++]=r&this.DM,r>>=this.DB;if(e.t<this.t){for(r+=e.s;n<this.t;)r+=this[n],t[n++]=r&this.DM,r>>=this.DB;r+=this.s}else{for(r+=this.s;n<e.t;)r+=e[n],t[n++]=r&this.DM,r>>=this.DB;r+=e.s}t.s=r<0?-1:0,r>0?t[n++]=r:r<-1&&(t[n++]=this.DV+r),t.t=n,t.clamp()},w.prototype.dMultiply=function(e){this[this.t]=this.am(0,e-1,this,0,0,this.t),++this.t,this.clamp()},w.prototype.dAddOffset=function(e,t){if(0!=e){for(;this.t<=t;)this[this.t++]=0;for(this[t]+=e;this[t]>=this.DV;)this[t]-=this.DV,++t>=this.t&&(this[this.t++]=0),++this[t]}},w.prototype.multiplyLowerTo=function(e,t,n){var r,i=Math.min(this.t+e.t,t);for(n.s=0,n.t=i;i>0;)n[--i]=0;for(r=n.t-this.t;i<r;++i)n[i+this.t]=this.am(0,e[i],n,i,0,this.t);for(r=Math.min(e.t,t);i<r;++i)this.am(0,e[i],n,i,0,t-i);n.clamp()},w.prototype.multiplyUpperTo=function(e,t,n){--t;var r=n.t=this.t+e.t-t;for(n.s=0;--r>=0;)n[r]=0;for(r=Math.max(t-this.t,0);r<e.t;++r)n[this.t+r-t]=this.am(t-r,e[r],n,0,0,this.t+r-t);n.clamp(),n.drShiftTo(1,n)},w.prototype.modInt=function(e){if(e<=0)return 0;var t=this.DV%e,n=this.s<0?e-1:0;if(this.t>0)if(0==t)n=this[0]%e;else for(var r=this.t-1;r>=0;--r)n=(t*n+this[r])%e;return n},w.prototype.millerRabin=function(e){var t=this.subtract(w.ONE),n=t.getLowestSetBit();if(n<=0)return!1;var r=t.shiftRight(n);(e=e+1>>1)>z.length&&(e=z.length);for(var i=C(),s=0;s<e;++s){i.fromInt(z[Math.floor(Math.random()*z.length)]);var a=i.modPow(r,this);if(0!=a.compareTo(w.ONE)&&0!=a.compareTo(t)){for(var o=1;o++<n&&0!=a.compareTo(t);)if(0==(a=a.modPowInt(2,this)).compareTo(w.ONE))return!1;if(0!=a.compareTo(t))return!1}}return!0},w.prototype.clone=
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function(){var e=C();return this.copyTo(e),e},w.prototype.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},w.prototype.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},w.prototype.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},w.prototype.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},w.prototype.toByteArray=function(){var e=this.t,t=new Array;t[0]=this.s;var n,r=this.DB-e*this.DB%8,i=0;if(e-- >0)for(r<this.DB&&(n=this[e]>>r)!=(this.s&this.DM)>>r&&(t[i++]=n|this.s<<this.DB-r);e>=0;)r<8?(n=(this[e]&(1<<r)-1)<<8-r,n|=this[--e]>>(r+=this.DB-8)):(n=this[e]>>(r-=8)&255,r<=0&&(r+=this.DB,--e)),0!=(128&n)&&(n|=-256),0==i&&(128&this.s)!=(128&n)&&++i,(i>0||n!=this.s)&&(t[i++]=n);return t},w.prototype.equals=function(e){return 0==this.compareTo(e)},w.prototype.min=function(e){return this.compareTo(e)<0?this:e},w.prototype.max=function(e){return this.compareTo(e)>0?this:e},w.prototype.and=function(e){var t=C();return this.bitwiseTo(e,D,t),t},w.prototype.or=function(e){var t=C();return this.bitwiseTo(e,F,t),t},w.prototype.xor=function(e){var t=C();return this.bitwiseTo(e,j,t),t},w.prototype.andNot=function(e){var t=C();return this.bitwiseTo(e,R,t),t},w.prototype.not=function(){for(var e=C(),t=0;t<this.t;++t)e[t]=this.DM&~this[t];return e.t=this.t,e.s=~this.s,e},w.prototype.shiftLeft=function(e){var t=C();return e<0?this.rShiftTo(-e,t):this.lShiftTo(e,t),t},w.prototype.shiftRight=function(e){var t=C();return e<0?this.lShiftTo(-e,t):this.rShiftTo(e,t),t},w.prototype.getLowestSetBit=function(){for(var e=0;e<this.t;++e)if(0!=this[e])return e*this.DB+M(this[e]);return this.s<0?this.t*this.DB:-1},w.prototype.bitCount=function(){for(var e=0,t=this.s&this.DM,n=0;n<this.t;++n)e+=_(this[n]^t);return e},w.prototype.testBit=function(e){var t=Math.floor(e/this.DB);return t>=this.t?0!=this.s:0!=(this[t]&1<<e%this.DB)},w.prototype.setBit=function(e){return this.changeBit(e,F)},w.prototype.clearBit=function(e){return this.changeBit(e,R)},w.prototype.flipBit=function(e){return this.changeBit(e,j)},w.prototype.add=function(e){var t=C();return this.addTo(e,t),t},w.prototype.subtract=function(e){var t=C();return this.subTo(e,t),t},w.prototype.multiply=function(e){var t=C();return this.multiplyTo(e,t),t},w.prototype.divide=function(e){var t=C();return this.divRemTo(e,t,null),t},w.prototype.remainder=function(e){var t=C();return this.divRemTo(e,null,t),t},w.prototype.divideAndRemainder=function(e){var t=C(),n=C();return this.divRemTo(e,t,n),new Array(t,n)},w.prototype.modPow=function(e,t){var n,r,i=e.bitLength(),s=A(1);if(i<=0)return s;n=i<18?1:i<48?3:i<144?4:i<768?5:6,r=i<8?new I(t):t.isEven()?new q(t):new k(t);var a=new Array,o=3,c=n-1,u=(1<<n)-1;if(a[1]=r.convert(this),n>1){var h=C();for(r.sqrTo(a[1],h);o<=u;)a[o]=C(),r.mulTo(h,a[o-2],a[o]),o+=2}var l,d,m=e.t-1,p=!0,f=C();for(i=N(e[m])-1;m>=0;){for(i>=c?l=e[m]>>i-c&u:(l=(e[m]&(1<<i+1)-1)<<c-i,m>0&&(l|=e[m-1]>>this.DB+i-c)),o=n;0==(1&l);)l>>=1,--o;if((i-=o)<0&&(i+=this.DB,--m),p)a[l].copyTo(s),p=!1;else{for(;o>1;)r.sqrTo(s,f),r.sqrTo(f,s),o-=2;o>0?r.sqrTo(s,f):(d=s,s=f,f=d),r.mulTo(f,a[l],s)}for(;m>=0&&0==(e[m]&1<<i);)r.sqrTo(s,f),d=s,s=f,f=d,--i<0&&(i=this.DB-1,--m)}return r.revert(s)},w.prototype.modInverse=function(e){var t=e.isEven();if(this.isEven()&&t||0==e.signum())return w.ZERO;for(var n=e.clone(),r=this.clone(),i=A(1),s=A(0),a=A(0),o=A(1);0!=n.signum();){for(;n.isEven();)n.rShiftTo(1,n),t?(i.isEven()&&s.isEven()||(i.addTo(this,i),s.subTo(e,s)),i.rShiftTo(1,i)):s.isEven()||s.subTo(e,s),s.rShiftTo(1,s);for(;r.isEven();)r.rShiftTo(1,r),t?(a.isEven()&&o.isEven()||(a.addTo(this,a),o.subTo(e,o)),a.rShiftTo(1,a)):o.isEven()||o.subTo(e,o),o.rShiftTo(1,o);n.compareTo(r)>=0?(n.subTo(r,n),t&&i.subTo(a,i),s.subTo(o,s)):(r.subTo(n,r),t&&a.subTo(i,a),o.subTo(s,o))}return 0!=r.compareTo(w.ONE)?w.ZERO:o.compareTo(e)>=0?o.subtract(e):o.signum()<0?(o.addTo(e,o),o.signum()<0?o.add(e):o):o},w.prototype.pow=function(e){return this.exp(e,new B)},w.prototype.gcd=function(e){var t=this.s<0?this.negate():this.clone(),n=e.s<0?e.negate():e.clone();if(t.compareTo(n)<0){var r=t;t=n,n=r}var i=t.getLowestSetBit(),s=n.getLowestSetBit();if(s<0)return t;for(i<s&&(s=i),s>0&&(t.rShiftTo(s,t),n.rShiftTo(s,n));t.signum()>0;)(i=t.getLowestSetBit())>0&&t.rShiftTo(i,t),(i=n.getLowestSetBit())>0&&n.rShiftTo(i,n),t.compareTo(n)>=0?(t.subTo(n,t),t.rShiftTo(1,t)):(n.subTo(t,n),n.rShiftTo(1,n));return s>0&&n.lShiftTo(s,n),n},w.prototype.isProbablePrime=function(e){var t,n=this.abs();if(1==n.t&&n[0]<=z[z.length-1]){for(t=0;t<z.length;++t)if(n[0]==z[t])return!0;return!1}if(n.isEven())return!1;for(t=1;t<z.length;){for(var r=z[t],i=t+1;i<z.length&&r<H;)r*=z[i++];for(r=n.modInt(r);t<i;)if(r%z[t++]==0)return!1}return n.millerRabin(e)},w.prototype.square=function(){var e=C();return this.squareTo(e),e},U.prototype.init=function(e){var t,n,r;for(t=0;t<256;++t)this.S[t]=t;for(n=0,t=0;t<256;++t)n=n+this.S[t]+e[t%e.length]&255,r=this.S[t],this.S[t]=this.S[n],this.S[n]=r;this.i=0,this.j=0},U.prototype.next=function(){var e;return this.i=this.i+1&255,this.j=this.j+this.S[this.i]&255,e=this.S[this.i],this.S[this.i]=this.S[this.j],this.S[this.j]=e,this.S[e+this.S[this.i]&255]};var V,G,W;
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */function K(){!function(e){G[W++]^=255&e,G[W++]^=e>>8&255,G[W++]^=e>>16&255,G[W++]^=e>>24&255,W>=256&&(W-=256)}((new Date).getTime())}if(null==G){var $;if(G=new Array,W=0,void 0!==p&&(void 0!==p.crypto||void 0!==p.msCrypto)){var J=p.crypto||p.msCrypto;if(J.getRandomValues){var Q=new Uint8Array(32);for(J.getRandomValues(Q),$=0;$<32;++$)G[W++]=Q[$]}else if("Netscape"==m.appName&&m.appVersion<"5"){var Y=p.crypto.random(32);for($=0;$<Y.length;++$)G[W++]=255&Y.charCodeAt($)}}for(;W<256;)$=Math.floor(65536*Math.random()),G[W++]=$>>>8,G[W++]=255&$;W=0,K()}function X(){if(null==V){for(K(),(V=new U).init(G),W=0;W<G.length;++W)G[W]=0;W=0}return V.next()}function Z(){}
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function ee(e,t){return new w(e,t)}function te(e,t,n){for(var r="",i=0;r.length<t;)r+=n(String.fromCharCode.apply(String,e.concat([(4278190080&i)>>24,(16711680&i)>>16,(65280&i)>>8,255&i]))),i+=1;return r}function ne(){this.n=null,this.e=0,this.d=null,this.p=null,this.q=null,this.dmp1=null,this.dmq1=null,this.coeff=null}function re(e,t,n){for(var r="",i=0;r.length<t;)r+=n(e+String.fromCharCode.apply(String,[(4278190080&i)>>24,(16711680&i)>>16,(65280&i)>>8,255&i])),i+=1;return r}
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function ie(e,t){this.x=t,this.q=e}function se(e,t,n,r){this.curve=e,this.x=t,this.y=n,this.z=null==r?w.ONE:r,this.zinv=null}function ae(e,t,n){this.q=e,this.a=this.fromBigInteger(t),this.b=this.fromBigInteger(n),this.infinity=new se(this,null,null)}Z.prototype.nextBytes=function(e){var t;for(t=0;t<e.length;++t)e[t]=X()},ne.prototype.doPublic=function(e){return e.modPowInt(this.e,this.n)},ne.prototype.setPublic=function(e,t){if(this.isPublic=!0,this.isPrivate=!1,"string"!=typeof e)this.n=e,this.e=t;else{if(!(null!=e&&null!=t&&e.length>0&&t.length>0))throw"Invalid RSA public key";this.n=ee(e,16),this.e=parseInt(t,16)}},ne.prototype.encrypt=function(e){var t=function(e,t){if(t<e.length+11)throw"Message too long for RSA";for(var n=new Array,r=e.length-1;r>=0&&t>0;){var i=e.charCodeAt(r--);i<128?n[--t]=i:i>127&&i<2048?(n[--t]=63&i|128,n[--t]=i>>6|192):(n[--t]=63&i|128,n[--t]=i>>6&63|128,n[--t]=i>>12|224)}n[--t]=0;for(var s=new Z,a=new Array;t>2;){for(a[0]=0;0==a[0];)s.nextBytes(a);n[--t]=a[0]}return n[--t]=2,n[--t]=0,new w(n)}(e,this.n.bitLength()+7>>3);if(null==t)return null;var n=this.doPublic(t);if(null==n)return null;var r=n.toString(16);return 0==(1&r.length)?r:"0"+r},ne.prototype.encryptOAEP=function(e,t,n){var r=function(e,t,n,r){var i=ce.crypto.MessageDigest,s=ce.crypto.Util,a=null;if(n||(n="sha1"),"string"==typeof n&&(a=i.getCanonicalAlgName(n),r=i.getHashLength(a),n=function(e){return xe(s.hashHex(Ee(e),a))}),e.length+2*r+2>t)throw"Message too long for RSA";var o,c="";for(o=0;o<t-e.length-2*r-2;o+=1)c+="\0";var u=n("")+c+""+e,h=new Array(r);(new Z).nextBytes(h);var l=te(h,u.length,n),d=[];for(o=0;o<u.length;o+=1)d[o]=u.charCodeAt(o)^l.charCodeAt(o);var m=te(d,h.length,n),p=[0];for(o=0;o<h.length;o+=1)p[o+1]=h[o]^m.charCodeAt(o);return new w(p.concat(d))}(e,this.n.bitLength()+7>>3,t,n);if(null==r)return null;var i=this.doPublic(r);if(null==i)return null;var s=i.toString(16);return 0==(1&s.length)?s:"0"+s},ne.prototype.type="RSA",ne.prototype.doPrivate=function(e){if(null==this.p||null==this.q)return e.modPow(this.d,this.n);for(var t=e.mod(this.p).modPow(this.dmp1,this.p),n=e.mod(this.q).modPow(this.dmq1,this.q);t.compareTo(n)<0;)t=t.add(this.p);return t.subtract(n).multiply(this.coeff).mod(this.p).multiply(this.q).add(n)},ne.prototype.setPrivate=function(e,t,n){if(this.isPrivate=!0,"string"!=typeof e)this.n=e,this.e=t,this.d=n;else{if(!(null!=e&&null!=t&&e.length>0&&t.length>0))throw"Invalid RSA private key";this.n=ee(e,16),this.e=parseInt(t,16),this.d=ee(n,16)}},ne.prototype.setPrivateEx=function(e,t,n,r,i,s,a,o){if(this.isPrivate=!0,this.isPublic=!1,null==e)throw"RSASetPrivateEx N == null";if(null==t)throw"RSASetPrivateEx E == null";if(0==e.length)throw"RSASetPrivateEx N.length == 0";if(0==t.length)throw"RSASetPrivateEx E.length == 0";if(!(null!=e&&null!=t&&e.length>0&&t.length>0))throw"Invalid RSA private key in RSASetPrivateEx";this.n=ee(e,16),this.e=parseInt(t,16),this.d=ee(n,16),this.p=ee(r,16),this.q=ee(i,16),this.dmp1=ee(s,16),this.dmq1=ee(a,16),this.coeff=ee(o,16)},ne.prototype.generate=function(e,t){var n=new Z,r=e>>1;this.e=parseInt(t,16);for(var i=new w(t,16),s=e/2-100,a=w.ONE.shiftLeft(s);;){for(;this.p=new w(e-r,1,n),0!=this.p.subtract(w.ONE).gcd(i).compareTo(w.ONE)||!this.p.isProbablePrime(10););for(;this.q=new w(r,1,n),0!=this.q.subtract(w.ONE).gcd(i).compareTo(w.ONE)||!this.q.isProbablePrime(10););if(this.p.compareTo(this.q)<=0){var o=this.p;this.p=this.q,this.q=o}var c=this.q.subtract(this.p).abs();if(!(c.bitLength()<s||c.compareTo(a)<=0)){var u=this.p.subtract(w.ONE),h=this.q.subtract(w.ONE),l=u.multiply(h);if(0==l.gcd(i).compareTo(w.ONE)&&(this.n=this.p.multiply(this.q),this.n.bitLength()==e)){this.d=i.modInverse(l),this.dmp1=this.d.mod(u),this.dmq1=this.d.mod(h),this.coeff=this.q.modInverse(this.p);break}}}this.isPrivate=!0},ne.prototype.decrypt=function(e){if(e.length!=Math.ceil(this.n.bitLength()/4))throw new Error("wrong ctext length");var t=ee(e,16),n=this.doPrivate(t);return null==n?null:
/*! (c) Tom Wu, Kenji Urushima | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function(e,t){for(var n=e.toByteArray(),r=0;r<n.length&&0==n[r];)++r;if(n.length-r!=t-1||2!=n[r])return null;for(++r;0!=n[r];)if(++r>=n.length)return null;for(var i="";++r<n.length;){var s=255&n[r];s<128?i+=String.fromCharCode(s):s>191&&s<224?(i+=String.fromCharCode((31&s)<<6|63&n[r+1]),++r):(i+=String.fromCharCode((15&s)<<12|(63&n[r+1])<<6|63&n[r+2]),r+=2)}return i}(n,this.n.bitLength()+7>>3)},ne.prototype.decryptOAEP=function(e,t,n){if(e.length!=Math.ceil(this.n.bitLength()/4))throw new Error("wrong ctext length");var r=ee(e,16),i=this.doPrivate(r);return null==i?null:function(e,t,n,r){var i=ce.crypto.MessageDigest,s=ce.crypto.Util,a=null;for(n||(n="sha1"),"string"==typeof n&&(a=i.getCanonicalAlgName(n),r=i.getHashLength(a),n=function(e){return xe(s.hashHex(Ee(e),a))}),e=e.toByteArray(),o=0;o<e.length;o+=1)e[o]&=255;for(;e.length<t;)e.unshift(0);if((e=String.fromCharCode.apply(String,e)).length<2*r+2)throw"Cipher too short";var o,c=e.substr(1,r),u=e.substr(r+1),h=re(u,r,n),l=[];for(o=0;o<c.length;o+=1)l[o]=c.charCodeAt(o)^h.charCodeAt(o);var d=re(String.fromCharCode.apply(String,l),e.length-r,n),m=[];for(o=0;o<u.length;o+=1)m[o]=u.charCodeAt(o)^d.charCodeAt(o);if((m=String.fromCharCode.apply(String,m)).substr(0,r)!==n(""))throw"Hash mismatch";var p=(m=m.substr(r)).indexOf("");if((-1!=p?m.substr(0,p).lastIndexOf("\0"):-1)+1!=p)throw"Malformed data";return m.substr(p+1)}(i,this.n.bitLength()+7>>3,t,n)},ie.prototype.equals=function(e){return e==this||this.q.equals(e.q)&&this.x.equals(e.x)},ie.prototype.toBigInteger=function(){return this.x},ie.prototype.negate=function(){return new ie(this.q,this.x.negate().mod(this.q))},ie.prototype.add=function(e){return new ie(this.q,this.x.add(e.toBigInteger()).mod(this.q))},ie.prototype.subtract=function(e){return new ie(this.q,this.x.subtract(e.toBigInteger()).mod(this.q))},ie.prototype.multiply=function(e){return new ie(this.q,this.x.multiply(e.toBigInteger()).mod(this.q))},ie.prototype.square=function(){return new ie(this.q,this.x.square().mod(this.q))},ie.prototype.divide=function(e){return new ie(this.q,this.x.multiply(e.toBigInteger().modInverse(this.q)).mod(this.q))},ie.prototype.sqrt=function(){return new ie(this.q,this.x.sqrt().mod(this.q))},se.prototype.getX=function(){return null==this.zinv&&(this.zinv=this.z.modInverse(this.curve.q)),this.curve.fromBigInteger(this.x.toBigInteger().multiply(this.zinv).mod(this.curve.q))},se.prototype.getY=function(){return null==this.zinv&&(this.zinv=this.z.modInverse(this.curve.q)),this.curve.fromBigInteger(this.y.toBigInteger().multiply(this.zinv).mod(this.curve.q))},se.prototype.equals=function(e){return e==this||(this.isInfinity()?e.isInfinity():e.isInfinity()?this.isInfinity():!!e.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(e.z)).mod(this.curve.q).equals(w.ZERO)&&e.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(e.z)).mod(this.curve.q).equals(w.ZERO))},se.prototype.isInfinity=function(){return null==this.x&&null==this.y||this.z.equals(w.ZERO)&&!this.y.toBigInteger().equals(w.ZERO)},se.prototype.negate=function(){return new se(this.curve,this.x,this.y.negate(),this.z)},se.prototype.add=function(e){if(this.isInfinity())return e;if(e.isInfinity())return this;var t=e.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(e.z)).mod(this.curve.q),n=e.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(e.z)).mod(this.curve.q);if(w.ZERO.equals(n))return w.ZERO.equals(t)?this.twice():this.curve.getInfinity();var r=new w("3"),i=this.x.toBigInteger(),s=this.y.toBigInteger(),a=(e.x.toBigInteger(),e.y.toBigInteger(),n.square()),o=a.multiply(n),c=i.multiply(a),u=t.square().multiply(this.z),h=u.subtract(c.shiftLeft(1)).multiply(e.z).subtract(o).multiply(n).mod(this.curve.q),l=c.multiply(r).multiply(t).subtract(s.multiply(o)).subtract(u.multiply(t)).multiply(e.z).add(t.multiply(o)).mod(this.curve.q),d=o.multiply(this.z).multiply(e.z).mod(this.curve.q);return new se(this.curve,this.curve.fromBigInteger(h),this.curve.fromBigInteger(l),d)},se.prototype.twice=function(){if(this.isInfinity())return this;if(0==this.y.toBigInteger().signum())return this.curve.getInfinity();var e=new w("3"),t=this.x.toBigInteger(),n=this.y.toBigInteger(),r=n.multiply(this.z),i=r.multiply(n).mod(this.curve.q),s=this.curve.a.toBigInteger(),a=t.square().multiply(e);w.ZERO.equals(s)||(a=a.add(this.z.square().multiply(s)));var o=(a=a.mod(this.curve.q)).square().subtract(t.shiftLeft(3).multiply(i)).shiftLeft(1).multiply(r).mod(this.curve.q),c=a.multiply(e).multiply(t).subtract(i.shiftLeft(1)).shiftLeft(2).multiply(i).subtract(a.square().multiply(a)).mod(this.curve.q),u=r.square().multiply(r).shiftLeft(3).mod(this.curve.q);return new se(this.curve,this.curve.fromBigInteger(o),this.curve.fromBigInteger(c),u)},se.prototype.multiply=function(e){if(this.isInfinity())return this;if(0==e.signum())return this.curve.getInfinity();var t,n=e,r=n.multiply(new w("3")),i=this.negate(),s=this,a=this.curve.q.subtract(e),o=a.multiply(new w("3")),c=new se(this.curve,this.x,this.y),u=c.negate();for(t=r.bitLength()-2;t>0;--t){s=s.twice();var h=r.testBit(t);h!=n.testBit(t)&&(s=s.add(h?this:i))}for(t=o.bitLength()-2;t>0;--t){c=c.twice();var l=o.testBit(t);l!=a.testBit(t)&&(c=c.add(l?c:u))}return s},se.prototype.multiplyTwo=function(e,t,n){var r;r=e.bitLength()>n.bitLength()?e.bitLength()-1:n.bitLength()-1;for(var i=this.curve.getInfinity(),s=this.add(t);r>=0;)i=i.twice(),e.testBit(r)?i=n.testBit(r)?i.add(s):i.add(this):n.testBit(r)&&(i=i.add(t)),--r;return i},ae.prototype.getQ=function(){return this.q},ae.prototype.getA=function(){return this.a},ae.prototype.getB=function(){return this.b},ae.prototype.equals=function(e){return e==this||this.q.equals(e.q)&&this.a.equals(e.a)&&this.b.equals(e.b)},ae.prototype.getInfinity=function(){return this.infinity},ae.prototype.fromBigInteger=function(e){return new ie(this.q,e)},ae.prototype.decodePointHex=function(e){switch(parseInt(e.substr(0,2),16)){case 0:return this.infinity;case 2:case 3:var t=e.substr(0,2),n=(e.substr(2),this.fromBigInteger(new w(o,16))),r=this.getA(),i=this.getB(),s=n.square().add(r).multiply(n).add(i).sqrt();return"03"==t&&(s=s.negate()),new se(this,n,s);case 4:case 6:case 7:var a=(e.length-2)/2,o=e.substr(2,a),c=e.substr(a+2,a);return new se(this,this.fromBigInteger(new w(o,16)),this.fromBigInteger(new w(c,16)));default:return null}},
/*! (c) Stefan Thomas | https://github.com/bitcoinjs/bitcoinjs-lib
 */
ie.prototype.getByteLength=function(){return Math.floor((this.toBigInteger().bitLength()+7)/8)},se.prototype.getEncoded=function(e){var t=function(e,t){var n=e.toByteArrayUnsigned();if(t<n.length)n=n.slice(n.length-t);else for(;t>n.length;)n.unshift(0);return n},n=this.getX().toBigInteger(),r=this.getY().toBigInteger(),i=t(n,32);return e?r.isEven()?i.unshift(2):i.unshift(3):(i.unshift(4),i=i.concat(t(r,32))),i},se.decodeFrom=function(e,t){t[0];var n=t.length-1,r=t.slice(1,1+n/2),i=t.slice(1+n/2,1+n);r.unshift(0),i.unshift(0);var s=new w(r),a=new w(i);return new se(e,e.fromBigInteger(s),e.fromBigInteger(a))},se.decodeFromHex=function(e,t){t.substr(0,2);var n=t.length-2,r=t.substr(2,n/2),i=t.substr(2+n/2,n/2),s=new w(r,16),a=new w(i,16);return new se(e,e.fromBigInteger(s),e.fromBigInteger(a))},se.prototype.add2D=function(e){if(this.isInfinity())return e;if(e.isInfinity())return this;if(this.x.equals(e.x))return this.y.equals(e.y)?this.twice():this.curve.getInfinity();var t=e.x.subtract(this.x),n=e.y.subtract(this.y).divide(t),r=n.square().subtract(this.x).subtract(e.x),i=n.multiply(this.x.subtract(r)).subtract(this.y);return new se(this.curve,r,i)},se.prototype.twice2D=function(){if(this.isInfinity())return this;if(0==this.y.toBigInteger().signum())return this.curve.getInfinity();var e=this.curve.fromBigInteger(w.valueOf(2)),t=this.curve.fromBigInteger(w.valueOf(3)),n=this.x.square().multiply(t).add(this.curve.a).divide(this.y.multiply(e)),r=n.square().subtract(this.x.multiply(e)),i=n.multiply(this.x.subtract(r)).subtract(this.y);return new se(this.curve,r,i)},se.prototype.multiply2D=function(e){if(this.isInfinity())return this;if(0==e.signum())return this.curve.getInfinity();var t,n=e,r=n.multiply(new w("3")),i=this.negate(),s=this;for(t=r.bitLength()-2;t>0;--t){s=s.twice();var a=r.testBit(t);a!=n.testBit(t)&&(s=s.add2D(a?this:i))}return s},se.prototype.isOnCurve=function(){var e=this.getX().toBigInteger(),t=this.getY().toBigInteger(),n=this.curve.getA().toBigInteger(),r=this.curve.getB().toBigInteger(),i=this.curve.getQ(),s=t.multiply(t).mod(i),a=e.multiply(e).multiply(e).add(n.multiply(e)).add(r).mod(i);return s.equals(a)},se.prototype.toString=function(){return"("+this.getX().toBigInteger().toString()+","+this.getY().toBigInteger().toString()+")"},se.prototype.validate=function(){var e=this.curve.getQ();if(this.isInfinity())throw new Error("Point is at infinity.");var t=this.getX().toBigInteger(),n=this.getY().toBigInteger();if(t.compareTo(w.ONE)<0||t.compareTo(e.subtract(w.ONE))>0)throw new Error("x coordinate out of bounds");if(n.compareTo(w.ONE)<0||n.compareTo(e.subtract(w.ONE))>0)throw new Error("y coordinate out of bounds");if(!this.isOnCurve())throw new Error("Point is not on the curve.");if(this.multiply(e).isInfinity())throw new Error("Point is not a scalar multiple of G.");return!0};
/*! Mike Samuel (c) 2009 | code.google.com/p/json-sans-eval
 */
var oe=function(){var e=new RegExp('(?:false|true|null|[\\{\\}\\[\\]]|(?:-?\\b(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][+-]?[0-9]+)?\\b)|(?:"(?:[^\\0-\\x08\\x0a-\\x1f"\\\\]|\\\\(?:["/\\\\bfnrt]|u[0-9A-Fa-f]{4}))*"))',"g"),t=new RegExp("\\\\(?:([^u])|u(.{4}))","g"),n={'"':'"',"/":"/","\\":"\\",b:"\b",f:"\f",n:"\n",r:"\r",t:"\t"};function r(e,t,r){return t?n[t]:String.fromCharCode(parseInt(r,16))}var i=new String(""),s=Object.hasOwnProperty;return function(n,a){var o,c,u=n.match(e),h=u[0],l=!1;"{"===h?o={}:"["===h?o=[]:(o=[],l=!0);for(var d=[o],m=1-l,p=u.length;m<p;++m){var f;switch((h=u[m]).charCodeAt(0)){default:(f=d[0])[c||f.length]=+h,c=void 0;break;case 34:if(-1!==(h=h.substring(1,h.length-1)).indexOf("\\")&&(h=h.replace(t,r)),f=d[0],!c){if(!(f instanceof Array)){c=h||i;break}c=f.length}f[c]=h,c=void 0;break;case 91:f=d[0],d.unshift(f[c||f.length]=[]),c=void 0;break;case 93:d.shift();break;case 102:(f=d[0])[c||f.length]=!1,c=void 0;break;case 110:(f=d[0])[c||f.length]=null,c=void 0;break;case 116:(f=d[0])[c||f.length]=!0,c=void 0;break;case 123:f=d[0],d.unshift(f[c||f.length]={}),c=void 0;break;case 125:d.shift()}}if(l){if(1!==d.length)throw new Error;o=o[0]}else if(d.length)throw new Error;if(a){var g=function(e,t){var n=e[t];if(n&&"object"==typeof n){var r=null;for(var i in n)if(s.call(n,i)&&n!==e){var o=g(n,i);void 0!==o?n[i]=o:(r||(r=[]),r.push(i))}if(r)for(var c=r.length;--c>=0;)delete n[r[c]]}return a.call(e,t,n)};o=g({"":o},"")}return o}}();void 0!==ce&&ce||(ce={}),void 0!==ce.asn1&&ce.asn1||(ce.asn1={}),ce.asn1.ASN1Util=new function(){this.integerToByteHex=function(e){var t=e.toString(16);return t.length%2==1&&(t="0"+t),t},this.bigIntToMinTwosComplementsHex=function(e){var t=e.toString(16);if("-"!=t.substr(0,1))t.length%2==1?t="0"+t:t.match(/^[0-7]/)||(t="00"+t);else{var n=t.substr(1).length;n%2==1?n+=1:t.match(/^[0-7]/)||(n+=2);for(var r="",i=0;i<n;i++)r+="f";t=new w(r,16).xor(e).add(w.ONE).toString(16).replace(/^-/,"")}return t},this.getPEMStringFromHex=function(e,t){return Ae(e,t)},this.newObject=function(e){var t=ce.asn1,n=t.ASN1Object,r=t.DERBoolean,i=t.DERInteger,s=t.DERBitString,a=t.DEROctetString,o=t.DERNull,c=t.DERObjectIdentifier,u=t.DEREnumerated,h=t.DERUTF8String,l=t.DERNumericString,d=t.DERPrintableString,m=t.DERTeletexString,p=t.DERIA5String,f=t.DERUTCTime,g=t.DERGeneralizedTime,y=t.DERVisibleString,v=t.DERBMPString,b=t.DERSequence,S=t.DERSet,w=t.DERTaggedObject,C=t.ASN1Util.newObject;if(e instanceof t.ASN1Object)return e;var x=Object.keys(e);if(1!=x.length)throw new Error("key of param shall be only one.");var E=x[0];if(-1==":asn1:bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:visstr:bmpstr:seq:set:tag:".indexOf(":"+E+":"))throw new Error("undefined key: "+E);if("bool"==E)return new r(e[E]);if("int"==E)return new i(e[E]);if("bitstr"==E)return new s(e[E]);if("octstr"==E)return new a(e[E]);if("null"==E)return new o(e[E]);if("oid"==E)return new c(e[E]);if("enum"==E)return new u(e[E]);if("utf8str"==E)return new h(e[E]);if("numstr"==E)return new l(e[E]);if("prnstr"==E)return new d(e[E]);if("telstr"==E)return new m(e[E]);if("ia5str"==E)return new p(e[E]);if("utctime"==E)return new f(e[E]);if("gentime"==E)return new g(e[E]);if("visstr"==E)return new y(e[E]);if("bmpstr"==E)return new v(e[E]);if("asn1"==E)return new n(e[E]);if("seq"==E){for(var O=e[E],T=[],P=0;P<O.length;P++){var A=C(O[P]);T.push(A)}return new b({array:T})}if("set"==E){for(O=e[E],T=[],P=0;P<O.length;P++){A=C(O[P]);T.push(A)}return new S({array:T})}if("tag"==E){var N=e[E];if("[object Array]"===Object.prototype.toString.call(N)&&3==N.length){var I=C(N[2]);return new w({tag:N[0],explicit:N[1],obj:I})}return new w(N)}},this.jsonToASN1HEX=function(e){return this.newObject(e).tohex()}},ce.asn1.ASN1Util.oidHexToInt=function(e){for(var t="",n=parseInt(e.substr(0,2),16),r=(t=Math.floor(n/40)+"."+n%40,""),i=2;i<e.length;i+=2){var s=("00000000"+parseInt(e.substr(i,2),16).toString(2)).slice(-8);if(r+=s.substr(1,7),"0"==s.substr(0,1))t=t+"."+new w(r,2).toString(10),r=""}return t},ce.asn1.ASN1Util.oidIntToHex=function(e){var t=function(e){var t=e.toString(16);return 1==t.length&&(t="0"+t),t},n=function(e){var n="",r=new w(e,10).toString(2),i=7-r.length%7;7==i&&(i=0);for(var s="",a=0;a<i;a++)s+="0";r=s+r;for(a=0;a<r.length-1;a+=7){var o=r.substr(a,7);a!=r.length-7&&(o="1"+o),n+=t(parseInt(o,2))}return n};if(!e.match(/^[0-9.]+$/))throw"malformed oid string: "+e;var r="",i=e.split("."),s=40*parseInt(i[0])+parseInt(i[1]);r+=t(s),i.splice(0,2);for(var a=0;a<i.length;a++)r+=n(i[a]);return r},ce.asn1.ASN1Object=function(e){this.params=null,this.getLengthHexFromValue=function(){if(void 0===this.hV||null==this.hV)throw new Error("this.hV is null or undefined");if(this.hV.length%2==1)throw new Error("value hex must be even length: n="+"".length+",v="+this.hV);var e=this.hV.length/2,t=e.toString(16);if(t.length%2==1&&(t="0"+t),e<128)return t;var n=t.length/2;if(n>15)throw new Error("ASN.1 length too long to represent by 8x: n = "+e.toString(16));return(128+n).toString(16)+t},this.tohex=function(){return(null==this.hTLV||this.isModified)&&(this.hV=this.getFreshValueHex(),this.hL=this.getLengthHexFromValue(),this.hTLV=this.hT+this.hL+this.hV,this.isModified=!1),this.hTLV},this.getEncodedHex=function(){return this.tohex()},this.getValueHex=function(){return this.tohex(),this.hV},this.getFreshValueHex=function(){return""},this.setByParam=function(e){this.params=e},null!=e&&null!=e.tlv&&(this.hTLV=e.tlv,this.isModified=!1)},ce.asn1.DERAbstractString=function(e){ce.asn1.DERAbstractString.superclass.constructor.call(this);this.getString=function(){return this.s},this.setString=function(e){this.hTLV=null,this.isModified=!0,this.s=e,this.hV=Se(this.s).toLowerCase()},this.setStringHex=function(e){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=e},this.getFreshValueHex=function(){return this.hV},void 0!==e&&("string"==typeof e?this.setString(e):void 0!==e.str?this.setString(e.str):void 0!==e.hex&&this.setStringHex(e.hex))},Xe(ce.asn1.DERAbstractString,ce.asn1.ASN1Object),ce.asn1.DERAbstractTime=function(e){ce.asn1.DERAbstractTime.superclass.constructor.call(this);this.localDateToUTC=function(e){var t=e.getTime()+6e4*e.getTimezoneOffset();return new Date(t)},this.formatDate=function(e,t,n){var r=this.zeroPadding,i=this.localDateToUTC(e),s=String(i.getFullYear());"utc"==t&&(s=s.substr(2,2));var a=s+r(String(i.getMonth()+1),2)+r(String(i.getDate()),2)+r(String(i.getHours()),2)+r(String(i.getMinutes()),2)+r(String(i.getSeconds()),2);if(!0===n){var o=i.getMilliseconds();if(0!=o){var c=r(String(o),3);a=a+"."+(c=c.replace(/[0]+$/,""))}}return a+"Z"},this.zeroPadding=function(e,t){return e.length>=t?e:new Array(t-e.length+1).join("0")+e},this.setByParam=function(e){this.hV=null,this.hTLV=null,this.params=e},this.getString=function(){},this.setString=function(e){this.hTLV=null,this.isModified=!0,null==this.params&&(this.params={}),this.params.str=e},this.setByDate=function(e){this.hTLV=null,this.isModified=!0,null==this.params&&(this.params={}),this.params.date=e},this.setByDateValue=function(e,t,n,r,i,s){var a=new Date(Date.UTC(e,t-1,n,r,i,s,0));this.setByDate(a)},this.getFreshValueHex=function(){return this.hV}},Xe(ce.asn1.DERAbstractTime,ce.asn1.ASN1Object),ce.asn1.DERAbstractStructured=function(e){ce.asn1.DERAbstractString.superclass.constructor.call(this);this.setByASN1ObjectArray=function(e){this.hTLV=null,this.isModified=!0,this.asn1Array=e},this.appendASN1Object=function(e){this.hTLV=null,this.isModified=!0,this.asn1Array.push(e)},this.asn1Array=new Array,void 0!==e&&void 0!==e.array&&(this.asn1Array=e.array)},Xe(ce.asn1.DERAbstractStructured,ce.asn1.ASN1Object),ce.asn1.DERBoolean=function(e){ce.asn1.DERBoolean.superclass.constructor.call(this),this.hT="01",this.hTLV=0==e?"010100":"0101ff"},Xe(ce.asn1.DERBoolean,ce.asn1.ASN1Object),ce.asn1.DERInteger=function(e){ce.asn1.DERInteger.superclass.constructor.call(this),this.hT="02",this.setByBigInteger=function(e){this.hTLV=null,this.isModified=!0,this.hV=ce.asn1.ASN1Util.bigIntToMinTwosComplementsHex(e)},this.setByInteger=function(e){var t=new w(String(e),10);this.setByBigInteger(t)},this.setValueHex=function(e){this.hV=e},this.getFreshValueHex=function(){return this.hV},void 0!==e&&(void 0!==e.bigint?this.setByBigInteger(e.bigint):void 0!==e.int?this.setByInteger(e.int):"number"==typeof e?this.setByInteger(e):void 0!==e.hex&&this.setValueHex(e.hex))},Xe(ce.asn1.DERInteger,ce.asn1.ASN1Object),ce.asn1.DERBitString=function(e){if(void 0!==e&&void 0!==e.obj){var t=ce.asn1.ASN1Util.newObject(e.obj);e.hex="00"+t.tohex()}ce.asn1.DERBitString.superclass.constructor.call(this),this.hT="03",this.setHexValueIncludingUnusedBits=function(e){this.hTLV=null,this.isModified=!0,this.hV=e},this.setUnusedBitsAndHexValue=function(e,t){if(e<0||7<e)throw"unused bits shall be from 0 to 7: u = "+e;var n="0"+e;this.hTLV=null,this.isModified=!0,this.hV=n+t},this.setByBinaryString=function(e){var t=8-(e=e.replace(/0+$/,"")).length%8;8==t&&(t=0),e+="0000000".substr(0,t);for(var n="",r=0;r<e.length-1;r+=8){var i=e.substr(r,8),s=parseInt(i,2).toString(16);1==s.length&&(s="0"+s),n+=s}this.hTLV=null,this.isModified=!0,this.hV="0"+t+n},this.setByBooleanArray=function(e){for(var t="",n=0;n<e.length;n++)1==e[n]?t+="1":t+="0";this.setByBinaryString(t)},this.newFalseArray=function(e){for(var t=new Array(e),n=0;n<e;n++)t[n]=!1;return t},this.getFreshValueHex=function(){return this.hV},void 0!==e&&("string"==typeof e&&e.toLowerCase().match(/^[0-9a-f]+$/)?this.setHexValueIncludingUnusedBits(e):void 0!==e.hex?this.setHexValueIncludingUnusedBits(e.hex):void 0!==e.bin?this.setByBinaryString(e.bin):void 0!==e.array&&this.setByBooleanArray(e.array))},Xe(ce.asn1.DERBitString,ce.asn1.ASN1Object),ce.asn1.DEROctetString=function(e){if(void 0!==e&&void 0!==e.obj){var t=ce.asn1.ASN1Util.newObject(e.obj);e.hex=t.tohex()}ce.asn1.DEROctetString.superclass.constructor.call(this,e),this.hT="04"},Xe(ce.asn1.DEROctetString,ce.asn1.DERAbstractString),ce.asn1.DERNull=function(){ce.asn1.DERNull.superclass.constructor.call(this),this.hT="05",this.hTLV="0500"},Xe(ce.asn1.DERNull,ce.asn1.ASN1Object),ce.asn1.DERObjectIdentifier=function(e){ce.asn1.DERObjectIdentifier.superclass.constructor.call(this),this.hT="06",this.setValueHex=function(e){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=e},this.setValueOidString=function(e){var t=Ge(e);if(null==t)throw new Error("malformed oid string: "+e);this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.setValueName=function(e){var t=ce.asn1.x509.OID.name2oid(e);if(""===t)throw new Error("DERObjectIdentifier oidName undefined: "+e);this.setValueOidString(t)},this.setValueNameOrOid=function(e){e.match(/^[0-2].[0-9.]+$/)?this.setValueOidString(e):this.setValueName(e)},this.getFreshValueHex=function(){return this.hV},this.setByParam=function(e){"string"==typeof e?this.setValueNameOrOid(e):void 0!==e.oid?this.setValueNameOrOid(e.oid):void 0!==e.name?this.setValueNameOrOid(e.name):void 0!==e.hex&&this.setValueHex(e.hex)},void 0!==e&&this.setByParam(e)},Xe(ce.asn1.DERObjectIdentifier,ce.asn1.ASN1Object),ce.asn1.DEREnumerated=function(e){ce.asn1.DEREnumerated.superclass.constructor.call(this),this.hT="0a",this.setByBigInteger=function(e){this.hTLV=null,this.isModified=!0,this.hV=ce.asn1.ASN1Util.bigIntToMinTwosComplementsHex(e)},this.setByInteger=function(e){var t=new w(String(e),10);this.setByBigInteger(t)},this.setValueHex=function(e){this.hV=e},this.getFreshValueHex=function(){return this.hV},void 0!==e&&(void 0!==e.int?this.setByInteger(e.int):"number"==typeof e?this.setByInteger(e):void 0!==e.hex&&this.setValueHex(e.hex))},Xe(ce.asn1.DEREnumerated,ce.asn1.ASN1Object),ce.asn1.DERUTF8String=function(e){ce.asn1.DERUTF8String.superclass.constructor.call(this,e),this.hT="0c"},Xe(ce.asn1.DERUTF8String,ce.asn1.DERAbstractString),ce.asn1.DERNumericString=function(e){ce.asn1.DERNumericString.superclass.constructor.call(this,e),this.hT="12"},Xe(ce.asn1.DERNumericString,ce.asn1.DERAbstractString),ce.asn1.DERPrintableString=function(e){ce.asn1.DERPrintableString.superclass.constructor.call(this,e),this.hT="13"},Xe(ce.asn1.DERPrintableString,ce.asn1.DERAbstractString),ce.asn1.DERTeletexString=function(e){ce.asn1.DERTeletexString.superclass.constructor.call(this,e),this.hT="14"},Xe(ce.asn1.DERTeletexString,ce.asn1.DERAbstractString),ce.asn1.DERIA5String=function(e){ce.asn1.DERIA5String.superclass.constructor.call(this,e),this.hT="16"},Xe(ce.asn1.DERIA5String,ce.asn1.DERAbstractString),ce.asn1.DERVisibleString=function(e){ce.asn1.DERIA5String.superclass.constructor.call(this,e),this.hT="1a"},Xe(ce.asn1.DERVisibleString,ce.asn1.DERAbstractString),ce.asn1.DERBMPString=function(e){ce.asn1.DERBMPString.superclass.constructor.call(this,e),this.hT="1e"},Xe(ce.asn1.DERBMPString,ce.asn1.DERAbstractString),ce.asn1.DERUTCTime=function(e){ce.asn1.DERUTCTime.superclass.constructor.call(this,e),this.hT="17",this.params=void 0,this.getFreshValueHex=function(){var e=this.params;if(null==this.params&&(e={date:new Date}),"string"==typeof e){if(!e.match(/^[0-9]{12}Z$/)&&!e.match(/^[0-9]{12}\.[0-9]+Z$/))throw new Error("malformed string for UTCTime: "+e);this.hV=fe(e)}else if(null!=e.str)this.hV=fe(e.str);else if(null==e.date&&1==e.millis){var t=new Date;this.hV=fe(this.formatDate(t,"utc",!0))}else if(null!=e.date&&e.date instanceof Date){var n=!0===e.millis;this.hV=fe(this.formatDate(e.date,"utc",n))}else e instanceof Date&&(this.hV=fe(this.formatDate(e,"utc")));if(null==this.hV)throw new Error("parameter not specified properly for UTCTime");return this.hV},null!=e&&this.setByParam(e)},Xe(ce.asn1.DERUTCTime,ce.asn1.DERAbstractTime),ce.asn1.DERGeneralizedTime=function(e){ce.asn1.DERGeneralizedTime.superclass.constructor.call(this,e),this.hT="18",this.params=e,this.getFreshValueHex=function(){var e=this.params;if(null==this.params&&(e={date:new Date}),"string"==typeof e){if(!e.match(/^[0-9]{14}Z$/)&&!e.match(/^[0-9]{14}\.[0-9]+Z$/))throw new Error("malformed string for GeneralizedTime: "+e);this.hV=fe(e)}else if(null!=e.str)this.hV=fe(e.str);else if(null==e.date&&1==e.millis){var t=new Date;this.hV=fe(this.formatDate(t,"gen",!0))}else if(null!=e.date&&e.date instanceof Date){var n=!0===e.millis;this.hV=fe(this.formatDate(e.date,"gen",n))}else e instanceof Date&&(this.hV=fe(this.formatDate(e,"gen")));if(null==this.hV)throw new Error("parameter not specified properly for GeneralizedTime");return this.hV},null!=e&&this.setByParam(e)},Xe(ce.asn1.DERGeneralizedTime,ce.asn1.DERAbstractTime),ce.asn1.DERSequence=function(e){ce.asn1.DERSequence.superclass.constructor.call(this,e),this.hT="30",this.getFreshValueHex=function(){for(var e="",t=0;t<this.asn1Array.length;t++){e+=this.asn1Array[t].tohex()}return this.hV=e,this.hV}},Xe(ce.asn1.DERSequence,ce.asn1.DERAbstractStructured),ce.asn1.DERSet=function(e){ce.asn1.DERSet.superclass.constructor.call(this,e),this.hT="31",this.sortFlag=!0,this.getFreshValueHex=function(){for(var e=new Array,t=0;t<this.asn1Array.length;t++){var n=this.asn1Array[t];e.push(n.tohex())}return 1==this.sortFlag&&e.sort(),this.hV=e.join(""),this.hV},void 0!==e&&void 0!==e.sortflag&&0==e.sortflag&&(this.sortFlag=!1)},Xe(ce.asn1.DERSet,ce.asn1.DERAbstractStructured),ce.asn1.DERTaggedObject=function(e){ce.asn1.DERTaggedObject.superclass.constructor.call(this);var t=ce.asn1,n=le,r=n.getV,i=(n.isASN1HEX,t.ASN1Util.newObject);this.hT="a0",this.hV="",this.isExplicit=!0,this.asn1Object=null,this.params={tag:"a0",explicit:!0},this.setASN1Object=function(e,t,n){this.params={tag:t,explicit:e,obj:n}},this.getFreshValueHex=function(){var e=this.params;if(null==e.explicit&&(e.explicit=!0),null!=e.tage&&(e.tag=e.tage,e.explicit=!0),null!=e.tagi&&(e.tag=e.tagi,e.explicit=!1),null!=e.str)this.hV=Se(e.str);else if(null!=e.hex)this.hV=e.hex;else{if(null==e.obj)throw new Error("str, hex nor obj not specified");var n;e.obj instanceof t.ASN1Object?n=e.obj.tohex():"object"==typeof e.obj&&(n=i(e.obj).tohex()),e.explicit?this.hV=n:this.hV=r(n,0)}return null==e.tag&&(e.tag="a0"),this.hT=e.tag,this.hTLV=null,this.isModified=!0,this.hV},this.setByParam=function(e){this.params=e},void 0!==e&&this.setByParam(e)},Xe(ce.asn1.DERTaggedObject,ce.asn1.ASN1Object);var ce,ue,he,le=new function(){};function de(e){for(var t=new Array,n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}function me(e){for(var t="",n=0;n<e.length;n++)t+=String.fromCharCode(e[n]);return t}function pe(e){for(var t="",n=0;n<e.length;n++){var r=e[n].toString(16);1==r.length&&(r="0"+r),t+=r}return t}function fe(e){return pe(de(e))}function ge(e){return e=(e=(e=e.replace(/\=/g,"")).replace(/\+/g,"-")).replace(/\//g,"_")}function ye(e){return e.length%4==2?e+="==":e.length%4==3&&(e+="="),e=(e=e.replace(/-/g,"+")).replace(/_/g,"/")}function ve(e){return e.length%2==1&&(e="0"+e),ge(v(e))}function be(e){return b(ye(e))}function Se(e){return De(ze(e)).toLowerCase()}function we(e){try{return decodeURIComponent(Fe(e))}catch(e){return null}}function Ce(e){return we(function(e){for(var t=e.match(/.{1,2}/g),n=[],r=0;r<t.length;r++){var i=parseInt(t[r],16);161<=i&&i<=191?(n.push("c2"),n.push(t[r])):192<=i&&i<=255?(n.push("c3"),n.push((i-64).toString(16))):n.push(t[r])}return n.join("")}(e))}function xe(e){for(var t="",n=0;n<e.length-1;n+=2)t+=String.fromCharCode(parseInt(e.substr(n,2),16));return t}function Ee(e){for(var t="",n=0;n<e.length;n++)t+=("0"+e.charCodeAt(n).toString(16)).slice(-2);return t}function Oe(e){return v(e)}function Te(e){var t=Oe(e).replace(/(.{64})/g,"$1\r\n");return t=t.replace(/\r\n$/,"")}function Pe(e){return b(e.replace(/[^0-9A-Za-z\/+=]*/g,""))}function Ae(e,t){return"-----BEGIN "+t+"-----\r\n"+Te(e)+"\r\n-----END "+t+"-----\r\n"}function Ne(e,t){if(-1==e.indexOf("-----BEGIN "))throw"can't find PEM header: "+t;return Pe(e=void 0!==t?(e=e.replace(new RegExp("^[^]*-----BEGIN "+t+"-----"),"")).replace(new RegExp("-----END "+t+"-----[^]*$"),""):(e=e.replace(/^[^]*-----BEGIN [^-]+-----/,"")).replace(/-----END [^-]+-----[^]*$/,""))}function Ie(e){var t,n,r,i,s,a,o,c,u,h,l;if(l=e.match(/^(\d{2}|\d{4})(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)(|\.\d+)Z$/))return c=l[1],t=parseInt(c),2===c.length&&(50<=t&&t<100?t=1900+t:0<=t&&t<50&&(t=2e3+t)),n=parseInt(l[2])-1,r=parseInt(l[3]),i=parseInt(l[4]),s=parseInt(l[5]),a=parseInt(l[6]),o=0,""!==(u=l[7])&&(h=(u.substr(1)+"00").substr(0,3),o=parseInt(h)),Date.UTC(t,n,r,i,s,a,o);throw new Error("unsupported zulu format: "+e)}function ke(e){return Math.round(Ie(e)/1e3)}function De(e){return e.replace(/%/g,"")}function Fe(e){return e.replace(/(..)/g,"%$1")}function je(e){var t="malformed IPv6 address";if(!e.match(/^[0-9A-Fa-f:]+$/))throw t;var n=(e=e.toLowerCase()).split(":").length-1;if(n<2)throw t;var r=":".repeat(7-n+2),i=(e=e.replace("::",r)).split(":");if(8!=i.length)throw t;for(var s=0;s<8;s++)i[s]=("0000"+i[s]).slice(-4);return i.join("")}function Re(e){if(!e.match(/^[0-9A-Fa-f]{32}$/))throw new Error("malformed IPv6 address: "+e);var t=(e=e.toLowerCase()).match(/.{1,4}/g),n=(e=":"+(t=(t=t.map((function(e){return e.replace(/^0+/,"")}))).map((function(e){return""==e?"0":e}))).join(":")+":").match(/:(0:){2,}/g);if(null==n)return e.slice(1,-1);var r=n.sort().slice(-1)[0];return"::"!=(e=e.replace(r.substr(0,r.length-1),":")).substr(0,2)&&(e=e.substr(1)),"::"!=e.substr(-2,2)&&(e=e.substr(0,e.length-1)),e}function Me(e){var t=new Error("malformed hex value");if(!e.match(/^([0-9A-Fa-f][0-9A-Fa-f]){1,}$/))throw t;if(8==e.length){try{return parseInt(e.substr(0,2),16)+"."+parseInt(e.substr(2,2),16)+"."+parseInt(e.substr(4,2),16)+"."+parseInt(e.substr(6,2),16)}catch(e){throw t}}else{if(16!=e.length){if(32==e.length)return Re(e);if(64==e.length){try{return Re(e.substr(0,32))+"/"+_e(e.substr(32))}catch(e){throw t}return}return e}try{return Me(e.substr(0,8))+"/"+_e(e.substr(8))}catch(e){throw t}}}function _e(e){var t,n=new Error("malformed mask");try{t=new w(e,16).toString(2)}catch(e){throw n}if(!t.match(/^1*0*$/))throw n;return t.replace(/0+$/,"").length}function Be(e){var t=new Error("malformed IP address");if(!(e=e.toLowerCase(e)).match(/^[0-9a-f.:/]+$/))throw t;if(!e.match(/^[0-9.]+$/)){var n;if(e.match(/^[0-9.]+\/[0-9]+$/))return Be((n=e.split("/"))[0])+Le(parseInt(n[1]),32);if(e.match(/^[0-9a-f:]+$/)&&-1!==e.indexOf(":"))return je(e);if(e.match(/^[0-9a-f:]+\/[0-9]+$/)&&-1!==e.indexOf(":"))return je((n=e.split("/"))[0])+Le(parseInt(n[1]),128);throw t}var r=e.split(".");if(4!==r.length)throw t;var i="";try{for(var s=0;s<4;s++){i+=("0"+parseInt(r[s]).toString(16)).slice(-2)}return i}catch(e){throw t}}function Le(e,t){return 32==t&&0==e?"00000000":128==t&&0==e?"00000000000000000000000000000000":new w(Array(e+1).join("1")+Array(t-e+1).join("0"),2).toString(16)}function qe(e){return e.match(/.{4}/g).map((function(e){var t=parseInt(e.substr(0,2),16),n=parseInt(e.substr(2),16);if(0==t&n<128)return String.fromCharCode(n);if(t<8){var r=128|63&n;return we((192|(7&t)<<3|(192&n)>>6).toString(16)+r.toString(16))}r=128|(15&t)<<2|(192&n)>>6;var i=128|63&n;return we((224|(240&t)>>4).toString(16)+r.toString(16)+i.toString(16))})).join("")}function ze(e){for(var t=encodeURIComponent(e),n="",r=0;r<t.length;r++)"%"==t[r]?(n+=t.substr(r,3),r+=2):n=n+"%"+fe(t[r]);return n}function He(e){return!(e.length%2!=0||!e.match(/^[0-9a-f]+$/)&&!e.match(/^[0-9A-F]+$/))}function Ue(e){return!!e.match(/^[0-9A-Za-z-_.]+$/)}function Ve(e){return e.length%2==1?"0"+e:e.substr(0,1)>"7"?"00"+e:e}le.getLblen=function(e,t){if("8"!=e.substr(t+2,1))return 1;var n=parseInt(e.substr(t+3,1));return 0==n?-1:0<n&&n<10?n+1:-2},le.getL=function(e,t){var n=le.getLblen(e,t);return n<1?"":e.substr(t+2,2*n)},le.getVblen=function(e,t){var n;return""==(n=le.getL(e,t))?-1:("8"===n.substr(0,1)?new w(n.substr(2),16):new w(n,16)).intValue()},le.getVidx=function(e,t){var n=le.getLblen(e,t);return n<0?n:t+2*(n+1)},le.getV=function(e,t){var n=le.getVidx(e,t),r=le.getVblen(e,t);return e.substr(n,2*r)},le.getTLV=function(e,t){return e.substr(t,2)+le.getL(e,t)+le.getV(e,t)},le.getTLVblen=function(e,t){return 2+2*le.getLblen(e,t)+2*le.getVblen(e,t)},le.getNextSiblingIdx=function(e,t){return le.getVidx(e,t)+2*le.getVblen(e,t)},le.getChildIdx=function(e,t){var n,r,i,s=le,a=[];n=s.getVidx(e,t),r=2*s.getVblen(e,t),"03"==e.substr(t,2)&&(n+=2,r-=2),i=0;for(var o=n;i<=r;){var c=s.getTLVblen(e,o);if((i+=c)<=r&&a.push(o),o+=c,i>=r)break}return a},le.getNthChildIdx=function(e,t,n){return le.getChildIdx(e,t)[n]},le.getIdxbyList=function(e,t,n,r){var i,s,a=le;return 0==n.length?void 0!==r&&e.substr(t,2)!==r?-1:t:(i=n.shift())>=(s=a.getChildIdx(e,t)).length?-1:a.getIdxbyList(e,s[i],n,r)},le.getIdxbyListEx=function(e,t,n,r){var i,s,a=le;if(0==n.length)return void 0!==r&&e.substr(t,2)!==r?-1:t;i=n.shift(),s=a.getChildIdx(e,t);for(var o=0,c=0;c<s.length;c++){var u=e.substr(s[c],2);if("number"==typeof i&&!a.isContextTag(u)&&o==i||"string"==typeof i&&a.isContextTag(u,i))return a.getIdxbyListEx(e,s[c],n,r);a.isContextTag(u)||o++}return-1},le.getTLVbyList=function(e,t,n,r){var i=le,s=i.getIdxbyList(e,t,n,r);return-1==s||s>=e.length?null:i.getTLV(e,s)},le.getTLVbyListEx=function(e,t,n,r){var i=le,s=i.getIdxbyListEx(e,t,n,r);return-1==s?null:i.getTLV(e,s)},le.getVbyList=function(e,t,n,r,i){var s,a,o=le;return-1==(s=o.getIdxbyList(e,t,n,r))||s>=e.length?null:(a=o.getV(e,s),!0===i&&(a=a.substr(2)),a)},le.getVbyListEx=function(e,t,n,r,i){var s,a,o=le;return-1==(s=o.getIdxbyListEx(e,t,n,r))?null:(a=o.getV(e,s),"03"==e.substr(s,2)&&!1!==i&&(a=a.substr(2)),a)},le.getInt=function(e,t,n){null==n&&(n=-1);try{var r=e.substr(t,2);if("02"!=r&&"03"!=r)return n;var i=le.getV(e,t);return"02"==r?parseInt(i,16):$e(i)}catch(e){return n}},le.getOID=function(e,t,n){null==n&&(n=null);try{return"06"!=e.substr(t,2)?n:We(le.getV(e,t))}catch(e){return n}},le.getOIDName=function(e,t,n){null==n&&(n=null);try{var r=le.getOID(e,t,n);if(r==n)return n;var i=ce.asn1.x509.OID.oid2name(r);return""==i?r:i}catch(e){return n}},le.getString=function(e,t,n){null==n&&(n=null);try{return xe(le.getV(e,t))}catch(e){return n}},le.hextooidstr=function(e){var t=function(e,t){return e.length>=t?e:new Array(t-e.length+1).join("0")+e},n=[],r=e.substr(0,2),i=parseInt(r,16);n[0]=new String(Math.floor(i/40)),n[1]=new String(i%40);for(var s=e.substr(2),a=[],o=0;o<s.length/2;o++)a.push(parseInt(s.substr(2*o,2),16));var c=[],u="";for(o=0;o<a.length;o++)128&a[o]?u+=t((127&a[o]).toString(2),7):(u+=t((127&a[o]).toString(2),7),c.push(new String(parseInt(u,2))),u="");var h=n.join(".");return c.length>0&&(h=h+"."+c.join(".")),h},le.dump=function(e,t,n,r){var i=le,s=i.getV,a=i.dump,o=i.getChildIdx,c=e;e instanceof ce.asn1.ASN1Object&&(c=e.tohex());var u=function(e,t){return e.length<=2*t?e:e.substr(0,t)+"..(total "+e.length/2+"bytes).."+e.substr(e.length-t,t)};void 0===t&&(t={ommit_long_octet:32}),void 0===n&&(n=0),void 0===r&&(r="");var h,l=t.ommit_long_octet;if("01"==(h=c.substr(n,2)))return"00"==(d=s(c,n))?r+"BOOLEAN FALSE\n":r+"BOOLEAN TRUE\n";if("02"==h)return r+"INTEGER "+u(d=s(c,n),l)+"\n";if("03"==h){var d=s(c,n);if(i.isASN1HEX(d.substr(2))){var m=r+"BITSTRING, encapsulates\n";return m+=a(d.substr(2),t,0,r+"  ")}return r+"BITSTRING "+u(d,l)+"\n"}if("04"==h){d=s(c,n);if(i.isASN1HEX(d)){m=r+"OCTETSTRING, encapsulates\n";return m+=a(d,t,0,r+"  ")}return r+"OCTETSTRING "+u(d,l)+"\n"}if("05"==h)return r+"NULL\n";if("06"==h){var p=s(c,n),f=ce.asn1.ASN1Util.oidHexToInt(p),g=ce.asn1.x509.OID.oid2name(f),y=f.replace(/\./g," ");return""!=g?r+"ObjectIdentifier "+g+" ("+y+")\n":r+"ObjectIdentifier ("+y+")\n"}if("0a"==h)return r+"ENUMERATED "+parseInt(s(c,n))+"\n";if("0c"==h)return r+"UTF8String '"+we(s(c,n))+"'\n";if("13"==h)return r+"PrintableString '"+we(s(c,n))+"'\n";if("14"==h)return r+"TeletexString '"+we(s(c,n))+"'\n";if("16"==h)return r+"IA5String '"+we(s(c,n))+"'\n";if("17"==h)return r+"UTCTime "+we(s(c,n))+"\n";if("18"==h)return r+"GeneralizedTime "+we(s(c,n))+"\n";if("1a"==h)return r+"VisualString '"+we(s(c,n))+"'\n";if("1e"==h)return r+"BMPString '"+qe(s(c,n))+"'\n";if("30"==h){if("3000"==c.substr(n,4))return r+"SEQUENCE {}\n";m=r+"SEQUENCE\n";var v=t;if((2==(w=o(c,n)).length||3==w.length)&&"06"==c.substr(w[0],2)&&"04"==c.substr(w[w.length-1],2)){g=i.oidname(s(c,w[0]));var b=JSON.parse(JSON.stringify(t));b.x509ExtName=g,v=b}for(var S=0;S<w.length;S++)m+=a(c,v,w[S],r+"  ");return m}if("31"==h){m=r+"SET\n";var w=o(c,n);for(S=0;S<w.length;S++)m+=a(c,t,w[S],r+"  ");return m}if(0!=(128&(h=parseInt(h,16)))){var C=31&h;if(0!=(32&h)){for(m=r+"["+C+"]\n",w=o(c,n),S=0;S<w.length;S++)m+=a(c,t,w[S],r+"  ");return m}d=s(c,n);if(le.isASN1HEX(d)){var m=r+"["+C+"]\n";return m+=a(d,t,0,r+"  ")}return("68747470"==d.substr(0,8)||"subjectAltName"===t.x509ExtName&&2==C)&&(d=we(d)),m=r+"["+C+"] "+d+"\n"}return r+"UNKNOWN("+h+") "+s(c,n)+"\n"},le.parse=function(e){var t=le,n=t.parse,r=t.isASN1HEX,i=t.getV,s=t.getTLV,a=t.getChildIdx,o=ce.asn1,c=o.ASN1Util.oidHexToInt,u=o.x509.OID.oid2name,h=we,l=qe,d=Ce,m={"0c":"utf8str",12:"numstr",13:"prnstr",14:"telstr",16:"ia5str",17:"utctime",18:"gentime","1a":"visstr","1e":"bmpstr",30:"seq",31:"set"},p=e.substr(0,2),f={},g=i(e,0);if("01"==p)return"0101ff"==e?{bool:!0}:{bool:!1};if("02"==p)return{int:{hex:g}};if("03"==p)try{if("00"!=g.substr(0,2))throw"not encap";var y=g.substr(2);if(!r(y))throw"not encap";return{bitstr:{obj:n(y)}}}catch(e){var v=null;return g.length<=10&&(v=Qe(g)),null==v?{bitstr:{hex:g}}:{bitstr:{bin:v}}}else if("04"==p)try{if(!r(g))throw"not encap";return{octstr:{obj:n(g)}}}catch(e){return{octstr:{hex:g}}}else{if("05"==p)return{null:""};if("06"==p){var b=c(g),S=u(b);return""==S?{oid:b}:{oid:S}}if("0a"==p)return g.length>4?{enum:{hex:g}}:{enum:parseInt(g,16)};if("30"==p||"31"==p)return f[m[p]]=function(e){for(var t=[],r=a(e,0),i=0;i<r.length;i++){var o=r[i],c=s(e,o),u=n(c);t.push(u)}return t}(e),f;if("14"==p){var w=d(g);return f[m[p]]={str:w},f}if("1e"==p){w=l(g);return f[m[p]]={str:w},f}if(-1!=":0c:12:13:16:17:18:1a:".indexOf(p)){w=h(g);return f[m[p]]={str:w},f}if(p.match(/^8[0-9]$/))return null==(w=h(g))|""==w||null!=w.match(/[\x00-\x1F\x7F-\x9F]/)||null!=w.match(/[\u0000-\u001F\u0080–\u009F]/)?{tag:{tag:p,explicit:!1,hex:g}}:{tag:{tag:p,explicit:!1,str:w}};if(!p.match(/^a[0-9]$/)){var C=new ce.asn1.ASN1Object;return C.hV=g,{asn1:{tlv:p+C.getLengthHexFromValue()+g}}}try{if(!r(g))throw new Error("not encap");return{tag:{tag:p,explicit:!0,obj:n(g)}}}catch(e){return{tag:{tag:p,explicit:!0,hex:g}}}}},le.isContextTag=function(e,t){var n,r;e=e.toLowerCase();try{n=parseInt(e,16)}catch(e){return-1}if(void 0===t)return 128==(192&n);try{return null!=t.match(/^\[[0-9]+\]$/)&&(!((r=parseInt(t.substr(1,t.length-1),10))>31)&&(128==(192&n)&&(31&n)==r))}catch(e){return!1}},le.isASN1HEX=function(e){var t=le;if(e.length%2==1)return!1;var n=t.getVblen(e,0),r=e.substr(0,2),i=t.getL(e,0);return e.length-r.length-i.length==2*n},le.checkStrictDER=function(e,t,n,r,i){var s=le;if(void 0===n){if("string"!=typeof e)throw new Error("not hex string");if(e=e.toLowerCase(),!ce.lang.String.isHex(e))throw new Error("not hex string");n=e.length,i=(r=e.length/2)<128?1:Math.ceil(r.toString(16))+1}if(s.getL(e,t).length>2*i)throw new Error("L of TLV too long: idx="+t);var a=s.getVblen(e,t);if(a>r)throw new Error("value of L too long than hex: idx="+t);var o=s.getTLV(e,t),c=o.length-2-s.getL(e,t).length;if(c!==2*a)throw new Error("V string length and L's value not the same:"+c+"/"+2*a);if(0===t&&e.length!=o.length)throw new Error("total length and TLV length unmatch:"+e.length+"!="+o.length);var u=e.substr(t,2);if("02"===u){var h=s.getVidx(e,t);if("00"==e.substr(h,2)&&e.charCodeAt(h+2)<56)throw new Error("not least zeros for DER INTEGER")}if(32&parseInt(u,16)){for(var l=s.getVblen(e,t),d=0,m=s.getChildIdx(e,t),p=0;p<m.length;p++){d+=s.getTLV(e,m[p]).length,s.checkStrictDER(e,m[p],n,r,i)}if(2*l!=d)throw new Error("sum of children's TLV length and L unmatch: "+2*l+"!="+d)}},le.oidname=function(e){var t=ce.asn1;ce.lang.String.isHex(e)&&(e=t.ASN1Util.oidHexToInt(e));var n=t.x509.OID.oid2name(e);return""===n&&(n=e),n},void 0!==ce&&ce||(ce={}),void 0!==ce.asn1&&ce.asn1||(ce.asn1={}),void 0!==ce.asn1.x509&&ce.asn1.x509||(ce.asn1.x509={}),ce.asn1.x509.Certificate=function(e){ce.asn1.x509.Certificate.superclass.constructor.call(this);var t=ce.asn1,n=t.DERBitString,r=t.DERSequence,i=t.x509,s=i.TBSCertificate,a=i.AlgorithmIdentifier;this.params=void 0,this.setByParam=function(e){this.params=e},this.sign=function(){var e=this.params,t=e.sigalg;null!=e.sigalg.name&&(t=e.sigalg.name);var n=e.tbsobj.tohex(),r=new ce.crypto.Signature({alg:t});r.init(e.cakey),r.updateHex(n),e.sighex=r.sign()},this.getPEM=function(){return Ae(this.tohex(),"CERTIFICATE")},this.tohex=function(){var e=this.params;if(null!=e.tbsobj&&null!=e.tbsobj||(e.tbsobj=new s(e)),null==e.sighex&&null!=e.cakey&&this.sign(),null==e.sighex)throw new Error("sighex or cakey parameter not defined");var t=[];return t.push(e.tbsobj),t.push(new a({name:e.sigalg})),t.push(new n({hex:"00"+e.sighex})),new r({array:t}).tohex()},this.getEncodedHex=function(){return this.tohex()},null!=e&&(this.params=e)},Xe(ce.asn1.x509.Certificate,ce.asn1.ASN1Object),ce.asn1.x509.TBSCertificate=function(e){ce.asn1.x509.TBSCertificate.superclass.constructor.call(this);var t=ce.asn1,n=t.x509,r=t.DERTaggedObject,i=t.DERInteger,s=t.DERSequence,a=n.AlgorithmIdentifier,o=n.Time,c=n.X500Name,u=n.Extensions,h=n.SubjectPublicKeyInfo;this.params=null,this.setByParam=function(e){this.params=e},this.tohex=function(){var e=[],t=this.params;if(null!=t.version||1!=t.version){var n=2;null!=t.version&&(n=t.version-1);var l=new r({obj:new i({int:n})});e.push(l)}return e.push(new i(t.serial)),e.push(new a({name:t.sigalg})),e.push(new c(t.issuer)),e.push(new s({array:[new o(t.notbefore),new o(t.notafter)]})),e.push(new c(t.subject)),e.push(new h(Ze.getKey(t.sbjpubkey))),void 0!==t.ext&&t.ext.length>0&&e.push(new r({tag:"a3",obj:new u(t.ext)})),new ce.asn1.DERSequence({array:e}).tohex()},this.getEncodedHex=function(){return this.tohex()},void 0!==e&&this.setByParam(e)},Xe(ce.asn1.x509.TBSCertificate,ce.asn1.ASN1Object),ce.asn1.x509.Extensions=function(e){ce.asn1.x509.Extensions.superclass.constructor.call(this);var t=ce.asn1,n=t.DERSequence,r=t.x509;this.aParam=[],this.setByParam=function(e){this.aParam=e},this.tohex=function(){for(var e=[],t=0;t<this.aParam.length;t++){var i=this.aParam[t],s=i.extname,a=null;if(null!=i.extn)a=new r.PrivateExtension(i);else if("subjectKeyIdentifier"==s)a=new r.SubjectKeyIdentifier(i);else if("keyUsage"==s)a=new r.KeyUsage(i);else if("subjectAltName"==s)a=new r.SubjectAltName(i);else if("issuerAltName"==s)a=new r.IssuerAltName(i);else if("basicConstraints"==s)a=new r.BasicConstraints(i);else if("nameConstraints"==s)a=new r.NameConstraints(i);else if("cRLDistributionPoints"==s)a=new r.CRLDistributionPoints(i);else if("certificatePolicies"==s)a=new r.CertificatePolicies(i);else if("authorityKeyIdentifier"==s)a=new r.AuthorityKeyIdentifier(i);else if("extKeyUsage"==s)a=new r.ExtKeyUsage(i);else if("authorityInfoAccess"==s)a=new r.AuthorityInfoAccess(i);else if("cRLNumber"==s)a=new r.CRLNumber(i);else if("cRLReason"==s)a=new r.CRLReason(i);else if("ocspNonce"==s)a=new r.OCSPNonce(i);else if("ocspNoCheck"==s)a=new r.OCSPNoCheck(i);else if("adobeTimeStamp"==s)a=new r.AdobeTimeStamp(i);else{if("subjectDirectoryAttributes"!=s)throw new Error("extension not supported:"+JSON.stringify(i));a=new r.SubjectDirectoryAttributes(i)}null!=a&&e.push(a)}return new n({array:e}).tohex()},this.getEncodedHex=function(){return this.tohex()},null!=e&&this.setByParam(e)},Xe(ce.asn1.x509.Extensions,ce.asn1.ASN1Object),ce.asn1.x509.Extension=function(e){ce.asn1.x509.Extension.superclass.constructor.call(this);var t=ce.asn1,n=t.DERObjectIdentifier,r=t.DEROctetString,i=(t.DERBitString,t.DERBoolean),s=t.DERSequence;this.tohex=function(){var e=new n({oid:this.oid}),t=new r({hex:this.getExtnValueHex()}),a=new Array;return a.push(e),this.critical&&a.push(new i),a.push(t),new s({array:a}).tohex()},this.getEncodedHex=function(){return this.tohex()},this.critical=!1,void 0!==e&&void 0!==e.critical&&(this.critical=e.critical)},Xe(ce.asn1.x509.Extension,ce.asn1.ASN1Object),ce.asn1.x509.KeyUsage=function(e){ce.asn1.x509.KeyUsage.superclass.constructor.call(this,e);var t=Error,n={digitalSignature:0,nonRepudiation:1,keyEncipherment:2,dataEncipherment:3,keyAgreement:4,keyCertSign:5,cRLSign:6,encipherOnly:7,decipherOnly:8};this.getExtnValueHex=function(){var e=this.getBinValue();return this.asn1ExtnValue=new ce.asn1.DERBitString({bin:e}),this.asn1ExtnValue.tohex()},this.getBinValue=function(){var e=this.params;if("object"!=typeof e||"object"!=typeof e.names&&"string"!=typeof e.bin)throw new t("parameter not yet set");if(null!=e.names)return Ye(e.names,n);if(null!=e.bin)return e.bin;throw new t("parameter not set properly")},this.oid="2.5.29.15",void 0!==e&&(this.params=e)},Xe(ce.asn1.x509.KeyUsage,ce.asn1.x509.Extension),ce.asn1.x509.BasicConstraints=function(e){ce.asn1.x509.BasicConstraints.superclass.constructor.call(this,e);var t=ce.asn1,n=t.DERBoolean,r=t.DERInteger,i=t.DERSequence;this.getExtnValueHex=function(){var e=new Array;this.cA&&e.push(new n),this.pathLen>-1&&e.push(new r({int:this.pathLen}));var t=new i({array:e});return this.asn1ExtnValue=t,this.asn1ExtnValue.tohex()},this.oid="2.5.29.19",this.cA=!1,this.pathLen=-1,void 0!==e&&(void 0!==e.cA&&(this.cA=e.cA),void 0!==e.pathLen&&(this.pathLen=e.pathLen))},Xe(ce.asn1.x509.BasicConstraints,ce.asn1.x509.Extension),ce.asn1.x509.CRLDistributionPoints=function(e){ce.asn1.x509.CRLDistributionPoints.superclass.constructor.call(this,e);var t=ce.asn1,n=t.x509;this.getExtnValueHex=function(){return this.asn1ExtnValue.tohex()},this.setByDPArray=function(e){for(var r=[],i=0;i<e.length;i++)if(e[i]instanceof ce.asn1.ASN1Object)r.push(e[i]);else{var s=new n.DistributionPoint(e[i]);r.push(s)}this.asn1ExtnValue=new t.DERSequence({array:r})},this.setByOneURI=function(e){var t=new n.DistributionPoint({fulluri:e});this.setByDPArray([t])},this.oid="2.5.29.31",void 0!==e&&(void 0!==e.array?this.setByDPArray(e.array):void 0!==e.uri&&this.setByOneURI(e.uri))},Xe(ce.asn1.x509.CRLDistributionPoints,ce.asn1.x509.Extension),ce.asn1.x509.DistributionPoint=function(e){ce.asn1.x509.DistributionPoint.superclass.constructor.call(this);var t=ce.asn1,n=t.x509.DistributionPointName;this.tohex=function(){var e=new t.DERSequence;if(null!=this.asn1DP){var n=new t.DERTaggedObject({explicit:!0,tag:"a0",obj:this.asn1DP});e.appendASN1Object(n)}return this.hTLV=e.tohex(),this.hTLV},this.getEncodedHex=function(){return this.tohex()},void 0!==e&&(void 0!==e.dpobj?this.asn1DP=e.dpobj:void 0!==e.dpname?this.asn1DP=new n(e.dpname):void 0!==e.fulluri&&(this.asn1DP=new n({full:[{uri:e.fulluri}]})))},Xe(ce.asn1.x509.DistributionPoint,ce.asn1.ASN1Object),ce.asn1.x509.DistributionPointName=function(e){ce.asn1.x509.DistributionPointName.superclass.constructor.call(this);var t=ce.asn1,n=t.DERTaggedObject;if(this.tohex=function(){if("full"!=this.type)throw new Error("currently type shall be 'full': "+this.type);return this.asn1Obj=new n({explicit:!1,tag:this.tag,obj:this.asn1V}),this.hTLV=this.asn1Obj.tohex(),this.hTLV},this.getEncodedHex=function(){return this.tohex()},void 0!==e)if(t.x509.GeneralNames.prototype.isPrototypeOf(e))this.type="full",this.tag="a0",this.asn1V=e;else{if(void 0===e.full)throw new Error("This class supports GeneralNames only as argument");this.type="full",this.tag="a0",this.asn1V=new t.x509.GeneralNames(e.full)}},Xe(ce.asn1.x509.DistributionPointName,ce.asn1.ASN1Object),ce.asn1.x509.CertificatePolicies=function(e){ce.asn1.x509.CertificatePolicies.superclass.constructor.call(this,e);var t=ce.asn1,n=t.x509,r=t.DERSequence,i=n.PolicyInformation;this.params=null,this.getExtnValueHex=function(){for(var e=[],t=0;t<this.params.array.length;t++)e.push(new i(this.params.array[t]));var n=new r({array:e});return this.asn1ExtnValue=n,this.asn1ExtnValue.tohex()},this.oid="2.5.29.32",void 0!==e&&(this.params=e)},Xe(ce.asn1.x509.CertificatePolicies,ce.asn1.x509.Extension),ce.asn1.x509.PolicyInformation=function(e){ce.asn1.x509.PolicyInformation.superclass.constructor.call(this,e);var t=ce.asn1,n=t.DERSequence,r=t.DERObjectIdentifier,i=t.x509.PolicyQualifierInfo;this.params=null,this.tohex=function(){if(void 0===this.params.policyoid&&void 0===this.params.array)throw new Error("parameter oid and array missing");var e=[new r(this.params.policyoid)];if(void 0!==this.params.array){for(var t=[],s=0;s<this.params.array.length;s++)t.push(new i(this.params.array[s]));t.length>0&&e.push(new n({array:t}))}return new n({array:e}).tohex()},this.getEncodedHex=function(){return this.tohex()},void 0!==e&&(this.params=e)},Xe(ce.asn1.x509.PolicyInformation,ce.asn1.ASN1Object),ce.asn1.x509.PolicyQualifierInfo=function(e){ce.asn1.x509.PolicyQualifierInfo.superclass.constructor.call(this,e);var t=ce.asn1,n=t.DERSequence,r=t.DERIA5String,i=t.DERObjectIdentifier,s=t.x509.UserNotice;this.params=null,this.tohex=function(){return void 0!==this.params.cps?new n({array:[new i({oid:"1.3.6.1.5.5.7.2.1"}),new r({str:this.params.cps})]}).tohex():null!=this.params.unotice?new n({array:[new i({oid:"1.3.6.1.5.5.7.2.2"}),new s(this.params.unotice)]}).tohex():void 0},this.getEncodedHex=function(){return this.tohex()},void 0!==e&&(this.params=e)},Xe(ce.asn1.x509.PolicyQualifierInfo,ce.asn1.ASN1Object),ce.asn1.x509.UserNotice=function(e){ce.asn1.x509.UserNotice.superclass.constructor.call(this,e);var t=ce.asn1.DERSequence,n=(ce.asn1.DERInteger,ce.asn1.x509.DisplayText),r=ce.asn1.x509.NoticeReference;this.params=null,this.tohex=function(){var e=[];return void 0!==this.params.noticeref&&e.push(new r(this.params.noticeref)),void 0!==this.params.exptext&&e.push(new n(this.params.exptext)),new t({array:e}).tohex()},this.getEncodedHex=function(){return this.tohex()},void 0!==e&&(this.params=e)},Xe(ce.asn1.x509.UserNotice,ce.asn1.ASN1Object),ce.asn1.x509.NoticeReference=function(e){ce.asn1.x509.NoticeReference.superclass.constructor.call(this,e);var t=ce.asn1.DERSequence,n=ce.asn1.DERInteger,r=ce.asn1.x509.DisplayText;this.params=null,this.tohex=function(){var e=[];if(void 0!==this.params.org&&e.push(new r(this.params.org)),void 0!==this.params.noticenum){for(var i=[],s=this.params.noticenum,a=0;a<s.length;a++)i.push(new n(s[a]));e.push(new t({array:i}))}if(0==e.length)throw new Error("parameter is empty");return new t({array:e}).tohex()},this.getEncodedHex=function(){return this.tohex()},void 0!==e&&(this.params=e)},Xe(ce.asn1.x509.NoticeReference,ce.asn1.ASN1Object),ce.asn1.x509.DisplayText=function(e){ce.asn1.x509.DisplayText.superclass.constructor.call(this,e),this.hT="0c",void 0!==e&&("ia5"===e.type?this.hT="16":"vis"===e.type?this.hT="1a":"bmp"===e.type&&(this.hT="1e"))},Xe(ce.asn1.x509.DisplayText,ce.asn1.DERAbstractString),ce.asn1.x509.NameConstraints=function(e){ce.asn1.x509.NameConstraints.superclass.constructor.call(this,e);var t=ce.asn1,n=t.x509,r=t.ASN1Util.newObject,i=n.GeneralSubtree;this.params=null,this.getExtnValueHex=function(){var e=this.params,t=[];if(null!=e.permit&&null!=e.permit.length){for(var n=[],s=0;s<e.permit.length;s++)n.push(new i(e.permit[s]));t.push({tag:{tagi:"a0",obj:{seq:n}}})}if(null!=e.exclude&&null!=e.exclude.length){var a=[];for(s=0;s<e.exclude.length;s++)a.push(new i(e.exclude[s]));t.push({tag:{tagi:"a1",obj:{seq:a}}})}return this.asn1ExtnValue=r({seq:t}),this.asn1ExtnValue.tohex()},this.oid="2.5.29.30",void 0!==e&&(this.params=e)},Xe(ce.asn1.x509.NameConstraints,ce.asn1.x509.Extension),ce.asn1.x509.GeneralSubtree=function(e){ce.asn1.x509.GeneralSubtree.superclass.constructor.call(this);var t=ce.asn1,n=t.x509.GeneralName,r=t.ASN1Util.newObject;this.params=null,this.setByParam=function(e){this.params=e},this.tohex=function(){var e=this.params,t=[new n(e)];return null!=e.min&&t.push({tag:{tagi:"80",obj:{int:e.min}}}),null!=e.max&&t.push({tag:{tagi:"81",obj:{int:e.max}}}),r({seq:t}).tohex()},this.getEncodedHex=function(){return this.tohex()},void 0!==e&&this.setByParam(e)},Xe(ce.asn1.x509.GeneralSubtree,ce.asn1.ASN1Object),ce.asn1.x509.ExtKeyUsage=function(e){ce.asn1.x509.ExtKeyUsage.superclass.constructor.call(this,e);var t=ce.asn1;this.setPurposeArray=function(e){this.asn1ExtnValue=new t.DERSequence;for(var n=0;n<e.length;n++){var r=new t.DERObjectIdentifier(e[n]);this.asn1ExtnValue.appendASN1Object(r)}},this.getExtnValueHex=function(){return this.asn1ExtnValue.tohex()},this.oid="2.5.29.37",void 0!==e&&void 0!==e.array&&this.setPurposeArray(e.array)},Xe(ce.asn1.x509.ExtKeyUsage,ce.asn1.x509.Extension),ce.asn1.x509.AuthorityKeyIdentifier=function(e){ce.asn1.x509.AuthorityKeyIdentifier.superclass.constructor.call(this,e);var t=ce,n=t.asn1,r=n.DERTaggedObject,i=n.x509.GeneralNames;t.crypto.Util.isKey;this.asn1KID=null,this.asn1CertIssuer=null,this.asn1CertSN=null,this.getExtnValueHex=function(){var e=new Array;this.asn1KID&&e.push(new r({explicit:!1,tag:"80",obj:this.asn1KID})),this.asn1CertIssuer&&e.push(new r({explicit:!1,tag:"a1",obj:new i([{dn:this.asn1CertIssuer}])})),this.asn1CertSN&&e.push(new r({explicit:!1,tag:"82",obj:this.asn1CertSN}));var t=new n.DERSequence({array:e});return this.asn1ExtnValue=t,this.asn1ExtnValue.tohex()},this.setKIDByParam=function(e){if(void 0!==e.str||void 0!==e.hex)this.asn1KID=new ce.asn1.DEROctetString(e);else if("object"==typeof e&&ce.crypto.Util.isKey(e)||"string"==typeof e&&-1!=e.indexOf("BEGIN ")){var t=e;"string"==typeof e&&(t=Ze.getKey(e));var n=Ze.getKeyID(t);this.asn1KID=new ce.asn1.DEROctetString({hex:n})}},this.setCertIssuerByParam=function(e){void 0!==e.str||void 0!==e.ldapstr||void 0!==e.hex||void 0!==e.certsubject||void 0!==e.certissuer?this.asn1CertIssuer=new ce.asn1.x509.X500Name(e):"string"==typeof e&&-1!=e.indexOf("BEGIN ")&&-1!=e.indexOf("CERTIFICATE")&&(this.asn1CertIssuer=new ce.asn1.x509.X500Name({certissuer:e}))},this.setCertSNByParam=function(e){if(void 0!==e.str||void 0!==e.bigint||void 0!==e.hex)this.asn1CertSN=new ce.asn1.DERInteger(e);else if("string"==typeof e&&-1!=e.indexOf("BEGIN ")&&e.indexOf("CERTIFICATE")){var t=new rt;t.readCertPEM(e);var n=t.getSerialNumberHex();this.asn1CertSN=new ce.asn1.DERInteger({hex:n})}},this.oid="2.5.29.35",void 0!==e&&(void 0!==e.kid&&this.setKIDByParam(e.kid),void 0!==e.issuer&&this.setCertIssuerByParam(e.issuer),void 0!==e.sn&&this.setCertSNByParam(e.sn),void 0!==e.issuersn&&"string"==typeof e.issuersn&&-1!=e.issuersn.indexOf("BEGIN ")&&e.issuersn.indexOf("CERTIFICATE")&&(this.setCertSNByParam(e.issuersn),this.setCertIssuerByParam(e.issuersn)))},Xe(ce.asn1.x509.AuthorityKeyIdentifier,ce.asn1.x509.Extension),ce.asn1.x509.SubjectKeyIdentifier=function(e){ce.asn1.x509.SubjectKeyIdentifier.superclass.constructor.call(this,e);var t=ce.asn1.DEROctetString;this.asn1KID=null,this.getExtnValueHex=function(){return this.asn1ExtnValue=this.asn1KID,this.asn1ExtnValue.tohex()},this.setKIDByParam=function(e){if(void 0!==e.str||void 0!==e.hex)this.asn1KID=new t(e);else if("object"==typeof e&&ce.crypto.Util.isKey(e)||"string"==typeof e&&-1!=e.indexOf("BEGIN")){var n=e;"string"==typeof e&&(n=Ze.getKey(e));var r=Ze.getKeyID(n);this.asn1KID=new ce.asn1.DEROctetString({hex:r})}},this.oid="2.5.29.14",void 0!==e&&void 0!==e.kid&&this.setKIDByParam(e.kid)},Xe(ce.asn1.x509.SubjectKeyIdentifier,ce.asn1.x509.Extension),ce.asn1.x509.AuthorityInfoAccess=function(e){ce.asn1.x509.AuthorityInfoAccess.superclass.constructor.call(this,e),this.setAccessDescriptionArray=function(e){for(var t=new Array,n=ce.asn1,r=n.DERSequence,i=n.DERObjectIdentifier,s=n.x509.GeneralName,a=0;a<e.length;a++){var o,c=e[a];if(void 0!==c.ocsp)o=new r({array:[new i({oid:"1.3.6.1.5.5.7.48.1"}),new s({uri:c.ocsp})]});else{if(void 0===c.caissuer)throw new Error("unknown AccessMethod parameter: "+JSON.stringify(c));o=new r({array:[new i({oid:"1.3.6.1.5.5.7.48.2"}),new s({uri:c.caissuer})]})}t.push(o)}this.asn1ExtnValue=new r({array:t})},this.getExtnValueHex=function(){return this.asn1ExtnValue.tohex()},this.oid="1.3.6.1.5.5.7.1.1",void 0!==e&&void 0!==e.array&&this.setAccessDescriptionArray(e.array)},Xe(ce.asn1.x509.AuthorityInfoAccess,ce.asn1.x509.Extension),ce.asn1.x509.SubjectAltName=function(e){ce.asn1.x509.SubjectAltName.superclass.constructor.call(this,e),this.setNameArray=function(e){this.asn1ExtnValue=new ce.asn1.x509.GeneralNames(e)},this.getExtnValueHex=function(){return this.asn1ExtnValue.tohex()},this.oid="2.5.29.17",void 0!==e&&void 0!==e.array&&this.setNameArray(e.array)},Xe(ce.asn1.x509.SubjectAltName,ce.asn1.x509.Extension),ce.asn1.x509.IssuerAltName=function(e){ce.asn1.x509.IssuerAltName.superclass.constructor.call(this,e),this.setNameArray=function(e){this.asn1ExtnValue=new ce.asn1.x509.GeneralNames(e)},this.getExtnValueHex=function(){return this.asn1ExtnValue.tohex()},this.oid="2.5.29.18",void 0!==e&&void 0!==e.array&&this.setNameArray(e.array)},Xe(ce.asn1.x509.IssuerAltName,ce.asn1.x509.Extension),ce.asn1.x509.SubjectDirectoryAttributes=function(e){ce.asn1.x509.SubjectDirectoryAttributes.superclass.constructor.call(this,e);var t=ce.asn1,n=t.DERSequence,r=t.ASN1Util.newObject,i=t.x509.OID.name2oid;this.params=null,this.getExtnValueHex=function(){for(var e=[],t=0;t<this.params.array.length;t++){var s=this.params.array[t],a={seq:[{oid:"1.2.3.4"},{set:[{utf8str:"DE"}]}]};if("dateOfBirth"==s.attr)a.seq[0].oid=i(s.attr),a.seq[1].set[0]={gentime:s.str};else if("placeOfBirth"==s.attr)a.seq[0].oid=i(s.attr),a.seq[1].set[0]={utf8str:s.str};else if("gender"==s.attr)a.seq[0].oid=i(s.attr),a.seq[1].set[0]={prnstr:s.str};else if("countryOfCitizenship"==s.attr)a.seq[0].oid=i(s.attr),a.seq[1].set[0]={prnstr:s.str};else{if("countryOfResidence"!=s.attr)throw new Error("unsupported attribute: "+s.attr);a.seq[0].oid=i(s.attr),a.seq[1].set[0]={prnstr:s.str}}e.push(new r(a))}var o=new n({array:e});return this.asn1ExtnValue=o,this.asn1ExtnValue.tohex()},this.oid="2.5.29.9",void 0!==e&&(this.params=e)},Xe(ce.asn1.x509.SubjectDirectoryAttributes,ce.asn1.x509.Extension),ce.asn1.x509.PrivateExtension=function(e){ce.asn1.x509.PrivateExtension.superclass.constructor.call(this,e);var t=ce,n=t.lang.String.isHex,r=t.asn1,i=r.x509.OID.name2oid,s=r.ASN1Util.newObject;this.params=null,this.setByParam=function(e){this.oid=i(e.extname),this.params=e},this.getExtnValueHex=function(){if(null==this.params.extname||null==this.params.extn)throw new Error("extname or extnhex not specified");var e=this.params.extn;if("string"==typeof e&&n(e))return e;if("object"==typeof e)try{return s(e).tohex()}catch(e){}throw new Error("unsupported extn value")},null!=e&&this.setByParam(e)},Xe(ce.asn1.x509.PrivateExtension,ce.asn1.x509.Extension),ce.asn1.x509.CRL=function(e){ce.asn1.x509.CRL.superclass.constructor.call(this);var t=ce.asn1,n=t.DERSequence,r=t.DERBitString,i=t.x509,s=i.AlgorithmIdentifier,a=i.TBSCertList;this.params=void 0,this.setByParam=function(e){this.params=e},this.sign=function(){var e=new a(this.params).tohex(),t=new ce.crypto.Signature({alg:this.params.sigalg});t.init(this.params.cakey),t.updateHex(e);var n=t.sign();this.params.sighex=n},this.getPEM=function(){return Ae(this.tohex(),"X509 CRL")},this.tohex=function(){var e=this.params;if(null==e.tbsobj&&(e.tbsobj=new a(e)),null==e.sighex&&null!=e.cakey&&this.sign(),null==e.sighex)throw new Error("sighex or cakey parameter not defined");var t=[];return t.push(e.tbsobj),t.push(new s({name:e.sigalg})),t.push(new r({hex:"00"+e.sighex})),new n({array:t}).tohex()},this.getEncodedHex=function(){return this.tohex()},null!=e&&(this.params=e)},Xe(ce.asn1.x509.CRL,ce.asn1.ASN1Object),ce.asn1.x509.TBSCertList=function(e){ce.asn1.x509.TBSCertList.superclass.constructor.call(this);var t=ce.asn1,n=t.DERInteger,r=t.DERSequence,i=t.DERTaggedObject,s=(t.DERObjectIdentifier,t.x509),a=s.AlgorithmIdentifier,o=s.Time,c=s.Extensions,u=s.X500Name;this.params=null,this.setByParam=function(e){this.params=e},this.getRevCertSequence=function(){for(var e=[],t=this.params.revcert,i=0;i<t.length;i++){var s=[new n(t[i].sn),new o(t[i].date)];null!=t[i].ext&&s.push(new c(t[i].ext)),e.push(new r({array:s}))}return new r({array:e})},this.tohex=function(){var e=[],t=this.params;if(null!=t.version){var s=t.version-1,h=new n({int:s});e.push(h)}if(e.push(new a({name:t.sigalg})),e.push(new u(t.issuer)),e.push(new o(t.thisupdate)),null!=t.nextupdate&&e.push(new o(t.nextupdate)),null!=t.revcert&&e.push(this.getRevCertSequence()),null!=t.ext){var l=new c(t.ext);e.push(new i({tag:"a0",explicit:!0,obj:l}))}return new r({array:e}).tohex()},this.getEncodedHex=function(){return this.tohex()},void 0!==e&&this.setByParam(e)},Xe(ce.asn1.x509.TBSCertList,ce.asn1.ASN1Object),ce.asn1.x509.CRLEntry=function(e){ce.asn1.x509.CRLEntry.superclass.constructor.call(this);var t=ce.asn1;this.setCertSerial=function(e){this.sn=new t.DERInteger(e)},this.setRevocationDate=function(e){this.time=new t.x509.Time(e)},this.tohex=function(){var e=new t.DERSequence({array:[this.sn,this.time]});return this.TLV=e.tohex(),this.TLV},this.getEncodedHex=function(){return this.tohex()},void 0!==e&&(void 0!==e.time&&this.setRevocationDate(e.time),void 0!==e.sn&&this.setCertSerial(e.sn))},Xe(ce.asn1.x509.CRLEntry,ce.asn1.ASN1Object),ce.asn1.x509.CRLNumber=function(e){ce.asn1.x509.CRLNumber.superclass.constructor.call(this,e),this.params=void 0,this.getExtnValueHex=function(){return this.asn1ExtnValue=new ce.asn1.DERInteger(this.params.num),this.asn1ExtnValue.tohex()},this.oid="2.5.29.20",null!=e&&(this.params=e)},Xe(ce.asn1.x509.CRLNumber,ce.asn1.x509.Extension),ce.asn1.x509.CRLReason=function(e){ce.asn1.x509.CRLReason.superclass.constructor.call(this,e),this.params=void 0,this.getExtnValueHex=function(){return this.asn1ExtnValue=new ce.asn1.DEREnumerated(this.params.code),this.asn1ExtnValue.tohex()},this.oid="2.5.29.21",null!=e&&(this.params=e)},Xe(ce.asn1.x509.CRLReason,ce.asn1.x509.Extension),ce.asn1.x509.OCSPNonce=function(e){ce.asn1.x509.OCSPNonce.superclass.constructor.call(this,e),this.params=void 0,this.getExtnValueHex=function(){return this.asn1ExtnValue=new ce.asn1.DEROctetString(this.params),this.asn1ExtnValue.tohex()},this.oid="1.3.6.1.5.5.7.48.1.2",null!=e&&(this.params=e)},Xe(ce.asn1.x509.OCSPNonce,ce.asn1.x509.Extension),ce.asn1.x509.OCSPNoCheck=function(e){ce.asn1.x509.OCSPNoCheck.superclass.constructor.call(this,e),this.params=void 0,this.getExtnValueHex=function(){return this.asn1ExtnValue=new ce.asn1.DERNull,this.asn1ExtnValue.tohex()},this.oid="1.3.6.1.5.5.7.48.1.5",null!=e&&(this.params=e)},Xe(ce.asn1.x509.OCSPNoCheck,ce.asn1.x509.Extension),ce.asn1.x509.AdobeTimeStamp=function(e){ce.asn1.x509.AdobeTimeStamp.superclass.constructor.call(this,e);var t=ce.asn1,n=t.DERInteger,r=t.DERBoolean,i=t.DERSequence,s=t.x509.GeneralName;this.params=null,this.getExtnValueHex=function(){var e=this.params,t=[new n(1)];return t.push(new s({uri:e.uri})),null!=e.reqauth&&t.push(new r(e.reqauth)),this.asn1ExtnValue=new i({array:t}),this.asn1ExtnValue.tohex()},this.oid="1.2.840.113583.1.1.9.1",void 0!==e&&this.setByParam(e)},Xe(ce.asn1.x509.AdobeTimeStamp,ce.asn1.x509.Extension),ce.asn1.x509.X500Name=function(e){ce.asn1.x509.X500Name.superclass.constructor.call(this),this.asn1Array=[],this.paramArray=[],this.sRule="utf8";var t=ce.asn1,n=t.x509,r=n.RDN;this.setByString=function(e,t){void 0!==t&&(this.sRule=t);var n=e.split("/");n.shift();for(var i=[],s=0;s<n.length;s++)if(n[s].match(/^[^=]+=.+$/))i.push(n[s]);else{var a=i.length-1;i[a]=i[a]+"/"+n[s]}for(s=0;s<i.length;s++)this.asn1Array.push(new r({str:i[s],rule:this.sRule}))},this.setByLdapString=function(e,t){void 0!==t&&(this.sRule=t);var r=n.X500Name.ldapToCompat(e);this.setByString(r,t)},this.setByObject=function(e,t){for(var n in void 0!==t&&(this.sRule=t),e)if(e.hasOwnProperty(n)){var i=new r({str:n+"="+e[n],rule:this.sRule});this.asn1Array?this.asn1Array.push(i):this.asn1Array=[i]}},this.setByParam=function(e){var t;(void 0!==e.rule&&(this.sRule=e.rule),void 0!==e.array)?this.paramArray=e.array:void 0!==e.str?this.setByString(e.str):void 0!==e.ldapstr?this.setByLdapString(e.ldapstr):void 0!==e.hex?this.hTLV=e.hex:void 0!==e.certissuer?((t=new rt).readCertPEM(e.certissuer),this.hTLV=t.getIssuerHex()):void 0!==e.certsubject?((t=new rt).readCertPEM(e.certsubject),this.hTLV=t.getSubjectHex()):"object"==typeof e&&void 0===e.certsubject&&void 0===e.certissuer&&this.setByObject(e)},this.tohex=function(){if("string"==typeof this.hTLV)return this.hTLV;if(0==this.asn1Array.length&&this.paramArray.length>0)for(var e=0;e<this.paramArray.length;e++){var n={array:this.paramArray[e]};"utf8"!=this.sRule&&(n.rule=this.sRule);var i=new r(n);this.asn1Array.push(i)}var s=new t.DERSequence({array:this.asn1Array});return this.hTLV=s.tohex(),this.hTLV},this.getEncodedHex=function(){return this.tohex()},void 0!==e&&this.setByParam(e)},Xe(ce.asn1.x509.X500Name,ce.asn1.ASN1Object),ce.asn1.x509.X500Name.compatToLDAP=function(e){if("/"!==e.substr(0,1))throw"malformed input";var t=(e=e.substr(1)).split("/");return t.reverse(),(t=t.map((function(e){return e.replace(/,/,"\\,")}))).join(",")},ce.asn1.x509.X500Name.onelineToLDAP=function(e){return ce.asn1.x509.X500Name.compatToLDAP(e)},ce.asn1.x509.X500Name.ldapToCompat=function(e){for(var t=e.split(","),n=!1,r=[],i=0;t.length>0;i++){var s=t.shift();if(!0===n){var a=(r.pop()+","+s).replace(/\\,/g,",");r.push(a),n=!1}else r.push(s);"\\"===s.substr(-1,1)&&(n=!0)}return(r=r.map((function(e){return e.replace("/","\\/")}))).reverse(),"/"+r.join("/")},ce.asn1.x509.X500Name.ldapToOneline=function(e){return ce.asn1.x509.X500Name.ldapToCompat(e)},ce.asn1.x509.RDN=function(e){ce.asn1.x509.RDN.superclass.constructor.call(this),this.asn1Array=[],this.paramArray=[],this.sRule="utf8";var t=ce.asn1.x509.AttributeTypeAndValue;this.setByParam=function(e){void 0!==e.rule&&(this.sRule=e.rule),void 0!==e.str&&this.addByMultiValuedString(e.str),void 0!==e.array&&(this.paramArray=e.array)},this.addByString=function(e){this.asn1Array.push(new ce.asn1.x509.AttributeTypeAndValue({str:e,rule:this.sRule}))},this.addByMultiValuedString=function(e){for(var t=ce.asn1.x509.RDN.parseString(e),n=0;n<t.length;n++)this.addByString(t[n])},this.tohex=function(){if(0==this.asn1Array.length&&this.paramArray.length>0)for(var e=0;e<this.paramArray.length;e++){var n=this.paramArray[e];void 0!==n.rule&&"utf8"!=this.sRule&&(n.rule=this.sRule);var r=new t(n);this.asn1Array.push(r)}var i=new ce.asn1.DERSet({array:this.asn1Array});return this.TLV=i.tohex(),this.TLV},this.getEncodedHex=function(){return this.tohex()},void 0!==e&&this.setByParam(e)},Xe(ce.asn1.x509.RDN,ce.asn1.ASN1Object),ce.asn1.x509.RDN.parseString=function(e){for(var t=e.split(/\+/),n=!1,r=[],i=0;t.length>0;i++){var s=t.shift();if(!0===n){var a=(r.pop()+"+"+s).replace(/\\\+/g,"+");r.push(a),n=!1}else r.push(s);"\\"===s.substr(-1,1)&&(n=!0)}var o=!1,c=[];for(i=0;r.length>0;i++){s=r.shift();if(!0===o){var u=c.pop();if(s.match(/"$/)){a=(u+"+"+s).replace(/^([^=]+)="(.*)"$/,"$1=$2");c.push(a),o=!1}else c.push(u+"+"+s)}else c.push(s);s.match(/^[^=]+="/)&&(o=!0)}return c},ce.asn1.x509.AttributeTypeAndValue=function(e){ce.asn1.x509.AttributeTypeAndValue.superclass.constructor.call(this),this.sRule="utf8",this.sType=null,this.sValue=null,this.dsType=null;var t=ce,n=t.asn1,r=n.DERSequence,i=n.DERUTF8String,s=n.DERPrintableString,a=n.DERTeletexString,o=n.DERIA5String,c=n.DERVisibleString,u=n.DERBMPString,h=t.lang.String.isMail,l=t.lang.String.isPrintable;this.setByParam=function(e){if(void 0!==e.rule&&(this.sRule=e.rule),void 0!==e.ds&&(this.dsType=e.ds),void 0===e.value&&void 0!==e.str){var t=e.str.match(/^([^=]+)=(.+)$/);if(!t)throw new Error("malformed attrTypeAndValueStr: "+attrTypeAndValueStr);this.sType=t[1],this.sValue=t[2]}else this.sType=e.type,this.sValue=e.value},this.setByString=function(e,t){void 0!==t&&(this.sRule=t);var n=e.match(/^([^=]+)=(.+)$/);if(!n)throw new Error("malformed attrTypeAndValueStr: "+attrTypeAndValueStr);this.setByAttrTypeAndValueStr(n[1],n[2])},this._getDsType=function(){var e=this.sType,t=this.sValue,n=this.sRule;return"prn"===n?"CN"==e&&h(t)?"ia5":l(t)?"prn":"utf8":"utf8"===n?"CN"==e&&h(t)?"ia5":"C"==e?"prn":"utf8":"utf8"},this.setByAttrTypeAndValueStr=function(e,t,n){void 0!==n&&(this.sRule=n),this.sType=e,this.sValue=t},this.getValueObj=function(e,t){if("utf8"==e)return new i({str:t});if("prn"==e)return new s({str:t});if("tel"==e)return new a({str:t});if("ia5"==e)return new o({str:t});if("vis"==e)return new c({str:t});if("bmp"==e)return new u({str:t});throw new Error("unsupported directory string type: type="+e+" value="+t)},this.tohex=function(){null==this.dsType&&(this.dsType=this._getDsType());var e=ce.asn1.x509.OID.atype2obj(this.sType),t=this.getValueObj(this.dsType,this.sValue),n=new r({array:[e,t]});return this.TLV=n.tohex(),this.TLV},this.getEncodedHex=function(){return this.tohex()},void 0!==e&&this.setByParam(e)},Xe(ce.asn1.x509.AttributeTypeAndValue,ce.asn1.ASN1Object),ce.asn1.x509.SubjectPublicKeyInfo=function(e){ce.asn1.x509.SubjectPublicKeyInfo.superclass.constructor.call(this);var t=ce,n=t.asn1,r=n.DERInteger,i=n.DERBitString,s=n.DERObjectIdentifier,a=n.DERSequence,o=n.ASN1Util.newObject,c=n.x509.AlgorithmIdentifier,u=t.crypto;u.ECDSA,u.DSA;this.getASN1Object=function(){if(null==this.asn1AlgId||null==this.asn1SubjPKey)throw"algId and/or subjPubKey not set";return new a({array:[this.asn1AlgId,this.asn1SubjPKey]})},this.tohex=function(){var e=this.getASN1Object();return this.hTLV=e.tohex(),this.hTLV},this.getEncodedHex=function(){return this.tohex()},this.setPubKey=function(e){try{if(e instanceof ne){var t=o({seq:[{int:{bigint:e.n}},{int:{int:e.e}}]}).tohex();this.asn1AlgId=new c({name:"rsaEncryption"}),this.asn1SubjPKey=new i({hex:"00"+t})}}catch(e){}try{if(e instanceof ce.crypto.ECDSA){var n=new s({name:e.curveName});this.asn1AlgId=new c({name:"ecPublicKey",asn1params:n}),this.asn1SubjPKey=new i({hex:"00"+e.pubKeyHex})}}catch(e){}try{if(e instanceof ce.crypto.DSA){n=new o({seq:[{int:{bigint:e.p}},{int:{bigint:e.q}},{int:{bigint:e.g}}]});this.asn1AlgId=new c({name:"dsa",asn1params:n});var a=new r({bigint:e.y});this.asn1SubjPKey=new i({hex:"00"+a.tohex()})}}catch(e){}},void 0!==e&&this.setPubKey(e)},Xe(ce.asn1.x509.SubjectPublicKeyInfo,ce.asn1.ASN1Object),ce.asn1.x509.Time=function(e){ce.asn1.x509.Time.superclass.constructor.call(this);var t=ce.asn1,n=t.DERUTCTime,r=t.DERGeneralizedTime;this.params=null,this.type=null,this.setTimeParams=function(e){this.timeParams=e},this.setByParam=function(e){this.params=e},this.getType=function(e){return e.match(/^[0-9]{12}Z$/)?"utc":e.match(/^[0-9]{14}Z$/)?"gen":e.match(/^[0-9]{12}\.[0-9]+Z$/)?"utc":e.match(/^[0-9]{14}\.[0-9]+Z$/)?"gen":null},this.tohex=function(){var e=this.params,t=null;if("string"==typeof e&&(e={str:e}),null==e||!e.str||null!=e.type&&null!=e.type||(e.type=this.getType(e.str)),null!=e&&e.str?("utc"==e.type&&(t=new n(e.str)),"gen"==e.type&&(t=new r(e.str))):t="gen"==this.type?new r:new n,null==t)throw new Error("wrong setting for Time");return this.TLV=t.tohex(),this.TLV},this.getEncodedHex=function(){return this.tohex()},null!=e&&this.setByParam(e)},ce.asn1.x509.Time_bak=function(e){ce.asn1.x509.Time_bak.superclass.constructor.call(this);var t=ce.asn1,n=t.DERUTCTime,r=t.DERGeneralizedTime;this.setTimeParams=function(e){this.timeParams=e},this.tohex=function(){var e=null;return e=null!=this.timeParams?"utc"==this.type?new n(this.timeParams):new r(this.timeParams):"utc"==this.type?new n:new r,this.TLV=e.tohex(),this.TLV},this.getEncodedHex=function(){return this.tohex()},this.type="utc",void 0!==e&&(void 0!==e.type?this.type=e.type:void 0!==e.str&&(e.str.match(/^[0-9]{12}Z$/)&&(this.type="utc"),e.str.match(/^[0-9]{14}Z$/)&&(this.type="gen")),this.timeParams=e)},Xe(ce.asn1.x509.Time,ce.asn1.ASN1Object),ce.asn1.x509.AlgorithmIdentifier=function(e){ce.asn1.x509.AlgorithmIdentifier.superclass.constructor.call(this),this.nameAlg=null,this.asn1Alg=null,this.asn1Params=null,this.paramEmpty=!1;var t=ce.asn1,n=t.x509.AlgorithmIdentifier.PSSNAME2ASN1TLV;if(this.tohex=function(){if(null===this.nameAlg&&null===this.asn1Alg)throw new Error("algorithm not specified");if(null!==this.nameAlg){var e=null;for(var r in n)r===this.nameAlg&&(e=n[r]);if(null!==e)return this.hTLV=e,this.hTLV}null!==this.nameAlg&&null===this.asn1Alg&&(this.asn1Alg=t.x509.OID.name2obj(this.nameAlg));var i=[this.asn1Alg];null!==this.asn1Params&&i.push(this.asn1Params);var s=new t.DERSequence({array:i});return this.hTLV=s.tohex(),this.hTLV},this.getEncodedHex=function(){return this.tohex()},void 0!==e&&(void 0!==e.name&&(this.nameAlg=e.name),void 0!==e.asn1params&&(this.asn1Params=e.asn1params),void 0!==e.paramempty&&(this.paramEmpty=e.paramempty)),null===this.asn1Params&&!1===this.paramEmpty&&null!==this.nameAlg){void 0!==this.nameAlg.name&&(this.nameAlg=this.nameAlg.name);var r=this.nameAlg.toLowerCase();"withdsa"!==r.substr(-7,7)&&"withecdsa"!==r.substr(-9,9)&&(this.asn1Params=new t.DERNull)}},Xe(ce.asn1.x509.AlgorithmIdentifier,ce.asn1.ASN1Object),ce.asn1.x509.AlgorithmIdentifier.PSSNAME2ASN1TLV={SHAwithRSAandMGF1:"300d06092a864886f70d01010a3000",SHA256withRSAandMGF1:"303d06092a864886f70d01010a3030a00d300b0609608648016503040201a11a301806092a864886f70d010108300b0609608648016503040201a203020120",SHA384withRSAandMGF1:"303d06092a864886f70d01010a3030a00d300b0609608648016503040202a11a301806092a864886f70d010108300b0609608648016503040202a203020130",SHA512withRSAandMGF1:"303d06092a864886f70d01010a3030a00d300b0609608648016503040203a11a301806092a864886f70d010108300b0609608648016503040203a203020140"},ce.asn1.x509.GeneralName=function(e){ce.asn1.x509.GeneralName.superclass.constructor.call(this);var t=ce.asn1,n=t.x509,r=n.X500Name,i=n.OtherName,s=t.DERIA5String,a=(t.DERPrintableString,t.DEROctetString),o=t.DERTaggedObject,c=t.ASN1Object,u=Error;this.params=null,this.setByParam=function(e){this.params=e},this.tohex=function(){var e,t,n=this.params,h=!1;if(void 0!==n.other)e="a0",t=new i(n.other);else if(void 0!==n.rfc822)e="81",t=new s({str:n.rfc822});else if(void 0!==n.dns)e="82",t=new s({str:n.dns});else if(void 0!==n.dn)e="a4",h=!0,t="string"==typeof n.dn?new r({str:n.dn}):n.dn instanceof ce.asn1.x509.X500Name?n.dn:new r(n.dn);else if(void 0!==n.ldapdn)e="a4",h=!0,t=new r({ldapstr:n.ldapdn});else if(void 0!==n.certissuer||void 0!==n.certsubj){var l,d;e="a4",h=!0;var m=null;if(void 0!==n.certsubj?(l=!1,d=n.certsubj):(l=!0,d=n.certissuer),d.match(/^[0-9A-Fa-f]+$/),-1!=d.indexOf("-----BEGIN ")&&(m=Ne(d)),null==m)throw new Error("certsubj/certissuer not cert");var p,f=new rt;f.hex=m,p=l?f.getIssuerHex():f.getSubjectHex(),(t=new c).hTLV=p}else if(void 0!==n.uri)e="86",t=new s({str:n.uri});else{if(void 0===n.ip)throw new u("improper params");var g;e="87";var y=n.ip;try{if(y.match(/^[0-9a-f]+$/)){var v=y.length;if(8!=v&&16!=v&&32!=v&&64!=v)throw"err";g=y}else g=Be(y)}catch(e){throw new u("malformed IP address: "+n.ip+":"+e.message)}t=new a({hex:g})}return new o({tag:e,explicit:h,obj:t}).tohex()},this.getEncodedHex=function(){return this.tohex()},void 0!==e&&this.setByParam(e)},Xe(ce.asn1.x509.GeneralName,ce.asn1.ASN1Object),ce.asn1.x509.GeneralNames=function(e){ce.asn1.x509.GeneralNames.superclass.constructor.call(this);var t=ce.asn1;this.setByParamArray=function(e){for(var n=0;n<e.length;n++){var r=new t.x509.GeneralName(e[n]);this.asn1Array.push(r)}},this.tohex=function(){return new t.DERSequence({array:this.asn1Array}).tohex()},this.getEncodedHex=function(){return this.tohex()},this.asn1Array=new Array,void 0!==e&&this.setByParamArray(e)},Xe(ce.asn1.x509.GeneralNames,ce.asn1.ASN1Object),ce.asn1.x509.OtherName=function(e){ce.asn1.x509.OtherName.superclass.constructor.call(this);var t=ce.asn1,n=t.DERObjectIdentifier,r=t.DERSequence,i=t.ASN1Util.newObject;this.params=null,this.setByParam=function(e){this.params=e},this.tohex=function(){var e=this.params;if(null==e.oid||null==e.value)throw new Error("oid or value not specified");var t=new n({oid:e.oid}),s=i({tag:{tag:"a0",explicit:!0,obj:e.value}});return new r({array:[t,s]}).tohex()},this.getEncodedHex=function(){return this.tohex()},void 0!==e&&this.setByParam(e)},Xe(ce.asn1.x509.OtherName,ce.asn1.ASN1Object),ce.asn1.x509.OID=new function(){var e=ce.asn1.DERObjectIdentifier;this.name2oidList={sha1:"1.3.14.3.2.26",sha256:"2.16.840.1.101.3.4.2.1",sha384:"2.16.840.1.101.3.4.2.2",sha512:"2.16.840.1.101.3.4.2.3",sha224:"2.16.840.1.101.3.4.2.4",md5:"1.2.840.113549.2.5",md2:"1.3.14.7.2.2.1",ripemd160:"1.3.36.3.2.1",MD2withRSA:"1.2.840.113549.1.1.2",MD4withRSA:"1.2.840.113549.1.1.3",MD5withRSA:"1.2.840.113549.1.1.4",SHA1withRSA:"1.2.840.113549.1.1.5","pkcs1-MGF":"1.2.840.113549.1.1.8",rsaPSS:"1.2.840.113549.1.1.10",SHA224withRSA:"1.2.840.113549.1.1.14",SHA256withRSA:"1.2.840.113549.1.1.11",SHA384withRSA:"1.2.840.113549.1.1.12",SHA512withRSA:"1.2.840.113549.1.1.13",SHA1withECDSA:"1.2.840.10045.4.1",SHA224withECDSA:"1.2.840.10045.4.3.1",SHA256withECDSA:"1.2.840.10045.4.3.2",SHA384withECDSA:"1.2.840.10045.4.3.3",SHA512withECDSA:"1.2.840.10045.4.3.4",dsa:"1.2.840.10040.4.1",SHA1withDSA:"1.2.840.10040.4.3",SHA224withDSA:"2.16.840.1.101.3.4.3.1",SHA256withDSA:"2.16.840.1.101.3.4.3.2",rsaEncryption:"1.2.840.113549.1.1.1",commonName:"2.5.4.3",countryName:"2.5.4.6",localityName:"2.5.4.7",stateOrProvinceName:"2.5.4.8",streetAddress:"2.5.4.9",organizationName:"2.5.4.10",organizationalUnitName:"2.5.4.11",domainComponent:"0.9.2342.19200300.100.1.25",userId:"0.9.2342.19200300.100.1.1",surname:"2.5.4.4",givenName:"2.5.4.42",title:"2.5.4.12",distinguishedName:"2.5.4.49",emailAddress:"1.2.840.113549.1.9.1",description:"2.5.4.13",businessCategory:"2.5.4.15",postalCode:"2.5.4.17",uniqueIdentifier:"2.5.4.45",organizationIdentifier:"2.5.4.97",jurisdictionOfIncorporationL:"1.3.6.1.4.1.311.60.2.1.1",jurisdictionOfIncorporationSP:"1.3.6.1.4.1.311.60.2.1.2",jurisdictionOfIncorporationC:"1.3.6.1.4.1.311.60.2.1.3",subjectDirectoryAttributes:"2.5.29.9",subjectKeyIdentifier:"2.5.29.14",keyUsage:"2.5.29.15",subjectAltName:"2.5.29.17",issuerAltName:"2.5.29.18",basicConstraints:"2.5.29.19",cRLNumber:"2.5.29.20",cRLReason:"2.5.29.21",nameConstraints:"2.5.29.30",cRLDistributionPoints:"2.5.29.31",certificatePolicies:"2.5.29.32",anyPolicy:"2.5.29.32.0",authorityKeyIdentifier:"2.5.29.35",policyConstraints:"2.5.29.36",extKeyUsage:"2.5.29.37",authorityInfoAccess:"1.3.6.1.5.5.7.1.1",ocsp:"1.3.6.1.5.5.7.48.1",ocspBasic:"1.3.6.1.5.5.7.48.1.1",ocspNonce:"1.3.6.1.5.5.7.48.1.2",ocspNoCheck:"1.3.6.1.5.5.7.48.1.5",caIssuers:"1.3.6.1.5.5.7.48.2",anyExtendedKeyUsage:"2.5.29.37.0",serverAuth:"1.3.6.1.5.5.7.3.1",clientAuth:"1.3.6.1.5.5.7.3.2",codeSigning:"1.3.6.1.5.5.7.3.3",emailProtection:"1.3.6.1.5.5.7.3.4",timeStamping:"1.3.6.1.5.5.7.3.8",ocspSigning:"1.3.6.1.5.5.7.3.9",dateOfBirth:"1.3.6.1.5.5.7.9.1",placeOfBirth:"1.3.6.1.5.5.7.9.2",gender:"1.3.6.1.5.5.7.9.3",countryOfCitizenship:"1.3.6.1.5.5.7.9.4",countryOfResidence:"1.3.6.1.5.5.7.9.5",ecPublicKey:"1.2.840.10045.2.1","P-256":"1.2.840.10045.3.1.7",secp256r1:"1.2.840.10045.3.1.7",secp256k1:"1.3.132.0.10",secp384r1:"1.3.132.0.34",secp521r1:"1.3.132.0.35",pkcs5PBES2:"1.2.840.113549.1.5.13",pkcs5PBKDF2:"1.2.840.113549.1.5.12","des-EDE3-CBC":"1.2.840.113549.3.7",data:"1.2.840.113549.1.7.1","signed-data":"1.2.840.113549.1.7.2","enveloped-data":"1.2.840.113549.1.7.3","digested-data":"1.2.840.113549.1.7.5","encrypted-data":"1.2.840.113549.1.7.6","authenticated-data":"1.2.840.113549.1.9.16.1.2",tstinfo:"1.2.840.113549.1.9.16.1.4",signingCertificate:"1.2.840.113549.1.9.16.2.12",timeStampToken:"1.2.840.113549.1.9.16.2.14",signaturePolicyIdentifier:"1.2.840.113549.1.9.16.2.15",etsArchiveTimeStamp:"1.2.840.113549.1.9.16.2.27",signingCertificateV2:"1.2.840.113549.1.9.16.2.47",etsArchiveTimeStampV2:"1.2.840.113549.1.9.16.2.48",extensionRequest:"1.2.840.113549.1.9.14",contentType:"1.2.840.113549.1.9.3",messageDigest:"1.2.840.113549.1.9.4",signingTime:"1.2.840.113549.1.9.5",counterSignature:"1.2.840.113549.1.9.6",archiveTimeStampV3:"0.4.0.1733.2.4",pdfRevocationInfoArchival:"1.2.840.113583.1.1.8",adobeTimeStamp:"1.2.840.113583.1.1.9.1"},this.atype2oidList={CN:"2.5.4.3",L:"2.5.4.7",ST:"2.5.4.8",O:"2.5.4.10",OU:"2.5.4.11",C:"2.5.4.6",STREET:"2.5.4.9",DC:"0.9.2342.19200300.100.1.25",UID:"0.9.2342.19200300.100.1.1",SN:"2.5.4.4",T:"2.5.4.12",DN:"2.5.4.49",E:"1.2.840.113549.1.9.1",description:"2.5.4.13",businessCategory:"2.5.4.15",postalCode:"2.5.4.17",serialNumber:"2.5.4.5",uniqueIdentifier:"2.5.4.45",organizationIdentifier:"2.5.4.97",jurisdictionOfIncorporationL:"1.3.6.1.4.1.311.60.2.1.1",jurisdictionOfIncorporationSP:"1.3.6.1.4.1.311.60.2.1.2",jurisdictionOfIncorporationC:"1.3.6.1.4.1.311.60.2.1.3"},this.objCache={},this.name2obj=function(t){if(void 0!==this.objCache[t])return this.objCache[t];if(void 0===this.name2oidList[t])throw"Name of ObjectIdentifier not defined: "+t;var n=this.name2oidList[t],r=new e({oid:n});return this.objCache[t]=r,r},this.atype2obj=function(t){if(void 0!==this.objCache[t])return this.objCache[t];var n;if(t.match(/^\d+\.\d+\.[0-9.]+$/))n=t;else if(void 0!==this.atype2oidList[t])n=this.atype2oidList[t];else{if(void 0===this.name2oidList[t])throw new Error("AttributeType name undefined: "+t);n=this.name2oidList[t]}var r=new e({oid:n});return this.objCache[t]=r,r},this.registerOIDs=function(e){if(this.checkOIDs(e))for(var t in e)this.name2oidList[t]=e[t]},this.checkOIDs=function(e){try{var t=Object.keys(e);return 0!=t.length&&(t.map((function(e,t,n){if(!this[e].match(/^[0-2]\.[0-9.]+$/))throw new Error("value is not OID")}),e),!0)}catch(e){return!1}}},ce.asn1.x509.OID.oid2name=function(e){var t=ce.asn1.x509.OID.name2oidList;for(var n in t)if(t[n]==e)return n;return""},ce.asn1.x509.OID.oid2atype=function(e){var t=ce.asn1.x509.OID.atype2oidList;for(var n in t)if(t[n]==e)return n;return e},ce.asn1.x509.OID.name2oid=function(e){if(e.match(/^[0-9.]+$/))return e;var t=ce.asn1.x509.OID.name2oidList;return void 0===t[e]?"":t[e]},ce.asn1.x509.X509Util={},ce.asn1.x509.X509Util.newCertPEM=function(e){var t=ce.asn1.x509;t.TBSCertificate;return new(0,t.Certificate)(e).getPEM()},void 0!==ce&&ce||(ce={}),void 0!==ce.asn1&&ce.asn1||(ce.asn1={}),void 0!==ce.asn1.cms&&ce.asn1.cms||(ce.asn1.cms={}),ce.asn1.cms.Attribute=function(e){var t=Error,n=ce.asn1,r=n.DERSequence,i=n.DERSet,s=n.DERObjectIdentifier;this.params=null,this.typeOid=null,this.setByParam=function(e){this.params=e},this.getValueArray=function(){throw new t("not yet implemented abstract")},this.tohex=function(){var e=new s({oid:this.typeOid}),t=new i({array:this.getValueArray()});return new r({array:[e,t]}).tohex()},this.getEncodedHex=function(){return this.tohex()}},Xe(ce.asn1.cms.Attribute,ce.asn1.ASN1Object),ce.asn1.cms.ContentType=function(e){var t=ce.asn1;t.cms.ContentType.superclass.constructor.call(this),this.typeOid="1.2.840.113549.1.9.3",this.getValueArray=function(){return[new t.DERObjectIdentifier(this.params.type)]},null!=e&&this.setByParam(e)},Xe(ce.asn1.cms.ContentType,ce.asn1.cms.Attribute),ce.asn1.cms.MessageDigest=function(e){var t=ce.asn1,n=t.DEROctetString;t.cms.MessageDigest.superclass.constructor.call(this),this.typeOid="1.2.840.113549.1.9.4",this.getValueArray=function(){return[new n(this.params)]},null!=e&&this.setByParam(e)},Xe(ce.asn1.cms.MessageDigest,ce.asn1.cms.Attribute),ce.asn1.cms.SigningTime=function(e){var t=ce.asn1;t.cms.SigningTime.superclass.constructor.call(this),this.typeOid="1.2.840.113549.1.9.5",this.getValueArray=function(){return[new t.x509.Time(this.params)]},null!=e&&this.setByParam(e)},Xe(ce.asn1.cms.SigningTime,ce.asn1.cms.Attribute),ce.asn1.cms.SigningCertificate=function(e){var t=Error,n=ce,r=n.asn1,i=r.DERSequence,s=r.cms,a=s.ESSCertID;n.crypto;s.SigningCertificate.superclass.constructor.call(this),this.typeOid="1.2.840.113549.1.9.16.2.12",this.getValueArray=function(){if(null==this.params||null==this.params||null==this.params.array)throw new t("parameter 'array' not specified");for(var n=this.params.array,r=[],s=0;s<n.length;s++){var o=n[s];0!=e.hasis||"string"!=typeof o||-1==o.indexOf("-----BEGIN")&&!le.isASN1HEX(o)||(o={cert:o}),0!=o.hasis&&0==e.hasis&&(o.hasis=!1),r.push(new a(o))}var c=new i({array:r});return[new i({array:[c]})]},null!=e&&this.setByParam(e)},Xe(ce.asn1.cms.SigningCertificate,ce.asn1.cms.Attribute),ce.asn1.cms.ESSCertID=function(e){ce.asn1.cms.ESSCertID.superclass.constructor.call(this);var t=Error,n=ce,r=n.asn1,i=r.DEROctetString,s=r.DERSequence,a=r.cms.IssuerSerial;this.params=null,this.getCertHash=function(e,r){if(null!=e.hash)return e.hash;if("string"==typeof e&&-1==e.indexOf("-----BEGIN")&&!le.isASN1HEX(e))return e;var i,s,a;if("string"==typeof e)i=e;else{if(null==e.cert)throw new t("hash nor cert unspecified");i=e.cert}if(s=-1!=i.indexOf("-----BEGIN")?Ne(i):i,"string"==typeof e&&(-1!=e.indexOf("-----BEGIN")?s=Ne(e):le.isASN1HEX(e)&&(s=e)),null!=e.alg)a=e.alg;else{if(null==r)throw new t("hash alg unspecified");a=r}return n.crypto.Util.hashHex(s,a)},this.tohex=function(){var e=this.params,t=this.getCertHash(e,"sha1"),n=[];return n.push(new i({hex:t})),("string"==typeof e&&-1!=e.indexOf("-----BEGIN")||null!=e.cert&&0!=e.hasis||null!=e.issuer&&null!=e.serial)&&n.push(new a(e)),new s({array:n}).tohex()},this.getEncodedHex=function(){return this.tohex()},null!=e&&this.setByParam(e)},Xe(ce.asn1.cms.ESSCertID,ce.asn1.ASN1Object),ce.asn1.cms.SigningCertificateV2=function(e){var t=Error,n=ce,r=n.asn1,i=r.DERSequence,s=(r.x509,r.cms),a=s.ESSCertIDv2;n.crypto;s.SigningCertificateV2.superclass.constructor.call(this),this.typeOid="1.2.840.113549.1.9.16.2.47",this.getValueArray=function(){if(null==this.params||null==this.params||null==this.params.array)throw new t("parameter 'array' not specified");for(var n=this.params.array,r=[],s=0;s<n.length;s++){var o=n[s];null==e.alg&&0!=e.hasis||"string"!=typeof o||-1==o.indexOf("-----BEGIN")&&!le.isASN1HEX(o)||(o={cert:o}),null==o.alg&&null!=e.alg&&(o.alg=e.alg),0!=o.hasis&&0==e.hasis&&(o.hasis=!1),r.push(new a(o))}var c=new i({array:r});return[new i({array:[c]})]},null!=e&&this.setByParam(e)},Xe(ce.asn1.cms.SigningCertificateV2,ce.asn1.cms.Attribute),ce.asn1.cms.ESSCertIDv2=function(e){ce.asn1.cms.ESSCertIDv2.superclass.constructor.call(this);Error;var t=ce.asn1,n=t.DEROctetString,r=t.DERSequence,i=t.cms.IssuerSerial,s=t.x509.AlgorithmIdentifier;this.params=null,this.tohex=function(){var e=this.params,t=this.getCertHash(e,"sha256"),a=[];return null!=e.alg&&"sha256"!=e.alg&&a.push(new s({name:e.alg})),a.push(new n({hex:t})),("string"==typeof e&&-1!=e.indexOf("-----BEGIN")||null!=e.cert&&0!=e.hasis||null!=e.issuer&&null!=e.serial)&&a.push(new i(e)),new r({array:a}).tohex()},this.getEncodedHex=function(){return this.tohex()},null!=e&&this.setByParam(e)},Xe(ce.asn1.cms.ESSCertIDv2,ce.asn1.cms.ESSCertID),ce.asn1.cms.IssuerSerial=function(e){var t=Error,n=ce.asn1,r=n.DERInteger,i=n.DERSequence,s=n.cms,a=n.x509.GeneralNames,o=rt;s.IssuerSerial.superclass.constructor.call(this),this.setByParam=function(e){this.params=e},this.tohex=function(){var e,n,s=this.params;if("string"==typeof s&&-1!=s.indexOf("-----BEGIN")||null!=s.cert){var c;c=null!=s.cert?s.cert:s;var u=new o;u.readCertPEM(c),e=u.getIssuer(),n={hex:u.getSerialNumberHex()}}else{if(null==s.issuer||!s.serial)throw new t("cert or issuer and serial parameter not specified");e=s.issuer,n=s.serial}var h=new a([{dn:e}]),l=new r(n);return new i({array:[h,l]}).tohex()},this.getEncodedHex=function(){return this.tohex()},null!=e&&this.setByParam(e)},Xe(ce.asn1.cms.IssuerSerial,ce.asn1.ASN1Object),ce.asn1.cms.SignerIdentifier=function(e){var t=ce.asn1,n=(t.DERInteger,t.DERSequence,t.cms),r=n.IssuerAndSerialNumber,i=n.SubjectKeyIdentifier;t.x509.X500Name,Error;n.SignerIdentifier.superclass.constructor.call(this),this.params=null,this.tohex=function(){var e=this.params;if("isssn"==e.type)return new r(e).tohex();if("skid"==e.type)return new i(e).tohex();throw new Error("wrong property for isssn or skid")},this.getEncodedHex=function(){return this.tohex()},null!=e&&this.setByParam(e)},Xe(ce.asn1.cms.SignerIdentifier,ce.asn1.ASN1Object),ce.asn1.cms.IssuerAndSerialNumber=function(e){var t=ce.asn1,n=t.DERInteger,r=t.DERSequence,i=t.cms,s=t.x509.X500Name,a=rt,o=Error;i.IssuerAndSerialNumber.superclass.constructor.call(this),this.params=null,this.tohex=function(){var e,t,i=this.params;if("string"==typeof i&&-1!=i.indexOf("-----BEGIN")||null!=i.cert){var c;c=null!=i.cert?i.cert:i;var u=new a;u.readCertPEM(c),e=u.getIssuer(),t={hex:u.getSerialNumberHex()}}else{if(null==i.issuer||!i.serial)throw new o("cert or issuer and serial parameter not specified");e=i.issuer,t=i.serial}var h=new s(e),l=new n(t);return new r({array:[h,l]}).tohex()},this.getEncodedHex=function(){return this.tohex()},this.setByParam=function(e){this.params=e},null!=e&&this.setByParam(e)},Xe(ce.asn1.cms.IssuerAndSerialNumber,ce.asn1.ASN1Object),ce.asn1.cms.SubjectKeyIdentifier=function(e){var t=ce.asn1,n=(t.DERInteger,t.DERSequence,t.ASN1Util.newObject),r=t.cms,i=(r.IssuerAndSerialName,r.SubjectKeyIdentifier,t.x509.X500Name,rt),s=Error;r.SubjectKeyIdentifier.superclass.constructor.call(this),this.tohex=function(){var e,t=this.params;if(null==t.cert&&null==t.skid)throw new s("property cert nor skid undefined");null!=t.cert?e=new i(t.cert).getExtSubjectKeyIdentifier().kid.hex:null!=t.skid&&(e=t.skid);return n({tag:{tage:"a0",obj:{octstr:{hex:e}}}}).tohex()},this.getEncodedHex=function(){return this.tohex()},null!=e&&this.setByParam(e)},Xe(ce.asn1.cms.SubjectKeyIdentifier,ce.asn1.ASN1Object),ce.asn1.cms.AttributeList=function(e){var t=Error,n=ce.asn1,r=n.DERSet,i=n.cms;i.AttributeList.superclass.constructor.call(this),this.params=null,this.hTLV=null,this.setByParam=function(e){this.params=e},this.tohex=function(){var e=this.params;if(null!=this.hTLV)return this.hTLV;var n=!0;null!=e.sortflag&&(n=e.sortflag);for(var s=e.array,a=[],o=0;o<s.length;o++){var c=s[o],u=c.attr;if("contentType"==u)a.push(new i.ContentType(c));else if("messageDigest"==u)a.push(new i.MessageDigest(c));else if("signingTime"==u)a.push(new i.SigningTime(c));else if("signingCertificate"==u)a.push(new i.SigningCertificate(c));else if("signingCertificateV2"==u)a.push(new i.SigningCertificateV2(c));else if("signaturePolicyIdentifier"==u)a.push(new ce.asn1.cades.SignaturePolicyIdentifier(c));else{if("signatureTimeStamp"!=u&&"timeStampToken"!=u)throw new t("unknown attr: "+u);a.push(new ce.asn1.cades.SignatureTimeStamp(c))}}var h=new r({array:a,sortflag:n});return this.hTLV=h.tohex(),this.hTLV},this.getEncodedHex=function(){return this.tohex()},null!=e&&this.setByParam(e)},Xe(ce.asn1.cms.AttributeList,ce.asn1.ASN1Object),ce.asn1.cms.SignerInfo=function(e){var t=Error,n=ce,r=n.asn1,i=r.DERInteger,s=r.DEROctetString,a=r.DERSequence,o=r.DERTaggedObject,c=r.cms,u=c.SignerIdentifier,h=c.AttributeList,l=(c.ContentType,c.EncapsulatedContentInfo,c.MessageDigest,c.SignedData,r.x509.AlgorithmIdentifier),d=n.crypto,m=Ze;c.SignerInfo.superclass.constructor.call(this),this.params=null,this.sign=function(){var e=this.params,t=e.sigalg,n=new h(e.sattrs).tohex(),r=m.getKey(e.signkey),i=new d.Signature({alg:t});i.init(r),i.updateHex(n);var s=i.sign();e.sighex=s},this.tohex=function(){var e=this.params,n=[];if(n.push(new i({int:e.version})),n.push(new u(e.id)),n.push(new l({name:e.hashalg})),null!=e.sattrs){var r=new h(e.sattrs);try{n.push(new o({tag:"a0",explicit:!1,obj:r}))}catch(e){throw new t("si sattr error: "+e)}}if(null!=e.sigalgfield?n.push(new l({name:e.sigalgfield})):n.push(new l({name:e.sigalg})),null==e.sighex&&null!=e.signkey&&this.sign(),n.push(new s({hex:e.sighex})),null!=e.uattrs){r=new h(e.uattrs);try{n.push(new o({tag:"a1",explicit:!1,obj:r}))}catch(e){throw new t("si uattr error: "+e)}}return new a({array:n}).tohex()},this.getEncodedHex=function(){return this.tohex()},null!=e&&this.setByParam(e)},Xe(ce.asn1.cms.SignerInfo,ce.asn1.ASN1Object),ce.asn1.cms.EncapsulatedContentInfo=function(e){var t=ce.asn1,n=t.DERTaggedObject,r=t.DERSequence,i=t.DERObjectIdentifier,s=t.DEROctetString;t.cms.EncapsulatedContentInfo.superclass.constructor.call(this),this.params=null,this.tohex=function(){var e=this.params,t=[];if(t.push(new i(e.type)),null!=e.content&&(null!=e.content.hex||null!=e.content.str)&&1!=e.isDetached){var a=new s(e.content),o=new n({tag:"a0",explicit:!0,obj:a});t.push(o)}return new r({array:t}).tohex()},this.getEncodedHex=function(){return this.tohex()},this.setByParam=function(e){this.params=e},null!=e&&this.setByParam(e)},Xe(ce.asn1.cms.EncapsulatedContentInfo,ce.asn1.ASN1Object),ce.asn1.cms.ContentInfo=function(e){var t=ce.asn1,n=t.DERTaggedObject,r=t.DERSequence,i=t.DERObjectIdentifier;t.x509.OID.name2obj;ce.asn1.cms.ContentInfo.superclass.constructor.call(this),this.params=null,this.tohex=function(){var e=this.params,t=[];t.push(new i(e.type));var s=new n({tag:"a0",explicit:!0,obj:e.obj});return t.push(s),new r({array:t}).tohex()},this.getEncodedHex=function(){return this.tohex()},this.setByParam=function(e){this.params=e},null!=e&&this.setByParam(e)},Xe(ce.asn1.cms.ContentInfo,ce.asn1.ASN1Object),ce.asn1.cms.SignedData=function(e){Error;var t=ce.asn1,n=(t.ASN1Object,t.DERInteger),r=t.DERSet,i=t.DERSequence,s=(t.DERTaggedObject,t.cms),a=s.EncapsulatedContentInfo,o=s.SignerInfo,c=s.ContentInfo,u=s.CertificateSet,h=s.RevocationInfoChoices,l=t.x509.AlgorithmIdentifier;ce.asn1.cms.SignedData.superclass.constructor.call(this),this.params=null,this.checkAndFixParam=function(){var e=this.params;this._setDigestAlgs(e),this._setContentTypeByEContent(e),this._setMessageDigestByEContent(e),this._setSignerInfoVersion(e),this._setSignedDataVersion(e)},this._setDigestAlgs=function(e){for(var t={},n=e.sinfos,r=0;r<n.length;r++){t[n[r].hashalg]=1}e.hashalgs=Object.keys(t).sort()},this._setContentTypeByEContent=function(e){for(var t=e.econtent.type,n=e.sinfos,r=0;r<n.length;r++){var i=n[r];this._getAttrParamByName(i,"contentType").type=t}},this._setMessageDigestByEContent=function(e){var t=e.econtent,n=(e.econtent.type,t.content.hex);null==n&&"data"==t.type&&null!=t.content.str&&(n=Ee(t.content.str));for(var r=e.sinfos,i=0;i<r.length;i++){var s=r[i],a=s.hashalg,o=this._getAttrParamByName(s,"messageDigest"),c=ce.crypto.Util.hashHex(n,a);o.hex=c}},this._getAttrParamByName=function(e,t){for(var n=e.sattrs.array,r=0;r<n.length;r++)if(n[r].attr==t)return n[r]},this._setSignerInfoVersion=function(e){for(var t=e.sinfos,n=0;n<t.length;n++){var r=t[n],i=1;"skid"==r.id.type&&(i=3),r.version=i}},this._setSignedDataVersion=function(e){var t=this._getSignedDataVersion(e);e.version=t},this._getSignedDataVersion=function(e){if(null!=e.revinfos)for(var t=e.revinfos,n=0;n<t.length;n++){if(null!=t[n].ocsp)return 5}var r=e.sinfos;for(n=0;n<r.length;n++){if(3==e.sinfos[n].version)return 3}return"data"!=e.econtent.type?3:1},this.tohex=function(){var e=this.params;null!=this.getEncodedHexPrepare&&this.getEncodedHexPrepare(),1!=e.fixed&&this.checkAndFixParam();var t=[];t.push(new n({int:e.version}));for(var s=[],c=0;c<e.hashalgs.length;c++){var d=e.hashalgs[c];s.push(new l({name:d}))}t.push(new r({array:s})),t.push(new a(e.econtent)),null!=e.certs&&t.push(new u(e.certs)),null!=e.revinfos&&t.push(new h(e.revinfos));var m=[];for(c=0;c<e.sinfos.length;c++){var p=e.sinfos[c];m.push(new o(p))}return t.push(new r({array:m})),new i({array:t}).tohex()},this.getEncodedHex=function(){return this.tohex()},this.getContentInfo=function(){return new c({type:"signed-data",obj:this})},this.getContentInfoEncodedHex=function(){return this.getContentInfo().tohex()},null!=e&&this.setByParam(e)},Xe(ce.asn1.cms.SignedData,ce.asn1.ASN1Object),ce.asn1.cms.CertificateSet=function(e){ce.asn1.cms.CertificateSet.superclass.constructor.call(this);var t=Error,n=ce.asn1,r=n.DERTaggedObject,i=n.DERSet,s=n.ASN1Object;this.params=null,this.tohex=function(){var e,n=this.params,a=[];if(n instanceof Array)e=n;else{if(null==n.array)throw new t("cert array not specified");e=n.array}for(var o=0;o<e.length;o++){var c=Ne(e[o]),u=new s;u.hTLV=c,a.push(u)}var h={array:a};0==n.sortflag&&(h.sortflag=!1);var l=new i(h);return new r({tag:"a0",explicit:!1,obj:l}).tohex()},this.getEncodedHex=function(){return this.tohex()},null!=e&&this.setByParam(e)},Xe(ce.asn1.cms.CertificateSet,ce.asn1.ASN1Object),ce.asn1.cms.RevocationInfoChoices=function(e){ce.asn1.cms.RevocationInfoChoices.superclass.constructor.call(this),this.params=null,this.tohex=function(){var e=this.params;if(!e instanceof Array)throw new Error("params is not array");for(var t=[],n=0;n<e.length;n++)t.push(new ce.asn1.cms.RevocationInfoChoice(e[n]));return ce.asn1.ASN1Util.newObject({tag:{tagi:"a1",obj:{set:t}}}).tohex()},this.getEncodedHex=function(){return this.tohex()},null!=e&&this.setByParam(e)},Xe(ce.asn1.cms.RevocationInfoChoices,ce.asn1.ASN1Object),ce.asn1.cms.RevocationInfoChoice=function(e){ce.asn1.cms.RevocationInfoChoice.superclass.constructor.call(this),this.params=null,this.tohex=function(){var e=this.params;if(null!=e.crl&&"string"==typeof e.crl){var t=e.crl;return-1!=e.crl.indexOf("-----BEGIN")&&(t=Ne(e.crl)),t}if(null!=e.ocsp)return ce.asn1.ASN1Util.newObject({tag:{tagi:"a1",obj:new ce.asn1.cms.OtherRevocationFormat(e)}}).tohex();throw new Error("property crl or ocsp undefined")},this.getEncodedHex=function(){return this.tohex()},null!=e&&this.setByParam(e)},Xe(ce.asn1.cms.RevocationInfoChoice,ce.asn1.ASN1Object),ce.asn1.cms.OtherRevocationFormat=function(e){ce.asn1.cms.OtherRevocationFormat.superclass.constructor.call(this);var t=Error,n=ce,r=n.asn1.ASN1Util.newObject,i=n.lang.String.isHex;this.params=null,this.tohex=function(){var e=this.params;if(null==e.ocsp)throw new t("property ocsp not specified");if(!i(e.ocsp)||!le.isASN1HEX(e.ocsp))throw new t("ocsp value not ASN.1 hex string");return r({seq:[{oid:"1.3.6.1.5.5.7.16.2"},{asn1:{tlv:e.ocsp}}]}).tohex()},this.getEncodedHex=function(){return this.tohex()},null!=e&&this.setByParam(e)},Xe(ce.asn1.cms.OtherRevocationFormat,ce.asn1.ASN1Object),ce.asn1.cms.CMSUtil=new function(){},ce.asn1.cms.CMSUtil.newSignedData=function(e){return new ce.asn1.cms.SignedData(e)},ce.asn1.cms.CMSUtil.verifySignedData=function(e){var t=ce,n=t.asn1,r=n.cms,i=(r.SignerInfo,r.SignedData,r.SigningTime,r.SigningCertificate,r.SigningCertificateV2,n.cades.SignaturePolicyIdentifier,t.lang.String.isHex),s=le,a=s.getVbyList,o=s.getTLVbyList,c=s.getIdxbyList,u=s.getChildIdx,h=s.getTLV,l=s.oidname,d=t.crypto.Util.hashHex;void 0===e.cms&&i(e.cms);var m=e.cms,p=function(e,t){var n=t.idx;t.signerid_issuer1=o(e,n,[1,0],"30"),t.signerid_serial1=a(e,n,[1,1],"02"),t.hashalg=l(a(e,n,[2,0],"06"));var r=c(e,n,[3],"a0");t.idxSignedAttrs=r,f(e,t,r);var i=u(e,n).length;if(i<6)throw"malformed SignerInfo";t.sigalg=l(a(e,n,[i-2,0],"06")),t.sigval=a(e,n,[i-1],"04")},f=function(e,t,n){var r=u(e,n);t.signedAttrIdxList=r;for(var i=0;i<r.length;i++){var s,o=r[i],c=a(e,o,[0],"06");"2a864886f70d010905"===c?(s=we(a(e,o,[1,0])),t.saSigningTime=s):"2a864886f70d010904"===c&&(s=a(e,o,[1,0],"04"),t.saMessageDigest=s)}},g=function(e,t,n,r){n.verifyDetail={};var i=n.verifyDetail,s=t.parse.econtent,a=n.hashalg,o=n.saMessageDigest;i.validMessageDigest=!1,d(s,a)===o&&(i.validMessageDigest=!0),function(e,t,n,r){var i,s=t.parse.certsIdx;if(void 0===t.certs){i=[],t.certkeys=[];for(var a=u(e,s),o=0;o<a.length;o++){var c=h(e,a[o]),l=new rt;l.readCertHex(c),i[o]=l,t.certkeys[o]=l.getPublicKey()}t.certs=i}else i=t.certs;t.cccc=i.length,t.cccci=a.length;for(o=0;o<i.length;o++){var d=l.getIssuerHex(),m=l.getSerialNumberHex();n.signerid_issuer1===d&&n.signerid_serial1===m&&(n.certkey_idx=o)}}(e,t,n),i.validSignatureValue=!1;var c=n.sigalg,l="31"+h(e,n.idxSignedAttrs).substr(2);n.signedattrshex=l;var m=t.certs[n.certkey_idx].getPublicKey(),p=new ce.crypto.Signature({alg:c});p.init(m),p.updateHex(l);var f=p.verify(n.sigval);i.validSignatureValue_isValid=f,!0===f&&(i.validSignatureValue=!0),n.isValid=!1,i.validMessageDigest&&i.validSignatureValue&&(n.isValid=!0)},y={isValid:!1,parse:{}};return function(e,t){if("2a864886f70d010702"!==a(e,0,[0],"06"))return t;t.cmsType="signedData",t.econtent=a(e,0,[1,0,2,1,0]),function(e,t){for(var n,r=3;r<6;r++)if(void 0!==(n=c(e,0,[1,0,r]))){var i=e.substr(n,2);"a0"===i&&(t.certsIdx=n),"a1"===i&&(t.revinfosIdx=n),"31"===i&&(t.signerinfosIdx=n)}}(e,t),t.signerInfos=[],function(e,t){var n=t.signerinfosIdx;if(void 0!==n){var r=u(e,n);t.signerInfoIdxList=r;for(var i=0;i<r.length;i++){var s={idx:r[i]};p(e,s),t.signerInfos.push(s)}}}(e,t)}(m,y.parse),function(e,t){for(var n=t.parse.signerInfos,r=n.length,i=!0,s=0;s<r;s++){var a=n[s];g(e,t,a,s),a.isValid||(i=!1)}t.isValid=i}(m,y),y},ce.asn1.cms.CMSParser=function(){var e=Error,t=rt,n=new t,r=le,i=r.getV,s=r.getTLV,a=(r.getIdxbyList,r.getTLVbyList),o=r.getTLVbyListEx,c=r.getVbyList,u=r.getVbyListEx,h=r.getChildIdx;this.getCMSSignedData=function(e){var t=a(e,0,[1,0]);return this.getSignedData(t)},this.getSignedData=function(e){var t=h(e,0),n={},r=i(e,t[0]),a=parseInt(r,16);n.version=a;var c=s(e,t[1]);n.hashalgs=this.getHashAlgArray(c);var u=s(e,t[2]);n.econtent=this.getEContent(u);var l=o(e,0,["[0]"]);null!=l&&(n.certs=this.getCertificateSet(l));o(e,0,["[1]"]);var d=o(e,0,[3]);return n.sinfos=this.getSignerInfos(d),n},this.getHashAlgArray=function(e){for(var n=h(e,0),r=new t,i=[],a=0;a<n.length;a++){var o=s(e,n[a]),c=r.getAlgorithmIdentifierName(o);i.push(c)}return i},this.getEContent=function(e){var t={},n=c(e,0,[0]),r=c(e,0,[1,0]);return t.type=ce.asn1.x509.OID.oid2name(le.hextooidstr(n)),t.content={hex:r},t},this.getSignerInfos=function(e){for(var t=[],n=h(e,0),r=0;r<n.length;r++){var i=s(e,n[r]),a=this.getSignerInfo(i);t.push(a)}return t},this.getSignerInfo=function(e){var t={},i=h(e,0),a=r.getInt(e,i[0],-1);-1!=a&&(t.version=a);var c=s(e,i[1]),l=this.getIssuerAndSerialNumber(c);t.id=l;var d=s(e,i[2]),m=n.getAlgorithmIdentifierName(d);t.hashalg=m;var p=o(e,0,["[0]"]);if(null!=p){var f=this.getAttributeList(p);t.sattrs=f}var g=o(e,0,[3]),y=n.getAlgorithmIdentifierName(g);t.sigalg=y;var v=u(e,0,[4]);t.sighex=v;var b=o(e,0,["[1]"]);if(null!=b){var S=this.getAttributeList(b);t.uattrs=S}return t},this.getSignerIdentifier=function(e){if("30"==e.substr(0,2))return this.getIssuerAndSerialNumber(e);throw new Error("SKID of signerIdentifier not supported")},this.getIssuerAndSerialNumber=function(e){var t={type:"isssn"},r=h(e,0),a=s(e,r[0]);t.issuer=n.getX500Name(a);var o=i(e,r[1]);return t.serial={hex:o},t},this.getAttributeList=function(e){for(var t=[],n=h(e,0),r=0;r<n.length;r++){var i=s(e,n[r]),a=this.getAttribute(i);t.push(a)}return{array:t}},this.getAttribute=function(e){var t={},n=h(e,0),i=r.getOID(e,n[0]),a=ce.asn1.x509.OID.oid2name(i);t.attr=a;var o=s(e,n[1]),c=h(o,0);if(1==c.length)t.valhex=s(o,c[0]);else{for(var u=[],l=0;l<c.length;l++)u.push(s(o,c[l]));t.valhex=u}return"contentType"==a?this.setContentType(t):"messageDigest"==a?this.setMessageDigest(t):"signingTime"==a?this.setSigningTime(t):"signingCertificate"==a?this.setSigningCertificate(t):"signingCertificateV2"==a?this.setSigningCertificateV2(t):"signaturePolicyIdentifier"==a&&this.setSignaturePolicyIdentifier(t),t},this.setContentType=function(e){var t=r.getOIDName(e.valhex,0,null);null!=t&&(e.type=t,delete e.valhex)},this.setSigningTime=function(e){var t=we(i(e.valhex,0));e.str=t,delete e.valhex},this.setMessageDigest=function(e){var t=i(e.valhex,0);e.hex=t,delete e.valhex},this.setSigningCertificate=function(e){var t=h(e.valhex,0);if(t.length>0){for(var n=s(e.valhex,t[0]),r=h(n,0),i=[],a=0;a<r.length;a++){var o=s(n,r[a]),c=this.getESSCertID(o);i.push(c)}e.array=i}if(t.length>1){var u=s(e.valhex,t[1]);e.polhex=u}delete e.valhex},this.setSignaturePolicyIdentifier=function(e){var n=h(e.valhex,0);if(n.length>0){var a=r.getOID(e.valhex,n[0]);e.oid=a}if(n.length>1){var o=new t,c=h(e.valhex,n[1]),u=s(e.valhex,c[0]),l=o.getAlgorithmIdentifierName(u);e.alg=l;var d=i(e.valhex,c[1]);e.hash=d}delete e.valhex},this.setSigningCertificateV2=function(e){var t=h(e.valhex,0);if(t.length>0){for(var n=s(e.valhex,t[0]),r=h(n,0),i=[],a=0;a<r.length;a++){var o=s(n,r[a]),c=this.getESSCertIDv2(o);i.push(c)}e.array=i}if(t.length>1){var u=s(e.valhex,t[1]);e.polhex=u}delete e.valhex},this.getESSCertID=function(e){var t={},n=h(e,0);if(n.length>0){var r=i(e,n[0]);t.hash=r}if(n.length>1){var a=s(e,n[1]),o=this.getIssuerSerial(a);null!=o.serial&&(t.serial=o.serial),null!=o.issuer&&(t.issuer=o.issuer)}return t},this.getESSCertIDv2=function(t){var r={},a=h(t,0);if(a.length<1||3<a.length)throw new e("wrong number of elements");var o=0;if("30"==t.substr(a[0],2)){var c=s(t,a[0]);r.alg=n.getAlgorithmIdentifierName(c),o++}else r.alg="sha256";var u=i(t,a[o]);if(r.hash=u,a.length>o+1){var l=s(t,a[o+1]),d=this.getIssuerSerial(l);r.issuer=d.issuer,r.serial=d.serial}return r},this.getIssuerSerial=function(e){var t={},r=h(e,0),a=s(e,r[0]),o=n.getGeneralNames(a)[0].dn;t.issuer=o;var c=i(e,r[1]);return t.serial={hex:c},t},this.getCertificateSet=function(e){for(var t=h(e,0),n=[],r=0;r<t.length;r++){var i=s(e,t[r]);if("30"==i.substr(0,2)){var a=Ae(i,"CERTIFICATE");n.push(a)}}return{array:n,sortflag:!1}}},void 0!==ce&&ce||(ce={}),void 0!==ce.asn1&&ce.asn1||(ce.asn1={}),void 0!==ce.asn1.tsp&&ce.asn1.tsp||(ce.asn1.tsp={}),ce.asn1.tsp.TimeStampToken=function(e){var t=ce.asn1.tsp;t.TimeStampToken.superclass.constructor.call(this),this.params=null,this.getEncodedHexPrepare=function(){var e=new t.TSTInfo(this.params.econtent.content);this.params.econtent.content.hex=e.tohex()},null!=e&&this.setByParam(e)},Xe(ce.asn1.tsp.TimeStampToken,ce.asn1.cms.SignedData),ce.asn1.tsp.TSTInfo=function(e){Error;var t=ce.asn1,n=t.DERSequence,r=t.DERInteger,i=t.DERBoolean,s=t.DERGeneralizedTime,a=t.DERObjectIdentifier,o=t.DERTaggedObject,c=t.tsp,u=c.MessageImprint,h=c.Accuracy,l=(t.x509.X500Name,t.x509.GeneralName);if(c.TSTInfo.superclass.constructor.call(this),this.dVersion=new r({int:1}),this.dPolicy=null,this.dMessageImprint=null,this.dSerial=null,this.dGenTime=null,this.dAccuracy=null,this.dOrdering=null,this.dNonce=null,this.dTsa=null,this.tohex=function(){var e=[this.dVersion];if(null==this.dPolicy)throw new Error("policy shall be specified.");if(e.push(this.dPolicy),null==this.dMessageImprint)throw new Error("messageImprint shall be specified.");if(e.push(this.dMessageImprint),null==this.dSerial)throw new Error("serialNumber shall be specified.");if(e.push(this.dSerial),null==this.dGenTime)throw new Error("genTime shall be specified.");e.push(this.dGenTime),null!=this.dAccuracy&&e.push(this.dAccuracy),null!=this.dOrdering&&e.push(this.dOrdering),null!=this.dNonce&&e.push(this.dNonce),null!=this.dTsa&&e.push(this.dTsa);var t=new n({array:e});return this.hTLV=t.tohex(),this.hTLV},this.getEncodedHex=function(){return this.tohex()},void 0!==e){if("string"==typeof e.policy){if(!e.policy.match(/^[0-9.]+$/))throw"policy shall be oid like 0.1.4.134";this.dPolicy=new a({oid:e.policy})}void 0!==e.messageImprint&&(this.dMessageImprint=new u(e.messageImprint)),void 0!==e.serial&&(this.dSerial=new r(e.serial)),void 0!==e.genTime&&(this.dGenTime=new s(e.genTime)),void 0!==e.accuracy&&(this.dAccuracy=new h(e.accuracy)),void 0!==e.ordering&&1==e.ordering&&(this.dOrdering=new i),void 0!==e.nonce&&(this.dNonce=new r(e.nonce)),void 0!==e.tsa&&(this.dTsa=new o({tag:"a0",explicit:!0,obj:new l({dn:e.tsa})}))}},Xe(ce.asn1.tsp.TSTInfo,ce.asn1.ASN1Object),ce.asn1.tsp.Accuracy=function(e){var t=ce.asn1,n=t.ASN1Util.newObject;t.tsp.Accuracy.superclass.constructor.call(this),this.params=null,this.tohex=function(){var e=this.params,t=[];return null!=e.seconds&&"number"==typeof e.seconds&&t.push({int:e.seconds}),null!=e.millis&&"number"==typeof e.millis&&t.push({tag:{tagi:"80",obj:{int:e.millis}}}),null!=e.micros&&"number"==typeof e.micros&&t.push({tag:{tagi:"81",obj:{int:e.micros}}}),n({seq:t}).tohex()},this.getEncodedHex=function(){return this.tohex()},null!=e&&this.setByParam(e)},Xe(ce.asn1.tsp.Accuracy,ce.asn1.ASN1Object),ce.asn1.tsp.MessageImprint=function(e){var t=ce.asn1,n=t.DERSequence,r=t.DEROctetString,i=t.x509.AlgorithmIdentifier;t.tsp.MessageImprint.superclass.constructor.call(this),this.params=null,this.tohex=function(){var e=this.params,t=new i({name:e.alg}),s=new r({hex:e.hash});return new n({array:[t,s]}).tohex()},this.getEncodedHex=function(){return this.tohex()},void 0!==e&&this.setByParam(e)},Xe(ce.asn1.tsp.MessageImprint,ce.asn1.ASN1Object),ce.asn1.tsp.TimeStampReq=function(e){var t=ce.asn1,n=t.DERSequence,r=t.DERInteger,i=t.DERBoolean,s=(t.ASN1Object,t.DERObjectIdentifier),a=t.tsp,o=a.MessageImprint;a.TimeStampReq.superclass.constructor.call(this),this.params=null,this.tohex=function(){var e=this.params,t=[];return t.push(new r({int:1})),e.messageImprint instanceof ce.asn1.ASN1Object?t.push(e.messageImprint):t.push(new o(e.messageImprint)),null!=e.policy&&t.push(new s(e.policy)),null!=e.nonce&&t.push(new r(e.nonce)),1==e.certreq&&t.push(new i),new n({array:t}).tohex()},this.getEncodedHex=function(){return this.tohex()},null!=e&&this.setByParam(e)},Xe(ce.asn1.tsp.TimeStampReq,ce.asn1.ASN1Object),ce.asn1.tsp.TimeStampResp=function(e){var t=ce.asn1,n=t.DERSequence,r=(t.ASN1Object,t.tsp),i=r.PKIStatusInfo;r.TimeStampResp.superclass.constructor.call(this),this.params=null,this.tohex=function(){var e=this.params,s=[];if(null!=e.econtent||null!=e.tst)if(null!=e.statusinfo?s.push(new i(e.statusinfo)):s.push(new i("granted")),null!=e.econtent)s.push(new r.TimeStampToken(e).getContentInfo());else{if(!(e.tst instanceof t.ASN1Object))throw new Error("improper member tst value");s.push(e.tst)}else{if(null==e.statusinfo)throw new Error("parameter for token nor statusinfo not specified");s.push(new i(e.statusinfo))}return new n({array:s}).tohex()},this.getEncodedHex=function(){return this.tohex()},null!=e&&this.setByParam(e)},Xe(ce.asn1.tsp.TimeStampResp,ce.asn1.ASN1Object),ce.asn1.tsp.PKIStatusInfo=function(e){var t=Error,n=ce.asn1,r=n.DERSequence,i=n.tsp,s=i.PKIStatus,a=i.PKIFreeText,o=i.PKIFailureInfo;i.PKIStatusInfo.superclass.constructor.call(this),this.params=null,this.tohex=function(){var e=this.params,n=[];if("string"==typeof e)n.push(new s(e));else{if(null==e.status)throw new t("property 'status' unspecified");n.push(new s(e.status)),null!=e.statusstr&&n.push(new a(e.statusstr)),null!=e.failinfo&&n.push(new o(e.failinfo))}return new r({array:n}).tohex()},this.getEncodedHex=function(){return this.tohex()},null!=e&&this.setByParam(e)},Xe(ce.asn1.tsp.PKIStatusInfo,ce.asn1.ASN1Object),ce.asn1.tsp.PKIStatus=function(e){var t=Error,n=ce.asn1,r=n.DERInteger;n.tsp.PKIStatus.superclass.constructor.call(this);var i={granted:0,grantedWithMods:1,rejection:2,waiting:3,revocationWarning:4,revocationNotification:5};this.params=null,this.tohex=function(){var e,n=this.params;if("string"==typeof n)try{e=i[n]}catch(e){throw new t("undefined name: "+n)}else{if("number"!=typeof n)throw new t("unsupported params");e=n}return new r({int:e}).tohex()},this.getEncodedHex=function(){return this.tohex()},null!=e&&this.setByParam(e)},Xe(ce.asn1.tsp.PKIStatus,ce.asn1.ASN1Object),ce.asn1.tsp.PKIFreeText=function(e){var t=Error,n=ce.asn1,r=n.DERSequence,i=n.DERUTF8String;n.tsp.PKIFreeText.superclass.constructor.call(this),this.params=null,this.tohex=function(){var e=this.params;if(!e instanceof Array)throw new t("wrong params: not array");for(var n=[],s=0;s<e.length;s++)n.push(new i({str:e[s]}));return new r({array:n}).tohex()},this.getEncodedHex=function(){return this.tohex()},null!=e&&this.setByParam(e)},Xe(ce.asn1.tsp.PKIFreeText,ce.asn1.ASN1Object),ce.asn1.tsp.PKIFailureInfo=function(e){var t=Error,n=ce.asn1,r=n.DERBitString,i=n.tsp.PKIFailureInfo,s={badAlg:0,badRequest:2,badDataFormat:5,timeNotAvailable:14,unacceptedPolicy:15,unacceptedExtension:16,addInfoNotAvailable:17,systemFailure:25};i.superclass.constructor.call(this),this.params=null,this.getBinValue=function(){var e=this.params,n=0;if("number"==typeof e&&0<=e&&e<=25){for(var r=(n|=1<<e).toString(2),i="",a=r.length-1;a>=0;a--)i+=r[a];return i}if("string"==typeof e&&null!=s[e])return Ye([e],s);if("object"==typeof e&&null!=e.length)return Ye(e,s);throw new t("wrong params")},this.tohex=function(){this.params;var e=this.getBinValue();return new r({bin:e}).tohex()},this.getEncodedHex=function(){return this.tohex()},null!=e&&this.setByParam(e)},Xe(ce.asn1.tsp.PKIFailureInfo,ce.asn1.ASN1Object),ce.asn1.tsp.AbstractTSAAdapter=function(e){this.getTSTHex=function(e,t){throw"not implemented yet"}},ce.asn1.tsp.SimpleTSAAdapter=function(e){var t=ce,n=t.asn1.tsp,r=t.crypto.Util.hashHex;n.SimpleTSAAdapter.superclass.constructor.call(this),this.params=null,this.serial=0,this.getTSTHex=function(e,t){var i=r(e,t);this.params.econtent.content.messageImprint={alg:t,hash:i},this.params.econtent.content.serial={int:this.serial++};var s=Math.floor(1e9*Math.random());return this.params.econtent.content.nonce={int:s},new n.TimeStampToken(this.params).getContentInfoEncodedHex()},void 0!==e&&(this.params=e)},Xe(ce.asn1.tsp.SimpleTSAAdapter,ce.asn1.tsp.AbstractTSAAdapter),ce.asn1.tsp.FixedTSAAdapter=function(e){var t=ce,n=t.asn1.tsp,r=t.crypto.Util.hashHex;n.FixedTSAAdapter.superclass.constructor.call(this),this.params=null,this.getTSTHex=function(e,t){var i=r(e,t);return this.params.econtent.content.messageImprint={alg:t,hash:i},new n.TimeStampToken(this.params).getContentInfoEncodedHex()},void 0!==e&&(this.params=e)},Xe(ce.asn1.tsp.FixedTSAAdapter,ce.asn1.tsp.AbstractTSAAdapter),ce.asn1.tsp.TSPUtil=new function(){},ce.asn1.tsp.TSPUtil.newTimeStampToken=function(e){return new ce.asn1.tsp.TimeStampToken(e)},ce.asn1.tsp.TSPUtil.parseTimeStampReq=function(e){return(new ce.asn1.tsp.TSPParser).getTimeStampReq(e)},ce.asn1.tsp.TSPUtil.parseMessageImprint=function(e){return(new ce.asn1.tsp.TSPParser).getMessageImprint(e)},ce.asn1.tsp.TSPParser=function(){Error;var e=new rt,t=le,n=t.getV,r=t.getTLV,i=t.getIdxbyList,s=(t.getTLVbyListEx,t.getChildIdx),a=["granted","grantedWithMods","rejection","waiting","revocationWarning","revocationNotification"],o={0:"badAlg",2:"badRequest",5:"badDataFormat",14:"timeNotAvailable",15:"unacceptedPolicy",16:"unacceptedExtension",17:"addInfoNotAvailable",25:"systemFailure"};this.getResponse=function(e){var t=s(e,0);if(1==t.length)return this.getPKIStatusInfo(r(e,t[0]));if(t.length>1){var n=this.getPKIStatusInfo(r(e,t[0])),i=r(e,t[1]),a=this.getToken(i);return a.statusinfo=n,a}},this.getToken=function(e){var t=(new ce.asn1.cms.CMSParser).getCMSSignedData(e);return this.setTSTInfo(t),t},this.setTSTInfo=function(e){var t=e.econtent;if("tstinfo"==t.type){var n=t.content.hex,r=this.getTSTInfo(n);t.content=r}},this.getTSTInfo=function(t){var i={},a=s(t,0),o=n(t,a[1]);i.policy=We(o);var c=r(t,a[2]);i.messageImprint=this.getMessageImprint(c);var u=n(t,a[3]);i.serial={hex:u};var h=n(t,a[4]);i.genTime={str:we(h)};var l=0;if(a.length>5&&"30"==t.substr(a[5],2)){var d=r(t,a[5]);i.accuracy=this.getAccuracy(d),l++}a.length>5+l&&"01"==t.substr(a[5+l],2)&&("ff"==n(t,a[5+l])&&(i.ordering=!0),l++);if(a.length>5+l&&"02"==t.substr(a[5+l],2)){var m=n(t,a[5+l]);i.nonce={hex:m},l++}if(a.length>5+l&&"a0"==t.substr(a[5+l],2)){var p=r(t,a[5+l]);p="30"+p.substr(2),pGeneralNames=e.getGeneralNames(p);var f=pGeneralNames[0].dn;i.tsa=f,l++}if(a.length>5+l&&"a1"==t.substr(a[5+l],2)){var g=r(t,a[5+l]);g="30"+g.substr(2);var y=e.getExtParamArray(g);i.ext=y,l++}return i},this.getAccuracy=function(e){for(var t={},r=s(e,0),i=0;i<r.length;i++){var a=e.substr(r[i],2),o=n(e,r[i]),c=parseInt(o,16);"02"==a?t.seconds=c:"80"==a?t.millis=c:"81"==a&&(t.micros=c)}return t},this.getMessageImprint=function(e){if("30"!=e.substr(0,2))throw new Error("head of messageImprint hex shall be x30");var r={},a=(s(e,0),i(e,0,[0,0])),o=n(e,a),c=t.hextooidstr(o),u=ce.asn1.x509.OID.oid2name(c);if(""==u)throw new Error("hashAlg name undefined: "+c);var h=u,l=i(e,0,[1]);return r.alg=h,r.hash=n(e,l),r},this.getPKIStatusInfo=function(e){var t={},i=s(e,0),o=0;try{var c=n(e,i[0]),u=parseInt(c,16);t.status=a[u]}catch(e){}if(i.length>1&&"30"==e.substr(i[1],2)){var h=r(e,i[1]);t.statusstr=this.getPKIFreeText(h),o++}if(i.length>o&&"03"==e.substr(i[1+o],2)){var l=r(e,i[1+o]);t.failinfo=this.getPKIFailureInfo(l)}return t},this.getPKIFreeText=function(e){for(var n=[],r=s(e,0),i=0;i<r.length;i++)n.push(t.getString(e,r[i]));return n},this.getPKIFailureInfo=function(e){var n=t.getInt(e,0);return null!=o[n]?o[n]:n},this.getTimeStampReq=function(e){var i={certreq:!1},a=s(e,0);if(a.length<2)throw new Error("TimeStampReq must have at least 2 items");var o=r(e,a[1]);i.messageImprint=ce.asn1.tsp.TSPUtil.parseMessageImprint(o);for(var c=2;c<a.length;c++){var u=a[c],h=e.substr(u,2);if("06"==h){var l=n(e,u);i.policy=t.hextooidstr(l)}"02"==h&&(i.nonce=n(e,u)),"01"==h&&(i.certreq=!0)}return i}},void 0!==ce&&ce||(ce={}),void 0!==ce.asn1&&ce.asn1||(ce.asn1={}),void 0!==ce.asn1.cades&&ce.asn1.cades||(ce.asn1.cades={}),ce.asn1.cades.SignaturePolicyIdentifier=function(e){var t=ce.asn1.cades,n=t.SignaturePolicyId;t.SignaturePolicyIdentifier.superclass.constructor.call(this),this.typeOid="1.2.840.113549.1.9.16.2.15",this.params=null,this.getValueArray=function(){return[new n(this.params)]},this.setByParam=function(e){this.params=e},null!=e&&this.setByParam(e)},Xe(ce.asn1.cades.SignaturePolicyIdentifier,ce.asn1.cms.Attribute),ce.asn1.cades.SignaturePolicyId=function(e){var t=ce.asn1,n=t.DERSequence,r=t.DERObjectIdentifier,i=(t.x509.AlgorithmIdentifier,t.cades),s=i.SignaturePolicyId,a=i.OtherHashAlgAndValue;s.superclass.constructor.call(this),this.params=null,this.tohex=function(){var e=this.params,t=[];return t.push(new r(e.oid)),t.push(new a(e)),new n({array:t}).tohex()},this.getEncodedHex=function(){return this.tohex()},this.setByParam=function(e){this.params=e},null!=e&&this.setByParam(e)},Xe(ce.asn1.cades.SignaturePolicyId,ce.asn1.ASN1Object),ce.asn1.cades.OtherHashAlgAndValue=function(e){var t=Error,n=ce.asn1,r=n.DERSequence,i=n.DEROctetString,s=n.x509.AlgorithmIdentifier;n.cades.OtherHashAlgAndValue.superclass.constructor.call(this),this.params=null,this.tohex=function(){var e=this.params;if(null==e.alg)throw new t("property 'alg' not specified");if(null==e.hash&&null==e.cert)throw new t("property 'hash' nor 'cert' not specified");var n=null;if(null!=e.hash)n=e.hash;else if(null!=e.cert){if("string"!=typeof e.cert)throw new t("cert not string");var a=e.cert;-1!=e.cert.indexOf("-----BEGIN")&&(a=Ne(e.cert)),n=ce.crypto.Util.hashHex(a,e.alg)}var o=[];return o.push(new s({name:e.alg})),o.push(new i({hex:n})),new r({array:o}).tohex()},this.getEncodedHex=function(){return this.tohex()},null!=e&&this.setByParam(e)},Xe(ce.asn1.cades.OtherHashAlgAndValue,ce.asn1.ASN1Object),ce.asn1.cades.OtherHashValue=function(e){ce.asn1.cades.OtherHashValue.superclass.constructor.call(this);var t=Error,n=ce,r=(n.lang.String.isHex,n.asn1.DEROctetString);n.crypto.Util.hashHex;this.params=null,this.tohex=function(){var e=this.params;if(null==e.hash&&null==e.cert)throw new t("hash or cert not specified");var n=null;if(null!=e.hash)n=e.hash;else if(null!=e.cert){if("string"!=typeof e.cert)throw new t("cert not string");var i=e.cert;-1!=e.cert.indexOf("-----BEGIN")&&(i=Ne(e.cert)),n=ce.crypto.Util.hashHex(i,"sha1")}return new r({hex:n}).tohex()},this.getEncodedHex=function(){return this.tohex()},null!=e&&this.setByParam(e)},Xe(ce.asn1.cades.OtherHashValue,ce.asn1.ASN1Object),ce.asn1.cades.SignatureTimeStamp=function(e){var t=Error,n=ce,r=n.lang.String.isHex,i=n.asn1,s=i.ASN1Object;i.x509;i.cades.SignatureTimeStamp.superclass.constructor.call(this),this.typeOid="1.2.840.113549.1.9.16.2.14",this.params=null,this.getValueArray=function(){var e=this.params;if(null!=e.tst){if(r(e.tst))return(i=new s).hTLV=e.tst,[i];if(e.tst instanceof s)return[e.tst];throw new t("params.tst has wrong value")}if(null!=e.res){var n=e.res;if(n instanceof s&&(n=n.tohex()),"string"!=typeof n||!r(n))throw new t("params.res has wrong value");var i;le.getTLVbyList(n,0,[1]);return(i=new s).hTLV=e.tst,[i]}},null!=e&&this.setByParam(e)},Xe(ce.asn1.cades.SignatureTimeStamp,ce.asn1.cms.Attribute),ce.asn1.cades.CompleteCertificateRefs=function(e){var t=Error,n=ce,r=n.asn1,i=r.DERSequence,s=r.cades,a=s.OtherCertID,o=n.lang.String.isHex;s.CompleteCertificateRefs.superclass.constructor.call(this),this.typeOid="1.2.840.113549.1.9.16.2.21",this.params=null,this.getValueArray=function(){for(var e=this.params,n=[],r=0;r<e.array.length;r++){var s=e.array[r];if("string"==typeof s)if(-1!=s.indexOf("-----BEGIN"))s={cert:s};else{if(!o(s))throw new t("unsupported value: "+s);s={hash:s}}null!=e.alg&&null==s.alg&&(s.alg=e.alg),null!=e.hasis&&null==s.hasis&&(s.hasis=e.hasis);var c=new a(s);n.push(c)}return[new i({array:n})]},null!=e&&this.setByParam(e)},Xe(ce.asn1.cades.CompleteCertificateRefs,ce.asn1.cms.Attribute),ce.asn1.cades.OtherCertID=function(e){var t=ce.asn1,n=t.DERSequence,r=t.cms.IssuerSerial,i=t.cades,s=i.OtherHashValue,a=i.OtherHashAlgAndValue;i.OtherCertID.superclass.constructor.call(this),this.params=e,this.tohex=function(){var e=this.params;"string"==typeof e&&(-1!=e.indexOf("-----BEGIN")?e={cert:e}:_isHex(e)&&(e={hash:e}));var t=[],i=null;if(i=null!=e.alg?new a(e):new s(e),t.push(i),null!=e.cert&&1==e.hasis||null!=e.issuer&&null!=e.serial){var o=new r(e);t.push(o)}return new n({array:t}).tohex()},this.getEncodedHex=function(){return this.tohex()},null!=e&&this.setByParam(e)},Xe(ce.asn1.cades.OtherCertID,ce.asn1.ASN1Object),ce.asn1.cades.OtherHash=function(e){Error;var t=ce,n=t.asn1,r=(n.cms,n.cades),i=r.OtherHashAlgAndValue,s=r.OtherHashValue,a=(t.crypto.Util.hashHex,t.lang.String.isHex);r.OtherHash.superclass.constructor.call(this),this.params=null,this.tohex=function(){var e=this.params;"string"==typeof e&&(-1!=e.indexOf("-----BEGIN")?e={cert:e}:a(e)&&(e={hash:e}));return(null!=e.alg?new i(e):new s(e)).tohex()},this.getEncodedHex=function(){return this.tohex()},null!=e&&this.setByParam(e)},Xe(ce.asn1.cades.OtherHash,ce.asn1.ASN1Object),ce.asn1.cades.CAdESUtil=new function(){},ce.asn1.cades.CAdESUtil.parseSignedDataForAddingUnsigned=function(e){return(new ce.asn1.cms.CMSParser).getCMSSignedData(e)},ce.asn1.cades.CAdESUtil.parseSignerInfoForAddingUnsigned=function(e,t,n){var r=le,i=r.getChildIdx,s=r.getTLV,a=r.getV,o=ce.asn1,c=o.ASN1Object,u=o.cms,h=u.AttributeList,l=u.SignerInfo,d={},m=i(e,t);if(6!=m.length)throw"not supported items for SignerInfo (!=6)";var p=m.shift();d.version=s(e,p);var f=m.shift();d.si=s(e,f);var g=m.shift();d.digalg=s(e,g);var y=m.shift();d.sattrs=s(e,y);var v=m.shift();d.sigalg=s(e,v);var b=m.shift();d.sig=s(e,b),d.sigval=a(e,b);var S=null;return d.obj=new l,(S=new c).hTLV=d.version,d.obj.dCMSVersion=S,(S=new c).hTLV=d.si,d.obj.dSignerIdentifier=S,(S=new c).hTLV=d.digalg,d.obj.dDigestAlgorithm=S,(S=new c).hTLV=d.sattrs,d.obj.dSignedAttrs=S,(S=new c).hTLV=d.sigalg,d.obj.dSigAlg=S,(S=new c).hTLV=d.sig,d.obj.dSig=S,d.obj.dUnsignedAttrs=new h,d},void 0!==ce.asn1.csr&&ce.asn1.csr||(ce.asn1.csr={}),ce.asn1.csr.CertificationRequest=function(e){var t=ce.asn1,n=t.DERBitString,r=t.DERSequence,i=t.csr,s=(t.x509,i.CertificationRequestInfo);i.CertificationRequest.superclass.constructor.call(this),this.setByParam=function(e){this.params=e},this.sign=function(){var e=new s(this.params).tohex(),t=new ce.crypto.Signature({alg:this.params.sigalg});t.init(this.params.sbjprvkey),t.updateHex(e);var n=t.sign();this.params.sighex=n},this.getPEM=function(){return Ae(this.tohex(),"CERTIFICATE REQUEST")},this.tohex=function(){var e=this.params,t=new ce.asn1.csr.CertificationRequestInfo(this.params),i=new ce.asn1.x509.AlgorithmIdentifier({name:e.sigalg});if(null==e.sighex&&null!=e.sbjprvkey&&this.sign(),null==e.sighex)throw new Error("sighex or sbjprvkey parameter not defined");var s=new n({hex:"00"+e.sighex});return new r({array:[t,i,s]}).tohex()},this.getEncodedHex=function(){return this.tohex()},void 0!==e&&this.setByParam(e)},Xe(ce.asn1.csr.CertificationRequest,ce.asn1.ASN1Object),ce.asn1.csr.CertificationRequestInfo=function(e){var t=ce.asn1,n=(t.DERBitString,t.DERSequence),r=t.DERInteger,i=t.DERUTF8String,s=t.DERTaggedObject,a=t.ASN1Util.newObject,o=t.csr,c=t.x509,u=c.X500Name,h=c.Extensions,l=c.SubjectPublicKeyInfo;o.CertificationRequestInfo.superclass.constructor.call(this),this.params=null,this.setByParam=function(e){null!=e&&(this.params=e)},this.tohex=function(){var e=this.params,t=[];if(t.push(new r({int:0})),t.push(new u(e.subject)),t.push(new l(Ze.getKey(e.sbjpubkey))),null!=e.extreq){var o=new h(e.extreq),c=a({tag:{tag:"a0",explict:!0,obj:{seq:[{oid:"1.2.840.113549.1.9.14"},{set:[o]}]}}});t.push(c)}else t.push(new s({tag:"a0",explicit:!1,obj:new i({str:""})}));return new n({array:t}).tohex()},this.getEncodedHex=function(){return this.tohex()},null!=e&&this.setByParam(e)},Xe(ce.asn1.csr.CertificationRequestInfo,ce.asn1.ASN1Object),ce.asn1.csr.CSRUtil=new function(){},ce.asn1.csr.CSRUtil.newCSRPEM=function(e){return new ce.asn1.csr.CertificationRequest(e).getPEM()},ce.asn1.csr.CSRUtil.getParam=function(e){var t=le,n=t.getV,r=t.getIdxbyList,i=t.getTLVbyList,s=t.getTLVbyListEx,a=t.getVbyListEx,o={};if(-1==e.indexOf("-----BEGIN CERTIFICATE REQUEST"))throw new Error("argument is not PEM file");var c=Ne(e,"CERTIFICATE REQUEST");try{var u=s(c,0,[0,1]);if("3000"==u)o.subject={};else{var h=new rt;o.subject=h.getX500Name(u)}}catch(e){}var l=s(c,0,[0,2]),d=Ze.getKey(l,null,"pkcs8pub");o.sbjpubkey=Ze.getPEM(d,"PKCS8PUB");var m=function(e){var t=r(e,0,[0,3,0,0],"06");return"2a864886f70d01090e"!=n(e,t)?null:i(e,0,[0,3,0,1,0],"30")}(c);h=new rt;null!=m&&(o.extreq=h.getExtParamArray(m));try{var p=s(c,0,[1],"30");h=new rt;o.sigalg=h.getAlgorithmIdentifierName(p)}catch(e){}try{var f=a(c,0,[2]);o.sighex=f}catch(e){}return o},void 0!==ce&&ce||(ce={}),void 0!==ce.asn1&&ce.asn1||(ce.asn1={}),void 0!==ce.asn1.ocsp&&ce.asn1.ocsp||(ce.asn1.ocsp={}),ce.asn1.ocsp.DEFAULT_HASH="sha1",ce.asn1.ocsp.OCSPResponse=function(e){ce.asn1.ocsp.OCSPResponse.superclass.constructor.call(this);ce.asn1.DEREnumerated;var t=ce.asn1.ASN1Util.newObject,n=ce.asn1.ocsp.ResponseBytes,r=["successful","malformedRequest","internalError","tryLater","_not_used_","sigRequired","unauthorized"];this.params=null,this._getStatusCode=function(){var e=this.params.resstatus;return"number"==typeof e?e:"string"!=typeof e?-1:r.indexOf(e)},this.setByParam=function(e){this.params=e},this.tohex=function(){var e=this.params,r=this._getStatusCode();if(-1==r)throw new Error("responseStatus not supported: "+e.resstatus);if(0!=r)return t({seq:[{enum:{int:r}}]}).tohex();var i=new n(e);return t({seq:[{enum:{int:0}},{tag:{tag:"a0",explicit:!0,obj:i}}]}).tohex()},this.getEncodedHex=function(){return this.tohex()},void 0!==e&&this.setByParam(e)},Xe(ce.asn1.ocsp.OCSPResponse,ce.asn1.ASN1Object),ce.asn1.ocsp.ResponseBytes=function(e){ce.asn1.ocsp.ResponseBytes.superclass.constructor.call(this);var t=ce.asn1,n=t.DERSequence,r=t.DERObjectIdentifier,i=t.DEROctetString,s=t.ocsp.BasicOCSPResponse;this.params=null,this.setByParam=function(e){this.params=e},this.tohex=function(){var e=this.params;if("ocspBasic"!=e.restype)throw new Error("not supported responseType: "+e.restype);var t=new s(e),a=[];return a.push(new r({name:"ocspBasic"})),a.push(new i({hex:t.tohex()})),new n({array:a}).tohex()},this.getEncodedHex=function(){return this.tohex()},void 0!==e&&this.setByParam(e)},Xe(ce.asn1.ocsp.ResponseBytes,ce.asn1.ASN1Object),ce.asn1.ocsp.BasicOCSPResponse=function(e){ce.asn1.ocsp.BasicOCSPResponse.superclass.constructor.call(this);var t=Error,n=ce.asn1,r=n.ASN1Object,i=n.DERSequence,s=(n.DERGeneralizedTime,n.DERTaggedObject),a=n.DERBitString,o=(n.x509.Extensions,n.x509.AlgorithmIdentifier),c=n.ocsp;c.ResponderID;_SingleResponseList=c.SingleResponseList,_ResponseData=c.ResponseData,this.params=null,this.setByParam=function(e){this.params=e},this.sign=function(){var e=this.params,t=e.tbsresp.tohex(),n=new ce.crypto.Signature({alg:e.sigalg});n.init(e.reskey),n.updateHex(t),e.sighex=n.sign()},this.tohex=function(){var e=this.params;null==e.tbsresp&&(e.tbsresp=new _ResponseData(e)),null==e.sighex&&null!=e.reskey&&this.sign();var n=[];if(n.push(e.tbsresp),n.push(new o({name:e.sigalg})),n.push(new a({hex:"00"+e.sighex})),null!=e.certs&&null!=e.certs.length){for(var c=[],u=0;u<e.certs.length;u++){var h=e.certs[u],l=null;if(le.isASN1HEX(h))l=h;else{if(!h.match(/-----BEGIN/))throw new t("certs["+u+"] not hex or PEM");l=Ne(h)}c.push(new r({tlv:l}))}var d=new i({array:c});n.push(new s({tag:"a0",explicit:!0,obj:d}))}return new i({array:n}).tohex()},this.getEncodedHex=function(){return this.tohex()},void 0!==e&&this.setByParam(e)},Xe(ce.asn1.ocsp.BasicOCSPResponse,ce.asn1.ASN1Object),ce.asn1.ocsp.ResponseData=function(e){ce.asn1.ocsp.ResponseData.superclass.constructor.call(this);var t=Error,n=ce.asn1,r=n.DERSequence,i=n.DERGeneralizedTime,s=n.DERTaggedObject,a=n.x509.Extensions,o=n.ocsp,c=o.ResponderID;_SingleResponseList=o.SingleResponseList,this.params=null,this.tohex=function(){var e=this.params;null!=e.respid&&new t("respid not specified"),null!=e.prodat&&new t("prodat not specified"),null!=e.array&&new t("array not specified");var n=[];if(n.push(new c(e.respid)),n.push(new i(e.prodat)),n.push(new _SingleResponseList(e.array)),null!=e.ext){var o=new a(e.ext);n.push(new s({tag:"a1",explicit:!0,obj:o}))}return new r({array:n}).tohex()},this.getEncodedHex=function(){return this.tohex()},this.setByParam=function(e){this.params=e},void 0!==e&&this.setByParam(e)},Xe(ce.asn1.ocsp.ResponseData,ce.asn1.ASN1Object),ce.asn1.ocsp.ResponderID=function(e){ce.asn1.ocsp.ResponderID.superclass.constructor.call(this);var t=ce,n=t.asn1,r=n.ASN1Util.newObject,i=n.x509.X500Name,s=t.lang.String.isHex,a=Error;this.params=null,this.tohex=function(){var e=this.params;if(null!=e.key){var t,n=null;if("string"==typeof e.key){if(s(e.key)&&(n=e.key),e.key.match(/-----BEGIN CERTIFICATE/))null!=(t=new rt(e.key).getExtSubjectKeyIdentifier())&&(n=t.kid.hex)}else if(e.key instanceof rt)null!=(t=e.key.getExtSubjectKeyIdentifier())&&(n=t.kid.hex);if(null==n)throw new a("wrong key member value");return r({tag:{tag:"a2",explicit:!0,obj:{octstr:{hex:n}}}}).tohex()}if(null!=e.name){var o=null;if("string"==typeof e.name&&e.name.match(/-----BEGIN CERTIFICATE/))o=new rt(e.name).getSubject();else e.name instanceof rt?o=e.name.getSubject():"object"!=typeof e.name||null==e.name.array&&null==e.name.str||(o=e.name);if(null==o)throw new a("wrong name member value");return r({tag:{tag:"a1",explicit:!0,obj:new i(o)}}).tohex()}throw new a("key or name not specified")},this.getEncodedHex=function(){return this.tohex()},this.setByParam=function(e){this.params=e},void 0!==e&&this.setByParam(e)},Xe(ce.asn1.ocsp.ResponderID,ce.asn1.ASN1Object),ce.asn1.ocsp.SingleResponseList=function(e){ce.asn1.ocsp.SingleResponseList.superclass.constructor.call(this);var t=ce.asn1,n=t.DERSequence,r=t.ocsp.SingleResponse;this.params=null,this.tohex=function(){var e=this.params;if("object"!=typeof e||null==e.length)throw new Error("params not specified properly");for(var t=[],i=0;i<e.length;i++)t.push(new r(e[i]));return new n({array:t}).tohex()},this.getEncodedHex=function(){return this.tohex()},this.setByParam=function(e){this.params=e},void 0!==e&&this.setByParam(e)},Xe(ce.asn1.ocsp.SingleResponseList,ce.asn1.ASN1Object),ce.asn1.ocsp.SingleResponse=function(e){var t=Error,n=ce.asn1,r=n.DERSequence,i=n.DERGeneralizedTime,s=n.DERTaggedObject,a=n.ocsp,o=a.CertID,c=a.CertStatus,u=n.x509.Extensions;a.SingleResponse.superclass.constructor.call(this),this.params=null,this.tohex=function(){var e=this.params,n=[];if(null==e.certid)throw new t("certid unspecified");if(null==e.status)throw new t("status unspecified");if(null==e.thisupdate)throw new t("thisupdate unspecified");if(n.push(new o(e.certid)),n.push(new c(e.status)),n.push(new i(e.thisupdate)),null!=e.nextupdate){var a=new i(e.nextupdate);n.push(new s({tag:"a0",explicit:!0,obj:a}))}if(null!=e.ext){var h=new u(e.ext);n.push(new s({tag:"a1",explicit:!0,obj:h}))}return new r({array:n}).tohex()},this.getEncodedHex=function(){return this.tohex()},this.setByParam=function(e){this.params=e},void 0!==e&&this.setByParam(e)},Xe(ce.asn1.ocsp.SingleResponse,ce.asn1.ASN1Object),ce.asn1.ocsp.CertID=function(e){var t=ce,n=t.asn1,r=n.DEROctetString,i=n.DERInteger,s=n.DERSequence,a=n.x509.AlgorithmIdentifier,o=n.ocsp,c=(o.DEFAULT_HASH,t.crypto.Util.hashHex),u=rt,h=le.getVbyList;o.CertID.superclass.constructor.call(this),this.DEFAULT_HASH="sha1",this.params=null,this.setByValue=function(e,t,n,r){null==r&&(r=this.DEFAULT_HASH),this.params={alg:r,issname:e,isskey:t,sbjsn:n}},this.setByCert=function(e,t,n){null==n&&(n=this.DEFAULT_HASH),this.params={alg:n,issuerCert:e,subjectCert:t}},this.getParamByCerts=function(e,t,n){null==n&&(n=this.DEFAULT_HASH);var r=new u(e),i=new u(t),s=c(r.getSubjectHex(),n),a=r.getPublicKeyHex();return{alg:n,issname:s,isskey:c(h(a,0,[1],"03",!0),n),sbjsn:i.getSerialNumberHex()}},this.tohex=function(){if("object"!=typeof this.params)throw new Error("params not set");var e,t,n,o,c=this.params;if(o=null==c.alg?this.DEFAULT_HASH:c.alg,null!=c.issuerCert&&null!=c.subjectCert){var u=this.getParamByCerts(c.issuerCert,c.subjectCert,o);e=u.issname,t=u.isskey,n=u.sbjsn}else{if(null==c.issname||null==c.isskey||null==c.sbjsn)throw new Error("required param members not defined");e=c.issname,t=c.isskey,n=c.sbjsn}var h=new a({name:o}),l=new r({hex:e}),d=new r({hex:t}),m=new i({hex:n}),p=new s({array:[h,l,d,m]});return this.hTLV=p.tohex(),this.hTLV},this.getEncodedHex=function(){return this.tohex()},void 0!==e&&this.setByParam(e)},Xe(ce.asn1.ocsp.CertID,ce.asn1.ASN1Object),ce.asn1.ocsp.CertStatus=function(e){ce.asn1.ocsp.CertStatus.superclass.constructor.call(this),this.params=null,this.tohex=function(){var e=this.params;if("good"==e.status)return"8000";if("unknown"==e.status)return"8200";if("revoked"==e.status){var t=[{gentime:{str:e.time}}];null!=e.reason&&t.push({tag:{tag:"a0",explicit:!0,obj:{enum:{int:e.reason}}}});var n={tag:"a1",explicit:!1,obj:{seq:t}};return ce.asn1.ASN1Util.newObject({tag:n}).tohex()}throw new Error("bad status")},this.getEncodedHex=function(){return this.tohex()},this.setByParam=function(e){this.params=e},void 0!==e&&this.setByParam(e)},Xe(ce.asn1.ocsp.CertStatus,ce.asn1.ASN1Object),ce.asn1.ocsp.Request=function(e){var t=ce.asn1,n=t.DERSequence,r=t.ocsp;if(r.Request.superclass.constructor.call(this),this.dReqCert=null,this.dExt=null,this.tohex=function(){var e=[];if(null===this.dReqCert)throw"reqCert not set";e.push(this.dReqCert);var t=new n({array:e});return this.hTLV=t.tohex(),this.hTLV},this.getEncodedHex=function(){return this.tohex()},void 0!==e){var i=new r.CertID(e);this.dReqCert=i}},Xe(ce.asn1.ocsp.Request,ce.asn1.ASN1Object),ce.asn1.ocsp.TBSRequest=function(e){var t=ce.asn1,n=t.DERSequence,r=t.ocsp;r.TBSRequest.superclass.constructor.call(this),this.version=0,this.dRequestorName=null,this.dRequestList=[],this.dRequestExt=null,this.setRequestListByParam=function(e){for(var t=[],n=0;n<e.length;n++){var i=new r.Request(e[0]);t.push(i)}this.dRequestList=t},this.tohex=function(){var e=[];if(0!==this.version)throw"not supported version: "+this.version;if(null!==this.dRequestorName)throw"requestorName not supported";var t=new n({array:this.dRequestList});if(e.push(t),null!==this.dRequestExt)throw"requestExtensions not supported";var r=new n({array:e});return this.hTLV=r.tohex(),this.hTLV},this.getEncodedHex=function(){return this.tohex()},void 0!==e&&void 0!==e.reqList&&this.setRequestListByParam(e.reqList)},Xe(ce.asn1.ocsp.TBSRequest,ce.asn1.ASN1Object),ce.asn1.ocsp.OCSPRequest=function(e){var t=ce.asn1,n=t.DERSequence,r=t.ocsp;if(r.OCSPRequest.superclass.constructor.call(this),this.dTbsRequest=null,this.dOptionalSignature=null,this.tohex=function(){var e=[];if(null===this.dTbsRequest)throw"tbsRequest not set";if(e.push(this.dTbsRequest),null!==this.dOptionalSignature)throw"optionalSignature not supported";var t=new n({array:e});return this.hTLV=t.tohex(),this.hTLV},this.getEncodedHex=function(){return this.tohex()},void 0!==e&&void 0!==e.reqList){var i=new r.TBSRequest(e);this.dTbsRequest=i}},Xe(ce.asn1.ocsp.OCSPRequest,ce.asn1.ASN1Object),ce.asn1.ocsp.OCSPUtil={},ce.asn1.ocsp.OCSPUtil.getRequestHex=function(e,t,n){var r=ce.asn1.ocsp;void 0===n&&(n=r.DEFAULT_HASH);var i={alg:n,issuerCert:e,subjectCert:t};return new r.OCSPRequest({reqList:[i]}).tohex()},ce.asn1.ocsp.OCSPUtil.getOCSPResponseInfo=function(e){var t=le,n=t.getVbyList,r=t.getVbyListEx,i=t.getIdxbyList,s=(t.getIdxbyListEx,t.getV),a={};try{var o=r(e,0,[0],"0a");a.responseStatus=parseInt(o,16)}catch(e){}if(0!==a.responseStatus)return a;try{var c=i(e,0,[1,0,1,0,0,2,0,1]);"80"===e.substr(c,2)?a.certStatus="good":"a1"===e.substr(c,2)?(a.certStatus="revoked",a.revocationTime=we(n(e,c,[0]))):"82"===e.substr(c,2)&&(a.certStatus="unknown")}catch(e){}try{var u=i(e,0,[1,0,1,0,0,2,0,2]);a.thisUpdate=we(s(e,u))}catch(e){}try{var h=i(e,0,[1,0,1,0,0,2,0,3]);"a0"===e.substr(h,2)&&(a.nextUpdate=we(n(e,h,[0])))}catch(e){}return a},ce.asn1.ocsp.OCSPParser=function(){var e=Error,t=rt,n=new t,r=le,i=r.getV,s=r.getTLV,a=r.getIdxbyList,o=r.getVbyList,c=r.getTLVbyList,u=r.getVbyListEx,h=r.getTLVbyListEx,l=r.getChildIdx;this.getOCSPRequest=function(t){var n=l(t,0);if(1!=n.length&&2!=n.length)throw new e("wrong number elements: "+n.length);return this.getTBSRequest(s(t,n[0]))},this.getTBSRequest=function(e){var t={},r=h(e,0,[0],"30");t.array=this.getRequestList(r);var i=h(e,0,["[2]",0],"30");return null!=i&&(t.ext=n.getExtParamArray(i)),t},this.getRequestList=function(e){for(var t=[],n=l(e,0),r=0;r<n.length;r++){e=s(e,n[r]);t.push(this.getRequest(e))}return t},this.getRequest=function(t){var r=l(t,0);if(1!=r.length&&2!=r.length)throw new e("wrong number elements: "+r.length);var i=this.getCertID(s(t,r[0]));if(2==r.length){var o=a(t,0,[1,0]);i.ext=n.getExtParamArray(s(t,o))}return i},this.getCertID=function(n){var r=l(n,0);if(4!=r.length)throw new e("wrong number elements: "+r.length);var a=new t,o={};return o.alg=a.getAlgorithmIdentifierName(s(n,r[0])),o.issname=i(n,r[1]),o.isskey=i(n,r[2]),o.sbjsn=i(n,r[3]),o},this.getOCSPResponse=function(e){var t,n=l(e,0),r=i(e,n[0]),s=parseInt(r);if(1==n.length)return{resstatus:s};var a=c(e,0,[1,0]);return(t=this.getResponseBytes(a)).resstatus=s,t},this.getResponseBytes=function(e){var t,n=l(e,0),r=c(e,0,[1,0]);t=this.getBasicOCSPResponse(r);var s=i(e,n[0]);return t.restype=ce.asn1.x509.OID.oid2name(We(s)),t},this.getBasicOCSPResponse=function(e){var t,n=l(e,0);t=this.getResponseData(s(e,n[0]));var r=new rt;t.alg=r.getAlgorithmIdentifierName(s(e,n[1]));var a=i(e,n[2]);t.sighex=a.substr(2);var o=u(e,0,["[0]"]);if(null!=o){for(var c=l(o,0),h=[],d=0;d<c.length;d++){var m=s(o,c[d]);h.push(m)}t.certs=h}return t},this.getResponseData=function(e){var t=l(e,0),n=t.length,r={},a=0;"a0"==e.substr(t[0],2)&&a++,r.respid=this.getResponderID(s(e,t[a++]));var o=i(e,t[a++]);if(r.prodat=we(o),r.array=this.getSingleResponseList(s(e,t[a++])),"a1"==e.substr(t[n-1],2)){var u=c(e,t[n-1],[0]),h=new rt;r.ext=h.getExtParamArray(u)}return r},this.getResponderID=function(e){var t={};if("a2"==e.substr(0,2)){var n=o(e,0,[0]);t.key=n}if("a1"==e.substr(0,2)){var r=c(e,0,[0]),i=new rt;t.name=i.getX500Name(r)}return t},this.getSingleResponseList=function(e){for(var t=l(e,0),n=[],r=0;r<t.length;r++){var i=this.getSingleResponse(s(e,t[r]));n.push(i)}return n},this.getSingleResponse=function(e){var t=l(e,0),n={},r=this.getCertID(s(e,t[0]));n.certid=r;var a=this.getCertStatus(s(e,t[1]));if(n.status=a,"18"==e.substr(t[2],2)){var u=i(e,t[2]);n.thisupdate=we(u)}for(var h=3;h<t.length;h++){if("a0"==e.substr(t[h],2)){var d=o(e,t[h],[0],"18");n.nextupdate=we(d)}if("a1"==e.substr(t[h],2)){var m=new rt,p=c(e,0,[h,0]);n.ext=m.getExtParamArray(p)}}return n},this.getCertStatus=function(e){var t={};if("8000"==e)return{status:"good"};if("8200"==e)return{status:"unknown"};if("a1"==e.substr(0,2)){t.status="revoked";var n=we(o(e,0,[0]));t.time=n}return t}},void 0!==ce&&ce||(ce={}),void 0!==ce.lang&&ce.lang||(ce.lang={}),ce.lang.String=function(){},"function"==typeof e?(ue=function(t){return ge(e.from(t,"utf8").toString("base64"))},he=function(t){return e.from(ye(t),"base64").toString("utf8")}):(ue=function(e){return ve(De(ze(e)))},he=function(e){return decodeURIComponent(Fe(be(e)))}),ce.lang.String.isInteger=function(e){return!!e.match(/^[0-9]+$/)||!!e.match(/^-[0-9]+$/)},ce.lang.String.isHex=function(e){return He(e)},ce.lang.String.isBase64=function(e){return!(!(e=e.replace(/\s+/g,"")).match(/^[0-9A-Za-z+\/]+={0,3}$/)||e.length%4!=0)},ce.lang.String.isBase64URL=function(e){return!e.match(/[+/=]/)&&(e=ye(e),ce.lang.String.isBase64(e))},ce.lang.String.isIntegerArray=function(e){return!!(e=e.replace(/\s+/g,"")).match(/^\[[0-9,]+\]$/)},ce.lang.String.isPrintable=function(e){return null!==e.match(/^[0-9A-Za-z '()+,-./:=?]*$/)},ce.lang.String.isIA5=function(e){return null!==e.match(/^[\x20-\x21\x23-\x7f]*$/)},ce.lang.String.isMail=function(e){return null!==e.match(/^[A-Za-z0-9]{1}[A-Za-z0-9_.-]*@{1}[A-Za-z0-9_.-]{1,}\.[A-Za-z0-9]{1,}$/)};function Ge(e){var t=function(e){var t=e.toString(16);return 1==t.length&&(t="0"+t),t},n=function(e){var n="",r=parseInt(e,10).toString(2),i=7-r.length%7;7==i&&(i=0);for(var s="",a=0;a<i;a++)s+="0";r=s+r;for(a=0;a<r.length-1;a+=7){var o=r.substr(a,7);a!=r.length-7&&(o="1"+o),n+=t(parseInt(o,2))}return n};try{if(!e.match(/^[0-9.]+$/))return null;var r="",i=e.split("."),s=40*parseInt(i[0],10)+parseInt(i[1],10);r+=t(s),i.splice(0,2);for(var a=0;a<i.length;a++)r+=n(i[a]);return r}catch(e){return null}}function We(e){if(!He(e))return null;try{var t=[],n=e.substr(0,2),r=parseInt(n,16);t[0]=new String(Math.floor(r/40)),t[1]=new String(r%40);for(var i=e.substr(2),s=[],a=0;a<i.length/2;a++)s.push(parseInt(i.substr(2*a,2),16));var o=[],c="";for(a=0;a<s.length;a++)128&s[a]?c+=Ke((127&s[a]).toString(2),7):(c+=Ke((127&s[a]).toString(2),7),o.push(new String(parseInt(c,2))),c="");var u=t.join(".");return o.length>0&&(u=u+"."+o.join(".")),u}catch(e){return null}}var Ke=function(e,t,n){return null==n&&(n="0"),e.length>=t?e:new Array(t-e.length+1).join(n)+e};function $e(e){if(e.length%2!=0)return-1;if(null==(e=e.toLowerCase()).match(/^[0-9a-f]+$/))return-1;try{var t=e.substr(0,2);if("00"==t)return parseInt(e.substr(2),16);var n=parseInt(t,16);if(n>7)return-1;var r=e.substr(2),i=parseInt(r,16).toString(2);"0"==i&&(i="00000000"),i=i.slice(0,0-n);var s=parseInt(i,2);return NaN==s?-1:s}catch(e){return-1}}function Je(e){if("number"!=typeof e)return null;if(e<0)return null;var t=Number(e).toString(2),n=8-t.length%8;8==n&&(n=0),t+=Ke("",n,"0");var r=parseInt(t,2).toString(16);return r.length%2==1&&(r="0"+r),"0"+n+r}function Qe(e){if("string"!=typeof e)return null;if(e.length%2!=0)return null;if(!e.match(/^[0-9a-f]+$/))return null;try{var t=parseInt(e.substr(0,2),16);if(t<0||7<t)return null;for(var n=e.substr(2),r="",i=0;i<n.length;i+=2){var s=n.substr(i,2),a=parseInt(s,16).toString(2);r+=a=("0000000"+a).slice(-8)}return r.substr(0,r.length-t)}catch(e){return null}}function Ye(e,t){for(var n=0,r=0;r<e.length;r++)n|=1<<t[e[r]];var i=n.toString(2),s="";for(r=i.length-1;r>=0;r--)s+=i[r];return s}function Xe(e,t){var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e,e.superclass=t.prototype,t.prototype.constructor==Object.prototype.constructor&&(t.prototype.constructor=t)}void 0!==ce&&ce||(ce={}),void 0!==ce.crypto&&ce.crypto||(ce.crypto={}),ce.crypto.Util=new function(){this.DIGESTINFOHEAD={sha1:"3021300906052b0e03021a05000414",sha224:"302d300d06096086480165030402040500041c",sha256:"3031300d060960864801650304020105000420",sha384:"3041300d060960864801650304020205000430",sha512:"3051300d060960864801650304020305000440",md2:"3020300c06082a864886f70d020205000410",md5:"3020300c06082a864886f70d020505000410",ripemd160:"3021300906052b2403020105000414"},this.DEFAULTPROVIDER={md5:"cryptojs",sha1:"cryptojs",sha224:"cryptojs",sha256:"cryptojs",sha384:"cryptojs",sha512:"cryptojs",ripemd160:"cryptojs",hmacmd5:"cryptojs",hmacsha1:"cryptojs",hmacsha224:"cryptojs",hmacsha256:"cryptojs",hmacsha384:"cryptojs",hmacsha512:"cryptojs",hmacripemd160:"cryptojs",MD5withRSA:"cryptojs/jsrsa",SHA1withRSA:"cryptojs/jsrsa",SHA224withRSA:"cryptojs/jsrsa",SHA256withRSA:"cryptojs/jsrsa",SHA384withRSA:"cryptojs/jsrsa",SHA512withRSA:"cryptojs/jsrsa",RIPEMD160withRSA:"cryptojs/jsrsa",MD5withECDSA:"cryptojs/jsrsa",SHA1withECDSA:"cryptojs/jsrsa",SHA224withECDSA:"cryptojs/jsrsa",SHA256withECDSA:"cryptojs/jsrsa",SHA384withECDSA:"cryptojs/jsrsa",SHA512withECDSA:"cryptojs/jsrsa",RIPEMD160withECDSA:"cryptojs/jsrsa",SHA1withDSA:"cryptojs/jsrsa",SHA224withDSA:"cryptojs/jsrsa",SHA256withDSA:"cryptojs/jsrsa",MD5withRSAandMGF1:"cryptojs/jsrsa",SHAwithRSAandMGF1:"cryptojs/jsrsa",SHA1withRSAandMGF1:"cryptojs/jsrsa",SHA224withRSAandMGF1:"cryptojs/jsrsa",SHA256withRSAandMGF1:"cryptojs/jsrsa",SHA384withRSAandMGF1:"cryptojs/jsrsa",SHA512withRSAandMGF1:"cryptojs/jsrsa",RIPEMD160withRSAandMGF1:"cryptojs/jsrsa"},this.CRYPTOJSMESSAGEDIGESTNAME={md5:f.algo.MD5,sha1:f.algo.SHA1,sha224:f.algo.SHA224,sha256:f.algo.SHA256,sha384:f.algo.SHA384,sha512:f.algo.SHA512,ripemd160:f.algo.RIPEMD160},this.getDigestInfoHex=function(e,t){if(void 0===this.DIGESTINFOHEAD[t])throw"alg not supported in Util.DIGESTINFOHEAD: "+t;return this.DIGESTINFOHEAD[t]+e},this.getPaddedDigestInfoHex=function(e,t,n){var r=this.getDigestInfoHex(e,t),i=n/4;if(r.length+22>i)throw"key is too short for SigAlg: keylen="+n+","+t;for(var s="0001",a="00"+r,o="",c=i-s.length-a.length,u=0;u<c;u+=2)o+="ff";return s+o+a},this.hashString=function(e,t){return new ce.crypto.MessageDigest({alg:t}).digestString(e)},this.hashHex=function(e,t){return new ce.crypto.MessageDigest({alg:t}).digestHex(e)},this.sha1=function(e){return this.hashString(e,"sha1")},this.sha256=function(e){return this.hashString(e,"sha256")},this.sha256Hex=function(e){return this.hashHex(e,"sha256")},this.sha512=function(e){return this.hashString(e,"sha512")},this.sha512Hex=function(e){return this.hashHex(e,"sha512")},this.isKey=function(e){return e instanceof ne||e instanceof ce.crypto.DSA||e instanceof ce.crypto.ECDSA}},ce.crypto.Util.md5=function(e){return new ce.crypto.MessageDigest({alg:"md5",prov:"cryptojs"}).digestString(e)},ce.crypto.Util.ripemd160=function(e){return new ce.crypto.MessageDigest({alg:"ripemd160",prov:"cryptojs"}).digestString(e)},ce.crypto.Util.SECURERANDOMGEN=new Z,ce.crypto.Util.getRandomHexOfNbytes=function(e){var t=new Array(e);return ce.crypto.Util.SECURERANDOMGEN.nextBytes(t),pe(t)},ce.crypto.Util.getRandomBigIntegerOfNbytes=function(e){return new w(ce.crypto.Util.getRandomHexOfNbytes(e),16)},ce.crypto.Util.getRandomHexOfNbits=function(e){var t=e%8,n=new Array((e-t)/8+1);return ce.crypto.Util.SECURERANDOMGEN.nextBytes(n),n[0]=(255<<t&255^255)&n[0],pe(n)},ce.crypto.Util.getRandomBigIntegerOfNbits=function(e){return new w(ce.crypto.Util.getRandomHexOfNbits(e),16)},ce.crypto.Util.getRandomBigIntegerZeroToMax=function(e){for(var t=e.bitLength();;){var n=ce.crypto.Util.getRandomBigIntegerOfNbits(t);if(-1!=e.compareTo(n))return n}},ce.crypto.Util.getRandomBigIntegerMinToMax=function(e,t){var n=e.compareTo(t);if(1==n)throw"biMin is greater than biMax";if(0==n)return e;var r=t.subtract(e);return ce.crypto.Util.getRandomBigIntegerZeroToMax(r).add(e)},ce.crypto.MessageDigest=function(e){this.setAlgAndProvider=function(e,t){if(null!==(e=ce.crypto.MessageDigest.getCanonicalAlgName(e))&&void 0===t&&(t=ce.crypto.Util.DEFAULTPROVIDER[e]),-1!=":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(e)&&"cryptojs"==t){try{this.md=ce.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[e].create()}catch(t){throw"setAlgAndProvider hash alg set fail alg="+e+"/"+t}this.updateString=function(e){this.md.update(e)},this.updateHex=function(e){var t=f.enc.Hex.parse(e);this.md.update(t)},this.digest=function(){return this.md.finalize().toString(f.enc.Hex)},this.digestString=function(e){return this.updateString(e),this.digest()},this.digestHex=function(e){return this.updateHex(e),this.digest()}}if(-1!=":sha256:".indexOf(e)&&"sjcl"==t){try{this.md=new sjcl.hash.sha256}catch(t){throw"setAlgAndProvider hash alg set fail alg="+e+"/"+t}this.updateString=function(e){this.md.update(e)},this.updateHex=function(e){var t=sjcl.codec.hex.toBits(e);this.md.update(t)},this.digest=function(){var e=this.md.finalize();return sjcl.codec.hex.fromBits(e)},this.digestString=function(e){return this.updateString(e),this.digest()},this.digestHex=function(e){return this.updateHex(e),this.digest()}}},this.updateString=function(e){throw"updateString(str) not supported for this alg/prov: "+this.algName+"/"+this.provName},this.updateHex=function(e){throw"updateHex(hex) not supported for this alg/prov: "+this.algName+"/"+this.provName},this.digest=function(){throw"digest() not supported for this alg/prov: "+this.algName+"/"+this.provName},this.digestString=function(e){throw"digestString(str) not supported for this alg/prov: "+this.algName+"/"+this.provName},this.digestHex=function(e){throw"digestHex(hex) not supported for this alg/prov: "+this.algName+"/"+this.provName},void 0!==e&&void 0!==e.alg&&(this.algName=e.alg,void 0===e.prov&&(this.provName=ce.crypto.Util.DEFAULTPROVIDER[this.algName]),this.setAlgAndProvider(this.algName,this.provName))},ce.crypto.MessageDigest.getCanonicalAlgName=function(e){return"string"==typeof e&&(e=(e=e.toLowerCase()).replace(/-/,"")),e},ce.crypto.MessageDigest.getHashLength=function(e){var t=ce.crypto.MessageDigest,n=t.getCanonicalAlgName(e);if(void 0===t.HASHLENGTH[n])throw"not supported algorithm: "+e;return t.HASHLENGTH[n]},ce.crypto.MessageDigest.HASHLENGTH={md5:16,sha1:20,sha224:28,sha256:32,sha384:48,sha512:64,ripemd160:20},ce.crypto.Mac=function(e){this.setAlgAndProvider=function(e,t){if(null==(e=e.toLowerCase())&&(e="hmacsha1"),"hmac"!=(e=e.toLowerCase()).substr(0,4))throw"setAlgAndProvider unsupported HMAC alg: "+e;void 0===t&&(t=ce.crypto.Util.DEFAULTPROVIDER[e]),this.algProv=e+"/"+t;var n=e.substr(4);if(-1!=":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(n)&&"cryptojs"==t){try{var r=ce.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[n];this.mac=f.algo.HMAC.create(r,this.pass)}catch(e){throw"setAlgAndProvider hash alg set fail hashAlg="+n+"/"+e}this.updateString=function(e){this.mac.update(e)},this.updateHex=function(e){var t=f.enc.Hex.parse(e);this.mac.update(t)},this.doFinal=function(){return this.mac.finalize().toString(f.enc.Hex)},this.doFinalString=function(e){return this.updateString(e),this.doFinal()},this.doFinalHex=function(e){return this.updateHex(e),this.doFinal()}}},this.updateString=function(e){throw"updateString(str) not supported for this alg/prov: "+this.algProv},this.updateHex=function(e){throw"updateHex(hex) not supported for this alg/prov: "+this.algProv},this.doFinal=function(){throw"digest() not supported for this alg/prov: "+this.algProv},this.doFinalString=function(e){throw"digestString(str) not supported for this alg/prov: "+this.algProv},this.doFinalHex=function(e){throw"digestHex(hex) not supported for this alg/prov: "+this.algProv},this.setPassword=function(e){if("string"==typeof e){var t=e;return e.length%2!=1&&e.match(/^[0-9A-Fa-f]+$/)||(t=Ee(e)),void(this.pass=f.enc.Hex.parse(t))}if("object"!=typeof e)throw"KJUR.crypto.Mac unsupported password type: "+e;t=null;if(void 0!==e.hex){if(e.hex.length%2!=0||!e.hex.match(/^[0-9A-Fa-f]+$/))throw"Mac: wrong hex password: "+e.hex;t=e.hex}if(void 0!==e.utf8&&(t=Se(e.utf8)),void 0!==e.rstr&&(t=Ee(e.rstr)),void 0!==e.b64&&(t=b(e.b64)),void 0!==e.b64u&&(t=be(e.b64u)),null==t)throw"KJUR.crypto.Mac unsupported password type: "+e;this.pass=f.enc.Hex.parse(t)},void 0!==e&&(void 0!==e.pass&&this.setPassword(e.pass),void 0!==e.alg&&(this.algName=e.alg,void 0===e.prov&&(this.provName=ce.crypto.Util.DEFAULTPROVIDER[this.algName]),this.setAlgAndProvider(this.algName,this.provName)))},ce.crypto.Signature=function(e){var t=null;if(this._setAlgNames=function(){var e=this.algName.match(/^(.+)with(.+)$/);e&&(this.mdAlgName=e[1].toLowerCase(),this.pubkeyAlgName=e[2].toLowerCase(),"rsaandmgf1"==this.pubkeyAlgName&&"sha"==this.mdAlgName&&(this.mdAlgName="sha1"))},this._zeroPaddingOfSignature=function(e,t){for(var n="",r=t/4-e.length,i=0;i<r;i++)n+="0";return n+e},this.setAlgAndProvider=function(e,t){if(this._setAlgNames(),"cryptojs/jsrsa"!=t)throw new Error("provider not supported: "+t);if(-1!=":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(this.mdAlgName)){try{this.md=new ce.crypto.MessageDigest({alg:this.mdAlgName})}catch(e){throw new Error("setAlgAndProvider hash alg set fail alg="+this.mdAlgName+"/"+e)}this.init=function(e,t){var n=null;try{n=void 0===t?Ze.getKey(e):Ze.getKey(e,t)}catch(e){throw"init failed:"+e}if(!0===n.isPrivate)this.prvKey=n,this.state="SIGN";else{if(!0!==n.isPublic)throw"init failed.:"+n;this.pubKey=n,this.state="VERIFY"}},this.updateString=function(e){this.md.updateString(e)},this.updateHex=function(e){this.md.updateHex(e)},this.sign=function(){if(this.sHashHex=this.md.digest(),void 0===this.prvKey&&void 0!==this.ecprvhex&&void 0!==this.eccurvename&&void 0!==ce.crypto.ECDSA&&(this.prvKey=new ce.crypto.ECDSA({curve:this.eccurvename,prv:this.ecprvhex})),this.prvKey instanceof ne&&"rsaandmgf1"===this.pubkeyAlgName)this.hSign=this.prvKey.signWithMessageHashPSS(this.sHashHex,this.mdAlgName,this.pssSaltLen);else if(this.prvKey instanceof ne&&"rsa"===this.pubkeyAlgName)this.hSign=this.prvKey.signWithMessageHash(this.sHashHex,this.mdAlgName);else if(this.prvKey instanceof ce.crypto.ECDSA)this.hSign=this.prvKey.signWithMessageHash(this.sHashHex);else{if(!(this.prvKey instanceof ce.crypto.DSA))throw"Signature: unsupported private key alg: "+this.pubkeyAlgName;this.hSign=this.prvKey.signWithMessageHash(this.sHashHex)}return this.hSign},this.signString=function(e){return this.updateString(e),this.sign()},this.signHex=function(e){return this.updateHex(e),this.sign()},this.verify=function(e){if(this.sHashHex=this.md.digest(),void 0===this.pubKey&&void 0!==this.ecpubhex&&void 0!==this.eccurvename&&void 0!==ce.crypto.ECDSA&&(this.pubKey=new ce.crypto.ECDSA({curve:this.eccurvename,pub:this.ecpubhex})),this.pubKey instanceof ne&&"rsaandmgf1"===this.pubkeyAlgName)return this.pubKey.verifyWithMessageHashPSS(this.sHashHex,e,this.mdAlgName,this.pssSaltLen);if(this.pubKey instanceof ne&&"rsa"===this.pubkeyAlgName)return this.pubKey.verifyWithMessageHash(this.sHashHex,e);if(void 0!==ce.crypto.ECDSA&&this.pubKey instanceof ce.crypto.ECDSA)return this.pubKey.verifyWithMessageHash(this.sHashHex,e);if(void 0!==ce.crypto.DSA&&this.pubKey instanceof ce.crypto.DSA)return this.pubKey.verifyWithMessageHash(this.sHashHex,e);throw"Signature: unsupported public key alg: "+this.pubkeyAlgName}}},this.init=function(e,t){throw"init(key, pass) not supported for this alg:prov="+this.algProvName},this.updateString=function(e){throw"updateString(str) not supported for this alg:prov="+this.algProvName},this.updateHex=function(e){throw"updateHex(hex) not supported for this alg:prov="+this.algProvName},this.sign=function(){throw"sign() not supported for this alg:prov="+this.algProvName},this.signString=function(e){throw"digestString(str) not supported for this alg:prov="+this.algProvName},this.signHex=function(e){throw"digestHex(hex) not supported for this alg:prov="+this.algProvName},this.verify=function(e){throw"verify(hSigVal) not supported for this alg:prov="+this.algProvName},this.initParams=e,void 0!==e&&(void 0!==e.alg&&(this.algName=e.alg,void 0===e.prov?this.provName=ce.crypto.Util.DEFAULTPROVIDER[this.algName]:this.provName=e.prov,this.algProvName=this.algName+":"+this.provName,this.setAlgAndProvider(this.algName,this.provName),this._setAlgNames()),void 0!==e.psssaltlen&&(this.pssSaltLen=e.psssaltlen),void 0!==e.prvkeypem)){if(void 0!==e.prvkeypas)throw"both prvkeypem and prvkeypas parameters not supported";try{t=Ze.getKey(e.prvkeypem);this.init(t)}catch(e){throw"fatal error to load pem private key: "+e}}},ce.crypto.Cipher=function(e){},ce.crypto.Cipher.encrypt=function(e,t,n){if(t instanceof ne&&t.isPublic){var r=ce.crypto.Cipher.getAlgByKeyAndName(t,n);if("RSA"===r)return t.encrypt(e);if("RSAOAEP"===r)return t.encryptOAEP(e,"sha1");var i=r.match(/^RSAOAEP(\d+)$/);if(null!==i)return t.encryptOAEP(e,"sha"+i[1]);throw"Cipher.encrypt: unsupported algorithm for RSAKey: "+n}throw"Cipher.encrypt: unsupported key or algorithm"},ce.crypto.Cipher.decrypt=function(e,t,n){if(t instanceof ne&&t.isPrivate){var r=ce.crypto.Cipher.getAlgByKeyAndName(t,n);if("RSA"===r)return t.decrypt(e);if("RSAOAEP"===r)return t.decryptOAEP(e,"sha1");var i=r.match(/^RSAOAEP(\d+)$/);if(null!==i)return t.decryptOAEP(e,"sha"+i[1]);throw"Cipher.decrypt: unsupported algorithm for RSAKey: "+n}throw"Cipher.decrypt: unsupported key or algorithm"},ce.crypto.Cipher.getAlgByKeyAndName=function(e,t){if(e instanceof ne){if(-1!=":RSA:RSAOAEP:RSAOAEP224:RSAOAEP256:RSAOAEP384:RSAOAEP512:".indexOf(t))return t;if(null==t)return"RSA";throw"getAlgByKeyAndName: not supported algorithm name for RSAKey: "+t}throw"getAlgByKeyAndName: not supported algorithm name: "+t},ce.crypto.OID=new function(){this.oidhex2name={"2a864886f70d010101":"rsaEncryption","2a8648ce3d0201":"ecPublicKey","2a8648ce380401":"dsa","2a8648ce3d030107":"secp256r1","2b8104001f":"secp192k1","2b81040021":"secp224r1","2b8104000a":"secp256k1","2b81040022":"secp384r1","2b81040023":"secp521r1","2a8648ce380403":"SHA1withDSA","608648016503040301":"SHA224withDSA","608648016503040302":"SHA256withDSA"}},void 0!==ce&&ce||(ce={}),void 0!==ce.crypto&&ce.crypto||(ce.crypto={}),ce.crypto.ECDSA=function(e){var t=Error,n=w,r=se,i=ce.crypto.ECDSA,s=ce.crypto.ECParameterDB,a=i.getName,o=le,c=o.getVbyListEx,u=o.isASN1HEX,h=new Z;this.type="EC",this.isPrivate=!1,this.isPublic=!1,this.getBigRandom=function(e){return new n(e.bitLength(),h).mod(e.subtract(n.ONE)).add(n.ONE)},this.setNamedCurve=function(e){this.ecparams=s.getByName(e),this.prvKeyHex=null,this.pubKeyHex=null,this.curveName=e},this.setPrivateKeyHex=function(e){this.isPrivate=!0,this.prvKeyHex=e},this.setPublicKeyHex=function(e){this.isPublic=!0,this.pubKeyHex=e},this.getPublicKeyXYHex=function(){var e=this.pubKeyHex;if("04"!==e.substr(0,2))throw"this method supports uncompressed format(04) only";var t=this.ecparams.keycharlen;if(e.length!==2+2*t)throw"malformed public key hex length";var n={};return n.x=e.substr(2,t),n.y=e.substr(2+t),n},this.getShortNISTPCurveName=function(){var e=this.curveName;return"secp256r1"===e||"NIST P-256"===e||"P-256"===e||"prime256v1"===e?"P-256":"secp384r1"===e||"NIST P-384"===e||"P-384"===e?"P-384":"secp521r1"===e||"NIST P-521"===e||"P-521"===e?"P-521":null},this.generateKeyPairHex=function(){var e=this.ecparams.n,t=this.getBigRandom(e),n=this.ecparams.keycharlen,r=("0000000000"+t.toString(16)).slice(-n);return this.setPrivateKeyHex(r),{ecprvhex:r,ecpubhex:this.generatePublicKeyHex()}},this.generatePublicKeyHex=function(){var e=new n(this.prvKeyHex,16),t=this.ecparams.G.multiply(e),r=t.getX().toBigInteger(),i=t.getY().toBigInteger(),s=this.ecparams.keycharlen,a="04"+("0000000000"+r.toString(16)).slice(-s)+("0000000000"+i.toString(16)).slice(-s);return this.setPublicKeyHex(a),a},this.signWithMessageHash=function(e){return this.signHex(e,this.prvKeyHex)},this.signHex=function(e,t){var r=new n(t,16),s=this.ecparams.n,a=new n(e.substring(0,this.ecparams.keycharlen),16);do{var o=this.getBigRandom(s),c=this.ecparams.G.multiply(o).getX().toBigInteger().mod(s)}while(c.compareTo(n.ZERO)<=0);var u=o.modInverse(s).multiply(a.add(r.multiply(c))).mod(s);return i.biRSSigToASN1Sig(c,u)},this.sign=function(e,t){var r=t,i=this.ecparams.n,s=n.fromByteArrayUnsigned(e);do{var a=this.getBigRandom(i),o=this.ecparams.G.multiply(a).getX().toBigInteger().mod(i)}while(o.compareTo(w.ZERO)<=0);var c=a.modInverse(i).multiply(s.add(r.multiply(o))).mod(i);return this.serializeSig(o,c)},this.verifyWithMessageHash=function(e,t){return this.verifyHex(e,t,this.pubKeyHex)},this.verifyHex=function(e,t,s){try{var a,o,c=i.parseSigHex(t);a=c.r,o=c.s;var u=r.decodeFromHex(this.ecparams.curve,s),h=new n(e.substring(0,this.ecparams.keycharlen),16);return this.verifyRaw(h,a,o,u)}catch(e){return!1}},this.verify=function(e,t,i){var s,a,o;if(Bitcoin.Util.isArray(t)){var c=this.parseSig(t);s=c.r,a=c.s}else{if("object"!=typeof t||!t.r||!t.s)throw"Invalid value for signature";s=t.r,a=t.s}if(i instanceof se)o=i;else{if(!Bitcoin.Util.isArray(i))throw"Invalid format for pubkey value, must be byte array or ECPointFp";o=r.decodeFrom(this.ecparams.curve,i)}var u=n.fromByteArrayUnsigned(e);return this.verifyRaw(u,s,a,o)},this.verifyRaw=function(e,t,r,i){var s=this.ecparams.n,a=this.ecparams.G;if(t.compareTo(n.ONE)<0||t.compareTo(s)>=0)return!1;if(r.compareTo(n.ONE)<0||r.compareTo(s)>=0)return!1;var o=r.modInverse(s),c=e.multiply(o).mod(s),u=t.multiply(o).mod(s);return a.multiply(c).add(i.multiply(u)).getX().toBigInteger().mod(s).equals(t)},this.serializeSig=function(e,t){var n=e.toByteArraySigned(),r=t.toByteArraySigned(),i=[];return i.push(2),i.push(n.length),(i=i.concat(n)).push(2),i.push(r.length),(i=i.concat(r)).unshift(i.length),i.unshift(48),i},this.parseSig=function(e){var t;if(48!=e[0])throw new Error("Signature not a valid DERSequence");if(2!=e[t=2])throw new Error("First element in signature must be a DERInteger");var r=e.slice(t+2,t+2+e[t+1]);if(2!=e[t+=2+e[t+1]])throw new Error("Second element in signature must be a DERInteger");var i=e.slice(t+2,t+2+e[t+1]);return t+=2+e[t+1],{r:n.fromByteArrayUnsigned(r),s:n.fromByteArrayUnsigned(i)}},this.parseSigCompact=function(e){if(65!==e.length)throw"Signature has the wrong length";var t=e[0]-27;if(t<0||t>7)throw"Invalid signature type";var r=this.ecparams.n;return{r:n.fromByteArrayUnsigned(e.slice(1,33)).mod(r),s:n.fromByteArrayUnsigned(e.slice(33,65)).mod(r),i:t}},this.readPKCS5PrvKeyHex=function(e){if(!1===u(e))throw new Error("not ASN.1 hex string");var t,n,r;try{t=c(e,0,["[0]",0],"06"),n=c(e,0,[1],"04");try{r=c(e,0,["[1]",0],"03")}catch(e){}}catch(e){throw new Error("malformed PKCS#1/5 plain ECC private key")}if(this.curveName=a(t),void 0===this.curveName)throw"unsupported curve name";this.setNamedCurve(this.curveName),this.setPublicKeyHex(r),this.setPrivateKeyHex(n),this.isPublic=!1},this.readPKCS8PrvKeyHex=function(e){if(!1===u(e))throw new t("not ASN.1 hex string");var n,r,i;try{c(e,0,[1,0],"06"),n=c(e,0,[1,1],"06"),r=c(e,0,[2,0,1],"04");try{i=c(e,0,[2,0,"[1]",0],"03")}catch(e){}}catch(e){throw new t("malformed PKCS#8 plain ECC private key")}if(this.curveName=a(n),void 0===this.curveName)throw new t("unsupported curve name");this.setNamedCurve(this.curveName),this.setPublicKeyHex(i),this.setPrivateKeyHex(r),this.isPublic=!1},this.readPKCS8PubKeyHex=function(e){if(!1===u(e))throw new t("not ASN.1 hex string");var n,r;try{c(e,0,[0,0],"06"),n=c(e,0,[0,1],"06"),r=c(e,0,[1],"03")}catch(e){throw new t("malformed PKCS#8 ECC public key")}if(this.curveName=a(n),null===this.curveName)throw new t("unsupported curve name");this.setNamedCurve(this.curveName),this.setPublicKeyHex(r)},this.readCertPubKeyHex=function(e,n){if(!1===u(e))throw new t("not ASN.1 hex string");var r,i;try{r=c(e,0,[0,5,0,1],"06"),i=c(e,0,[0,5,1],"03")}catch(e){throw new t("malformed X.509 certificate ECC public key")}if(this.curveName=a(r),null===this.curveName)throw new t("unsupported curve name");this.setNamedCurve(this.curveName),this.setPublicKeyHex(i)},void 0!==e&&void 0!==e.curve&&(this.curveName=e.curve),void 0===this.curveName&&(this.curveName="secp256r1"),this.setNamedCurve(this.curveName),void 0!==e&&(void 0!==e.prv&&this.setPrivateKeyHex(e.prv),void 0!==e.pub&&this.setPublicKeyHex(e.pub))},ce.crypto.ECDSA.parseSigHex=function(e){var t=ce.crypto.ECDSA.parseSigHexInHexRS(e);return{r:new w(t.r,16),s:new w(t.s,16)}},ce.crypto.ECDSA.parseSigHexInHexRS=function(e){var t=le,n=t.getChildIdx,r=t.getV;if(t.checkStrictDER(e,0),"30"!=e.substr(0,2))throw new Error("signature is not a ASN.1 sequence");var i=n(e,0);if(2!=i.length)throw new Error("signature shall have two elements");var s=i[0],a=i[1];if("02"!=e.substr(s,2))throw new Error("1st item not ASN.1 integer");if("02"!=e.substr(a,2))throw new Error("2nd item not ASN.1 integer");return{r:r(e,s),s:r(e,a)}},ce.crypto.ECDSA.asn1SigToConcatSig=function(e){var t=ce.crypto.ECDSA.parseSigHexInHexRS(e),n=t.r,r=t.s;if(n.length>=130&&n.length<=134){if(n.length%2!=0)throw Error("unknown ECDSA sig r length error");if(r.length%2!=0)throw Error("unknown ECDSA sig s length error");"00"==n.substr(0,2)&&(n=n.substr(2)),"00"==r.substr(0,2)&&(r=r.substr(2));var i=Math.max(n.length,r.length);return(n=("000000"+n).slice(-i))+(r=("000000"+r).slice(-i))}if("00"==n.substr(0,2)&&n.length%32==2&&(n=n.substr(2)),"00"==r.substr(0,2)&&r.length%32==2&&(r=r.substr(2)),n.length%32==30&&(n="00"+n),r.length%32==30&&(r="00"+r),n.length%32!=0)throw Error("unknown ECDSA sig r length error");if(r.length%32!=0)throw Error("unknown ECDSA sig s length error");return n+r},ce.crypto.ECDSA.concatSigToASN1Sig=function(e){if(e.length%4!=0)throw Error("unknown ECDSA concatinated r-s sig length error");var t=e.substr(0,e.length/2),n=e.substr(e.length/2);return ce.crypto.ECDSA.hexRSSigToASN1Sig(t,n)},ce.crypto.ECDSA.hexRSSigToASN1Sig=function(e,t){var n=new w(e,16),r=new w(t,16);return ce.crypto.ECDSA.biRSSigToASN1Sig(n,r)},ce.crypto.ECDSA.biRSSigToASN1Sig=function(e,t){var n=ce.asn1,r=new n.DERInteger({bigint:e}),i=new n.DERInteger({bigint:t});return new n.DERSequence({array:[r,i]}).tohex()},ce.crypto.ECDSA.getName=function(e){return"2b8104001f"===e?"secp192k1":"2a8648ce3d030107"===e?"secp256r1":"2b8104000a"===e?"secp256k1":"2b81040021"===e?"secp224r1":"2b81040022"===e?"secp384r1":"2b81040023"===e?"secp521r1":-1!=="|secp256r1|NIST P-256|P-256|prime256v1|".indexOf(e)?"secp256r1":-1!=="|secp256k1|".indexOf(e)?"secp256k1":-1!=="|secp224r1|NIST P-224|P-224|".indexOf(e)?"secp224r1":-1!=="|secp384r1|NIST P-384|P-384|".indexOf(e)?"secp384r1":-1!=="|secp521r1|NIST P-521|P-521|".indexOf(e)?"secp521r1":null},void 0!==ce&&ce||(ce={}),void 0!==ce.crypto&&ce.crypto||(ce.crypto={}),ce.crypto.ECParameterDB=new function(){var e={},t={};function n(e){return new w(e,16)}this.getByName=function(n){var r=n;if(void 0!==t[r]&&(r=t[n]),void 0!==e[r])return e[r];throw"unregistered EC curve name: "+r},this.regist=function(r,i,s,a,o,c,u,h,l,d,m,p){e[r]={};var f=n(s),g=n(a),y=n(o),v=n(c),b=n(u),S=new ae(f,g,y),w=S.decodePointHex("04"+h+l);e[r].name=r,e[r].keylen=i,e[r].keycharlen=2*Math.ceil(i/8),e[r].curve=S,e[r].G=w,e[r].n=v,e[r].h=b,e[r].oid=m,e[r].info=p;for(var C=0;C<d.length;C++)t[d[C]]=r}},ce.crypto.ECParameterDB.regist("secp128r1",128,"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC","E87579C11079F43DD824993C2CEE5ED3","FFFFFFFE0000000075A30D1B9038A115","1","161FF7528B899B2D0C28607CA52C5B86","CF5AC8395BAFEB13C02DA292DDED7A83",[],"","secp128r1 : SECG curve over a 128 bit prime field"),ce.crypto.ECParameterDB.regist("secp160k1",160,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73","0","7","0100000000000000000001B8FA16DFAB9ACA16B6B3","1","3B4C382CE37AA192A4019E763036F4F5DD4D7EBB","938CF935318FDCED6BC28286531733C3F03C4FEE",[],"","secp160k1 : SECG curve over a 160 bit prime field"),ce.crypto.ECParameterDB.regist("secp160r1",160,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC","1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45","0100000000000000000001F4C8F927AED3CA752257","1","4A96B5688EF573284664698968C38BB913CBFC82","23A628553168947D59DCC912042351377AC5FB32",[],"","secp160r1 : SECG curve over a 160 bit prime field"),ce.crypto.ECParameterDB.regist("secp192k1",192,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37","0","3","FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D","1","DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D","9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D",[]),ce.crypto.ECParameterDB.regist("secp192r1",192,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC","64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1","FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831","1","188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012","07192B95FFC8DA78631011ED6B24CDD573F977A11E794811",[]),ce.crypto.ECParameterDB.regist("secp224r1",224,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE","B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4","FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D","1","B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21","BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34",[]),ce.crypto.ECParameterDB.regist("secp256k1",256,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F","0","7","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141","1","79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798","483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8",[]),ce.crypto.ECParameterDB.regist("secp256r1",256,"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC","5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B","FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551","1","6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296","4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5",["NIST P-256","P-256","prime256v1"]),ce.crypto.ECParameterDB.regist("secp384r1",384,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFC","B3312FA7E23EE7E4988E056BE3F82D19181D9C6EFE8141120314088F5013875AC656398D8A2ED19D2A85C8EDD3EC2AEF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF581A0DB248B0A77AECEC196ACCC52973","1","AA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385502F25DBF55296C3A545E3872760AB7","3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f",["NIST P-384","P-384"]),ce.crypto.ECParameterDB.regist("secp521r1",521,"1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC","051953EB9618E1C9A1F929A21A0B68540EEA2DA725B99B315F3B8B489918EF109E156193951EC7E937B1652C0BD3BB1BF073573DF883D2C34F1EF451FD46B503F00","1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E91386409","1","00C6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD66","011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650",["NIST P-521","P-521"]),void 0!==ce&&ce||(ce={}),void 0!==ce.crypto&&ce.crypto||(ce.crypto={}),ce.crypto.DSA=function(){var e=le,t=(e.getVbyList,e.getVbyListEx),n=e.isASN1HEX,r=w;this.p=null,this.q=null,this.g=null,this.y=null,this.x=null,this.type="DSA",this.isPrivate=!1,this.isPublic=!1,this.setPrivate=function(e,t,n,r,i){this.isPrivate=!0,this.p=e,this.q=t,this.g=n,this.y=r,this.x=i},this.setPrivateHex=function(e,t,n,r,i){var s,a,o,c,u;s=new w(e,16),a=new w(t,16),o=new w(n,16),c="string"==typeof r&&r.length>1?new w(r,16):null,u=new w(i,16),this.setPrivate(s,a,o,c,u)},this.setPublic=function(e,t,n,r){this.isPublic=!0,this.p=e,this.q=t,this.g=n,this.y=r,this.x=null},this.setPublicHex=function(e,t,n,r){var i,s,a,o;i=new w(e,16),s=new w(t,16),a=new w(n,16),o=new w(r,16),this.setPublic(i,s,a,o)},this.signWithMessageHash=function(e){var t=this.p,n=this.q,r=this.g,i=(this.y,this.x),s=ce.crypto.Util.getRandomBigIntegerMinToMax(w.ONE.add(w.ONE),n.subtract(w.ONE)),a=new w(e.substr(0,n.bitLength()/4),16),o=r.modPow(s,t).mod(n),c=s.modInverse(n).multiply(a.add(i.multiply(o))).mod(n);return ce.asn1.ASN1Util.jsonToASN1HEX({seq:[{int:{bigint:o}},{int:{bigint:c}}]})},this.verifyWithMessageHash=function(e,t){var n=this.p,r=this.q,i=this.g,s=this.y,a=this.parseASN1Signature(t),o=a[0],c=a[1],u=new w(e.substr(0,r.bitLength()/4),16);if(w.ZERO.compareTo(o)>0||o.compareTo(r)>0)throw"invalid DSA signature";if(w.ZERO.compareTo(c)>=0||c.compareTo(r)>0)throw"invalid DSA signature";var h=c.modInverse(r),l=u.multiply(h).mod(r),d=o.multiply(h).mod(r);return 0==i.modPow(l,n).multiply(s.modPow(d,n)).mod(n).mod(r).compareTo(o)},this.parseASN1Signature=function(e){try{return[new r(t(e,0,[0],"02"),16),new r(t(e,0,[1],"02"),16)]}catch(e){throw new Error("malformed ASN.1 DSA signature")}},this.readPKCS5PrvKeyHex=function(e){var r,i,s,a,o;if(!1===n(e))throw new Error("not ASN.1 hex string");try{r=t(e,0,[1],"02"),i=t(e,0,[2],"02"),s=t(e,0,[3],"02"),a=t(e,0,[4],"02"),o=t(e,0,[5],"02")}catch(e){throw new Error("malformed PKCS#1/5 plain DSA private key")}this.setPrivateHex(r,i,s,a,o)},this.readPKCS8PrvKeyHex=function(e){var r,i,s,a;if(!1===n(e))throw new Error("not ASN.1 hex string");try{r=t(e,0,[1,1,0],"02"),i=t(e,0,[1,1,1],"02"),s=t(e,0,[1,1,2],"02"),a=t(e,0,[2,0],"02")}catch(e){throw new Error("malformed PKCS#8 plain DSA private key")}this.setPrivateHex(r,i,s,null,a)},this.readPKCS8PubKeyHex=function(e){var r,i,s,a;if(!1===n(e))throw new Error("not ASN.1 hex string");try{r=t(e,0,[0,1,0],"02"),i=t(e,0,[0,1,1],"02"),s=t(e,0,[0,1,2],"02"),a=t(e,0,[1,0],"02")}catch(e){throw new Error("malformed PKCS#8 DSA public key")}this.setPublicHex(r,i,s,a)},this.readCertPubKeyHex=function(e,r){var i,s,a,o;if(!1===n(e))throw new Error("not ASN.1 hex string");try{i=t(e,0,[0,5,0,1,0],"02"),s=t(e,0,[0,5,0,1,1],"02"),a=t(e,0,[0,5,0,1,2],"02"),o=t(e,0,[0,5,1,0],"02")}catch(e){throw new Error("malformed X.509 certificate DSA public key")}this.setPublicHex(i,s,a,o)}};var Ze=function(){var e=function(e,n,r){return t(f.AES,e,n,r)},t=function(e,t,n,r){var i=f.enc.Hex.parse(t),s=f.enc.Hex.parse(n),a=f.enc.Hex.parse(r),o={};o.key=s,o.iv=a,o.ciphertext=i;var c=e.decrypt(o,s,{iv:a});return f.enc.Hex.stringify(c)},n=function(e,t,n){return r(f.AES,e,t,n)},r=function(e,t,n,r){var i=f.enc.Hex.parse(t),s=f.enc.Hex.parse(n),a=f.enc.Hex.parse(r),o=e.encrypt(i,s,{iv:a}),c=f.enc.Hex.parse(o.toString());return f.enc.Base64.stringify(c)},i={"AES-256-CBC":{proc:e,eproc:n,keylen:32,ivlen:16},"AES-192-CBC":{proc:e,eproc:n,keylen:24,ivlen:16},"AES-128-CBC":{proc:e,eproc:n,keylen:16,ivlen:16},"DES-EDE3-CBC":{proc:function(e,n,r){return t(f.TripleDES,e,n,r)},eproc:function(e,t,n){return r(f.TripleDES,e,t,n)},keylen:24,ivlen:8},"DES-CBC":{proc:function(e,n,r){return t(f.DES,e,n,r)},eproc:function(e,t,n){return r(f.DES,e,t,n)},keylen:8,ivlen:8}},s=function(e){var t={},n=e.match(new RegExp("DEK-Info: ([^,]+),([0-9A-Fa-f]+)","m"));n&&(t.cipher=n[1],t.ivsalt=n[2]);var r=e.match(new RegExp("-----BEGIN ([A-Z]+) PRIVATE KEY-----"));r&&(t.type=r[1]);var i=-1,s=0;-1!=e.indexOf("\r\n\r\n")&&(i=e.indexOf("\r\n\r\n"),s=2),-1!=e.indexOf("\n\n")&&(i=e.indexOf("\n\n"),s=1);var a=e.indexOf("-----END");if(-1!=i&&-1!=a){var o=e.substring(i+2*s,a-s);o=o.replace(/\s+/g,""),t.data=o}return t},a=function(e,t,n){for(var r=n.substring(0,16),s=f.enc.Hex.parse(r),a=f.enc.Utf8.parse(t),o=i[e].keylen+i[e].ivlen,c="",u=null;;){var h=f.algo.MD5.create();if(null!=u&&h.update(u),h.update(a),h.update(s),u=h.finalize(),(c+=f.enc.Hex.stringify(u)).length>=2*o)break}var l={};return l.keyhex=c.substr(0,2*i[e].keylen),l.ivhex=c.substr(2*i[e].keylen,2*i[e].ivlen),l},o=function(e,t,n,r){var s=f.enc.Base64.parse(e),a=f.enc.Hex.stringify(s);return(0,i[t].proc)(a,n,r)};return{version:"1.0.0",parsePKCS5PEM:function(e){return s(e)},getKeyAndUnusedIvByPasscodeAndIvsalt:function(e,t,n){return a(e,t,n)},decryptKeyB64:function(e,t,n,r){return o(e,t,n,r)},getDecryptedKeyHex:function(e,t){var n=s(e),r=(n.type,n.cipher),i=n.ivsalt,c=n.data,u=a(r,t,i).keyhex;return o(c,r,u,i)},getEncryptedPKCS5PEMFromPrvKeyHex:function(e,t,n,r,s){var o="";if(void 0!==r&&null!=r||(r="AES-256-CBC"),void 0===i[r])throw new Error("KEYUTIL unsupported algorithm: "+r);void 0!==s&&null!=s||(s=function(e){var t=f.lib.WordArray.random(e);return f.enc.Hex.stringify(t)}(i[r].ivlen).toUpperCase());var c=function(e,t,n,r){return(0,i[t].eproc)(e,n,r)}(t,r,a(r,n,s).keyhex,s);o="-----BEGIN "+e+" PRIVATE KEY-----\r\n";return o+="Proc-Type: 4,ENCRYPTED\r\n",o+="DEK-Info: "+r+","+s+"\r\n",o+="\r\n",o+=c.replace(/(.{64})/g,"$1\r\n"),o+="\r\n-----END "+e+" PRIVATE KEY-----\r\n"},parseHexOfEncryptedPKCS8:function(e){var t=le,n=t.getChildIdx,r=t.getV,i={},s=n(e,0);if(2!=s.length)throw new Error("malformed format: SEQUENCE(0).items != 2: "+s.length);i.ciphertext=r(e,s[1]);var a=n(e,s[0]);if(2!=a.length)throw new Error("malformed format: SEQUENCE(0.0).items != 2: "+a.length);if("2a864886f70d01050d"!=r(e,a[0]))throw new Error("this only supports pkcs5PBES2");var o=n(e,a[1]);if(2!=a.length)throw new Error("malformed format: SEQUENCE(0.0.1).items != 2: "+o.length);var c=n(e,o[1]);if(2!=c.length)throw new Error("malformed format: SEQUENCE(0.0.1.1).items != 2: "+c.length);if("2a864886f70d0307"!=r(e,c[0]))throw"this only supports TripleDES";i.encryptionSchemeAlg="TripleDES",i.encryptionSchemeIV=r(e,c[1]);var u=n(e,o[0]);if(2!=u.length)throw new Error("malformed format: SEQUENCE(0.0.1.0).items != 2: "+u.length);if("2a864886f70d01050c"!=r(e,u[0]))throw new Error("this only supports pkcs5PBKDF2");var h=n(e,u[1]);if(h.length<2)throw new Error("malformed format: SEQUENCE(0.0.1.0.1).items < 2: "+h.length);i.pbkdf2Salt=r(e,h[0]);var l=r(e,h[1]);try{i.pbkdf2Iter=parseInt(l,16)}catch(e){throw new Error("malformed format pbkdf2Iter: "+l)}return i},getPBKDF2KeyHexFromParam:function(e,t){var n=f.enc.Hex.parse(e.pbkdf2Salt),r=e.pbkdf2Iter,i=f.PBKDF2(t,n,{keySize:6,iterations:r});return f.enc.Hex.stringify(i)},_getPlainPKCS8HexFromEncryptedPKCS8PEM:function(e,t){var n=Ne(e,"ENCRYPTED PRIVATE KEY"),r=this.parseHexOfEncryptedPKCS8(n),i=Ze.getPBKDF2KeyHexFromParam(r,t),s={};s.ciphertext=f.enc.Hex.parse(r.ciphertext);var a=f.enc.Hex.parse(i),o=f.enc.Hex.parse(r.encryptionSchemeIV),c=f.TripleDES.decrypt(s,a,{iv:o});return f.enc.Hex.stringify(c)},getKeyFromEncryptedPKCS8PEM:function(e,t){var n=this._getPlainPKCS8HexFromEncryptedPKCS8PEM(e,t);return this.getKeyFromPlainPrivatePKCS8Hex(n)},parsePlainPrivatePKCS8Hex:function(e){var t=le,n=t.getChildIdx,r=t.getV,i={algparam:null};if("30"!=e.substr(0,2))throw new Error("malformed plain PKCS8 private key(code:001)");var s=n(e,0);if(s.length<3)throw new Error("malformed plain PKCS8 private key(code:002)");if("30"!=e.substr(s[1],2))throw new Error("malformed PKCS8 private key(code:003)");var a=n(e,s[1]);if(2!=a.length)throw new Error("malformed PKCS8 private key(code:004)");if("06"!=e.substr(a[0],2))throw new Error("malformed PKCS8 private key(code:005)");if(i.algoid=r(e,a[0]),"06"==e.substr(a[1],2)&&(i.algparam=r(e,a[1])),"04"!=e.substr(s[2],2))throw new Error("malformed PKCS8 private key(code:006)");return i.keyidx=t.getVidx(e,s[2]),i},getKeyFromPlainPrivatePKCS8PEM:function(e){var t=Ne(e,"PRIVATE KEY");return this.getKeyFromPlainPrivatePKCS8Hex(t)},getKeyFromPlainPrivatePKCS8Hex:function(e){var t,n=this.parsePlainPrivatePKCS8Hex(e);if("2a864886f70d010101"==n.algoid)t=new ne;else if("2a8648ce380401"==n.algoid)t=new ce.crypto.DSA;else{if("2a8648ce3d0201"!=n.algoid)throw new Error("unsupported private key algorithm");t=new ce.crypto.ECDSA}return t.readPKCS8PrvKeyHex(e),t},_getKeyFromPublicPKCS8Hex:function(e){var t,n=le.getVbyList(e,0,[0,0],"06");if("2a864886f70d010101"===n)t=new ne;else if("2a8648ce380401"===n)t=new ce.crypto.DSA;else{if("2a8648ce3d0201"!==n)throw new Error("unsupported PKCS#8 public key hex");t=new ce.crypto.ECDSA}return t.readPKCS8PubKeyHex(e),t},parsePublicRawRSAKeyHex:function(e){var t=le,n=t.getChildIdx,r=t.getV,i={};if("30"!=e.substr(0,2))throw new Error("malformed RSA key(code:001)");var s=n(e,0);if(2!=s.length)throw new Error("malformed RSA key(code:002)");if("02"!=e.substr(s[0],2))throw new Error("malformed RSA key(code:003)");if(i.n=r(e,s[0]),"02"!=e.substr(s[1],2))throw new Error("malformed RSA key(code:004)");return i.e=r(e,s[1]),i},parsePublicPKCS8Hex:function(e){var t=le,n=t.getChildIdx,r=t.getV,i={algparam:null},s=n(e,0);if(2!=s.length)throw new Error("outer DERSequence shall have 2 elements: "+s.length);var a=s[0];if("30"!=e.substr(a,2))throw new Error("malformed PKCS8 public key(code:001)");var o=n(e,a);if(2!=o.length)throw new Error("malformed PKCS8 public key(code:002)");if("06"!=e.substr(o[0],2))throw new Error("malformed PKCS8 public key(code:003)");if(i.algoid=r(e,o[0]),"06"==e.substr(o[1],2)?i.algparam=r(e,o[1]):"30"==e.substr(o[1],2)&&(i.algparam={},i.algparam.p=t.getVbyList(e,o[1],[0],"02"),i.algparam.q=t.getVbyList(e,o[1],[1],"02"),i.algparam.g=t.getVbyList(e,o[1],[2],"02")),"03"!=e.substr(s[1],2))throw new Error("malformed PKCS8 public key(code:004)");return i.key=r(e,s[1]).substr(2),i}}}();Ze.getKey=function(e,t,n){var r=(g=le).getChildIdx,i=(g.getV,g.getVbyList),s=ce.crypto,a=s.ECDSA,o=s.DSA,c=ne,u=Ne,h=Ze;if(void 0!==c&&e instanceof c)return e;if(void 0!==a&&e instanceof a)return e;if(void 0!==o&&e instanceof o)return e;if(void 0!==e.curve&&void 0!==e.xy&&void 0===e.d)return new a({pub:e.xy,curve:e.curve});if(void 0!==e.curve&&void 0!==e.d)return new a({prv:e.d,curve:e.curve});if(void 0===e.kty&&void 0!==e.n&&void 0!==e.e&&void 0===e.d)return(A=new c).setPublic(e.n,e.e),A;if(void 0===e.kty&&void 0!==e.n&&void 0!==e.e&&void 0!==e.d&&void 0!==e.p&&void 0!==e.q&&void 0!==e.dp&&void 0!==e.dq&&void 0!==e.co&&void 0===e.qi)return(A=new c).setPrivateEx(e.n,e.e,e.d,e.p,e.q,e.dp,e.dq,e.co),A;if(void 0===e.kty&&void 0!==e.n&&void 0!==e.e&&void 0!==e.d&&void 0===e.p)return(A=new c).setPrivate(e.n,e.e,e.d),A;if(void 0!==e.p&&void 0!==e.q&&void 0!==e.g&&void 0!==e.y&&void 0===e.x)return(A=new o).setPublic(e.p,e.q,e.g,e.y),A;if(void 0!==e.p&&void 0!==e.q&&void 0!==e.g&&void 0!==e.y&&void 0!==e.x)return(A=new o).setPrivate(e.p,e.q,e.g,e.y,e.x),A;if("RSA"===e.kty&&void 0!==e.n&&void 0!==e.e&&void 0===e.d)return(A=new c).setPublic(be(e.n),be(e.e)),A;if("RSA"===e.kty&&void 0!==e.n&&void 0!==e.e&&void 0!==e.d&&void 0!==e.p&&void 0!==e.q&&void 0!==e.dp&&void 0!==e.dq&&void 0!==e.qi)return(A=new c).setPrivateEx(be(e.n),be(e.e),be(e.d),be(e.p),be(e.q),be(e.dp),be(e.dq),be(e.qi)),A;if("RSA"===e.kty&&void 0!==e.n&&void 0!==e.e&&void 0!==e.d)return(A=new c).setPrivate(be(e.n),be(e.e),be(e.d)),A;if("EC"===e.kty&&void 0!==e.crv&&void 0!==e.x&&void 0!==e.y&&void 0===e.d){var l=(P=new a({curve:e.crv})).ecparams.keycharlen,d="04"+("0000000000"+be(e.x)).slice(-l)+("0000000000"+be(e.y)).slice(-l);return P.setPublicKeyHex(d),P}if("EC"===e.kty&&void 0!==e.crv&&void 0!==e.x&&void 0!==e.y&&void 0!==e.d){l=(P=new a({curve:e.crv})).ecparams.keycharlen,d="04"+("0000000000"+be(e.x)).slice(-l)+("0000000000"+be(e.y)).slice(-l);var m=("0000000000"+be(e.d)).slice(-l);return P.setPublicKeyHex(d),P.setPrivateKeyHex(m),P}if("pkcs5prv"===n){var p,f=e,g=le;if(9===(p=r(f,0)).length)(A=new c).readPKCS5PrvKeyHex(f);else if(6===p.length)(A=new o).readPKCS5PrvKeyHex(f);else{if(!(p.length>2&&"04"===f.substr(p[1],2)))throw new Error("unsupported PKCS#1/5 hexadecimal key");(A=new a).readPKCS5PrvKeyHex(f)}return A}if("pkcs8prv"===n)return A=h.getKeyFromPlainPrivatePKCS8Hex(e);if("pkcs8pub"===n)return h._getKeyFromPublicPKCS8Hex(e);if("x509pub"===n)return rt.getPublicKeyFromCertHex(e);if(-1!=e.indexOf("-END CERTIFICATE-",0)||-1!=e.indexOf("-END X509 CERTIFICATE-",0)||-1!=e.indexOf("-END TRUSTED CERTIFICATE-",0))return rt.getPublicKeyFromCertPEM(e);if(-1!=e.indexOf("-END PUBLIC KEY-")){var y=Ne(e,"PUBLIC KEY");return h._getKeyFromPublicPKCS8Hex(y)}if(-1!=e.indexOf("-END RSA PRIVATE KEY-")&&-1==e.indexOf("4,ENCRYPTED")){var v=u(e,"RSA PRIVATE KEY");return h.getKey(v,null,"pkcs5prv")}if(-1!=e.indexOf("-END DSA PRIVATE KEY-")&&-1==e.indexOf("4,ENCRYPTED")){var b=i(k=u(e,"DSA PRIVATE KEY"),0,[1],"02"),S=i(k,0,[2],"02"),C=i(k,0,[3],"02"),x=i(k,0,[4],"02"),E=i(k,0,[5],"02");return(A=new o).setPrivate(new w(b,16),new w(S,16),new w(C,16),new w(x,16),new w(E,16)),A}if(-1!=e.indexOf("-END EC PRIVATE KEY-")&&-1==e.indexOf("4,ENCRYPTED")){v=u(e,"EC PRIVATE KEY");return h.getKey(v,null,"pkcs5prv")}if(-1!=e.indexOf("-END PRIVATE KEY-"))return h.getKeyFromPlainPrivatePKCS8PEM(e);if(-1!=e.indexOf("-END RSA PRIVATE KEY-")&&-1!=e.indexOf("4,ENCRYPTED")){var O=h.getDecryptedKeyHex(e,t),T=new ne;return T.readPKCS5PrvKeyHex(O),T}if(-1!=e.indexOf("-END EC PRIVATE KEY-")&&-1!=e.indexOf("4,ENCRYPTED")){var P,A=i(k=h.getDecryptedKeyHex(e,t),0,[1],"04"),N=i(k,0,[2,0],"06"),I=i(k,0,[3,0],"03").substr(2);if(void 0===ce.crypto.OID.oidhex2name[N])throw new Error("undefined OID(hex) in KJUR.crypto.OID: "+N);return(P=new a({curve:ce.crypto.OID.oidhex2name[N]})).setPublicKeyHex(I),P.setPrivateKeyHex(A),P.isPublic=!1,P}if(-1!=e.indexOf("-END DSA PRIVATE KEY-")&&-1!=e.indexOf("4,ENCRYPTED")){var k;b=i(k=h.getDecryptedKeyHex(e,t),0,[1],"02"),S=i(k,0,[2],"02"),C=i(k,0,[3],"02"),x=i(k,0,[4],"02"),E=i(k,0,[5],"02");return(A=new o).setPrivate(new w(b,16),new w(S,16),new w(C,16),new w(x,16),new w(E,16)),A}if(-1!=e.indexOf("-END ENCRYPTED PRIVATE KEY-"))return h.getKeyFromEncryptedPKCS8PEM(e,t);throw new Error("not supported argument")},Ze.generateKeypair=function(e,t){if("RSA"==e){var n=t;(a=new ne).generate(n,"10001"),a.isPrivate=!0,a.isPublic=!0;var r=new ne,i=a.n.toString(16),s=a.e.toString(16);return r.setPublic(i,s),r.isPrivate=!1,r.isPublic=!0,(o={}).prvKeyObj=a,o.pubKeyObj=r,o}if("EC"==e){var a,o,c=t,u=new ce.crypto.ECDSA({curve:c}).generateKeyPairHex();return(a=new ce.crypto.ECDSA({curve:c})).setPublicKeyHex(u.ecpubhex),a.setPrivateKeyHex(u.ecprvhex),a.isPrivate=!0,a.isPublic=!1,(r=new ce.crypto.ECDSA({curve:c})).setPublicKeyHex(u.ecpubhex),r.isPrivate=!1,r.isPublic=!0,(o={}).prvKeyObj=a,o.pubKeyObj=r,o}throw new Error("unknown algorithm: "+e)},Ze.getPEM=function(e,t,n,r,i,s){var a=ce,o=a.asn1,c=o.DERObjectIdentifier,u=o.DERInteger,h=o.ASN1Util.newObject,l=o.x509.SubjectPublicKeyInfo,d=a.crypto,m=d.DSA,p=d.ECDSA,g=ne;function y(e){return h({seq:[{int:0},{int:{bigint:e.n}},{int:e.e},{int:{bigint:e.d}},{int:{bigint:e.p}},{int:{bigint:e.q}},{int:{bigint:e.dmp1}},{int:{bigint:e.dmq1}},{int:{bigint:e.coeff}}]})}function v(e){return h({seq:[{int:1},{octstr:{hex:e.prvKeyHex}},{tag:["a0",!0,{oid:{name:e.curveName}}]},{tag:["a1",!0,{bitstr:{hex:"00"+e.pubKeyHex}}]}]})}function b(e){return h({seq:[{int:0},{int:{bigint:e.p}},{int:{bigint:e.q}},{int:{bigint:e.g}},{int:{bigint:e.y}},{int:{bigint:e.x}}]})}if((void 0!==g&&e instanceof g||void 0!==m&&e instanceof m||void 0!==p&&e instanceof p)&&1==e.isPublic&&(void 0===t||"PKCS8PUB"==t))return Ae(x=new l(e).tohex(),"PUBLIC KEY");if("PKCS1PRV"==t&&void 0!==g&&e instanceof g&&(void 0===n||null==n)&&1==e.isPrivate)return Ae(x=y(e).tohex(),"RSA PRIVATE KEY");if("PKCS1PRV"==t&&void 0!==p&&e instanceof p&&(void 0===n||null==n)&&1==e.isPrivate){var S=new c({name:e.curveName}).tohex(),w=v(e).tohex(),C="";return C+=Ae(S,"EC PARAMETERS"),C+=Ae(w,"EC PRIVATE KEY")}if("PKCS1PRV"==t&&void 0!==m&&e instanceof m&&(void 0===n||null==n)&&1==e.isPrivate)return Ae(x=b(e).tohex(),"DSA PRIVATE KEY");if("PKCS5PRV"==t&&void 0!==g&&e instanceof g&&void 0!==n&&null!=n&&1==e.isPrivate){var x=y(e).tohex();return void 0===r&&(r="DES-EDE3-CBC"),this.getEncryptedPKCS5PEMFromPrvKeyHex("RSA",x,n,r,s)}if("PKCS5PRV"==t&&void 0!==p&&e instanceof p&&void 0!==n&&null!=n&&1==e.isPrivate){x=v(e).tohex();return void 0===r&&(r="DES-EDE3-CBC"),this.getEncryptedPKCS5PEMFromPrvKeyHex("EC",x,n,r,s)}if("PKCS5PRV"==t&&void 0!==m&&e instanceof m&&void 0!==n&&null!=n&&1==e.isPrivate){x=b(e).tohex();return void 0===r&&(r="DES-EDE3-CBC"),this.getEncryptedPKCS5PEMFromPrvKeyHex("DSA",x,n,r,s)}var E=function(e,t){var n=O(e,t);return new h({seq:[{seq:[{oid:{name:"pkcs5PBES2"}},{seq:[{seq:[{oid:{name:"pkcs5PBKDF2"}},{seq:[{octstr:{hex:n.pbkdf2Salt}},{int:n.pbkdf2Iter}]}]},{seq:[{oid:{name:"des-EDE3-CBC"}},{octstr:{hex:n.encryptionSchemeIV}}]}]}]},{octstr:{hex:n.ciphertext}}]}).tohex()},O=function(e,t){var n=f.lib.WordArray.random(8),r=f.lib.WordArray.random(8),i=f.PBKDF2(t,n,{keySize:6,iterations:100}),s=f.enc.Hex.parse(e),a=f.TripleDES.encrypt(s,i,{iv:r})+"",o={};return o.ciphertext=a,o.pbkdf2Salt=f.enc.Hex.stringify(n),o.pbkdf2Iter=100,o.encryptionSchemeAlg="DES-EDE3-CBC",o.encryptionSchemeIV=f.enc.Hex.stringify(r),o};if("PKCS8PRV"==t&&null!=g&&e instanceof g&&1==e.isPrivate){var T=y(e).tohex();x=h({seq:[{int:0},{seq:[{oid:{name:"rsaEncryption"}},{null:!0}]},{octstr:{hex:T}}]}).tohex();return void 0===n||null==n?Ae(x,"PRIVATE KEY"):Ae(w=E(x,n),"ENCRYPTED PRIVATE KEY")}if("PKCS8PRV"==t&&void 0!==p&&e instanceof p&&1==e.isPrivate){var P={seq:[{int:1},{octstr:{hex:e.prvKeyHex}}]};"string"==typeof e.pubKeyHex&&P.seq.push({tag:["a1",!0,{bitstr:{hex:"00"+e.pubKeyHex}}]});T=new h(P).tohex(),x=h({seq:[{int:0},{seq:[{oid:{name:"ecPublicKey"}},{oid:{name:e.curveName}}]},{octstr:{hex:T}}]}).tohex();return void 0===n||null==n?Ae(x,"PRIVATE KEY"):Ae(w=E(x,n),"ENCRYPTED PRIVATE KEY")}if("PKCS8PRV"==t&&void 0!==m&&e instanceof m&&1==e.isPrivate){T=new u({bigint:e.x}).tohex(),x=h({seq:[{int:0},{seq:[{oid:{name:"dsa"}},{seq:[{int:{bigint:e.p}},{int:{bigint:e.q}},{int:{bigint:e.g}}]}]},{octstr:{hex:T}}]}).tohex();return void 0===n||null==n?Ae(x,"PRIVATE KEY"):Ae(w=E(x,n),"ENCRYPTED PRIVATE KEY")}throw new Error("unsupported object nor format")},Ze.getKeyFromCSRPEM=function(e){var t=Ne(e,"CERTIFICATE REQUEST");return Ze.getKeyFromCSRHex(t)},Ze.getKeyFromCSRHex=function(e){var t=Ze.parseCSRHex(e);return Ze.getKey(t.p8pubkeyhex,null,"pkcs8pub")},Ze.parseCSRHex=function(e){var t=le,n=t.getChildIdx,r=t.getTLV,i={},s=e;if("30"!=s.substr(0,2))throw new Error("malformed CSR(code:001)");var a=n(s,0);if(a.length<1)throw new Error("malformed CSR(code:002)");if("30"!=s.substr(a[0],2))throw new Error("malformed CSR(code:003)");var o=n(s,a[0]);if(o.length<3)throw new Error("malformed CSR(code:004)");return i.p8pubkeyhex=r(s,o[2]),i},Ze.getKeyID=function(e){var t=Ze,n=le;"string"==typeof e&&-1!=e.indexOf("BEGIN ")&&(e=t.getKey(e));var r=Ne(t.getPEM(e)),i=n.getIdxbyList(r,0,[1]),s=n.getV(r,i).substring(2);return ce.crypto.Util.hashHex(s,"sha1")},Ze.getJWK=function(e,t,n,r,i){var s,a,o={},c=ce.crypto.Util.hashHex;if("string"==typeof e)s=Ze.getKey(e),-1!=e.indexOf("CERTIFICATE")&&(a=Ne(e));else{if("object"!=typeof e)throw new Error("unsupported keyinfo type");e instanceof rt?(s=e.getPublicKey(),a=e.hex):s=e}if(s instanceof ne&&s.isPrivate)o.kty="RSA",o.n=ve(s.n.toString(16)),o.e=ve(s.e.toString(16)),o.d=ve(s.d.toString(16)),o.p=ve(s.p.toString(16)),o.q=ve(s.q.toString(16)),o.dp=ve(s.dmp1.toString(16)),o.dq=ve(s.dmq1.toString(16)),o.qi=ve(s.coeff.toString(16));else if(s instanceof ne&&s.isPublic)o.kty="RSA",o.n=ve(s.n.toString(16)),o.e=ve(s.e.toString(16));else if(s instanceof ce.crypto.ECDSA&&s.isPrivate){if("P-256"!==(h=s.getShortNISTPCurveName())&&"P-384"!==h&&"P-521"!==h)throw new Error("unsupported curve name for JWT: "+h);var u=s.getPublicKeyXYHex();o.kty="EC",o.crv=h,o.x=ve(u.x),o.y=ve(u.y),o.d=ve(s.prvKeyHex)}else if(s instanceof ce.crypto.ECDSA&&s.isPublic){var h;if("P-256"!==(h=s.getShortNISTPCurveName())&&"P-384"!==h&&"P-521"!==h)throw new Error("unsupported curve name for JWT: "+h);u=s.getPublicKeyXYHex();o.kty="EC",o.crv=h,o.x=ve(u.x),o.y=ve(u.y)}if(null==o.kty)throw new Error("unsupported keyinfo");return s.isPrivate||1==t||(o.kid=ce.jws.JWS.getJWKthumbprint(o)),null!=a&&1!=n&&(o.x5c=[v(a)]),null!=a&&1!=r&&(o.x5t=ge(v(c(a,"sha1")))),null!=a&&1!=i&&(o["x5t#S256"]=ge(v(c(a,"sha256")))),o},Ze.getJWKFromKey=function(e){return Ze.getJWK(e,!0,!0,!0,!0)},ne.getPosArrayOfChildrenFromHex=function(e){return le.getChildIdx(e,0)},ne.getHexValueArrayOfChildrenFromHex=function(e){var t,n=le.getV,r=n(e,(t=ne.getPosArrayOfChildrenFromHex(e))[0]),i=n(e,t[1]),s=n(e,t[2]),a=n(e,t[3]),o=n(e,t[4]),c=n(e,t[5]),u=n(e,t[6]),h=n(e,t[7]),l=n(e,t[8]);return(t=new Array).push(r,i,s,a,o,c,u,h,l),t},ne.prototype.readPrivateKeyFromPEMString=function(e){var t=Ne(e),n=ne.getHexValueArrayOfChildrenFromHex(t);this.setPrivateEx(n[1],n[2],n[3],n[4],n[5],n[6],n[7],n[8])},ne.prototype.readPKCS5PrvKeyHex=function(e){var t=ne.getHexValueArrayOfChildrenFromHex(e);this.setPrivateEx(t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8])},ne.prototype.readPKCS8PrvKeyHex=function(e){var t,n,r,i,s,a,o,c,u=le,h=u.getVbyListEx;if(!1===u.isASN1HEX(e))throw new Error("not ASN.1 hex string");try{t=h(e,0,[2,0,1],"02"),n=h(e,0,[2,0,2],"02"),r=h(e,0,[2,0,3],"02"),i=h(e,0,[2,0,4],"02"),s=h(e,0,[2,0,5],"02"),a=h(e,0,[2,0,6],"02"),o=h(e,0,[2,0,7],"02"),c=h(e,0,[2,0,8],"02")}catch(e){throw new Error("malformed PKCS#8 plain RSA private key")}this.setPrivateEx(t,n,r,i,s,a,o,c)},ne.prototype.readPKCS5PubKeyHex=function(e){var t=le,n=t.getV;if(!1===t.isASN1HEX(e))throw new Error("keyHex is not ASN.1 hex string");var r=t.getChildIdx(e,0);if(2!==r.length||"02"!==e.substr(r[0],2)||"02"!==e.substr(r[1],2))throw new Error("wrong hex for PKCS#5 public key");var i=n(e,r[0]),s=n(e,r[1]);this.setPublic(i,s)},ne.prototype.readPKCS8PubKeyHex=function(e){var t=le;if(!1===t.isASN1HEX(e))throw new Error("not ASN.1 hex string");if("06092a864886f70d010101"!==t.getTLVbyListEx(e,0,[0,0]))throw new Error("not PKCS8 RSA public key");var n=t.getTLVbyListEx(e,0,[1,0]);this.readPKCS5PubKeyHex(n)},ne.prototype.readCertPubKeyHex=function(e,t){var n,r;(n=new rt).readCertHex(e),r=n.getPublicKeyHex(),this.readPKCS8PubKeyHex(r)};new RegExp("[^0-9a-f]","gi");function et(e,t){for(var n="",r=t/4-e.length,i=0;i<r;i++)n+="0";return n+e}function tt(e,t,n){for(var r="",i=0;r.length<t;)r+=xe(n(Ee(e+String.fromCharCode.apply(String,[(4278190080&i)>>24,(16711680&i)>>16,(65280&i)>>8,255&i])))),i+=1;return r}function nt(e){for(var t in ce.crypto.Util.DIGESTINFOHEAD){var n=ce.crypto.Util.DIGESTINFOHEAD[t],r=n.length;if(e.substring(0,r)==n)return[t,e.substring(r)]}return[]}function rt(e){var t,n=le,r=n.getChildIdx,i=n.getV,s=(n.dump,n.parse),a=n.getTLV,o=n.getVbyList,c=n.getVbyListEx,u=n.getTLVbyList,h=n.getTLVbyListEx,l=n.getIdxbyList,d=n.getIdxbyListEx,m=n.getVidx,p=n.getInt,f=n.oidname,g=n.hextooidstr,y=Ne;try{t=ce.asn1.x509.AlgorithmIdentifier.PSSNAME2ASN1TLV}catch(e){}this.HEX2STAG={"0c":"utf8",13:"prn",16:"ia5","1a":"vis","1e":"bmp"},this.hex=null,this.version=0,this.foffset=0,this.aExtInfo=null,this.getVersion=function(){if(null===this.hex||0!==this.version)return this.version;var e=u(this.hex,0,[0,0]);if("a0"==e.substr(0,2)){var t=u(e,0,[0]),n=p(t,0);if(n<0||2<n)throw new Error("malformed version field");return this.version=n+1,this.version}return this.version=1,this.foffset=-1,1},this.getSerialNumberHex=function(){return c(this.hex,0,[0,0],"02")},this.getSignatureAlgorithmField=function(){var e=h(this.hex,0,[0,1]);return this.getAlgorithmIdentifierName(e)},this.getAlgorithmIdentifierName=function(e){for(var n in t)if(e===t[n])return n;return f(c(e,0,[0],"06"))},this.getIssuer=function(){return this.getX500Name(this.getIssuerHex())},this.getIssuerHex=function(){return u(this.hex,0,[0,3+this.foffset],"30")},this.getIssuerString=function(){return this.getIssuer().str},this.getSubject=function(){return this.getX500Name(this.getSubjectHex())},this.getSubjectHex=function(){return u(this.hex,0,[0,5+this.foffset],"30")},this.getSubjectString=function(){return this.getSubject().str},this.getNotBefore=function(){var e=o(this.hex,0,[0,4+this.foffset,0]);return e=e.replace(/(..)/g,"%$1"),e=decodeURIComponent(e)},this.getNotAfter=function(){var e=o(this.hex,0,[0,4+this.foffset,1]);return e=e.replace(/(..)/g,"%$1"),e=decodeURIComponent(e)},this.getPublicKeyHex=function(){return this.getSPKI()},this.getSPKI=function(){return u(this.hex,0,[0,6+this.foffset],"30")},this.getSPKIValue=function(){var e=this.getSPKI();return null==e?null:o(e,0,[1],"03",!0)},this.getPublicKeyIdx=function(){return l(this.hex,0,[0,6+this.foffset],"30")},this.getPublicKeyContentIdx=function(){var e=this.getPublicKeyIdx();return l(this.hex,e,[1,0],"30")},this.getPublicKey=function(){return Ze.getKey(this.getPublicKeyHex(),null,"pkcs8pub")},this.getSignatureAlgorithmName=function(){var e=u(this.hex,0,[1],"30");return this.getAlgorithmIdentifierName(e)},this.getSignatureValueHex=function(){return o(this.hex,0,[2],"03",!0)},this.verifySignature=function(e){var t=this.getSignatureAlgorithmField(),n=this.getSignatureValueHex(),r=u(this.hex,0,[0],"30"),i=new ce.crypto.Signature({alg:t});return i.init(e),i.updateHex(r),i.verify(n)},this.parseExt=function(e){var t,s,a;if(void 0===e){if(a=this.hex,3!==this.version)return-1;t=l(a,0,[0,7,0],"30"),s=r(a,t)}else{a=Ne(e);var c=l(a,0,[0,3,0,0],"06");if("2a864886f70d01090e"!=i(a,c))return void(this.aExtInfo=new Array);t=l(a,0,[0,3,0,1,0],"30"),s=r(a,t),this.hex=a}this.aExtInfo=new Array;for(var u=0;u<s.length;u++){var h={critical:!1},d=0;3===r(a,s[u]).length&&(h.critical=!0,d=1),h.oid=n.hextooidstr(o(a,s[u],[0],"06"));var p=l(a,s[u],[1+d]);h.vidx=m(a,p),this.aExtInfo.push(h)}},this.getExtInfo=function(e){var t=this.aExtInfo,n=e;if(e.match(/^[0-9.]+$/)||(n=ce.asn1.x509.OID.name2oid(e)),""!==n)for(var r=0;r<t.length;r++)if(t[r].oid===n)return t[r]},this.getExtBasicConstraints=function(e,t){if(void 0===e&&void 0===t){var n=this.getExtInfo("basicConstraints");if(void 0===n)return;e=a(this.hex,n.vidx),t=n.critical}var r={extname:"basicConstraints"};if(t&&(r.critical=!0),"3000"===e)return r;if("30030101ff"===e)return r.cA=!0,r;if("30060101ff02"===e.substr(0,12)){var s=i(e,10),o=parseInt(s,16);return r.cA=!0,r.pathLen=o,r}throw new Error("hExtV parse error: "+e)},this.getExtNameConstraints=function(e,t){if(void 0===e&&void 0===t){var n=this.getExtInfo("nameConstraints");if(void 0===n)return;e=a(this.hex,n.vidx),t=n.critical}var i={extname:"nameConstraints"};t&&(i.critical=!0);for(var s=r(e,0),o=0;o<s.length;o++){for(var c=[],u=r(e,s[o]),h=0;h<u.length;h++){var l=a(e,u[h]),d=this.getGeneralSubtree(l);c.push(d)}var m=e.substr(s[o],2);"a0"==m?i.permit=c:"a1"==m&&(i.exclude=c)}return i},this.getGeneralSubtree=function(e){var t=r(e,0),n=t.length;if(n<1||2<n)throw new Error("wrong num elements");for(var s=this.getGeneralName(a(e,t[0])),o=1;o<n;o++){var c=e.substr(t[o],2),u=i(e,t[o]),h=parseInt(u,16);"80"==c&&(s.min=h),"81"==c&&(s.max=h)}return s},this.getExtKeyUsage=function(e,t){if(void 0===e&&void 0===t){var n=this.getExtInfo("keyUsage");if(void 0===n)return;e=a(this.hex,n.vidx),t=n.critical}var r={extname:"keyUsage"};return t&&(r.critical=!0),r.names=this.getExtKeyUsageString(e).split(","),r},this.getExtKeyUsageBin=function(e){if(void 0===e){var t=this.getExtInfo("keyUsage");if(void 0===t)return"";e=a(this.hex,t.vidx)}if(8!=e.length&&10!=e.length)throw new Error("malformed key usage value: "+e);var n="000000000000000"+parseInt(e.substr(6),16).toString(2);return 8==e.length&&(n=n.slice(-8)),10==e.length&&(n=n.slice(-16)),""==(n=n.replace(/0+$/,""))&&(n="0"),n},this.getExtKeyUsageString=function(e){for(var t=this.getExtKeyUsageBin(e),n=new Array,r=0;r<t.length;r++)"1"==t.substr(r,1)&&n.push(rt.KEYUSAGE_NAME[r]);return n.join(",")},this.getExtSubjectKeyIdentifier=function(e,t){if(void 0===e&&void 0===t){var n=this.getExtInfo("subjectKeyIdentifier");if(void 0===n)return;e=a(this.hex,n.vidx),t=n.critical}var r={extname:"subjectKeyIdentifier"};t&&(r.critical=!0);var s=i(e,0);return r.kid={hex:s},r},this.getExtAuthorityKeyIdentifier=function(e,t){if(void 0===e&&void 0===t){var n=this.getExtInfo("authorityKeyIdentifier");if(void 0===n)return;e=a(this.hex,n.vidx),t=n.critical}var s={extname:"authorityKeyIdentifier"};t&&(s.critical=!0);for(var o=r(e,0),c=0;c<o.length;c++){var u=e.substr(o[c],2);if("80"===u&&(s.kid={hex:i(e,o[c])}),"a1"===u){var h=a(e,o[c]),l=this.getGeneralNames(h);s.issuer=l[0].dn}"82"===u&&(s.sn={hex:i(e,o[c])})}return s},this.getExtExtKeyUsage=function(e,t){if(void 0===e&&void 0===t){var n=this.getExtInfo("extKeyUsage");if(void 0===n)return;e=a(this.hex,n.vidx),t=n.critical}var s={extname:"extKeyUsage",array:[]};t&&(s.critical=!0);for(var o=r(e,0),c=0;c<o.length;c++)s.array.push(f(i(e,o[c])));return s},this.getExtExtKeyUsageName=function(){var e=this.getExtInfo("extKeyUsage");if(void 0===e)return e;var t=new Array,n=a(this.hex,e.vidx);if(""===n)return t;for(var s=r(n,0),o=0;o<s.length;o++)t.push(f(i(n,s[o])));return t},this.getExtSubjectAltName=function(e,t){if(void 0===e&&void 0===t){var n=this.getExtInfo("subjectAltName");if(void 0===n)return;e=a(this.hex,n.vidx),t=n.critical}var r={extname:"subjectAltName",array:[]};return t&&(r.critical=!0),r.array=this.getGeneralNames(e),r},this.getExtIssuerAltName=function(e,t){if(void 0===e&&void 0===t){var n=this.getExtInfo("issuerAltName");if(void 0===n)return;e=a(this.hex,n.vidx),t=n.critical}var r={extname:"issuerAltName",array:[]};return t&&(r.critical=!0),r.array=this.getGeneralNames(e),r},this.getGeneralNames=function(e){for(var t=r(e,0),n=[],i=0;i<t.length;i++){var s=this.getGeneralName(a(e,t[i]));void 0!==s&&n.push(s)}return n},this.getGeneralName=function(e){var t=e.substr(0,2),n=i(e,0),r=xe(n);return"81"==t?{rfc822:r}:"82"==t?{dns:r}:"86"==t?{uri:r}:"87"==t?{ip:Me(n)}:"a4"==t?{dn:this.getX500Name(n)}:"a0"==t?{other:this.getOtherName(e)}:void 0},this.getExtSubjectAltName2=function(){var e,t,n,s=this.getExtInfo("subjectAltName");if(void 0===s)return s;for(var o=new Array,c=a(this.hex,s.vidx),u=r(c,0),h=0;h<u.length;h++)n=c.substr(u[h],2),e=i(c,u[h]),"81"===n&&(t=we(e),o.push(["MAIL",t])),"82"===n&&(t=we(e),o.push(["DNS",t])),"84"===n&&(t=rt.hex2dn(e,0),o.push(["DN",t])),"86"===n&&(t=we(e),o.push(["URI",t])),"87"===n&&(t=Me(e),o.push(["IP",t]));return o},this.getExtCRLDistributionPoints=function(e,t){if(void 0===e&&void 0===t){var n=this.getExtInfo("cRLDistributionPoints");if(void 0===n)return;e=a(this.hex,n.vidx),t=n.critical}var i={extname:"cRLDistributionPoints",array:[]};t&&(i.critical=!0);for(var s=r(e,0),o=0;o<s.length;o++){var c=a(e,s[o]);i.array.push(this.getDistributionPoint(c))}return i},this.getDistributionPoint=function(e){for(var t={},n=r(e,0),i=0;i<n.length;i++){var s=e.substr(n[i],2),o=a(e,n[i]);"a0"==s&&(t.dpname=this.getDistributionPointName(o))}return t},this.getDistributionPointName=function(e){for(var t={},n=r(e,0),i=0;i<n.length;i++){var s=e.substr(n[i],2),o=a(e,n[i]);"a0"==s&&(t.full=this.getGeneralNames(o))}return t},this.getExtCRLDistributionPointsURI=function(){var e=this.getExtCRLDistributionPoints();if(null==e)return e;for(var t=e.array,n=[],r=0;r<t.length;r++)try{null!=t[r].dpname.full[0].uri&&n.push(t[r].dpname.full[0].uri)}catch(e){}return n},this.getExtAIAInfo=function(){var e=this.getExtInfo("authorityInfoAccess");if(void 0===e)return e;for(var t={ocsp:[],caissuer:[]},n=r(this.hex,e.vidx),i=0;i<n.length;i++){var s=o(this.hex,n[i],[0],"06"),a=o(this.hex,n[i],[1],"86");"2b06010505073001"===s&&t.ocsp.push(we(a)),"2b06010505073002"===s&&t.caissuer.push(we(a))}return t},this.getExtAuthorityInfoAccess=function(e,t){if(void 0===e&&void 0===t){var n=this.getExtInfo("authorityInfoAccess");if(void 0===n)return;e=a(this.hex,n.vidx),t=n.critical}var i={extname:"authorityInfoAccess",array:[]};t&&(i.critical=!0);for(var s=r(e,0),u=0;u<s.length;u++){var h=c(e,s[u],[0],"06"),l=we(o(e,s[u],[1],"86"));if("2b06010505073001"==h)i.array.push({ocsp:l});else{if("2b06010505073002"!=h)throw new Error("unknown method: "+h);i.array.push({caissuer:l})}}return i},this.getExtCertificatePolicies=function(e,t){if(void 0===e&&void 0===t){var n=this.getExtInfo("certificatePolicies");if(void 0===n)return;e=a(this.hex,n.vidx),t=n.critical}var i={extname:"certificatePolicies",array:[]};t&&(i.critical=!0);for(var s=r(e,0),o=0;o<s.length;o++){var c=a(e,s[o]),u=this.getPolicyInformation(c);i.array.push(u)}return i},this.getPolicyInformation=function(e){var t={},n=o(e,0,[0],"06");t.policyoid=f(n);var i=d(e,0,[1],"30");if(-1!=i){t.array=[];for(var s=r(e,i),c=0;c<s.length;c++){var u=a(e,s[c]),h=this.getPolicyQualifierInfo(u);t.array.push(h)}}return t},this.getOtherName=function(e){var t={},n=r(e,0),i=o(e,n[0],[],"06"),a=o(e,n[1],[]);return t.oid=ce.asn1.ASN1Util.oidHexToInt(i),t.obj=s(a),t},this.getPolicyQualifierInfo=function(e){var t={},n=o(e,0,[0],"06");if("2b06010505070201"===n){var r=c(e,0,[1],"16");t.cps=xe(r)}else if("2b06010505070202"===n){var i=u(e,0,[1],"30");t.unotice=this.getUserNotice(i)}return t},this.getUserNotice=function(e){for(var t={},n=r(e,0),i=0;i<n.length;i++){var s=a(e,n[i]);"30"!=s.substr(0,2)&&(t.exptext=this.getDisplayText(s))}return t},this.getDisplayText=function(e){var t={};return t.type={"0c":"utf8",16:"ia5","1a":"vis","1e":"bmp"}[e.substr(0,2)],t.str=xe(i(e,0)),t},this.getExtCRLNumber=function(e,t){var n={extname:"cRLNumber"};if(t&&(n.critical=!0),"02"==e.substr(0,2))return n.num={hex:i(e,0)},n;throw new Error("hExtV parse error: "+e)},this.getExtCRLReason=function(e,t){var n={extname:"cRLReason"};if(t&&(n.critical=!0),"0a"==e.substr(0,2))return n.code=parseInt(i(e,0),16),n;throw new Error("hExtV parse error: "+e)},this.getExtOcspNonce=function(e,t){var n={extname:"ocspNonce"};t&&(n.critical=!0);var r=i(e,0);return n.hex=r,n},this.getExtOcspNoCheck=function(e,t){var n={extname:"ocspNoCheck"};return t&&(n.critical=!0),n},this.getExtAdobeTimeStamp=function(e,t){if(void 0===e&&void 0===t){var n=this.getExtInfo("adobeTimeStamp");if(void 0===n)return;e=a(this.hex,n.vidx),t=n.critical}var i={extname:"adobeTimeStamp"};t&&(i.critical=!0);var s=r(e,0);if(s.length>1){var o=a(e,s[1]),c=this.getGeneralName(o);null!=c.uri&&(i.uri=c.uri)}if(s.length>2){var u=a(e,s[2]);"0101ff"==u&&(i.reqauth=!0),"010100"==u&&(i.reqauth=!1)}return i};var v=function(e){var t={};try{var n=e.seq[0].oid,r=ce.asn1.x509.OID.name2oid(n);t.type=ce.asn1.x509.OID.oid2atype(r);var i=e.seq[1];if(null!=i.utf8str)t.ds="utf8",t.value=i.utf8str.str;else if(null!=i.numstr)t.ds="num",t.value=i.numstr.str;else if(null!=i.telstr)t.ds="tel",t.value=i.telstr.str;else if(null!=i.prnstr)t.ds="prn",t.value=i.prnstr.str;else if(null!=i.ia5str)t.ds="ia5",t.value=i.ia5str.str;else if(null!=i.visstr)t.ds="vis",t.value=i.visstr.str;else{if(null==i.bmpstr)throw"error";t.ds="bmp",t.value=i.bmpstr.str}return t}catch(e){throw new Erorr("improper ASN.1 parsed AttrTypeAndValue")}},b=function(e){try{return e.set.map((function(e){return v(e)}))}catch(e){throw new Error("improper ASN.1 parsed RDN: "+e)}};this.getX500NameRule=function(e){for(var t=null,n=[],r=0;r<e.length;r++)for(var i=e[r],s=0;s<i.length;s++)n.push(i[s]);for(r=0;r<n.length;r++){var a=n[r],o=a.ds,c=a.value,u=a.type;if(":"+o,"prn"!=o&&"utf8"!=o&&"ia5"!=o)return"mixed";if("ia5"==o){if("CN"!=u)return"mixed";if(ce.lang.String.isMail(c))continue;return"mixed"}if("C"==u){if("prn"==o)continue;return"mixed"}if(":"+o,null==t)t=o;else if(t!==o)return"mixed"}return null==t?"prn":t},this.getAttrTypeAndValue=function(e){var t=s(e);return v(t)},this.getRDN=function(e){var t=s(e);return b(t)},this.getX500NameArray=function(e){return function(e){try{return e.seq.map((function(e){return b(e)}))}catch(e){throw new Error("improper ASN.1 parsed X500Name: "+e)}}(s(e))},this.getX500Name=function(e){var t=this.getX500NameArray(e);return{array:t,str:this.dnarraytostr(t)}},this.readCertPEM=function(e){this.readCertHex(y(e))},this.readCertHex=function(e){this.hex=e,this.getVersion();try{l(this.hex,0,[0,7],"a3"),this.parseExt()}catch(e){}},this.getParam=function(e){var t={};return t.version=this.getVersion(),t.serial={hex:this.getSerialNumberHex()},t.sigalg=this.getSignatureAlgorithmField(),t.issuer=this.getIssuer(),t.notbefore=this.getNotBefore(),t.notafter=this.getNotAfter(),t.subject=this.getSubject(),t.sbjpubkey=Ae(this.getPublicKeyHex(),"PUBLIC KEY"),null!=this.aExtInfo&&this.aExtInfo.length>0&&(t.ext=this.getExtParamArray()),t.sighex=this.getSignatureValueHex(),"object"==typeof e&&(1==e.tbshex&&(t.tbshex=u(this.hex,0,[0])),1==e.nodnarray&&(delete t.issuer.array,delete t.subject.array)),t},this.getExtParamArray=function(e){null==e&&(-1!=d(this.hex,0,[0,"[3]"])&&(e=h(this.hex,0,[0,"[3]",0],"30")));for(var t=[],n=r(e,0),i=0;i<n.length;i++){var s=a(e,n[i]),o=this.getExtParam(s);null!=o&&t.push(o)}return t},this.getExtParam=function(e){var t=r(e,0).length;if(2!=t&&3!=t)throw new Error("wrong number elements in Extension: "+t+" "+e);var n=g(o(e,0,[0],"06")),i=!1;3==t&&"0101ff"==u(e,0,[1])&&(i=!0);var s=u(e,0,[t-1,0]),a=void 0;if("2.5.29.14"==n?a=this.getExtSubjectKeyIdentifier(s,i):"2.5.29.15"==n?a=this.getExtKeyUsage(s,i):"2.5.29.17"==n?a=this.getExtSubjectAltName(s,i):"2.5.29.18"==n?a=this.getExtIssuerAltName(s,i):"2.5.29.19"==n?a=this.getExtBasicConstraints(s,i):"2.5.29.30"==n?a=this.getExtNameConstraints(s,i):"2.5.29.31"==n?a=this.getExtCRLDistributionPoints(s,i):"2.5.29.32"==n?a=this.getExtCertificatePolicies(s,i):"2.5.29.35"==n?a=this.getExtAuthorityKeyIdentifier(s,i):"2.5.29.37"==n?a=this.getExtExtKeyUsage(s,i):"1.3.6.1.5.5.7.1.1"==n?a=this.getExtAuthorityInfoAccess(s,i):"2.5.29.20"==n?a=this.getExtCRLNumber(s,i):"2.5.29.21"==n?a=this.getExtCRLReason(s,i):"1.3.6.1.5.5.7.48.1.2"==n?a=this.getExtOcspNonce(s,i):"1.3.6.1.5.5.7.48.1.5"==n?a=this.getExtOcspNoCheck(s,i):"1.2.840.113583.1.1.9.1"==n&&(a=this.getExtAdobeTimeStamp(s,i)),null!=a)return a;var c={extname:n,extn:s};return i&&(c.critical=!0),c},this.findExt=function(e,t){for(var n=0;n<e.length;n++)if(e[n].extname==t)return e[n];return null},this.updateExtCDPFullURI=function(e,t){var n=this.findExt(e,"cRLDistributionPoints");if(null!=n&&null!=n.array)for(var r=n.array,i=0;i<r.length;i++)if(null!=r[i].dpname&&null!=r[i].dpname.full)for(var s=r[i].dpname.full,a=0;a<s.length;a++){var o=s[i];null!=o.uri&&(o.uri=t)}},this.updateExtAIAOCSP=function(e,t){var n=this.findExt(e,"authorityInfoAccess");if(null!=n&&null!=n.array)for(var r=n.array,i=0;i<r.length;i++)null!=r[i].ocsp&&(r[i].ocsp=t)},this.updateExtAIACAIssuer=function(e,t){var n=this.findExt(e,"authorityInfoAccess");if(null!=n&&null!=n.array)for(var r=n.array,i=0;i<r.length;i++)null!=r[i].caissuer&&(r[i].caissuer=t)},this.dnarraytostr=function(e){return"/"+e.map((function(e){return function(e){return e.map((function(e){return function(e){return e.type+"="+e.value}(e).replace(/\+/,"\\+")})).join("+")}(e).replace(/\//,"\\/")})).join("/")},this.getInfo=function(){var e,t,n,r,i=function(e){for(var t="",n=e.array,r=0;r<n.length;r++){var i=n[r];if(t+="    policy oid: "+i.policyoid+"\n",void 0!==i.array)for(var s=0;s<i.array.length;s++){var a=i.array[s];void 0!==a.cps&&(t+="    cps: "+a.cps+"\n")}}return t},s=function(e){for(var t="",n=e.array,r=0;r<n.length;r++){var i=n[r];try{void 0!==i.dpname.full[0].uri&&(t+="    "+i.dpname.full[0].uri+"\n")}catch(e){}try{void 0!==i.dname.full[0].dn.hex&&(t+="    "+rt.hex2dn(i.dpname.full[0].dn.hex)+"\n")}catch(e){}}return t},a=function(e){for(var t="",n=e.array,r=0;r<n.length;r++){var i=n[r];void 0!==i.caissuer&&(t+="    caissuer: "+i.caissuer+"\n"),void 0!==i.ocsp&&(t+="    ocsp: "+i.ocsp+"\n")}return t};if(e="Basic Fields\n",e+="  serial number: "+this.getSerialNumberHex()+"\n",e+="  signature algorithm: "+this.getSignatureAlgorithmField()+"\n",e+="  issuer: "+this.getIssuerString()+"\n",e+="  notBefore: "+this.getNotBefore()+"\n",e+="  notAfter: "+this.getNotAfter()+"\n",e+="  subject: "+this.getSubjectString()+"\n",e+="  subject public key info: \n",e+="    key algorithm: "+(t=this.getPublicKey()).type+"\n","RSA"===t.type&&(e+="    n="+Ve(t.n.toString(16)).substr(0,16)+"...\n",e+="    e="+Ve(t.e.toString(16))+"\n"),null!=(n=this.aExtInfo)){e+="X509v3 Extensions:\n";for(var o=0;o<n.length;o++){var c=n[o],u=ce.asn1.x509.OID.oid2name(c.oid);""===u&&(u=c.oid);var h="";if(!0===c.critical&&(h="CRITICAL"),e+="  "+u+" "+h+":\n","basicConstraints"===u){var l=this.getExtBasicConstraints();void 0===l.cA?e+="    {}\n":(e+="    cA=true",void 0!==l.pathLen&&(e+=", pathLen="+l.pathLen),e+="\n")}else if("keyUsage"===u)e+="    "+this.getExtKeyUsageString()+"\n";else if("subjectKeyIdentifier"===u)e+="    "+this.getExtSubjectKeyIdentifier().kid.hex+"\n";else if("authorityKeyIdentifier"===u){var d=this.getExtAuthorityKeyIdentifier();void 0!==d.kid&&(e+="    kid="+d.kid.hex+"\n")}else{if("extKeyUsage"===u)e+="    "+this.getExtExtKeyUsage().array.join(", ")+"\n";else if("subjectAltName"===u)e+="    "+(r=this.getExtSubjectAltName(),JSON.stringify(r.array).replace(/[\[\]\{\}\"]/g,""))+"\n";else if("cRLDistributionPoints"===u)e+=s(this.getExtCRLDistributionPoints());else if("authorityInfoAccess"===u)e+=a(this.getExtAuthorityInfoAccess());else"certificatePolicies"===u&&(e+=i(this.getExtCertificatePolicies()))}}}return e+="signature algorithm: "+this.getSignatureAlgorithmName()+"\n",e+="signature: "+this.getSignatureValueHex().substr(0,16)+"...\n"},"string"==typeof e&&(-1!=e.indexOf("-----BEGIN")?this.readCertPEM(e):ce.lang.String.isHex(e)&&this.readCertHex(e))}ne.prototype.sign=function(e,t){var n=function(e){return ce.crypto.Util.hashString(e,t)}(e);return this.signWithMessageHash(n,t)},ne.prototype.signWithMessageHash=function(e,t){var n=ee(ce.crypto.Util.getPaddedDigestInfoHex(e,t,this.n.bitLength()),16);return et(this.doPrivate(n).toString(16),this.n.bitLength())},ne.prototype.signPSS=function(e,t,n){var r,i=(r=Ee(e),ce.crypto.Util.hashHex(r,t));return void 0===n&&(n=-1),this.signWithMessageHashPSS(i,t,n)},ne.prototype.signWithMessageHashPSS=function(e,t,n){var r,i=xe(e),s=i.length,a=this.n.bitLength()-1,o=Math.ceil(a/8),c=function(e){return ce.crypto.Util.hashHex(e,t)};if(-1===n||void 0===n)n=s;else if(-2===n)n=o-s-2;else if(n<-2)throw new Error("invalid salt length");if(o<s+n+2)throw new Error("data too long");var u="";n>0&&(u=new Array(n),(new Z).nextBytes(u),u=String.fromCharCode.apply(String,u));var h=xe(c(Ee("\0\0\0\0\0\0\0\0"+i+u))),l=[];for(r=0;r<o-n-s-2;r+=1)l[r]=0;var d=String.fromCharCode.apply(String,l)+""+u,m=tt(h,d.length,c),p=[];for(r=0;r<d.length;r+=1)p[r]=d.charCodeAt(r)^m.charCodeAt(r);var f=65280>>8*o-a&255;for(p[0]&=~f,r=0;r<s;r++)p.push(h.charCodeAt(r));return p.push(188),et(this.doPrivate(new w(p)).toString(16),this.n.bitLength())},ne.prototype.verify=function(e,t){if(null==(t=t.toLowerCase()).match(/^[0-9a-f]+$/))return!1;var n=ee(t,16),r=this.n.bitLength();if(n.bitLength()>r)return!1;var i=this.doPublic(n).toString(16);if(i.length+3!=r/4)return!1;var s=nt(i.replace(/^1f+00/,""));if(0==s.length)return!1;var a=s[0];return s[1]==function(e){return ce.crypto.Util.hashString(e,a)}(e)},ne.prototype.verifyWithMessageHash=function(e,t){if(t.length!=Math.ceil(this.n.bitLength()/4))return!1;var n=ee(t,16);if(n.bitLength()>this.n.bitLength())return 0;var r=nt(this.doPublic(n).toString(16).replace(/^1f+00/,""));if(0==r.length)return!1;r[0];return r[1]==e},ne.prototype.verifyPSS=function(e,t,n,r){var i,s=(i=Ee(e),ce.crypto.Util.hashHex(i,n));return void 0===r&&(r=-1),this.verifyWithMessageHashPSS(s,t,n,r)},ne.prototype.verifyWithMessageHashPSS=function(e,t,n,r){if(t.length!=Math.ceil(this.n.bitLength()/4))return!1;var i,s=new w(t,16),a=function(e){return ce.crypto.Util.hashHex(e,n)},o=xe(e),c=o.length,u=this.n.bitLength()-1,h=Math.ceil(u/8);if(-1===r||void 0===r)r=c;else if(-2===r)r=h-c-2;else if(r<-2)throw new Error("invalid salt length");if(h<c+r+2)throw new Error("data too long");var l=this.doPublic(s).toByteArray();for(i=0;i<l.length;i+=1)l[i]&=255;for(;l.length<h;)l.unshift(0);if(188!==l[h-1])throw new Error("encoded message does not end in 0xbc");var d=(l=String.fromCharCode.apply(String,l)).substr(0,h-c-1),m=l.substr(d.length,c),p=65280>>8*h-u&255;if(0!=(d.charCodeAt(0)&p))throw new Error("bits beyond keysize not zero");var f=tt(m,d.length,a),g=[];for(i=0;i<d.length;i+=1)g[i]=d.charCodeAt(i)^f.charCodeAt(i);g[0]&=~p;var y=h-c-r-2;for(i=0;i<y;i+=1)if(0!==g[i])throw new Error("leftmost octets not zero");if(1!==g[y])throw new Error("0x01 marker not found");return m===xe(a(Ee("\0\0\0\0\0\0\0\0"+o+String.fromCharCode.apply(String,g.slice(-r)))))},ne.SALT_LEN_HLEN=-1,ne.SALT_LEN_MAX=-2,ne.SALT_LEN_RECOVER=-2,rt.hex2dn=function(e,t){void 0===t&&(t=0);var n=new rt;le.getTLV(e,t);return n.getX500Name(e).str},rt.hex2rdn=function(e,t){if(void 0===t&&(t=0),"31"!==e.substr(t,2))throw new Error("malformed RDN");for(var n=new Array,r=le.getChildIdx(e,t),i=0;i<r.length;i++)n.push(rt.hex2attrTypeValue(e,r[i]));return(n=n.map((function(e){return e.replace("+","\\+")}))).join("+")},rt.hex2attrTypeValue=function(e,t){var n=le,r=n.getV;if(void 0===t&&(t=0),"30"!==e.substr(t,2))throw new Error("malformed attribute type and value");var i=n.getChildIdx(e,t);2!==i.length||e.substr(i[0],2);var s=r(e,i[0]),a=ce.asn1.ASN1Util.oidHexToInt(s);return ce.asn1.x509.OID.oid2atype(a)+"="+xe(r(e,i[1]))},rt.getPublicKeyFromCertHex=function(e){var t=new rt;return t.readCertHex(e),t.getPublicKey()},rt.getPublicKeyFromCertPEM=function(e){var t=new rt;return t.readCertPEM(e),t.getPublicKey()},rt.getPublicKeyInfoPropOfCertPEM=function(e){var t,n,r=le.getVbyList,i={};return i.algparam=null,(t=new rt).readCertPEM(e),n=t.getPublicKeyHex(),i.keyhex=r(n,0,[1],"03").substr(2),i.algoid=r(n,0,[0,0],"06"),"2a8648ce3d0201"===i.algoid&&(i.algparam=r(n,0,[0,1],"06")),i},rt.KEYUSAGE_NAME=["digitalSignature","nonRepudiation","keyEncipherment","dataEncipherment","keyAgreement","keyCertSign","cRLSign","encipherOnly","decipherOnly"];void 0!==ce&&ce||(ce={}),void 0!==ce.jws&&ce.jws||(ce.jws={}),ce.jws.JWS=function(){var e=ce.jws.JWS.isSafeJSONString;this.parseJWS=function(t,n){if(void 0===this.parsedJWS||!n&&void 0===this.parsedJWS.sigvalH){var r=t.match(/^([^.]+)\.([^.]+)\.([^.]+)$/);if(null==r)throw"JWS signature is not a form of 'Head.Payload.SigValue'.";var i=r[1],s=r[2],a=r[3],o=i+"."+s;if(this.parsedJWS={},this.parsedJWS.headB64U=i,this.parsedJWS.payloadB64U=s,this.parsedJWS.sigvalB64U=a,this.parsedJWS.si=o,!n){var c=be(a),u=ee(c,16);this.parsedJWS.sigvalH=c,this.parsedJWS.sigvalBI=u}var h=he(i),l=he(s);if(this.parsedJWS.headS=h,this.parsedJWS.payloadS=l,!e(h,this.parsedJWS,"headP"))throw"malformed JSON string for JWS Head: "+h}}},ce.jws.JWS.sign=function(e,t,n,r,i){var s,a,o,c=ce,u=c.jws.JWS,h=u.readSafeJSONString,l=u.isSafeJSONString,d=c.crypto,m=(d.ECDSA,d.Mac),p=d.Signature,f=JSON;if("string"!=typeof t&&"object"!=typeof t)throw"spHeader must be JSON string or object: "+t;if("object"==typeof t&&(a=t,s=f.stringify(a)),"string"==typeof t){if(!l(s=t))throw"JWS Head is not safe JSON string: "+s;a=h(s)}if(o=n,"object"==typeof n&&(o=f.stringify(n)),""!=e&&null!=e||void 0===a.alg||(e=a.alg),""!=e&&null!=e&&void 0===a.alg&&(a.alg=e,s=f.stringify(a)),e!==a.alg)throw"alg and sHeader.alg doesn't match: "+e+"!="+a.alg;var g=null;if(void 0===u.jwsalg2sigalg[e])throw"unsupported alg name: "+e;g=u.jwsalg2sigalg[e];var y=ue(s)+"."+ue(o),v="";if("Hmac"==g.substr(0,4)){if(void 0===r)throw"mac key shall be specified for HS* alg";var b=new m({alg:g,prov:"cryptojs",pass:r});b.updateString(y),v=b.doFinal()}else if(-1!=g.indexOf("withECDSA")){(w=new p({alg:g})).init(r,i),w.updateString(y);var S=w.sign();v=ce.crypto.ECDSA.asn1SigToConcatSig(S)}else{var w;if("none"!=g)(w=new p({alg:g})).init(r,i),w.updateString(y),v=w.sign()}return y+"."+ve(v)},ce.jws.JWS.verify=function(e,t,n){var r,i=ce,s=i.jws.JWS,a=s.readSafeJSONString,o=i.crypto,c=o.ECDSA,u=o.Mac,h=o.Signature;if(r=ne,!Ue(e))return!1;var l=e.split(".");if(3!==l.length)return!1;var d=l[0]+"."+l[1],m=be(l[2]),p=a(he(l[0])),f=null,g=null;if(void 0===p.alg)throw"algorithm not specified in header";if((g=(f=p.alg).substr(0,2),null!=n&&"[object Array]"===Object.prototype.toString.call(n)&&n.length>0)&&-1==(":"+n.join(":")+":").indexOf(":"+f+":"))throw"algorithm '"+f+"' not accepted in the list";if("none"!=f&&null===t)throw"key shall be specified to verify.";if("string"==typeof t&&-1!=t.indexOf("-----BEGIN ")&&(t=Ze.getKey(t)),!("RS"!=g&&"PS"!=g||t instanceof r))throw"key shall be a RSAKey obj for RS* and PS* algs";if("ES"==g&&!(t instanceof c))throw"key shall be a ECDSA obj for ES* algs";var y=null;if(void 0===s.jwsalg2sigalg[p.alg])throw"unsupported alg name: "+f;if("none"==(y=s.jwsalg2sigalg[f]))throw"not supported";if("Hmac"==y.substr(0,4)){if(void 0===t)throw"hexadecimal key shall be specified for HMAC";var v=new u({alg:y,pass:t});return v.updateString(d),m==v.doFinal()}if(-1!=y.indexOf("withECDSA")){var b,S=null;try{S=c.concatSigToASN1Sig(m)}catch(e){return!1}return(b=new h({alg:y})).init(t),b.updateString(d),b.verify(S)}return(b=new h({alg:y})).init(t),b.updateString(d),b.verify(m)},ce.jws.JWS.parse=function(e){var t,n,r,i=e.split("."),s={};if(2!=i.length&&3!=i.length)throw"malformed sJWS: wrong number of '.' splitted elements";return t=i[0],n=i[1],3==i.length&&(r=i[2]),s.headerObj=ce.jws.JWS.readSafeJSONString(he(t)),s.payloadObj=ce.jws.JWS.readSafeJSONString(he(n)),s.headerPP=JSON.stringify(s.headerObj,null,"  "),null==s.payloadObj?s.payloadPP=he(n):s.payloadPP=JSON.stringify(s.payloadObj,null,"  "),void 0!==r&&(s.sigHex=be(r)),s},ce.jws.JWS.verifyJWT=function(e,t,n){var r=ce.jws,i=r.JWS,s=i.readSafeJSONString,a=i.inArray,o=i.includedArray;if(!Ue(e))return!1;var c=e.split(".");if(3!=c.length)return!1;var u=c[0],h=c[1],l=(be(c[2]),s(he(u))),d=s(he(h));if(void 0===l.alg)return!1;if(void 0===n.alg)throw"acceptField.alg shall be specified";if(!a(l.alg,n.alg))return!1;if(void 0!==d.iss&&"object"==typeof n.iss&&!a(d.iss,n.iss))return!1;if(void 0!==d.sub&&"object"==typeof n.sub&&!a(d.sub,n.sub))return!1;if(void 0!==d.aud&&"object"==typeof n.aud)if("string"==typeof d.aud){if(!a(d.aud,n.aud))return!1}else if("object"==typeof d.aud&&!o(d.aud,n.aud))return!1;var m=r.IntDate.getNow();return void 0!==n.verifyAt&&"number"==typeof n.verifyAt&&(m=n.verifyAt),void 0!==n.gracePeriod&&"number"==typeof n.gracePeriod||(n.gracePeriod=0),!(void 0!==d.exp&&"number"==typeof d.exp&&d.exp+n.gracePeriod<m)&&(!(void 0!==d.nbf&&"number"==typeof d.nbf&&m<d.nbf-n.gracePeriod)&&(!(void 0!==d.iat&&"number"==typeof d.iat&&m<d.iat-n.gracePeriod)&&((void 0===d.jti||void 0===n.jti||d.jti===n.jti)&&!!i.verify(e,t,n.alg))))},ce.jws.JWS.includedArray=function(e,t){var n=ce.jws.JWS.inArray;if(null===e)return!1;if("object"!=typeof e)return!1;if("number"!=typeof e.length)return!1;for(var r=0;r<e.length;r++)if(!n(e[r],t))return!1;return!0},ce.jws.JWS.inArray=function(e,t){if(null===t)return!1;if("object"!=typeof t)return!1;if("number"!=typeof t.length)return!1;for(var n=0;n<t.length;n++)if(t[n]==e)return!0;return!1},ce.jws.JWS.jwsalg2sigalg={HS256:"HmacSHA256",HS384:"HmacSHA384",HS512:"HmacSHA512",RS256:"SHA256withRSA",RS384:"SHA384withRSA",RS512:"SHA512withRSA",ES256:"SHA256withECDSA",ES384:"SHA384withECDSA",ES512:"SHA512withECDSA",PS256:"SHA256withRSAandMGF1",PS384:"SHA384withRSAandMGF1",PS512:"SHA512withRSAandMGF1",none:"none"},ce.jws.JWS.isSafeJSONString=function(e,t,n){var r=null;try{return"object"!=typeof(r=oe(e))||r.constructor===Array?0:(t&&(t[n]=r),1)}catch(e){return 0}},ce.jws.JWS.readSafeJSONString=function(e){var t=null;try{return"object"!=typeof(t=oe(e))||t.constructor===Array?null:t}catch(e){return null}},ce.jws.JWS.getEncodedSignatureValueFromJWS=function(e){var t=e.match(/^[^.]+\.[^.]+\.([^.]+)$/);if(null==t)throw"JWS signature is not a form of 'Head.Payload.SigValue'.";return t[1]},ce.jws.JWS.getJWKthumbprint=function(e){if("RSA"!==e.kty&&"EC"!==e.kty&&"oct"!==e.kty)throw"unsupported algorithm for JWK Thumprint";var t="{";if("RSA"===e.kty){if("string"!=typeof e.n||"string"!=typeof e.e)throw"wrong n and e value for RSA key";t+='"e":"'+e.e+'",',t+='"kty":"'+e.kty+'",',t+='"n":"'+e.n+'"}'}else if("EC"===e.kty){if("string"!=typeof e.crv||"string"!=typeof e.x||"string"!=typeof e.y)throw"wrong crv, x and y value for EC key";t+='"crv":"'+e.crv+'",',t+='"kty":"'+e.kty+'",',t+='"x":"'+e.x+'",',t+='"y":"'+e.y+'"}'}else if("oct"===e.kty){if("string"!=typeof e.k)throw"wrong k value for oct(symmetric) key";t+='"kty":"'+e.kty+'",',t+='"k":"'+e.k+'"}'}var n=Ee(t);return ve(ce.crypto.Util.hashHex(n,"sha256"))},ce.jws.IntDate={},ce.jws.IntDate.get=function(e){var t=ce.jws.IntDate,n=t.getNow,r=t.getZulu;if("now"==e)return n();if("now + 1hour"==e)return n()+3600;if("now + 1day"==e)return n()+86400;if("now + 1month"==e)return n()+2592e3;if("now + 1year"==e)return n()+31536e3;if(e.match(/Z$/))return r(e);if(e.match(/^[0-9]+$/))return parseInt(e);throw"unsupported format: "+e},ce.jws.IntDate.getZulu=function(e){return ke(e)},ce.jws.IntDate.getNow=function(){return~~(new Date/1e3)},ce.jws.IntDate.intDate2UTCString=function(e){return new Date(1e3*e).toUTCString()},ce.jws.IntDate.intDate2Zulu=function(e){var t=new Date(1e3*e);return("0000"+t.getUTCFullYear()).slice(-4)+("00"+(t.getUTCMonth()+1)).slice(-2)+("00"+t.getUTCDate()).slice(-2)+("00"+t.getUTCHours()).slice(-2)+("00"+t.getUTCMinutes()).slice(-2)+("00"+t.getUTCSeconds()).slice(-2)+"Z"},void 0!==ce&&ce||(ce={}),void 0!==ce.jws&&ce.jws||(ce.jws={}),ce.jws.JWSJS=function(){var e=ce.jws.JWS,t=e.readSafeJSONString;this.aHeader=[],this.sPayload="",this.aSignature=[],this.init=function(){this.aHeader=[],this.sPayload=void 0,this.aSignature=[]},this.initWithJWS=function(e){this.init();var t=e.split(".");if(3!=t.length)throw"malformed input JWS";this.aHeader.push(t[0]),this.sPayload=t[1],this.aSignature.push(t[2])},this.addSignature=function(e,t,n,r){if(void 0===this.sPayload||null===this.sPayload)throw"there's no JSON-JS signature to add.";var i=this.aHeader.length;if(this.aHeader.length!=this.aSignature.length)throw"aHeader.length != aSignature.length";try{var s=ce.jws.JWS.sign(e,t,this.sPayload,n,r).split(".");s[0],s[2];this.aHeader.push(s[0]),this.aSignature.push(s[2])}catch(e){throw this.aHeader.length>i&&this.aHeader.pop(),this.aSignature.length>i&&this.aSignature.pop(),"addSignature failed: "+e}},this.verifyAll=function(e){if(this.aHeader.length!==e.length||this.aSignature.length!==e.length)return!1;for(var t=0;t<e.length;t++){var n=e[t];if(2!==n.length)return!1;if(!1===this.verifyNth(t,n[0],n[1]))return!1}return!0},this.verifyNth=function(t,n,r){if(this.aHeader.length<=t||this.aSignature.length<=t)return!1;var i=this.aHeader[t],s=this.aSignature[t],a=i+"."+this.sPayload+"."+s,o=!1;try{o=e.verify(a,n,r)}catch(e){return!1}return o},this.readJWSJS=function(e){if("string"==typeof e){var n=t(e);if(null==n)throw"argument is not safe JSON object string";this.aHeader=n.headers,this.sPayload=n.payload,this.aSignature=n.signatures}else try{if(!(e.headers.length>0))throw"malformed header";if(this.aHeader=e.headers,"string"!=typeof e.payload)throw"malformed signatures";if(this.sPayload=e.payload,!(e.signatures.length>0))throw"malformed signatures";this.aSignature=e.signatures}catch(e){throw"malformed JWS-JS JSON object: "+e}},this.getJSON=function(){return{headers:this.aHeader,payload:this.sPayload,signatures:this.aSignature}},this.isEmpty=function(){return 0==this.aHeader.length?1:0}},t.SecureRandom=Z,t.rng_seed_time=K,t.BigInteger=w,t.RSAKey=ne,t.ECDSA=ce.crypto.ECDSA,t.DSA=ce.crypto.DSA,t.Signature=ce.crypto.Signature,t.MessageDigest=ce.crypto.MessageDigest,t.Mac=ce.crypto.Mac,t.Cipher=ce.crypto.Cipher,t.KEYUTIL=Ze,t.ASN1HEX=le,t.X509=rt,t.X509CRL=function(e){var t=ce.lang.String.isHex,n=le,r=n.getV,i=n.getTLV,s=n.getVbyList,a=n.getTLVbyList,o=n.getTLVbyListEx,c=n.getIdxbyList,u=n.getIdxbyListEx,h=n.getChildIdx,l=new rt;this.hex=null,this.posSigAlg=null,this.posRevCert=null,this.parsed=null,this._setPos=function(){var e=c(this.hex,0,[0,0]),t=this.hex.substr(e,2);if("02"==t)this.posSigAlg=1;else{if("30"!=t)throw new Error("malformed 1st item of TBSCertList: "+t);this.posSigAlg=0}var n,r=c(this.hex,0,[0,this.posSigAlg+3]),i=this.hex.substr(r,2);if("17"==i||"18"==i)n=c(this.hex,0,[0,this.posSigAlg+4]),this.posRevCert=null,-1!=n&&"30"==this.hex.substr(n,2)&&(this.posRevCert=this.posSigAlg+4);else if("30"==i)this.posRevCert=this.posSigAlg+3;else{if("a0"!=i)throw new Error("malformed nextUpdate or revCert tag: "+i);this.posRevCert=null}},this.getVersion=function(){return 0==this.posSigAlg?null:parseInt(s(this.hex,0,[0,0],"02"),16)+1},this.getSignatureAlgorithmField=function(){var e=a(this.hex,0,[0,this.posSigAlg],"30");return l.getAlgorithmIdentifierName(e)},this.getIssuer=function(){return l.getX500Name(this.getIssuerHex())},this.getIssuerHex=function(){return a(this.hex,0,[0,this.posSigAlg+1],"30")},this.getThisUpdate=function(){var e=s(this.hex,0,[0,this.posSigAlg+2]);return result=xe(e)},this.getNextUpdate=function(){var e=c(this.hex,0,[0,this.posSigAlg+3]),t=this.hex.substr(e,2);return"17"!=t&&"18"!=t?null:xe(r(this.hex,e))},this.getRevCertArray=function(){if(null==this.posRevCert)return null;for(var e=[],t=c(this.hex,0,[0,this.posRevCert]),n=h(this.hex,t),r=0;r<n.length;r++){var s=i(this.hex,n[r]);e.push(this.getRevCert(s))}return e},this.getRevCert=function(e){var t={},n=h(e,0);return t.sn={hex:s(e,0,[0],"02")},t.date=xe(s(e,0,[1])),3==n.length&&(t.ext=l.getExtParamArray(a(e,0,[2]))),t},this.findRevCert=function(e){var t=new rt(e).getSerialNumberHex();return this.findRevCertBySN(t)},this.findRevCertBySN=function(e){if(null==this.parsed&&this.getParam(),null==this.parsed.revcert)return null;for(var t=this.parsed.revcert,n=0;n<t.length;n++)if(e==t[n].sn.hex)return t[n];return null},this.getSignatureValueHex=function(){return s(this.hex,0,[2],"03",!0)},this.verifySignature=function(e){var t=this.getSignatureAlgorithmField(),n=this.getSignatureValueHex(),r=a(this.hex,0,[0],"30"),i=new ce.crypto.Signature({alg:t});return i.init(e),i.updateHex(r),i.verify(n)},this.getParam=function(e){var t={},n=this.getVersion();null!=n&&(t.version=n),t.sigalg=this.getSignatureAlgorithmField(),t.issuer=this.getIssuer(),t.thisupdate=this.getThisUpdate();var r=this.getNextUpdate();null!=r&&(t.nextupdate=r);var i=this.getRevCertArray();if(null!=i&&(t.revcert=i),-1!=u(this.hex,0,[0,"[0]"])){var s=o(this.hex,0,[0,"[0]",0]);t.ext=l.getExtParamArray(s)}return t.sighex=this.getSignatureValueHex(),this.parsed=t,"object"==typeof e&&(1==e.tbshex&&(t.tbshex=a(this.hex,0,[0])),1==e.nodnarray&&delete t.issuer.array),t},"string"==typeof e&&(t(e)?this.hex=e:e.match(/-----BEGIN X509 CRL/)&&(this.hex=Ne(e)),this._setPos())},t.CryptoJS=f,t.b64tohex=b,t.b64toBA=S,t.ECFieldElementFp=ie,t.ECPointFp=se,t.ECCurveFp=ae,t.stoBA=de,t.BAtos=me,t.BAtohex=pe,t.stohex=fe,t.stob64=function(e){return v(fe(e))},t.stob64u=function(e){return ge(v(fe(e)))},t.b64utos=function(e){return me(S(ye(e)))},t.b64tob64u=ge,t.b64utob64=ye,t.hex2b64=v,t.hextob64u=ve,t.b64utohex=be,t.utf8tob64u=ue,t.b64utoutf8=he,t.utf8tob64=function(e){return v(De(ze(e)))},t.b64toutf8=function(e){return decodeURIComponent(Fe(b(e)))},t.utf8tohex=Se,t.hextoutf8=we,t.hextorstr=xe,t.rstrtohex=Ee,t.hextob64=Oe,t.hextob64nl=Te,t.b64nltohex=Pe,t.hextopem=Ae,t.pemtohex=Ne,t.hextoArrayBuffer=function(e){if(e.length%2!=0)throw"input is not even length";if(null==e.match(/^[0-9A-Fa-f]+$/))throw"input is not hexadecimal";for(var t=new ArrayBuffer(e.length/2),n=new DataView(t),r=0;r<e.length/2;r++)n.setUint8(r,parseInt(e.substr(2*r,2),16));return t},t.ArrayBuffertohex=function(e){for(var t="",n=new DataView(e),r=0;r<e.byteLength;r++)t+=("00"+n.getUint8(r).toString(16)).slice(-2);return t},t.zulutomsec=Ie,t.zulutosec=ke,t.zulutodate=function(e){return new Date(Ie(e))},t.datetozulu=function(e,t,n){var r,i=e.getUTCFullYear();if(t){if(i<1950||2049<i)throw"not proper year for UTCTime: "+i;r=(""+i).slice(-2)}else r=("000"+i).slice(-4);if(r+=("0"+(e.getUTCMonth()+1)).slice(-2),r+=("0"+e.getUTCDate()).slice(-2),r+=("0"+e.getUTCHours()).slice(-2),r+=("0"+e.getUTCMinutes()).slice(-2),r+=("0"+e.getUTCSeconds()).slice(-2),n){var s=e.getUTCMilliseconds();0!==s&&(r+="."+(s=(s=("00"+s).slice(-3)).replace(/0+$/g,"")))}return r+="Z"},t.uricmptohex=De,t.hextouricmp=Fe,t.ipv6tohex=je,t.hextoipv6=Re,t.hextoip=Me,t.iptohex=Be,t.ucs2hextoutf8=qe,t.encodeURIComponentAll=ze,t.newline_toUnix=function(e){return e=e.replace(/\r\n/gm,"\n")},t.newline_toDos=function(e){return e=(e=e.replace(/\r\n/gm,"\n")).replace(/\n/gm,"\r\n")},t.hextoposhex=Ve,t.intarystrtohex=function(e){e=(e=(e=e.replace(/^\s*\[\s*/,"")).replace(/\s*\]\s*$/,"")).replace(/\s*/g,"");try{return e.split(/,/).map((function(e,t,n){var r=parseInt(e);if(r<0||255<r)throw"integer not in range 0-255";return("00"+r.toString(16)).slice(-2)})).join("")}catch(e){throw"malformed integer array string: "+e}},t.strdiffidx=function(e,t){var n=e.length;e.length>t.length&&(n=t.length);for(var r=0;r<n;r++)if(e.charCodeAt(r)!=t.charCodeAt(r))return r;return e.length!=t.length?n:-1},t.oidtohex=Ge,t.hextooid=We,t.strpad=Ke,t.bitstrtoint=$e,t.inttobitstr=Je,t.bitstrtobinstr=Qe,t.binstrtobitstr=function(e){if("string"!=typeof e)return null;if(null==e.match(/^[01]+$/))return null;try{return Je(parseInt(e,2))}catch(e){return null}},t.isBase64URLDot=Ue,t.namearraytobinstr=Ye,t.extendClass=Xe,t.KJUR=ce,t.crypto=ce.crypto,t.asn1=ce.asn1,t.jws=ce.jws,t.lang=ce.lang}).call(this,n(144).Buffer)},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.MockFluidDataStoreContext=void 0;const r=n(13),i=n(29);t.MockFluidDataStoreContext=class{constructor(e=(0,i.v4)(),t=!1,n=r.DebugLogger.create("fluid:MockFluidDataStoreContext")){this.id=e,this.existing=t,this.logger=n,this.isLocalDataStore=!0,this.clientId=(0,i.v4)(),this.connected=!0}on(e,t){switch(e){case"attaching":case"attached":return this;default:throw new Error("Method not implemented.")}}once(e,t){return this}off(e,t){throw new Error("Method not implemented.")}getQuorum(){}getAudience(){}submitMessage(e,t,n){throw new Error("Method not implemented.")}submitSignal(e,t){throw new Error("Method not implemented.")}bindToContext(){throw new Error("Method not implemented.")}setChannelDirty(e){throw new Error("Method not implemented.")}async getAbsoluteUrl(e){throw new Error("Method not implemented.")}getCreateChildSummarizerNodeFn(e,t){throw new Error("Method not implemented.")}async uploadBlob(e){throw new Error("Method not implemented.")}async getInitialGCSummaryDetails(){throw new Error("Method not implemented.")}async getBaseGCDetails(){throw new Error("Method not implemented.")}}},function(e,t,n){e.exports=function(e){function t(e){let n,i,s,a=null;function o(...e){if(!o.enabled)return;const r=o,i=Number(new Date),s=i-(n||i);r.diff=s,r.prev=n,r.curr=i,n=i,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let a=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,(n,i)=>{if("%%"===n)return"%";a++;const s=t.formatters[i];if("function"==typeof s){const t=e[a];n=s.call(r,t),e.splice(a,1),a--}return n}),t.formatArgs.call(r,e);(r.log||t.log).apply(r,e)}return o.namespace=e,o.useColors=t.useColors(),o.color=t.selectColor(e),o.extend=r,o.destroy=t.destroy,Object.defineProperty(o,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==a?a:(i!==t.namespaces&&(i=t.namespaces,s=t.enabled(e)),s),set:e=>{a=e}}),"function"==typeof t.init&&t.init(o),o}function r(e,n){const r=t(this.namespace+(void 0===n?":":n)+e);return r.log=this.log,r}function i(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){if(e instanceof Error)return e.stack||e.message;return e},t.disable=function(){const e=[...t.names.map(i),...t.skips.map(i).map(e=>"-"+e)].join(",");return t.enable(""),e},t.enable=function(e){let n;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const r=("string"==typeof e?e:"").split(/[\s,]+/),i=r.length;for(n=0;n<i;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.slice(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(457),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach(n=>{t[n]=e[n]}),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let n=0;for(let t=0;t<e.length;t++)n=(n<<5)-n+e.charCodeAt(t),n|=0;return t.colors[Math.abs(n)%t.colors.length]},t.enable(t.load()),t}},function(e,t){var n=1e3,r=6e4,i=60*r,s=24*i;function a(e,t,n,r){var i=t>=1.5*n;return Math.round(e/n)+" "+r+(i?"s":"")}e.exports=function(e,t){t=t||{};var o=typeof e;if("string"===o&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!t)return;var a=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*a;case"weeks":case"week":case"w":return 6048e5*a;case"days":case"day":case"d":return a*s;case"hours":case"hour":case"hrs":case"hr":case"h":return a*i;case"minutes":case"minute":case"mins":case"min":case"m":return a*r;case"seconds":case"second":case"secs":case"sec":case"s":return a*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}(e);if("number"===o&&isFinite(e))return t.long?function(e){var t=Math.abs(e);if(t>=s)return a(e,t,s,"day");if(t>=i)return a(e,t,i,"hour");if(t>=r)return a(e,t,r,"minute");if(t>=n)return a(e,t,n,"second");return e+" ms"}(e):function(e){var t=Math.abs(e);if(t>=s)return Math.round(e/s)+"d";if(t>=i)return Math.round(e/i)+"h";if(t>=r)return Math.round(e/r)+"m";if(t>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){var r=n(459),i=n(489),s=n(266),a=n(491),o=n(501),c=n(504),u=n(505),h=n(506),l=n(508),d=n(509),m=n(510),p=n(176),f=n(515),g=n(516),y=n(522),v=n(170),b=n(269),S=n(524),w=n(87),C=n(526),x=n(169),E=n(174),O={};O["[object Arguments]"]=O["[object Array]"]=O["[object ArrayBuffer]"]=O["[object DataView]"]=O["[object Boolean]"]=O["[object Date]"]=O["[object Float32Array]"]=O["[object Float64Array]"]=O["[object Int8Array]"]=O["[object Int16Array]"]=O["[object Int32Array]"]=O["[object Map]"]=O["[object Number]"]=O["[object Object]"]=O["[object RegExp]"]=O["[object Set]"]=O["[object String]"]=O["[object Symbol]"]=O["[object Uint8Array]"]=O["[object Uint8ClampedArray]"]=O["[object Uint16Array]"]=O["[object Uint32Array]"]=!0,O["[object Error]"]=O["[object Function]"]=O["[object WeakMap]"]=!1,e.exports=function e(t,n,T,P,A,N){var I,k=1&n,D=2&n,F=4&n;if(T&&(I=A?T(t,P,A,N):T(t)),void 0!==I)return I;if(!w(t))return t;var j=v(t);if(j){if(I=f(t),!k)return u(t,I)}else{var R=p(t),M="[object Function]"==R||"[object GeneratorFunction]"==R;if(b(t))return c(t,k);if("[object Object]"==R||"[object Arguments]"==R||M&&!A){if(I=D||M?{}:y(t),!k)return D?l(t,o(I,t)):h(t,a(I,t))}else{if(!O[R])return A?t:{};I=g(t,R,k)}}N||(N=new r);var _=N.get(t);if(_)return _;N.set(t,I),C(t)?t.forEach((function(r){I.add(e(r,n,T,r,t,N))})):S(t)&&t.forEach((function(r,i){I.set(i,e(r,n,T,i,t,N))}));var B=j?void 0:(F?D?m:d:D?E:x)(t);return i(B||t,(function(r,i){B&&(r=t[i=r]),s(I,i,e(r,n,T,i,t,N))})),I}},function(e,t,n){var r=n(118),i=n(465),s=n(466),a=n(467),o=n(468),c=n(469);function u(e){var t=this.__data__=new r(e);this.size=t.size}u.prototype.clear=i,u.prototype.delete=s,u.prototype.get=a,u.prototype.has=o,u.prototype.set=c,e.exports=u},function(e,t){e.exports=function(){this.__data__=[],this.size=0}},function(e,t,n){var r=n(119),i=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=r(t,e);return!(n<0)&&(n==t.length-1?t.pop():i.call(t,n,1),--this.size,!0)}},function(e,t,n){var r=n(119);e.exports=function(e){var t=this.__data__,n=r(t,e);return n<0?void 0:t[n][1]}},function(e,t,n){var r=n(119);e.exports=function(e){return r(this.__data__,e)>-1}},function(e,t,n){var r=n(119);e.exports=function(e,t){var n=this.__data__,i=r(n,e);return i<0?(++this.size,n.push([e,t])):n[i][1]=t,this}},function(e,t,n){var r=n(118);e.exports=function(){this.__data__=new r,this.size=0}},function(e,t){e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},function(e,t){e.exports=function(e){return this.__data__.get(e)}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t,n){var r=n(118),i=n(167),s=n(476);e.exports=function(e,t){var n=this.__data__;if(n instanceof r){var a=n.__data__;if(!i||a.length<199)return a.push([e,t]),this.size=++n.size,this;n=this.__data__=new s(a)}return n.set(e,t),this.size=n.size,this}},function(e,t,n){var r=n(263),i=n(473),s=n(87),a=n(265),o=/^\[object .+?Constructor\]$/,c=Function.prototype,u=Object.prototype,h=c.toString,l=u.hasOwnProperty,d=RegExp("^"+h.call(l).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!s(e)||i(e))&&(r(e)?d:o).test(a(e))}},function(e,t,n){var r=n(168),i=Object.prototype,s=i.hasOwnProperty,a=i.toString,o=r?r.toStringTag:void 0;e.exports=function(e){var t=s.call(e,o),n=e[o];try{e[o]=void 0;var r=!0}catch(e){}var i=a.call(e);return r&&(t?e[o]=n:delete e[o]),i}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t,n){var r,i=n(474),s=(r=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";e.exports=function(e){return!!s&&s in e}},function(e,t,n){var r=n(41)["__core-js_shared__"];e.exports=r},function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},function(e,t,n){var r=n(477),i=n(484),s=n(486),a=n(487),o=n(488);function c(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=i,c.prototype.get=s,c.prototype.has=a,c.prototype.set=o,e.exports=c},function(e,t,n){var r=n(478),i=n(118),s=n(167);e.exports=function(){this.size=0,this.__data__={hash:new r,map:new(s||i),string:new r}}},function(e,t,n){var r=n(479),i=n(480),s=n(481),a=n(482),o=n(483);function c(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=i,c.prototype.get=s,c.prototype.has=a,c.prototype.set=o,e.exports=c},function(e,t,n){var r=n(121);e.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(e,t){e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},function(e,t,n){var r=n(121),i=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(r){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return i.call(t,e)?t[e]:void 0}},function(e,t,n){var r=n(121),i=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return r?void 0!==t[e]:i.call(t,e)}},function(e,t,n){var r=n(121);e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=r&&void 0===t?"__lodash_hash_undefined__":t,this}},function(e,t,n){var r=n(122);e.exports=function(e){var t=r(this,e).delete(e);return this.size-=t?1:0,t}},function(e,t){e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},function(e,t,n){var r=n(122);e.exports=function(e){return r(this,e).get(e)}},function(e,t,n){var r=n(122);e.exports=function(e){return r(this,e).has(e)}},function(e,t,n){var r=n(122);e.exports=function(e,t){var n=r(this,e),i=n.size;return n.set(e,t),this.size+=n.size==i?0:1,this}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}},function(e,t,n){var r=n(62),i=function(){try{var e=r(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=i},function(e,t,n){var r=n(123),i=n(169);e.exports=function(e,t){return e&&r(t,i(t),e)}},function(e,t){e.exports=function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}},function(e,t,n){var r=n(494),i=n(88),s=Object.prototype,a=s.hasOwnProperty,o=s.propertyIsEnumerable,c=r(function(){return arguments}())?r:function(e){return i(e)&&a.call(e,"callee")&&!o.call(e,"callee")};e.exports=c},function(e,t,n){var r=n(120),i=n(88);e.exports=function(e){return i(e)&&"[object Arguments]"==r(e)}},function(e,t){e.exports=function(){return!1}},function(e,t){var n=/^(?:0|[1-9]\d*)$/;e.exports=function(e,t){var r=typeof e;return!!(t=null==t?9007199254740991:t)&&("number"==r||"symbol"!=r&&n.test(e))&&e>-1&&e%1==0&&e<t}},function(e,t,n){var r=n(498),i=n(171),s=n(172),a=s&&s.isTypedArray,o=a?i(a):r;e.exports=o},function(e,t,n){var r=n(120),i=n(270),s=n(88),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,e.exports=function(e){return s(e)&&i(e.length)&&!!a[r(e)]}},function(e,t,n){var r=n(173),i=n(500),s=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return i(e);var t=[];for(var n in Object(e))s.call(e,n)&&"constructor"!=n&&t.push(n);return t}},function(e,t,n){var r=n(271)(Object.keys,Object);e.exports=r},function(e,t,n){var r=n(123),i=n(174);e.exports=function(e,t){return e&&r(t,i(t),e)}},function(e,t,n){var r=n(87),i=n(173),s=n(503),a=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return s(e);var t=i(e),n=[];for(var o in e)("constructor"!=o||!t&&a.call(e,o))&&n.push(o);return n}},function(e,t){e.exports=function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}},function(e,t,n){(function(e){var r=n(41),i=t&&!t.nodeType&&t,s=i&&"object"==typeof e&&e&&!e.nodeType&&e,a=s&&s.exports===i?r.Buffer:void 0,o=a?a.allocUnsafe:void 0;e.exports=function(e,t){if(t)return e.slice();var n=e.length,r=o?o(n):new e.constructor(n);return e.copy(r),r}}).call(this,n(60)(e))},function(e,t){e.exports=function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t}},function(e,t,n){var r=n(123),i=n(175);e.exports=function(e,t){return r(e,i(e),t)}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,i=0,s=[];++n<r;){var a=e[n];t(a,n,e)&&(s[i++]=a)}return s}},function(e,t,n){var r=n(123),i=n(274);e.exports=function(e,t){return r(e,i(e),t)}},function(e,t,n){var r=n(277),i=n(175),s=n(169);e.exports=function(e){return r(e,s,i)}},function(e,t,n){var r=n(277),i=n(274),s=n(174);e.exports=function(e){return r(e,s,i)}},function(e,t,n){var r=n(62)(n(41),"DataView");e.exports=r},function(e,t,n){var r=n(62)(n(41),"Promise");e.exports=r},function(e,t,n){var r=n(62)(n(41),"Set");e.exports=r},function(e,t,n){var r=n(62)(n(41),"WeakMap");e.exports=r},function(e,t){var n=Object.prototype.hasOwnProperty;e.exports=function(e){var t=e.length,r=new e.constructor(t);return t&&"string"==typeof e[0]&&n.call(e,"index")&&(r.index=e.index,r.input=e.input),r}},function(e,t,n){var r=n(177),i=n(518),s=n(519),a=n(520),o=n(521);e.exports=function(e,t,n){var c=e.constructor;switch(t){case"[object ArrayBuffer]":return r(e);case"[object Boolean]":case"[object Date]":return new c(+e);case"[object DataView]":return i(e,n);case"[object Float32Array]":case"[object Float64Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return o(e,n);case"[object Map]":return new c;case"[object Number]":case"[object String]":return new c(e);case"[object RegExp]":return s(e);case"[object Set]":return new c;case"[object Symbol]":return a(e)}}},function(e,t,n){var r=n(41).Uint8Array;e.exports=r},function(e,t,n){var r=n(177);e.exports=function(e,t){var n=t?r(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}},function(e,t){var n=/\w*$/;e.exports=function(e){var t=new e.constructor(e.source,n.exec(e));return t.lastIndex=e.lastIndex,t}},function(e,t,n){var r=n(168),i=r?r.prototype:void 0,s=i?i.valueOf:void 0;e.exports=function(e){return s?Object(s.call(e)):{}}},function(e,t,n){var r=n(177);e.exports=function(e,t){var n=t?r(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}},function(e,t,n){var r=n(523),i=n(276),s=n(173);e.exports=function(e){return"function"!=typeof e.constructor||s(e)?{}:r(i(e))}},function(e,t,n){var r=n(87),i=Object.create,s=function(){function e(){}return function(t){if(!r(t))return{};if(i)return i(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();e.exports=s},function(e,t,n){var r=n(525),i=n(171),s=n(172),a=s&&s.isMap,o=a?i(a):r;e.exports=o},function(e,t,n){var r=n(176),i=n(88);e.exports=function(e){return i(e)&&"[object Map]"==r(e)}},function(e,t,n){var r=n(527),i=n(171),s=n(172),a=s&&s.isSet,o=a?i(a):r;e.exports=o},function(e,t,n){var r=n(176),i=n(88);e.exports=function(e){return i(e)&&"[object Set]"==r(e)}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.MockHandle=void 0;const r=n(28);t.MockHandle=class{constructor(e,t="mock-handle-"+Math.random().toString(36).slice(2),n="/"+t){this.value=e,this.path=t,this.absolutePath=n,this.graphAttachState=r.AttachState.Detached}get IFluidHandle(){return this}get isAttached(){return this.graphAttachState===r.AttachState.Attached}async get(){return this.value}attachGraph(){this.graphAttachState=r.AttachState.Attached}bind(){throw Error("MockHandle.bind() unimplemented.")}}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.IFluidDataStoreFactory=void 0,t.IFluidDataStoreFactory="IFluidDataStoreFactory"},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.IFluidDataStoreRegistry=void 0,t.IFluidDataStoreRegistry="IFluidDataStoreRegistry"},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.VisibilityState=t.FlushMode=void 0,function(e){e[e.Immediate=0]="Immediate",e[e.TurnBased=1]="TurnBased"}(t.FlushMode||(t.FlushMode={})),t.VisibilityState={NotVisible:"NotVisible",LocallyVisible:"LocallyVisible",GloballyVisible:"GloballyVisible"}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.gcBlobKey=void 0,t.gcBlobKey="gc"},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.channelsTreeName=t.CreateSummarizerNodeSource=void 0,function(e){e[e.FromSummary=0]="FromSummary",e[e.FromAttach=1]="FromAttach",e[e.Local=2]="Local"}(t.CreateSummarizerNodeSource||(t.CreateSummarizerNodeSource={})),t.channelsTreeName=".channels"},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.MockContainerRuntimeFactoryForReconnection=t.MockContainerRuntimeForReconnection=void 0;const r=n(29),i=n(283);class s extends i.MockContainerRuntime{constructor(e,t){super(e,t),this.pendingRemoteMessages=[],this._connected=!0}get connected(){return this._connected}set connected(e){if(this._connected!==e){if(this._connected=e,e){for(const e of this.pendingRemoteMessages)this.process(e);this.pendingRemoteMessages.length=0,this.clientSequenceNumber=0,this.clientId=(0,r.v4)(),this.dataStoreRuntime.clientId=this.clientId,this.reSubmitMessages()}else{this.factory.clearOutstandingClientMessages(this.clientId)}this.deltaConnections.forEach(e=>{e.setConnectionState(this.connected)})}}process(e){this.connected?super.process(e):this.pendingRemoteMessages.push(e)}submit(e,t){return this.connected?super.submit(e,t):(this.addPendingMessage(e,t,-1),-1)}reSubmitMessages(){let e=this.pendingMessages.length;for(;e>0;){const t=this.pendingMessages.shift();this.deltaConnections.forEach(e=>{e.reSubmit(t.content,t.localOpMetadata)}),e--}}}t.MockContainerRuntimeForReconnection=s;class a extends i.MockContainerRuntimeFactory{createContainerRuntime(e){const t=new s(e,this);return this.runtimes.push(t),t}clearOutstandingClientMessages(e){this.messages=this.messages.filter(t=>t.clientId!==e)}}t.MockContainerRuntimeFactoryForReconnection=a},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.MockStorage=void 0;const r=n(4),i=n(10);class s{constructor(e){this.tree=e}static createFromSummary(e){const t=(0,i.convertSummaryTreeToITree)(e);return new s(t)}static readBlobCore(e,t){if(e){for(const n of e.entries)if(n.path===t[0])return"Blob"===n.type?((0,r.assert)(1===t.length,JSON.stringify(Object.assign({},arguments))),n.value):"Tree"===n.type?s.readBlobCore(n.value,t.slice(1)):void 0}else;}async readBlob(e){const t=s.readBlobCore(this.tree,e.split("/"));return(0,r.assert)(void 0!==t,"Blob does not exist: "+e),(0,r.stringToBuffer)(t.contents,t.encoding)}async contains(e){return void 0!==s.readBlobCore(this.tree,e.split("/"))}async list(e){return(0,i.listBlobsAtTreePath)(this.tree,e)}}t.MockStorage=s},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.validateAssertionError=void 0;const r=n(538),i=n(543);t.validateAssertionError=function(e,t){var n;const s=null!==(n=i.shortCodeMap[e.message])&&void 0!==n?n:e.message;if(s!==t)throw new r.AssertionError({message:`Unexpected assertion thrown: ${e.message} ('${s}')`});return!0}},function(e,t,n){"use strict";(function(t){var r=n(539);
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */function i(e,t){if(e===t)return 0;for(var n=e.length,r=t.length,i=0,s=Math.min(n,r);i<s;++i)if(e[i]!==t[i]){n=e[i],r=t[i];break}return n<r?-1:r<n?1:0}function s(e){return t.Buffer&&"function"==typeof t.Buffer.isBuffer?t.Buffer.isBuffer(e):!(null==e||!e._isBuffer)}var a=n(540),o=Object.prototype.hasOwnProperty,c=Array.prototype.slice,u="foo"===function(){}.name;function h(e){return Object.prototype.toString.call(e)}function l(e){return!s(e)&&("function"==typeof t.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):!!e&&(e instanceof DataView||!!(e.buffer&&e.buffer instanceof ArrayBuffer))))}var d=e.exports=v,m=/\s*function\s+([^\(\s]*)\s*/;function p(e){if(a.isFunction(e)){if(u)return e.name;var t=e.toString().match(m);return t&&t[1]}}function f(e,t){return"string"==typeof e?e.length<t?e:e.slice(0,t):e}function g(e){if(u||!a.isFunction(e))return a.inspect(e);var t=p(e);return"[Function"+(t?": "+t:"")+"]"}function y(e,t,n,r,i){throw new d.AssertionError({message:n,actual:e,expected:t,operator:r,stackStartFunction:i})}function v(e,t){e||y(e,!0,t,"==",d.ok)}function b(e,t,n,r){if(e===t)return!0;if(s(e)&&s(t))return 0===i(e,t);if(a.isDate(e)&&a.isDate(t))return e.getTime()===t.getTime();if(a.isRegExp(e)&&a.isRegExp(t))return e.source===t.source&&e.global===t.global&&e.multiline===t.multiline&&e.lastIndex===t.lastIndex&&e.ignoreCase===t.ignoreCase;if(null!==e&&"object"==typeof e||null!==t&&"object"==typeof t){if(l(e)&&l(t)&&h(e)===h(t)&&!(e instanceof Float32Array||e instanceof Float64Array))return 0===i(new Uint8Array(e.buffer),new Uint8Array(t.buffer));if(s(e)!==s(t))return!1;var o=(r=r||{actual:[],expected:[]}).actual.indexOf(e);return-1!==o&&o===r.expected.indexOf(t)||(r.actual.push(e),r.expected.push(t),function(e,t,n,r){if(null==e||null==t)return!1;if(a.isPrimitive(e)||a.isPrimitive(t))return e===t;if(n&&Object.getPrototypeOf(e)!==Object.getPrototypeOf(t))return!1;var i=S(e),s=S(t);if(i&&!s||!i&&s)return!1;if(i)return e=c.call(e),t=c.call(t),b(e,t,n);var o,u,h=x(e),l=x(t);if(h.length!==l.length)return!1;for(h.sort(),l.sort(),u=h.length-1;u>=0;u--)if(h[u]!==l[u])return!1;for(u=h.length-1;u>=0;u--)if(o=h[u],!b(e[o],t[o],n,r))return!1;return!0}(e,t,n,r))}return n?e===t:e==t}function S(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function w(e,t){if(!e||!t)return!1;if("[object RegExp]"==Object.prototype.toString.call(t))return t.test(e);try{if(e instanceof t)return!0}catch(e){}return!Error.isPrototypeOf(t)&&!0===t.call({},e)}function C(e,t,n,r){var i;if("function"!=typeof t)throw new TypeError('"block" argument must be a function');"string"==typeof n&&(r=n,n=null),i=function(e){var t;try{e()}catch(e){t=e}return t}(t),r=(n&&n.name?" ("+n.name+").":".")+(r?" "+r:"."),e&&!i&&y(i,n,"Missing expected exception"+r);var s="string"==typeof r,o=!e&&i&&!n;if((!e&&a.isError(i)&&s&&w(i,n)||o)&&y(i,n,"Got unwanted exception"+r),e&&i&&n&&!w(i,n)||!e&&i)throw i}d.AssertionError=function(e){this.name="AssertionError",this.actual=e.actual,this.expected=e.expected,this.operator=e.operator,e.message?(this.message=e.message,this.generatedMessage=!1):(this.message=function(e){return f(g(e.actual),128)+" "+e.operator+" "+f(g(e.expected),128)}(this),this.generatedMessage=!0);var t=e.stackStartFunction||y;if(Error.captureStackTrace)Error.captureStackTrace(this,t);else{var n=new Error;if(n.stack){var r=n.stack,i=p(t),s=r.indexOf("\n"+i);if(s>=0){var a=r.indexOf("\n",s+1);r=r.substring(a+1)}this.stack=r}}},a.inherits(d.AssertionError,Error),d.fail=y,d.ok=v,d.equal=function(e,t,n){e!=t&&y(e,t,n,"==",d.equal)},d.notEqual=function(e,t,n){e==t&&y(e,t,n,"!=",d.notEqual)},d.deepEqual=function(e,t,n){b(e,t,!1)||y(e,t,n,"deepEqual",d.deepEqual)},d.deepStrictEqual=function(e,t,n){b(e,t,!0)||y(e,t,n,"deepStrictEqual",d.deepStrictEqual)},d.notDeepEqual=function(e,t,n){b(e,t,!1)&&y(e,t,n,"notDeepEqual",d.notDeepEqual)},d.notDeepStrictEqual=function e(t,n,r){b(t,n,!0)&&y(t,n,r,"notDeepStrictEqual",e)},d.strictEqual=function(e,t,n){e!==t&&y(e,t,n,"===",d.strictEqual)},d.notStrictEqual=function(e,t,n){e===t&&y(e,t,n,"!==",d.notStrictEqual)},d.throws=function(e,t,n){C(!0,e,t,n)},d.doesNotThrow=function(e,t,n){C(!1,e,t,n)},d.ifError=function(e){if(e)throw e},d.strict=r((function e(t,n){t||y(t,!0,n,"==",e)}),d,{equal:d.strictEqual,deepEqual:d.deepStrictEqual,notEqual:d.notStrictEqual,notDeepEqual:d.notDeepStrictEqual}),d.strict.strict=d.strict;var x=Object.keys||function(e){var t=[];for(var n in e)o.call(e,n)&&t.push(n);return t}}).call(this,n(69))},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,o,c=a(e),u=1;u<arguments.length;u++){for(var h in n=Object(arguments[u]))i.call(n,h)&&(c[h]=n[h]);if(r){o=r(n);for(var l=0;l<o.length;l++)s.call(n,o[l])&&(c[o[l]]=n[o[l]])}}return c}},function(e,t,n){(function(e){var r=Object.getOwnPropertyDescriptors||function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++)n[t[r]]=Object.getOwnPropertyDescriptor(e,t[r]);return n},i=/%[sdj%]/g;t.format=function(e){if(!y(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(o(arguments[n]));return t.join(" ")}n=1;for(var r=arguments,s=r.length,a=String(e).replace(i,(function(e){if("%%"===e)return"%";if(n>=s)return e;switch(e){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(e){return"[Circular]"}default:return e}})),c=r[n];n<s;c=r[++n])f(c)||!S(c)?a+=" "+c:a+=" "+o(c);return a},t.deprecate=function(n,r){if(void 0!==e&&!0===e.noDeprecation)return n;if(void 0===e)return function(){return t.deprecate(n,r).apply(this,arguments)};var i=!1;return function(){if(!i){if(e.throwDeprecation)throw new Error(r);e.traceDeprecation?console.trace(r):console.error(r),i=!0}return n.apply(this,arguments)}};var s,a={};function o(e,n){var r={seen:[],stylize:u};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),p(n)?r.showHidden=n:n&&t._extend(r,n),v(r.showHidden)&&(r.showHidden=!1),v(r.depth)&&(r.depth=2),v(r.colors)&&(r.colors=!1),v(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=c),h(r,e,r.depth)}function c(e,t){var n=o.styles[t];return n?"["+o.colors[n][0]+"m"+e+"["+o.colors[n][1]+"m":e}function u(e,t){return e}function h(e,n,r){if(e.customInspect&&n&&x(n.inspect)&&n.inspect!==t.inspect&&(!n.constructor||n.constructor.prototype!==n)){var i=n.inspect(r,e);return y(i)||(i=h(e,i,r)),i}var s=function(e,t){if(v(t))return e.stylize("undefined","undefined");if(y(t)){var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string")}if(g(t))return e.stylize(""+t,"number");if(p(t))return e.stylize(""+t,"boolean");if(f(t))return e.stylize("null","null")}(e,n);if(s)return s;var a=Object.keys(n),o=function(e){var t={};return e.forEach((function(e,n){t[e]=!0})),t}(a);if(e.showHidden&&(a=Object.getOwnPropertyNames(n)),C(n)&&(a.indexOf("message")>=0||a.indexOf("description")>=0))return l(n);if(0===a.length){if(x(n)){var c=n.name?": "+n.name:"";return e.stylize("[Function"+c+"]","special")}if(b(n))return e.stylize(RegExp.prototype.toString.call(n),"regexp");if(w(n))return e.stylize(Date.prototype.toString.call(n),"date");if(C(n))return l(n)}var u,S="",E=!1,O=["{","}"];(m(n)&&(E=!0,O=["[","]"]),x(n))&&(S=" [Function"+(n.name?": "+n.name:"")+"]");return b(n)&&(S=" "+RegExp.prototype.toString.call(n)),w(n)&&(S=" "+Date.prototype.toUTCString.call(n)),C(n)&&(S=" "+l(n)),0!==a.length||E&&0!=n.length?r<0?b(n)?e.stylize(RegExp.prototype.toString.call(n),"regexp"):e.stylize("[Object]","special"):(e.seen.push(n),u=E?function(e,t,n,r,i){for(var s=[],a=0,o=t.length;a<o;++a)A(t,String(a))?s.push(d(e,t,n,r,String(a),!0)):s.push("");return i.forEach((function(i){i.match(/^\d+$/)||s.push(d(e,t,n,r,i,!0))})),s}(e,n,r,o,a):a.map((function(t){return d(e,n,r,o,t,E)})),e.seen.pop(),function(e,t,n){if(e.reduce((function(e,t){return t.indexOf("\n")>=0&&0,e+t.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60)return n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1];return n[0]+t+" "+e.join(", ")+" "+n[1]}(u,S,O)):O[0]+S+O[1]}function l(e){return"["+Error.prototype.toString.call(e)+"]"}function d(e,t,n,r,i,s){var a,o,c;if((c=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]}).get?o=c.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):c.set&&(o=e.stylize("[Setter]","special")),A(r,i)||(a="["+i+"]"),o||(e.seen.indexOf(c.value)<0?(o=f(n)?h(e,c.value,null):h(e,c.value,n-1)).indexOf("\n")>-1&&(o=s?o.split("\n").map((function(e){return"  "+e})).join("\n").substr(2):"\n"+o.split("\n").map((function(e){return"   "+e})).join("\n")):o=e.stylize("[Circular]","special")),v(a)){if(s&&i.match(/^\d+$/))return o;(a=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.substr(1,a.length-2),a=e.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),a=e.stylize(a,"string"))}return a+": "+o}function m(e){return Array.isArray(e)}function p(e){return"boolean"==typeof e}function f(e){return null===e}function g(e){return"number"==typeof e}function y(e){return"string"==typeof e}function v(e){return void 0===e}function b(e){return S(e)&&"[object RegExp]"===E(e)}function S(e){return"object"==typeof e&&null!==e}function w(e){return S(e)&&"[object Date]"===E(e)}function C(e){return S(e)&&("[object Error]"===E(e)||e instanceof Error)}function x(e){return"function"==typeof e}function E(e){return Object.prototype.toString.call(e)}function O(e){return e<10?"0"+e.toString(10):e.toString(10)}t.debuglog=function(n){if(v(s)&&(s=e.env.NODE_DEBUG||""),n=n.toUpperCase(),!a[n])if(new RegExp("\\b"+n+"\\b","i").test(s)){var r=e.pid;a[n]=function(){var e=t.format.apply(t,arguments);console.error("%s %d: %s",n,r,e)}}else a[n]=function(){};return a[n]},t.inspect=o,o.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},o.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.isArray=m,t.isBoolean=p,t.isNull=f,t.isNullOrUndefined=function(e){return null==e},t.isNumber=g,t.isString=y,t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=v,t.isRegExp=b,t.isObject=S,t.isDate=w,t.isError=C,t.isFunction=x,t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=n(541);var T=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function P(){var e=new Date,t=[O(e.getHours()),O(e.getMinutes()),O(e.getSeconds())].join(":");return[e.getDate(),T[e.getMonth()],t].join(" ")}function A(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.log=function(){console.log("%s - %s",P(),t.format.apply(t,arguments))},t.inherits=n(542),t._extend=function(e,t){if(!t||!S(t))return e;for(var n=Object.keys(t),r=n.length;r--;)e[n[r]]=t[n[r]];return e};var N="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function I(e,t){if(!e){var n=new Error("Promise was rejected with a falsy value");n.reason=e,e=n}return t(e)}t.promisify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');if(N&&e[N]){var t;if("function"!=typeof(t=e[N]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(t,N,{value:t,enumerable:!1,writable:!1,configurable:!0}),t}function t(){for(var t,n,r=new Promise((function(e,r){t=e,n=r})),i=[],s=0;s<arguments.length;s++)i.push(arguments[s]);i.push((function(e,r){e?n(e):t(r)}));try{e.apply(this,i)}catch(e){n(e)}return r}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),N&&Object.defineProperty(t,N,{value:t,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(t,r(e))},t.promisify.custom=N,t.callbackify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');function n(){for(var n=[],r=0;r<arguments.length;r++)n.push(arguments[r]);var i=n.pop();if("function"!=typeof i)throw new TypeError("The last argument must be of type Function");var s=this,a=function(){return i.apply(s,arguments)};t.apply(this,n).then((function(t){e.nextTick(a,null,t)}),(function(t){e.nextTick(I,t,a)}))}return Object.setPrototypeOf(n,Object.getPrototypeOf(t)),Object.defineProperties(n,r(t)),n}}).call(this,n(61))},function(e,t){e.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 *
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY
 */Object.defineProperty(t,"__esModule",{value:!0}),t.shortCodeMap=void 0,t.shortCodeMap={"0x000":"nonzero isobuffer byte offset","0x001":"unexpected isobuffer byte length","0x003":"Primary to add to range < last primary!","0x004":"Secondary to add to range < last secondary!","0x005":"Target primary to retrieve < first range's primary!","0x006":"Target primary to retrieve < last range's primary!","0x007":"Target primary to update < first range's primary!","0x008":"Target primary to update < last range's primary!","0x009":"After update, target primary is not first range's primary!","0x00a":"Running timer missing handler","0x00b":"Handler executed without deferred","0x00c":"messageId is incorrect from from the local client's ACK","0x00d":"Missing message handler for message type","0x00e":"Missing message handler for message type","0x1e4":"Unexpected serializable type","0x00f":"pendingMessageId is missing from the local client's operation","0x010":"Received out of order storage op when there is an unackd clear message","0x011":"pendingMessageId is missing from the local client's operation","0x012":"pendingMessageId is missing from the local client's operation","0x013":"Received out of order op when there is an unackd clear message","0x014":"pendingMessageId is missing from the local client's operation","0x015":"pendingMessageId is missing from the local client's clear operation","0x017":"Trying to add invalid handle!","0x018":"Trying to insert handle into position with already valid handle!","0x019":"SharedMatrix.openUndo() supports at most a single IUndoConsumer.","0x01a":"Trying to set out-of-bounds cell!","0x01b":"Trying to set multiple out-of-bounds cells!","0x1e2":"Caller must ensure 'isAttached()' before calling 'sendSetCellOp'.","0x01c":"The 'localSeq' of the vector submitting an op must >= the 'localSeq' of the other vector.","0x01d":"Trying to submit message to runtime while detached!","0x01e":"Row and col collab window 'localSeq' desynchronized!","0x01f":"Row and col collab window 'collaborating' status desynchronized!","0x020":"Unknown SharedMatrix 'op' type.","0x021":"SharedMatrix message contents have unexpected type!","0x022":"SharedMatrix row and/or col handles are invalid!","0x023":"The 'localSeq' of pending write (if any) must be <= the localSeq of the currently processed op.","0x2da":"Unknown SharedMatrix 'op' type.","0x024":"Start of PermutationSegment already allocated!","0x025":"Trying to set start of PermutationSegment to invalid handle!","0x026":"Trying to split segment at out-of-bounds position!","0x027":"Trying to get handle of out-of-bounds position!","0x028":"'localSeq' for op being resubmitted must be <= the 'localSeq' of the last submitted op.","0x029":"Invalid handle at start of containing segment!","0x02a":"On vector undo, unexpected 'currentOp' type/state!","0x02b":"Must not nest calls to IRevertible.revert()","0x02c":"On cellSet(), invalid row and/or column handles!","0x02d":"Unexpected op type on range remove!","0x02e":"Unexpected op type on range annotate!","0x02f":"Unexpected op type on range insert!","0x030":"Incoming remote op sequence# <= local collabWindow's currentSequence#","0x031":"Incoming remote op minSequence# < local collabWindow's minSequence#","0x032":"localSeq greater than collab window","0x033":"Segment group undefined","0x034":"Segment group not at head of merge tree pending queue","0x035":"Segment group not at head of segment pending queue","0x036":"Segment has no pending properties","0x037":"Segment already has assigned sequence number","0x2db":"Applying op must generate a pending segment","0x038":"Incoming op sequence# < local collabWindow's currentSequence#","0x039":"Incoming op sequence# < minSequence#","0x03a":"Number of ops in 'resetOp' must match the number of segment groups provided.","0x03b":"Number of ops in 'resetOp' must match the number of segment groups provided.","0x03c":"Reset op has 'group' delta type!","0x03d":"segmentGroup is array rather than singleton!","0x03e":"minSeq mismatch between collab window and delta manager!","0x03f":"New format should not emit catchup ops","0x2e0":"lref not a Local Reference","0x2be":"LocalReferences array contains a gap","0x2df":"transient references cannot be bound to segments","0x2bf":"both removedClientIds and removedSeq should be set or not set","0x040":"Child count is not within [1,7] range!","0x041":"Unexpected child ordinal length!","0x043":"On ack, unexpected segmentGroup!","0x044":"On annotate ack, missing segment property manager!","0x045":"On insert, seq number already assigned!","0x046":"On remove ack, missing removal info!","0x048":"onMinGE()","0x049":"Trying to reload from segments while collaborating!","0x04f":"minSeq of collab window > target minSeq!","0x050":"Next segment changes are undefined!","0x051":"Too many children on merge block!","0x052":"Missing reference segment!","0x053":"Missing reference segment!","0x054":"Sequence number less than minSeq!","0x055":"Sequence number is not sorted!","0x056":"Unexpected total for accumulation of all seglen adjustments!","0x057":"Negative length after length adjustment!","0x058":"Both overlapRemoveClients and clientPartials are set!","0x059":"Client view exists but flat view does not!","0x05a":"Mismatch between number of partial lengths on client and flat views!","0x05b":"Flat view exists but client view does not!","0x05c":"Trying to update more annotate props than do exist!","0x05d":"emit: mismatch in segmentsTotalLength","0x05e":"emit: mismatch in totalSegmentCount","0x05f":"Missing blob header on legacy snapshot!","0x060":"There should be only one blob with catch up ops","0x061":"Mismatch in totalLength","0x062":"Mismatch in totalSegmentCount","0x063":"Mismatch in totalLength","0x064":"Mismatch in totalSegmentCount","0x065":"On removal info preservation, segment has invalid removed sequence number!","0x066":"Corrupted preservation of segment metadata!","0x067":"Missing clientId for removal!","0x068":"On consensusOrderedCollection load, job tracking size > 0","0x069":"On consensusOrderedCollection load, data size > 0","0x06a":"Trying to submit message while detached!","0x06b":"Loading snapshot into a non-empty collection","0x2f8":"Unexpected accept op, nothing pending","0x2f9":"Unexpected accept op, client not in expectedSignoffs","0x06c":"Value should be undefined or non-empty","0x06d":"SharedObjects contained in ConsensusRegisterCollection can no longer be deserialized as of 0.17","0x06e":"Message's reference sequence number < op's reference sequence number!","0x06f":"data missing for non-atomic inbound update!","0x070":"sequence numbers are expected to be 0 when unattached","0x071":"Versions should naturally be ordered by sequenceNumber","0x2e1":"Support for plain value types removed.","0x016":"apply stashed op not implemented for custom value type ops","0x2c0":"ID must be created before adding interval to collection","0x072":"Unexpected local op when loading not finished","0x073":"Sequence message not operation","0x074":"Snapshot called when not fully loaded","0x2c1":"Creating an interval collection that already exists?","0x2d8":"Empty change event should not be emitted.","0x19d":"Handles should always have absolute paths","0x07a":"Services should be there to attach delta handler","0x075":"SummarySerializer should be used for serializing data during summary.","0x078":"Possible re-entrancy! Summary should not already be in progress.","0x079":"Possible re-entrancy! Summary should have been in progress.","0x1da":"Client id should be set if connected","0x07b":"Unexpected op","0x07c":"Unexpected op type","0x07d":"Unexpected op","0x07e":"Unexpected op type","0x1d3":"Missing client id on disconnect","0x07f":"clientId undefined","0x080":"Invalid document service!","0x081":"Document service already set!","0x082":"Document storage service already set!","0x083":"User selection status does not match replay controller use status!","0x084":"On storage resolve, user selection already made!","0x085":"On storage resolve, missing storage!","0x086":"After storage resolve, user selection status still false!","0x088":"Missing button ops button!","0x089":"Stringified length of chunk contents > total starting length","0x08a":"resetting ChunkedOpProcessor that never wrote back its contents","0x08b":"Unexpected type on contents for fix of an attach!","0x08c":"innerContent for fixing op contents is undefined!","0x08d":"After sanitize, pending incomplete ops!","0x244":"Socket is closed, but connection is not!","0x20a":"register for event on disposed object","0x245":"tracked listener","0x20b":"mismatch","0x20c":"connection disposed","0x08e":"Potentially missed initial messages","0x08f":"No op handler is setup!","0x090":"No signal handler is setup!","0x246":"checking consistency of socket & _disposed flags","0x247":"Use addTrackedListener instead","0x248":"should not subscribe to forwarded events","0x20d":"double connection listener","0x20e":"double tracked listener","0x091":"Retrieved ops' first sequence number has unexpected value!","0x092":"version input for reading snapshot tree is null!","0x093":"invalid version input for reading snapshot tree!","0x094":"Missing snapshot tree!","0x096":"Trying to remove valid tree IDs in removeNullTreeIds()!","0x097":"Missing param from office.com URL parameter","0x098":"OuterDocumentServiceFactoryProxy unavailable","0x099":"OuterUrlResolverProxy unavailable","0x09a":"'documentId' must be a defined, non-zero length string.","0x280":"Validate first op seq number","0x281":"Unreferenced if present should be true","0x219":"1 root should be there","0x20f":"Driver min read version should >= to server minReadVersion","0x210":"Snapshot should be created with minReadVersion or above","0x2c2":"Create Version should be equal to currentReadVersion","0x21b":"Snapshot id should be provided","0x21c":"Seq number should be provided","0x203":"Summary handle is undefined","0x1db":"epoch exists","0x1dc":"all entries have to have epoch","0x1dd":"no epoch","0x09d":"Connection details should contain epoch","0x282":"Headers should be present now","0x21d":"body is not string","0x21e":"improper boundary format","0x1ed":"Share link should be present","0x1e5":"Storage token should not be null","0x1e6":"Epoch  should be present in response","0x200":"Returned odsp snapshot is malformed. No trees!","0x201":"Returned odsp snapshot is malformed. No blobs!","0x2c3":"Content type should be application/ms-fluid","0x292":"Unexpected undefined result from getFileLinkCore","0x2bb":"Instrumented token fetcher with throwOnNullToken = true should never return null","0x2bc":"Instrumented token fetcher with throwOnNullToken =true should never return null","0x09f":"No more socketIO refs to remove!","0x0a0":"Unexpected socketIO references on timeout","0x220":"socket key collision","0x0a1":"Socket reference set unexpectedly does not point to this socket!","0x272":"empty request","0x0a2":"reentrancy not supported!","0x0a5":"Trying to set ops when they are already set!","0x221":"Root tree should contain the id","0x222":"Root tree should contain the id!!","0x0a8":"Docid should not contain slashes!!","0x0a4":"Unexpected blob encoding type","0x0ad":"Snapshot entry has both a tree value and a referenced id!","0x1de":"Not an ODSP resolved url","0x1e7":"caching was not performed!","0x223":"unexpected end of buffer","0x224":"Skip length should be positive","0x24d":"can retry","0x225":"Data should be there","0x226":"Should write complete data","0x227":"Data should be there","0x283":"Length of data len should fit in the bytes from the map","0x284":"Length of id should fit in the bytes from the map","0x285":"Start code should not undefined","0x286":"End code should not undefined","0x287":"key must exist in the map","0x288":"All properties should exist","0x22b":"Should be a pair","0x22c":"reading pairs","0x231":"Number should be an integer","0x232":"Payload should not be negative","0x233":"Unexpected data at the end of buffer","0x0b0":"Missing document snapshot tree!","0x0b1":"Storage service not initialized","0x0b2":"Missing orderer URL!","0x275":"Root tree should contain the id","0x0b7":"Pathname should be defined","0x0b8":"'tenantId' and 'documentId' must be defined, non-zero length strings.","0x0b9":"PathName should exist","0x0ba":"Tenant id should exist","0x0bb":"Document id should exist","0x116":"Missing handle on scheduler load","0x117":"Trying to get missing clientId!","0x118":"Bad client interactive check","0x119":"This agent became inactive while releasing","0x11a":"Unsuccessful registration","0x11b":"Trying to clear tasks on inactive agent","0x11c":"Detached object routing context","0x11d":"task is already running","0x11e":"client is undefined","0x0bc":"Runtime has no DataObject!","0x0bd":"Object runtime already has DataObject!","0x0be":"Trying to initialize from existing while initProps is set!","0x0bf":"set called recursively from the interception callback","0x0c0":"set called recursively from the interception callback","0x0c1":"Interception wrapper methods called recursively from the interception callback","0x0c2":"Interception wrapper methods called recursively from the interception callback","0x0c3":"Interception wrapper methods called recursively from the interception callback","0x0c4":"Interception wrapper methods called recursively from the interception callback","0x0c5":"Interception wrapper methods called recursively from the interception callback","0x0c6":"Interception wrapper methods called recursively from the interception callback","0x0c7":"Interception wrapper methods called recursively from the interception callback","0x0c8":"Interception wrapper methods called recursively from the interception callback","0x0c9":"Interception wrapper methods called recursively from the interception callback","0x0ca":"Trying to use legacy graph attach!","0x242":"has timer","0x243":"stopSequenceNumberUpdate should be called as result of sending any op!","0x278":"API is not supported for non-connecting or closed container","0x279":"API is not supported for non-connecting or closed container","0x26a":"not closed","0x2a7":"Container is not attached","0x2b3":"logic error","0x239":"called only in disconnected state","0x27b":"reentrancy may result in incorrect behavior","0x0e6":"old connection exists on new connection setup","0x28a":"can't be disposed - Callers need to ensure that!","0x27f":"reentrancy may result in incorrect behavior","0x0e7":"claims/connectionMode mismatch","0x0e8":"readonly perf with write connection","0x0eb":"Missing connection for reconnect","0x1f0":"Unexpected mismatch in readonly","0x0e4":"Lost old connection!","0x2b4":"not connected on sending ops!","0x2b5":"logic error","0x0ee":"Not accounting local messages correctly","0x0ef":"client seq# not growing","0x0f0":"Incoming local client seq# > generated by this client","0x2ac":"Connected when timeout waiting for leave from previous session fired!","0x234":"has joinOpTimer","0x235":"no joinOpTimer","0x2a5":"join timer","0x236":"In all cases it should be already installed","0x2a6":"there should be no timer for 'read' connections","0x1d8":"Should only transition from Connecting state","0x0cd":"Container disconnected while waiting for ops!","0x266":"lastKnownSeqNumber should never be below last processed sequence number","0x1e1":"pending state requires immediate connection!","0x27d":"Setting loaded state to false is not supported","0x27e":"Must go through loading state before loaded","0x0cf":"disconnect event was not raised!","0x0d1":"Container should be attached before close","0x0d2":"resolved url should be valid Fluid url","0x0d3":"Should only be called in detached container","0x205":"attach() called more than once","0x0d6":"Inbound queue should be empty when attaching","0x2c4":"client should not be summarizer before container is created","0x24e":"assertion for type narrowing","0x2c5":"Attempting to connect() a closed Container","0x2c6":"Attempting to connect() a container that is not attached","0x2c7":"Attempting to disconnect() a closed Container","0x0d9":"Attempting to setAutoReconnect() a closed DeltaManager","0x237":"Snapshot should exist","0x250":"serialized container with attachment blobs must be rehydrated with detached blob storage","0x1ef":"services must be defined","0x0e0":"lost minBlobSize policy","0x0dc":"Protocol handler should be set here","0x241":"disconnect should result in stopSequenceNumberUpdate() call","0x0dd":"Existing context not disposed","0x0de":"Mismatch in connection state while setting","0x0df":"Missing active connection","0x238":"called only in connected state","0x0e9":"messageBuffer is not empty on new connection","0x0e2":"DeltaManager already has attached op handler!","0x0e3":"Newly set op handler is null/undefined!","0x268":"There can't be pending fetch that early in boot sequence!","0x269":"pending ops are not dropped","0x23a":"seq#'s","0x1e8":"reentrancy","0x289":"logic error","0x1e9":"Pending ops","0x0ec":"Unexpected value for previously processed message's sequence number","0x0ed":"non-system message have to have clientId","0x267":"lastObservedSeqNumber should be updated first","0x26b":"initial state","0x0f2":"previouslyProcessedMessage","0x0f3":"not positive","0x26c":"handler should be installed","0x0f4":"Nonzero pause-count on resume()","0x2dc":"Cannot find code proposal","0x251":"creation summary has to have seq=0 && handle === undefined","0x1e0":"Protocol and App summary trees should be present","0x0f6":"real blob ID exists","0x0f7":"aggregate blob missing","0x0f8":"blob from aggregate blob exists on its own","0x0f9":"never read summary","0x0fa":"virtual blob not found","0x0fb":"logic err with aggregator","0x23b":"we are not packing at the right level","0x23c":"we are not packing at the right level","0x0fc":"tree reuse at lower level","0x0fd":"data stores are writing incremental summaries!","0x0fe":"attachment is aggregate blob","0x0ff":"duplicate aggregate blob","0x100":"logic error","0x101":"Unexpected tree entry type on flatten!","0x273":"Invalid document id from parsed URL","0x102":"invalid level of concurrency","0x103":"trying to parallel run while not working","0x104":"undefined end point for parallel fetch","0x105":"unexpected end point for parallel fetch","0x1d9":"addRequestCore() should break into smaller chunks","0x107":"ending dispatch with remaining results to be sent","0x108":"ending results dispatch but knew in advance about more requests","0x109":"unexpected next chunk position","0x10a":"cannot add parallel request while not working","0x10b":"invalid parallel request range","0x10c":"invalid parallel request start point","0x10d":"invalid parallel request end point","0x10e":"should not throw result if we knew about boundary in advance","0x10f":"empty/partial chunks should not be returned by caching","0x110":"callback should retry until valid fetch before it learns new boundary","0x112":"cannot push onto queue if done","0x113":"deferred queue should be empty","0x114":"cannot pop if deferred","0x115":"queue should not be done during pop","0x26d":"wrong start","0x26e":"wrong start","0x26f":"continuous and no duplicates","0x270":"All requested ops fetched","0x0ae":"Tried to create rate limiter with 0 max requests!","0x2dd":"Cannot find blob for a given id","0x2ba":"batchBegin must fire before batchEnd","0x11f":"requesting unknown blobs","0x1f8":"local BlobAttach op with no pending blob","0x2d5":"Invalid blob node id in unused routes.","0x252":"redirect table can only be set in detached container","0x253":"redirect table already exists","0x254":"unrecognized id in redirect table","0x255":"detached blob id absent in redirect table","0x2c8":"opStartTimeSittingInboundQueue should be undefined","0x2c9":"durationInboundQueue should be undefined","0x2ca":"durationOutboundQueue should be undefined","0x2cb":"opStartTimeForLatencyStatistics should be undefined","0x2cc":"OpTimeSittingInboundQueue should be undefined","0x2cd":"durationInboundQueue should be undefined","0x2ce":"msnTrackingTimestamp should not be undefined","0x120":"Undefined latency statistics (op send time)","0x121":"Undefined inner contents type!","0x122":"Message to unpack is not proper runtime message","0x293":"initial state","0x294":"can't have op processing paused if we are processing an op","0x295":"there should be no pending batch if we have no ops","0x296":"we should never start processing incomplete batch!","0x297":"always called from resumed state","0x298":"we have something in the queue that generates this event","0x299":"non-synchronized state","0x29a":"System message in the middle of batch!","0x29b":"system op in a batch?","0x29c":"we should be processing ops when there is no active batch","0x29d":"we should be processing ops when there is no active batch","0x29e":"there can't be active batch","0x29f":"we should be processing ops when there is no active batch","0x2a0":"batch presence was validated above","0x2a1":"logic error","0x2a2":"Batch is interrupted by other client op. Should be caught by trackPending()","0x2a3":"container should be closed on any error","0x1f5":"Attached state should have storage","0x256":"storage undefined in attached container","0x257":"This is not summarizing container","0x124":"inconsistent readonly property/event state","0x125":"Unsafe to transition to read-only state!","0x126":"Expected createSubRequest url to include a leading slash","0x127":"dirty document event not set on replay","0x128":"Container should not already be paused before applying stashed ops","0x12a":"Missing blob id on metadata","0x12b":"did not get root data store","0x24c":"Cannot call `flush()` from `orderSequentially`'s callback","0x12d":"Container Context should already be in attaching state","0x12e":"Container Context should already be in attached state","0x12f":"Container Runtime's summarize should always return a tree","0x2de":"Package path requested for unsupported node type.","0x258":"connected","0x1fc":"summary is not a tree","0x131":"Mismatch between new chunkId and expected chunkMap","0x132":"sending ops in detached container","0x133":"Container disconnected when trying to submit system message","0x259":"Container disconnected when trying to submit system message","0x137":"Failed to get version from storage","0x138":"Failed to get snapshot from storage","0x139":"Undefined package path","0x13a":"Data store ID contains slash","0x13b":"datastore context is already in bound state","0x13c":"undefined channel on datastore context","0x13d":"Detached runtime creation on realize()","0x13e":"Unexpected package path","0x13f":"datastore context registry is already set","0x140":"undefined channel on datastore context","0x141":"Unexpected connected state","0x142":"local store channel is not loaded","0x23d":"pending is undefined","0x143":"Channel should not be undefined when running GC","0x144":"Channel should be loaded when updating used routes","0x145":"Channel should be present when data store is loaded","0x146":"Channel must exist when submitting message","0x147":"Channel must exist on submitting signal","0x2cf":"undefined channel on datastore context","0x148":"Detached runtime creation on runtime bind","0x149":"Undefined channel deferral","0x14a":"Undefined package path","0x14b":"Channel must exist when resubmitting ops","0x14c":"Channel must exist when rebasing ops","0x1fe":"isolated channels subtree should exist in remote datastore snapshot","0x14d":"Should move from detached to attaching","0x14e":"Should move from attaching to attached","0x14f":"There should be a channel when generating attach message","0x150":"pkg should be available in local data store context","0x1ff":"isolated channels subtree should exist in local datastore snapshot","0x152":"pkg should be available in local data store","0x154":"runtime creation is already attached","0x155":"channel deferral is already set","0x156":"Unexpected factory for package path","0x157":"datastore registry already attached","0x158":"Creating store with existing ID","0x159":"The given id was not found in notBoundContexts to delete","0x15a":"Cannot find context to resolve to","0x15b":"Expected this id to already be removed from notBoundContexts","0x15c":"Cannot find deferred to resolve","0x15d":"Creating store with existing ID","0x15e":"Local object does not have matching attach message id","0x15f":"Could not find unbound context to bind","0x160":"There should be a store context for the op","0x161":"There should be a store context for the op","0x162":"There should be a store context for the op","0x163":"Missing datastore for local signal","0x165":"Summarizer cannot work if client has local changes","0x166":"BaseSnapshot should be there as detached container loaded from snapshot","0x2b6":"Missing data store context","0x167":"Used route does not belong to any known data store","0x2d7":"No data store with specified id","0x168":"Expected tree in snapshot not found","0x2a8":"Expected data store snapshot tree in base snapshot","0x2a9":"GC nodes for data store not in GC blob","0x2ad":"GC blob missing from snapshot","0x2fa":"Expected real numbers in minimum version!","0x2fb":"Expected minimumVersion to be [major].[minor].[patch]","0x2fc":"Expected version to match semver rules!","0x2fd":"Expected real numbers in minimum version!","0x1f6":"Negative client sequence number not allowed","0x1f7":"Previous client should always be defined","0x28b":"multiple clients connected with stashed ops","0x28c":"different message type","0x28d":"client sequence number doesn't match","0x28e":"datastore ID doesn't match","0x28f":"address doesn't match","0x169":"No pending message found for this remote message","0x16b":"The pending batch state indicates we are already processing a batch","0x2bd":"We should not see a pending FlushMode until we see a flush when processing a batch","0x16d":"There is no pending batch begin message","0x16e":"Batch with single message should not have batch metadata","0x16f":"Did not receive batch begin metadata","0x170":"Did not receive batch end metadata","0x171":"No pending state found for the remote message","0x172":"The connection state is not consistent with the runtime","0x173":"replayPendingStates called twice for same clientId!","0x174":"initial states should be empty before replaying pending","0x25b":"Caller is responsible for checking lock","0x25d":"We should never connect as 'read'","0x175":"Can only broadcast if summarizer starts in local state","0x176":"Can only ack/nack if summarizer is in broadcasting state","0x1d5":"Invalid snapshot format version","0x25e":"no reason to call fail if all promises have been completed","0x274":"type check","0x25f":"retryAfterSeconds","0x260":"Disposed should mean disconnected!","0x261":"Expected: off","0x262":"Old summarizer is still working!","0x263":"Expected: starting","0x264":"Expected: Not Off","0x177":"Missing delta handler","0x178":"Missing delta handler on attach","0x179":"createChannel() with existing ID","0x17a":"Channel should be loaded when created!!","0x17b":"Channel to be binded should be in not bounded set","0x17c":"Unexpected attach (local) channel OP","0x17e":"Used route does not belong to any known context","0x17f":"Not expecting detached channels during summarize","0x180":"getAttachSummary should always return a tree","0x181":"BaseSnapshot should be there as detached container loaded from snapshot","0x182":"Data store should be attached to attach the channel.","0x2d0":"Data store should be globally visible to attach channels.","0x183":"There should be a channel context for the op","0x184":"There should be a channel context for the op","0x185":"Channel not found","0x2d1":"Data store should be locally visible before it can become globally visible.","0x2d2":"Data store should be globally visible when its attached.","0x207":"Channel should be defined","0x2d3":"Local channel must be globally visible when processing op","0x189":"Should always be remote because a local dds shouldn't generate ops before loading","0x18a":"Channel should be loaded to resubmit ops","0x2d4":"Local channel must be globally visible when resubmitting op","0x18c":"Channel should be loaded to summarize","0x18d":"Channel should be loaded to take snapshot","0x192":"Channel should be there if loaded!!","0x193":"Channel should be loaded to run GC","0x18e":"Channel must not already be loaded when loading","0x190":".attributes blob should be present","0x208":"Factory should be undefined before loading","0x209":"Factory Type should be defined","0x194":"Remote channel must be loaded when rebasing op","0x195":"Remote channel must not be local when processing op","0x23e":"pending is undefined","0x196":"Remote channel must be loaded when resubmitting op","0x197":"Remote channel must not already be loaded when loading","0x23f":"pending undefined","0x2ae":"node id should always be an absolute route","0x2af":"Child GC data should have been initialized","0x2b0":"Used route should always be an absolute route","0x2b1":"This should have be initiallized when generate GC nodes above","0x198":"Used route should always be an absolute route","0x2b2":"Two entries for the same GC node with different unreferenced timestamp","0x19a":"Invalid response value for Fluid object request","0x19b":"Cannot not create response error on 200 status","0x19c":"storage service path has trailing separator","0x19f":"wipSummaryLogger should not be set yet in startSummary","0x1a0":"Already tracking a summary","0x1a1":"summarize should not be called when not tracking the summary","0x1a2":"wipSummaryLogger should have been set in startSummary or ctor","0x1a3":"wipSummaryLogger should have been set in startSummary or ctor","0x1a4":"Not tracking a summary","0x1a5":"Tracked summary local paths not set","0x1a6":"Not found pending summary, but this node has previously completed a summary","0x1a7":"Pending summary reference sequence number should be consistent","0x1a9":"When loading base summary, expected outstanding ops <= tracking sequence number","0x1aa":"Out of order change recorded","0x1ab":"Create SummarizerNode child already exists","0x1ac":"Cannot create child from summary if parent does not have latest summary","0x1d6":"Parent summary object is not a tree","0x1ad":"Missing child summary tree","0x1ae":"Child summary object is not a tree","0x1af":"Outstanding ops blob missing, but base summary tree exists","0x1b0":"Base summary tree missing, but outstanding ops blob exists","0x1b1":"wip used routes should be set if tracking a summary","0x1b2":"Getting GC data should not be called when GC is disabled!","0x1b3":"GC data cannot be retrieved without getGCDataFn","0x1b4":"We should not already be tracking used routes when to track a new summary","0x1b5":"We should have been tracking used routes","0x1b6":"Create SummarizerNode child already exists","0x2b8":"Chunk should be set in map","0x1b7":"Bad session state for processing quorum messages","0x1b8":"Bad session state for processing quorum messages","0x1b9":"Unexpected value for sequence number of first message in file","0x1ba":"should not return empty buckets","0x1bb":"Unexpected sequence number on first of messages to save","0x1bc":"Unexpected sequence number on last of messages to save","0x1bd":"Stopped writing at unexpected sequence number","0x1c5":"snapshot should be set before retrieving it","0x1c6":"snapshot should be set before retrieving it","0x1c7":"snapshot should be set before retrieving it as expanded string","0x1c8":"Mismatch between document sequence number and current op number","0x1c9":"Leftover documents after replay!","0x1ca":"replay-to target is <= current op in replay cycle","0x1cb":"Bad window to verify snapshot","0x1cc":"Unexpected previous snapshot op number","0x240":"Binary format snapshot only for odsp driver!!","0x1ea":"Prefetch snapshot only available for odsp!","0x1eb":"Snapshot should be prefetched!","0x1ec":"No refresh token provided.","0x1ce":"clientId not found","0x1cf":"clientId not found","0x1d0":"sequenceNumber not found"}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.generateTestUser=void 0;const i=r(n(545)),s=n(29);t.generateTestUser=()=>({id:(0,s.v4)(),name:(0,i.default)()})},function(e,t){var n=["Black","White","Gray","Brown","Red","Pink","Crimson","Carnelian","Orange","Yellow","Ivory","Cream","Green","Viridian","Aquamarine","Cyan","Blue","Cerulean","Azure","Indigo","Navy","Violet","Purple","Lavender","Magenta","Rainbow","Iridescent","Spectrum","Prism","Bold","Vivid","Pale","Clear","Glass","Translucent","Misty","Dark","Light","Gold","Silver","Copper","Bronze","Steel","Iron","Brass","Mercury","Zinc","Chrome","Platinum","Titanium","Nickel","Lead","Pewter","Rust","Metal","Stone","Quartz","Granite","Marble","Alabaster","Agate","Jasper","Pebble","Pyrite","Crystal","Geode","Obsidian","Mica","Flint","Sand","Gravel","Boulder","Basalt","Ruby","Beryl","Scarlet","Citrine","Sulpher","Topaz","Amber","Emerald","Malachite","Jade","Abalone","Lapis","Sapphire","Diamond","Peridot","Gem","Jewel","Bevel","Coral","Jet","Ebony","Wood","Tree","Cherry","Maple","Cedar","Branch","Bramble","Rowan","Ash","Fir","Pine","Cactus","Alder","Grove","Forest","Jungle","Palm","Bush","Mulberry","Juniper","Vine","Ivy","Rose","Lily","Tulip","Daffodil","Honeysuckle","Fuschia","Hazel","Walnut","Almond","Lime","Lemon","Apple","Blossom","Bloom","Crocus","Rose","Buttercup","Dandelion","Iris","Carnation","Fern","Root","Branch","Leaf","Seed","Flower","Petal","Pollen","Orchid","Mangrove","Cypress","Sequoia","Sage","Heather","Snapdragon","Daisy","Mountain","Hill","Alpine","Chestnut","Valley","Glacier","Forest","Grove","Glen","Tree","Thorn","Stump","Desert","Canyon","Dune","Oasis","Mirage","Well","Spring","Meadow","Field","Prairie","Grass","Tundra","Island","Shore","Sand","Shell","Surf","Wave","Foam","Tide","Lake","River","Brook","Stream","Pool","Pond","Sun","Sprinkle","Shade","Shadow","Rain","Cloud","Storm","Hail","Snow","Sleet","Thunder","Lightning","Wind","Hurricane","Typhoon","Dawn","Sunrise","Morning","Noon","Twilight","Evening","Sunset","Midnight","Night","Sky","Star","Stellar","Comet","Nebula","Quasar","Solar","Lunar","Planet","Meteor","Sprout","Pear","Plum","Kiwi","Berry","Apricot","Peach","Mango","Pineapple","Coconut","Olive","Ginger","Root","Plain","Fancy","Stripe","Spot","Speckle","Spangle","Ring","Band","Blaze","Paint","Pinto","Shade","Tabby","Brindle","Patch","Calico","Checker","Dot","Pattern","Glitter","Glimmer","Shimmer","Dull","Dust","Dirt","Glaze","Scratch","Quick","Swift","Fast","Slow","Clever","Fire","Flicker","Flash","Spark","Ember","Coal","Flame","Chocolate","Vanilla","Sugar","Spice","Cake","Pie","Cookie","Candy","Caramel","Spiral","Round","Jelly","Square","Narrow","Long","Short","Small","Tiny","Big","Giant","Great","Atom","Peppermint","Mint","Butter","Fringe","Rag","Quilt","Truth","Lie","Holy","Curse","Noble","Sly","Brave","Shy","Lava","Foul","Leather","Fantasy","Keen","Luminous","Feather","Sticky","Gossamer","Cotton","Rattle","Silk","Satin","Cord","Denim","Flannel","Plaid","Wool","Linen","Silent","Flax","Weak","Valiant","Fierce","Gentle","Rhinestone","Splash","North","South","East","West","Summer","Winter","Autumn","Spring","Season","Equinox","Solstice","Paper","Motley","Torch","Ballistic","Rampant","Shag","Freckle","Wild","Free","Chain","Sheer","Crazy","Mad","Candle","Ribbon","Lace","Notch","Wax","Shine","Shallow","Deep","Bubble","Harvest","Fluff","Venom","Boom","Slash","Rune","Cold","Quill","Love","Hate","Garnet","Zircon","Power","Bone","Void","Horn","Glory","Cyber","Nova","Hot","Helix","Cosmic","Quark","Quiver","Holly","Clover","Polar","Regal","Ripple","Ebony","Wheat","Phantom","Dew","Chisel","Crack","Chatter","Laser","Foil","Tin","Clever","Treasure","Maze","Twisty","Curly","Fortune","Fate","Destiny","Cute","Slime","Ink","Disco","Plume","Time","Psychadelic","Relic","Fossil","Water","Savage","Ancient","Rapid","Road","Trail","Stitch","Button","Bow","Nimble","Zest","Sour","Bitter","Phase","Fan","Frill","Plump","Pickle","Mud","Puddle","Pond","River","Spring","Stream","Battle","Arrow","Plume","Roan","Pitch","Tar","Cat","Dog","Horse","Lizard","Bird","Fish","Saber","Scythe","Sharp","Soft","Razor","Neon","Dandy","Weed","Swamp","Marsh","Bog","Peat","Moor","Muck","Mire","Grave","Fair","Just","Brick","Puzzle","Skitter","Prong","Fork","Dent","Dour","Warp","Luck","Coffee","Split","Chip","Hollow","Heavy","Legend","Hickory","Mesquite","Nettle","Rogue","Charm","Prickle","Bead","Sponge","Whip","Bald","Frost","Fog","Oil","Veil","Cliff","Volcano","Rift","Maze","Proud","Dew","Mirror","Shard","Salt","Pepper","Honey","Thread","Bristle","Ripple","Glow","Zenith"],r=["head","crest","crown","tooth","fang","horn","frill","skull","bone","tongue","throat","voice","nose","snout","chin","eye","sight","seer","speaker","singer","song","chanter","howler","chatter","shrieker","shriek","jaw","bite","biter","neck","shoulder","fin","wing","arm","lifter","grasp","grabber","hand","paw","foot","finger","toe","thumb","talon","palm","touch","racer","runner","hoof","fly","flier","swoop","roar","hiss","hisser","snarl","dive","diver","rib","chest","back","ridge","leg","legs","tail","beak","walker","lasher","swisher","carver","kicker","roarer","crusher","spike","shaker","charger","hunter","weaver","crafter","binder","scribe","muse","snap","snapper","slayer","stalker","track","tracker","scar","scarer","fright","killer","death","doom","healer","saver","friend","foe","guardian","thunder","lightning","cloud","storm","forger","scale","hair","braid","nape","belly","thief","stealer","reaper","giver","taker","dancer","player","gambler","twister","turner","painter","dart","drifter","sting","stinger","venom","spur","ripper","swallow","devourer","knight","lady","lord","queen","king","master","mistress","prince","princess","duke","dutchess","samurai","ninja","knave","slave","servant","sage","wizard","witch","warlock","warrior","jester","paladin","bard","trader","sword","shield","knife","dagger","arrow","bow","fighter","bane","follower","leader","scourge","watcher","cat","panther","tiger","cougar","puma","jaguar","ocelot","lynx","lion","leopard","ferret","weasel","wolverine","bear","raccoon","dog","wolf","kitten","puppy","cub","fox","hound","terrier","coyote","hyena","jackal","pig","horse","donkey","stallion","mare","zebra","antelope","gazelle","deer","buffalo","bison","boar","elk","whale","dolphin","shark","fish","minnow","salmon","ray","fisher","otter","gull","duck","goose","crow","raven","bird","eagle","raptor","hawk","falcon","moose","heron","owl","stork","crane","sparrow","robin","parrot","cockatoo","carp","lizard","gecko","iguana","snake","python","viper","boa","condor","vulture","spider","fly","scorpion","heron","oriole","toucan","bee","wasp","hornet","rabbit","bunny","hare","brow","mustang","ox","piper","soarer","flasher","moth","mask","hide","hero","antler","chill","chiller","gem","ogre","myth","elf","fairy","pixie","dragon","griffin","unicorn","pegasus","sprite","fancier","chopper","slicer","skinner","butterfly","legend","wanderer","rover","raver","loon","lancer","glass","glazer","flame","crystal","lantern","lighter","cloak","bell","ringer","keeper","centaur","bolt","catcher","whimsey","quester","rat","mouse","serpent","wyrm","gargoyle","thorn","whip","rider","spirit","sentry","bat","beetle","burn","cowl","stone","gem","collar","mark","grin","scowl","spear","razor","edge","seeker","jay","ape","monkey","gorilla","koala","kangaroo","yak","sloth","ant","roach","weed","seed","eater","razor","shirt","face","goat","mind","shift","rider","face","mole","vole","pirate","llama","stag","bug","cap","boot","drop","hugger","sargent","snagglefoot","carpet","curtain"];function i(e){return e=e||Math.random,r[Math.floor(e()*r.length)]}function s(e){return e=e||Math.random,n[Math.floor(e()*n.length)]}e.exports=function(e){var t=i(e),n=i(e);return n=n.substr(0,1).toUpperCase()+n.substr(1),s(e)+t+" "+n},e.exports.randomNoun=i,e.exports.randomAdjective=s},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function a(e){try{c(r.next(e))}catch(e){s(e)}}function o(e){try{c(r.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,o)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.SharedInkingSession=void 0;const i=n(562),s=n(178),a=n(291),o=n(548),c=n(296),u=n(179),h=n(565),l=n(561);class d extends i.DataObject{constructor(){super(...arguments),this._localWetInkStreamedPointsCounter=0,this._outdatedStrokeCheckTimer=0,this._ignoreStoreEvents=!1,this._wetInkStrokeUpdate=new Map}initializingFirstTime(){return r(this,void 0,void 0,(function*(){this._dryInkMap=s.SharedMap.create(this.runtime,"dryInk"),this.root.set("dryInk",this._dryInkMap.handle)}))}hasInitialized(){return r(this,void 0,void 0,(function*(){const e=this.root.get("dryInk");if(!e)throw new Error("Unable to get the dryInk SharedMap handle.");this._dryInkMap=yield e.get(),this._dryInkMap.clear(),this.setupDryInkProcessing(),this.setupWetInkProcessing(),this.setupFluidSignalsProcessing()}))}outdatedStrokeCheck(){const e=Date.now(),t=[];this._wetInkStrokeUpdate.forEach((n,r)=>{e-n>15e3&&(this._remoteWetInkStore.remove(r),t.push(r))}),t.forEach(e=>{this._wetInkStrokeUpdate.delete(e)}),t.length=0,0===this._wetInkStrokeUpdate.size&&(window.clearInterval(this._outdatedStrokeCheckTimer),this._outdatedStrokeCheckTimer=0)}logWetInkStrokeUpdate(e,t=!1){t?this._wetInkStrokeUpdate.delete(e):(this._wetInkStrokeUpdate.set(e,Date.now()),0===this._outdatedStrokeCheckTimer&&(this._outdatedStrokeCheckTimer=window.setInterval(()=>this.outdatedStrokeCheck(),1e3)))}setupWetInkProcessing(){this._remoteWetInkStore=new a.RemoteWetInkStore,this._remoteWetInkRenderer=new o.RemoteWetInkRenderer(this._remoteWetInkStore),c.EventingStrokeCollector.INSTANCE.on(c.BeginStrokeEvent,e=>{this._localWetInkStreamedPointsCounter=0;const t={id:e.id,drawingAttributes:e.drawingAttributes};this.runtime.submitSignal("WetInkBegin",t)}),c.EventingStrokeCollector.INSTANCE.on(c.CurrentStrokeStreamedEvent,e=>{if(this._localWetInkStreamedPointsCounter<e.points.length){const t=[];for(let n=this._localWetInkStreamedPointsCounter;n<e.points.length;n+=1)t.push(e.points[n]);this._localWetInkStreamedPointsCounter=e.points.length;const n={id:e.id,newPoints:t};this.runtime.submitSignal("WetInkStream",n)}}),c.EventingStrokeCollector.INSTANCE.on(c.EndStrokeEvent,e=>{this._localWetInkStreamedPointsCounter=0;const t={id:e.id};this.runtime.submitSignal("WetInkEnd",t)})}setupFluidSignalsProcessing(){this.runtime.on("signal",(e,t)=>{if(!t)if("WetInkBegin"===e.type&&void 0!==e.content){const t=e.content;this._remoteWetInkStore.add(t.id,t.drawingAttributes),this.logWetInkStrokeUpdate(t.id)}else if("WetInkStream"===e.type&&void 0!==e.content){const t=e.content;this._remoteWetInkStore.addPoints(t.id,t.newPoints),this.logWetInkStrokeUpdate(t.id)}else if("WetInkEnd"===e.type&&void 0!==e.content){const t=e.content;this._remoteWetInkStore.remove(t.id),this.logWetInkStrokeUpdate(t.id,!0)}})}setupDryInkProcessing(){this._dryInkMap.forEach(e=>{u.StrokeCollectionStore.INSTANCE.add((0,h.deserializeStrokeFromJSON)(e))}),this._dryInkMap.on("valueChanged",(e,t)=>{if(this._ignoreStoreEvents=!0,!t)if(this._dryInkMap.has(e.key)){const t=this._dryInkMap.get(e.key);if(void 0!==t){const e=(0,h.deserializeStrokeFromJSON)(t);u.StrokeCollectionStore.INSTANCE.add(e)}}else u.StrokeCollectionStore.INSTANCE.remove(e.key);this._ignoreStoreEvents=!1}),this._dryInkMap.on("op",(e,t)=>{this._ignoreStoreEvents=!0,t||"clear"===e.contents.type&&u.StrokeCollectionStore.INSTANCE.clear(),this._ignoreStoreEvents=!1}),u.StrokeCollectionStore.INSTANCE.on(u.StrokeAddedEvent,e=>{this._ignoreStoreEvents||this._dryInkMap.set(""+e.id,(0,l.serializeStrokeToJSON)(e))}),u.StrokeCollectionStore.INSTANCE.on(u.StrokeDeletedEvent,e=>{this._ignoreStoreEvents||this._dryInkMap.delete(""+e)}),u.StrokeCollectionStore.INSTANCE.on(u.ClearEvent,()=>{this._ignoreStoreEvents||this._dryInkMap.clear()})}}t.SharedInkingSession=d,d.TypeName="@microsoft/wet-ink-handler",d.factory=new i.DataObjectFactory(d.TypeName,d,[],{})},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.IContainerRuntime=void 0,t.IContainerRuntime="IContainerRuntime"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RemoteWetInkRenderer=void 0;const r=n(549),i=n(292),s=n(298),a=n(36),o=n(297),c=n(293),u=n(294),h=n(291);t.RemoteWetInkRenderer=class{constructor(e){this._renderMap=new Map,this._canvasList=new Map,this._renderLoopActive=!1,this.onStrokeAdded=e=>{const t=this.acquireCanvas(""+e.id),n=(0,s.getScaledCanvasRenderingContext2D)(t,window.devicePixelRatio,t.width,t.height),r=new o.CanvasStrokeRenderer(n,new c.NoopEffectResolver);this._renderMap.set(""+e.id,{stroke:e,renderedToIndex:0,renderer:r,context:n}),1===this._renderMap.size&&(this._renderLoopActive=!0,requestAnimationFrame(this.renderLoop))},this.onStrokeRemoved=e=>{this._renderMap.delete(e),this.releaseCanvas(e),0===this._renderMap.size&&(this._renderLoopActive=!1)},this.renderLoop=()=>{this._renderMap.forEach(e=>{"mask"===e.stroke.drawingAttributes.rasterOperation?((0,i.clear2DCanvas)(e.context),e.stroke.stream(e.renderer)):e.renderedToIndex=(0,a.streamPointArrayStrokeFrom)(e.stroke,e.renderer,e.renderedToIndex)}),this._renderLoopActive&&requestAnimationFrame(this.renderLoop)},this._store=e,this._store.on(h.StrokeAddedEvent,this.onStrokeAdded),this._store.on(h.StrokeRemovedEvent,this.onStrokeRemoved)}acquireCanvas(e){if(this._canvasList.has(e))throw Error("Canvas already acquired.");const t=document.getElementById(u.InkingManager.canvasPoolId);if(t){const n=document.createElement("canvas");return n.style.touchAction="none",n.style.pointerEvents="none",n.style.position="absolute",n.style.top="0",n.style.left="0",n.width=t.clientWidth,n.height=t.clientHeight,t.appendChild(n),this._canvasList.set(e,n),n}throw new Error("Unable to find the canvas pool host element with Id "+u.InkingManager.canvasPoolId)}releaseCanvas(e){if(!this._canvasList.has(e))throw Error("Canvas not checked out.");(0,r.getElement)(u.InkingManager.canvasPoolId).removeChild(this._canvasList.get(e)),this._canvasList.delete(e)}}},function(e,t,n){"use strict";function r(e){const t=document.getElementById(e);if(null===t)throw new Error("Could not find element with id: "+e);return t}n.r(t),n.d(t,"getElement",(function(){return r}))},function(e,t,n){"use strict";n.r(t),n.d(t,"StrokeRenderLoop",(function(){return r}));class r{constructor(e){this.isLoopActive=!1,this.animationCallback=()=>{this.delegate(),this.isLoopActive&&window.requestAnimationFrame(this.animationCallback)},this.delegate=e}onStrokeBegin(){this.isLoopActive=!0,window.requestAnimationFrame(this.animationCallback)}onStrokeEnd(){this.isLoopActive=!1}}},function(e,t,n){"use strict";n.r(t),n.d(t,"ToolBasedDrawingAttributesBuilder",(function(){return i}));var r=n(137);class i extends r.a{setPen(e){return this.setColor(e).setTip("ellipse").setRasterOperation("copy"),this}setHighlighter(e){return this.setColor(e).setTip("rectangle").setRasterOperation("mask"),this}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MapStrokeCollection=void 0;const r=n(572);t.MapStrokeCollection=class{constructor(){this._map=new Map}add(e){this._map.set(e.id,{stroke:e,bounds:(0,r.calculateStrokeBoundingBox)(e)})}remove(e){return this._map.delete(e)}clear(){this._map.clear()}stream(e){this._map.forEach(t=>{e.add(t.stroke)})}streamByZOrder(e,t){var n;for(const r of e.getSortedIDs()){const e=null===(n=this._map.get(r))||void 0===n?void 0:n.stroke;e&&t.add(e)}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MapZOrderCollection=void 0;t.MapZOrderCollection=class{constructor(){this._map=new Map,this._zOrder=0}add(e){this._map.set(e.id,this._zOrder),this._zOrder++}addWithZOrder(e,t){const n=this._map.get(t);void 0!==n&&this._map.set(e.id,n)}remove(e){return this._map.delete(e)}clear(){this._map.clear()}sort(){this._map=new Map([...this._map.entries()].sort((e,t)=>e[1]-t[1]))}getSortedIDs(){const e=[];for(const t of this._map.keys())e.push(t);return e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.InputManager=void 0;const r=n(12),i=n(194),s=n(567),a=n(571),o=n(564),c=n(555),u=n(566),h=n(568),l=n(556),d=n(557),m=n(558);class p{logActivity(e,t,n,r){let i="";for(let e=0;e<n.length;e+=1)e>0&&(i+=", "),i+=`${n[e]}: ${r[e]}`;console.log(`Activity - name: ${e}, durationInMs: ${t}, ${i}`)}}class f{constructor(){const e=new p;(0,l.initPenUsageLogging)(e,1),this._inkingMetric=new d.WetInkLaserMetric(e,1)}activate(e,t,n){if((0,i.isPointerEventSupported)()){const t=new o.PointerEventInputPipeline(e);this._keyStatusExtractor=new m.KeyStatusExtractor,void 0!==n?(0,r.chain3)(t,n,this._keyStatusExtractor):(0,r.chain2)(t,this._keyStatusExtractor),this._input=t,this._outputSource=this._keyStatusExtractor}else if((0,c.isTouchEventSupported)()){const t=new u.TouchEventInputPipeline(e),n=new h.TouchToPointerEventTransform;(0,r.chain2)(t,n),this._input=t,this._outputSource=n}else{const t=new s.MouseEventInputPipeline(e),n=new a.MouseEventToPointerEventTransform;(0,r.chain2)(t,n),this._input=t,this._outputSource=n}this.setOutput(t),this._input.activate(),this._inkingMetric.activate(e)}deactivate(){this._input.deactivate(),this._inkingMetric.deactivate()}setOutput(e){this._outputSource.output=e,this._output=e}setTemporaryOutput(e){this._outputSource.output=e}resetOutput(){this._outputSource.output=this._output}getOutput(){return this._output}getInkMetric(){return this._inkingMetric}}t.InputManager=f,f.INSTANCE=new f},function(e,t,n){"use strict";function r(){return void 0!==window.TouchEvent}n.r(t),n.d(t,"isTouchEventSupported",(function(){return r}))},function(e,t,n){"use strict";n.r(t),n.d(t,"initPenUsageLogging",(function(){return s}));let r=!1;class i{constructor(e,t){this.penType="pen",this.cachedPenTimeInSec=0,this.lastPenInSec=0,this.onUnload=()=>{clearInterval(this.logIntervalId),this.logPenUsage()},this.countDistinctSecond=e=>{if(e.pointerType!==this.penType)return;const t=Math.floor(Date.now()/1e3);t>this.lastPenInSec&&(this.cachedPenTimeInSec+=1,this.lastPenInSec=t)},this.logger=e,this.registerPenEvents();const n=void 0!==t?t:1;this.logIntervalId=window.setInterval(this.logPenUsage.bind(this),60*n*1e3)}registerPenEvents(){window.addEventListener("pointerover",this.countDistinctSecond,!0),window.addEventListener("pointerdown",this.countDistinctSecond,!0),window.addEventListener("pointermove",this.countDistinctSecond,!0),window.addEventListener("pointerup",this.countDistinctSecond,!0),window.addEventListener("beforeunload",this.onUnload)}logPenUsage(){0!==this.cachedPenTimeInSec&&(this.logger.logActivity("PenMinutes",1e3*this.cachedPenTimeInSec,["PenInputSec"],[this.cachedPenTimeInSec]),this.cachedPenTimeInSec=0)}}function s(e,t){r||(new i(e,t),r=!0)}},function(e,t,n){"use strict";var r;n.r(t),n.d(t,"InkActivityType",(function(){return r})),n.d(t,"WetInkLaserMetric",(function(){return i})),function(e){e.Pen="pen",e.Pencil="pencil",e.Highlighter="highlighter",e.Erase="erase",e.ActionPen="actionPen",e.Laser="laser",e.Lasso="lasso",e.RemoteInk="remoteInk"}(r||(r={}));class i{constructor(e,t){this.penType="pen",this.mouseType="mouse",this.remoteInputType="unknown",this.logDataNames=["InputType","Activity","InkSec"],this.inkLogName="InkMinutes",this.cachedInkTimeInSec=0,this.cachedRemoteInkTimeInSec=0,this.cachedInkStartTime=0,this.lastInkInSec=0,this.isPointerDown=!1,this.isEventRegistered=!1,this.onPointerDown=e=>{void 0!==this.lastActivity&&(this.countDistinctSecond(e.pointerType),this.isPointerDown=!0)},this.onPointerMove=e=>{void 0!==this.lastActivity&&(void 0===this.lastInputType&&(this.lastInputType=e.pointerType),this.shouldCountPointerMove(e)&&this.countDistinctSecond(e.pointerType))},this.onPointerUp=e=>{void 0!==this.lastActivity&&(this.countDistinctSecond(e.pointerType),this.isPointerDown=!1,this.setLocalInkLogTimerHandle(window.setTimeout(this.logLocalInkMinute,1e3*this.logIntervalInSec)))},this.beforeUnload=()=>{this.logLocalInkMinute(),this.resetLocalInkCache(),this.logRemoteInkMinute()},this.logLocalInkMinute=()=>{if(0===this.cachedInkTimeInSec)return;if(void 0===this.lastActivity||void 0===this.lastInputType)return void(this.cachedInkTimeInSec=0);const e=[this.lastInputType,this.lastActivity,this.cachedInkTimeInSec];this.logger.logActivity(this.inkLogName,1e3*this.cachedInkTimeInSec,this.logDataNames,e),this.cachedInkTimeInSec=0},this.logRemoteInkMinute=()=>{if(0===this.cachedRemoteInkTimeInSec)return;const e=[this.remoteInputType,r.RemoteInk,this.cachedRemoteInkTimeInSec];this.logger.logActivity(this.inkLogName,1e3*this.cachedRemoteInkTimeInSec,this.logDataNames,e),this.cachedRemoteInkTimeInSec=0},this.logger=e,this.logIntervalInSec=60*(void 0===t?1:t)}activate(e){this.isEventRegistered&&this.unregisterEvents(),this.wetCanvas=e,this.registerEvents()}deactivate(){this.isEventRegistered&&this.unregisterEvents(),this.logLocalInkMinute(),this.logRemoteInkMinute()}start(e){this.lastActivity!==e&&(void 0!==this.lastActivity&&this.end(),this.lastActivity=e)}end(){this.logLocalInkMinute(),this.resetLocalInkCache()}onRemoteWetStart(){this.countRemoteWetTime(!1)}onRemoteWetAppend(){this.countRemoteWetTime(!1)}onRemoteWetEnd(){this.countRemoteWetTime(!0)}onRemoteLaserStart(e){this.isPointerDown||1!==e&&2!==e||this.countDistinctSecond(this.remoteInputType)}onRemoteLaserMove(e){this.isPointerDown||(1!==e&&2!==e||this.countDistinctSecond(this.remoteInputType),1===e&&this.cachedRemoteInkTimeInSec>this.logIntervalInSec&&this.logRemoteInkMinute())}onRemoteLaserEnd(){this.isPointerDown||(this.countDistinctSecond(this.remoteInputType),this.setRemoteInkLogTimerHandle(window.setTimeout(this.logRemoteInkMinute,1e3*this.logIntervalInSec)))}setLocalInkLogTimerHandle(e){void 0!==this.localInkLogTimerHandle&&window.clearTimeout(this.localInkLogTimerHandle),this.localInkLogTimerHandle=e}resetLocalInkCache(){this.lastActivity=void 0,this.lastInputType=void 0}registerEvents(){this.wetCanvas.addEventListener("pointerdown",this.onPointerDown,!0),this.wetCanvas.addEventListener("pointermove",this.onPointerMove,!0),this.wetCanvas.addEventListener("pointerup",this.onPointerUp,!0),this.wetCanvas.addEventListener("beforeunload",this.beforeUnload),this.isEventRegistered=!0}unregisterEvents(){this.wetCanvas.removeEventListener("pointerdown",this.onPointerDown,!0),this.wetCanvas.removeEventListener("pointermove",this.onPointerMove,!0),this.wetCanvas.removeEventListener("pointerup",this.onPointerUp,!0),this.wetCanvas.removeEventListener("beforeunload",this.beforeUnload),this.isEventRegistered=!1}shouldCountPointerMove(e){return this.lastActivity===r.Laser&&this.mouseType===e.pointerType&&this.mouseType===this.lastInputType||(!!this.isPointerDown||this.penType===e.pointerType&&this.penType===this.lastInputType)}countDistinctSecond(e){const t=Math.floor(Date.now()/1e3);if(t>this.lastInkInSec){if(e===this.remoteInputType)return this.cachedRemoteInkTimeInSec+=1,void(this.lastInkInSec=t);this.lastInputType!==e?(void 0!==this.lastInputType&&this.logLocalInkMinute(),this.lastInputType=e,this.cachedInkTimeInSec=1):this.cachedInkTimeInSec+=1,this.lastInkInSec=t,1===this.cachedInkTimeInSec&&(this.cachedInkStartTime=this.lastInkInSec),this.lastInkInSec-this.cachedInkStartTime>this.logIntervalInSec&&this.logLocalInkMinute()}}countRemoteWetTime(e){this.isPointerDown||(this.countDistinctSecond(this.remoteInputType),e&&this.setRemoteInkLogTimerHandle(window.setTimeout(this.logRemoteInkMinute,1e3*this.logIntervalInSec)))}setRemoteInkLogTimerHandle(e){void 0!==this.remoteInkLogTimerHandle&&window.clearTimeout(this.remoteInkLogTimerHandle),this.remoteInkLogTimerHandle=e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.KeyStatusExtractor=void 0;const r=n(180);t.KeyStatusExtractor=class{getKeyStatus(e){e.ctrlKey?(r.WetStrokeCollectionStore.INSTANCE.makeCurrentStrokeStraight(),r.WetStrokeCollectionStore.INSTANCE.setLineMode(!0)):r.WetStrokeCollectionStore.INSTANCE.setLineMode(e.shiftKey)}onPointerDown(e){this.getKeyStatus(e),this.output.onPointerDown(e)}onPointerMove(e){this.getKeyStatus(e),this.output.onPointerMove(e)}onPointerUp(e){this.getKeyStatus(e),this.output.onPointerUp(e)}}},function(e,t,n){"use strict";n.r(t),n.d(t,"ArrayStrokeCollection",(function(){return r}));class r{constructor(){this.strokes=[]}add(e){this.strokes.push(e)}stream(e){this.strokes.forEach(t=>{e.add(t)})}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UuidUniqueIdGenerator=void 0;const r=n(29);t.UuidUniqueIdGenerator=class{generate(){return(0,r.v4)()}}},function(e,t,n){"use strict";function r(e){const t={id:e.id,drawingAttributes:e.drawingAttributes,x:[],y:[],pressure:[],tiltX:[],tiltY:[],timestamp:[]};return e.streamChannels({addPoint:e=>{t.x.push(e.x),t.y.push(e.y)},addPressure:e=>{t.pressure.push(e)},addTilt:e=>{t.tiltX.push(e.tiltX),t.tiltY.push(e.tiltY)},addTimestamp:e=>{t.timestamp.push(e)}}),JSON.stringify(t)}n.r(t),n.d(t,"serializeStrokeToJSON",(function(){return r}))},function(e,t,n){"use strict";n.r(t),n.d(t,"DataObjectFactory",(function(){return re})),n.d(t,"PureDataObjectFactory",(function(){return ne})),n.d(t,"DataObject",(function(){return ie})),n.d(t,"PureDataObject",(function(){return ee})),n.d(t,"BaseContainerRuntimeFactory",(function(){return ce})),n.d(t,"ContainerRuntimeFactoryWithDefaultDataStore",(function(){return ue})),n.d(t,"serviceRoutePathRoot",(function(){return G})),n.d(t,"BaseContainerService",(function(){return W})),n.d(t,"generateContainerServicesRequestHandler",(function(){return $})),n.d(t,"mountableViewRequestHandler",(function(){return Y})),n.d(t,"defaultRouteRequestHandler",(function(){return X})),n.d(t,"defaultFluidObjectRequestHandler",(function(){return Z})),n.d(t,"waitForAttach",(function(){return he})),n.d(t,"getDefaultObjectFromContainer",(function(){return le})),n.d(t,"getObjectWithIdFromContainer",(function(){return de})),n.d(t,"getObjectFromContainer",(function(){return me}));var r=n(290),i=n(299),s=n(282),a=n(575),o=n(74),c=n(90),u=n(1),h=n(77),l=n(37),d=n(258),m=n(594),p=n(8),f=n(3),g=n(191),y=n(286),v=n(284),b=n(44),S=n(201),w=n(98);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class C{constructor(e,t,n,r,i){this.objectId=e,this._connected=t,this.submit=n,this.dirty=r,this.addedGCOutboundReference=i}get handler(){return Object(u.a)(!!this._handler,375),this._handler}get connected(){return this._connected}attach(e){Object(u.a)(void 0===this._handler,376),this._handler=e}setConnectionState(e){this._connected=e,this.handler.setConnectionState(e)}process(e,t,n){try{this.handler.process(e,t,n)}catch(t){throw a.c.wrapIfUnrecognized(t,"channelDeltaConnectionFailedToProcessMessage",e)}}reSubmit(e,t){this.handler.reSubmit(e,t)}applyStashedOp(e){return this.handler.applyStashedOp(e)}}var x=n(285);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class E{constructor(e,t,n,r){this.tree=e,this.storage=t,this.logger=n,this.extraBlobs=r,this.flattenedTree={},void 0!==e&&E.flattenTree("",e,this.flattenedTree)}static flattenTree(e,t,n){for(const r in t.trees)E.flattenTree(`${e}${r}/`,t.trees[r],n);for(const r in t.blobs)n[`${e}${r}`]=t.blobs[r]}async contains(e){return void 0!==this.flattenedTree[e]}async readBlob(e){const t=await this.getIdForPath(e),n=void 0!==this.extraBlobs?this.extraBlobs.get(t):void 0;if(void 0!==n)return n;const r=this.storage.readBlob(t);return r.catch(e=>this.logger.sendErrorEvent({eventName:"ChannelStorageBlobError"},e)),r}async list(e){var t;let n=this.tree;const r=Object(x.a)(e);for(;void 0!==n&&r.length>0;){const e=r.shift();n=n.trees[e]}if(void 0===n||0!==r.length)throw new Error("path does not exist");return Object.keys(null!==(t=null==n?void 0:n.blobs)&&void 0!==t?t:{})}async getIdForPath(e){return this.flattenedTree[e]}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */function O(e,t,n,r,i,s,a,o,c){return{deltaConnection:new C(e,t,(e,t)=>n(e,t),r,i),objectStorage:new E(o,s,a,c)}}function T(e,t=!1,n=!1){const r=e.getAttachSummary(t,n);return Object(b.b)(r,".attributes",JSON.stringify(e.attributes)),r}async function P(e,t=!1,n=!1){const r=await e.summarize(t,n);return Object(b.b)(r,".attributes",JSON.stringify(e.attributes)),r}var A=n(99),N=n.n(A),I=n(309),k=n(188);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class D{constructor(e,t,n,r){this.id=e,this.registry=t,this.runtime=n,this.servicesGetter=r,this.globallyVisible=!1,this.pending=[]}async getChannel(){return Object(u.a)(void 0!==this.channel,519),this.channel}get isLoaded(){return void 0!==this.channel}setConnectionState(e,t){this.globallyVisible&&this.isLoaded&&this.servicesGetter().value.deltaConnection.setConnectionState(e)}processOp(e,t,n){Object(u.a)(this.globallyVisible,723),this.isLoaded?this.servicesGetter().value.deltaConnection.process(e,t,n):(Object(u.a)(!1===t,393),this.pending.push(e))}reSubmit(e,t){Object(u.a)(this.isLoaded,394),Object(u.a)(this.globallyVisible,724),this.servicesGetter().value.deltaConnection.reSubmit(e,t)}applyStashedOp(){throw new Error("no stashed ops on local channel")}async summarize(e=!1,t=!1){return Object(u.a)(this.isLoaded&&void 0!==this.channel,396),P(this.channel,e,t)}getAttachSummary(){return Object(u.a)(this.isLoaded&&void 0!==this.channel,397),T(this.channel,!0,!1)}makeVisible(){if(this.globallyVisible)throw new Error("Channel is already globally visible");this.isLoaded&&(Object(u.a)(!!this.channel,402),this.channel.connect(this.servicesGetter().value)),this.globallyVisible=!0}async getGCData(e=!1){return Object(u.a)(this.isLoaded&&void 0!==this.channel,403),this.channel.getGCData(e)}updateUsedRoutes(e,t){}}class F extends D{constructor(e,t,n,r,i,s,a,o,c,u){super(e,t,n,()=>this.services),this.snapshotTree=u;const h=new Map,l=N()(this.snapshotTree);this.isSnapshotInOldFormatAndCollectBlobs(l,h)&&this.sanitizeSnapshot(l),this.services=new k.a(()=>O(this.id,r.connected,a,this.dirtyFn,c,i,s,l,h)),this.dirtyFn=()=>{o(e)}}async getChannel(){return void 0===this.channel&&(this.channel=await this.loadChannel().catch(e=>{throw a.c.wrapIfUnrecognized(e,"rehydratedLocalChannelContextFailedToLoadChannel",void 0)})),this.channel}async loadChannel(){Object(u.a)(!this.isLoaded,398),Object(u.a)(await this.services.value.objectStorage.contains(".attributes"),400);const e=await Object(I.a)(this.services.value.objectStorage,".attributes");if(Object(u.a)(void 0===this.factory,520),this.factory=this.registry.get(e.type),void 0===this.factory)throw new Error(`Channel Factory ${e.type} not registered`);const t=await this.factory.load(this.runtime,this.id,this.services.value,e);this.channel=t;for(const e of this.pending)this.services.value.deltaConnection.process(e,!1,void 0);return this.channel}isSnapshotInOldFormatAndCollectBlobs(e,t){let n=!1;const r=e.blobsContents;Object.entries(r).forEach(([r,i])=>{t.set(r,i),void 0!==e.blobs[r]&&(n=!0)});for(const r of Object.values(e.trees))n=n||this.isSnapshotInOldFormatAndCollectBlobs(r,t);return n}sanitizeSnapshot(e){const t=new Map(Object.entries(e.blobs));for(const[n,r]of t.entries()){void 0===t.get(r)&&delete e.blobs[n]}for(const t of Object.values(e.trees))this.sanitizeSnapshot(t)}}class j extends D{constructor(e,t,n,r,i,s,a,o,c,h){if(super(e,t,r,()=>this.services),Object(u.a)(void 0!==n,521),this.factory=t.get(n),void 0===this.factory)throw new Error(`Channel Factory ${n} not registered`);this.channel=this.factory.create(r,e),this.services=new k.a(()=>O(this.id,i.connected,o,this.dirtyFn,h,s,a)),this.dirtyFn=()=>{c(e)}}}var R,M=n(259);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class _{constructor(e,t,n,r,i,s,a,o,c,u,h,d,m){this.runtime=e,this.dataStoreContext=t,this.id=a,this.registry=c,this.attachMessageType=m,this.isLoaded=!1,this.pending=[],this.subLogger=l.a.create(this.runtime.logger,"RemoteChannelContext"),this.services=O(this.id,this.dataStoreContext.connected,r,()=>i(this.id),s,n,this.subLogger,o,u);this.summarizerNode=h(async(e,t)=>this.summarizeInternal(e,t),async e=>this.getGCDataInternal(e),async()=>d()),this.thresholdOpsCounter=new M.a(_.pendingOpsCountThreshold,this.subLogger)}getChannel(){return void 0===this.channelP&&(this.channelP=this.loadChannel()),this.channelP}setConnectionState(e,t){this.isLoaded&&this.services.deltaConnection.setConnectionState(e)}applyStashedOp(e){return Object(u.a)(this.isLoaded,404),this.services.deltaConnection.applyStashedOp(e)}processOp(e,t,n){this.summarizerNode.invalidate(e.sequenceNumber),this.isLoaded?this.services.deltaConnection.process(e,t,n):(Object(u.a)(!t,405),Object(u.a)(void 0!==this.pending,574),this.pending.push(e),this.thresholdOpsCounter.sendIfMultiple("StorePendingOps",this.pending.length))}reSubmit(e,t){Object(u.a)(this.isLoaded,406),this.services.deltaConnection.reSubmit(e,t)}async summarize(e=!1,t=!0){return this.summarizerNode.summarize(e,t)}async summarizeInternal(e,t){const n=await this.getChannel(),r=await P(n,e,t);return Object.assign(Object.assign({},r),{id:this.id})}async loadChannel(){let e,t;if(Object(u.a)(!this.isLoaded,407),await this.services.objectStorage.contains(".attributes")&&(e=await Object(I.a)(this.services.objectStorage,".attributes")),void 0===e){if(void 0===this.attachMessageType)throw new a.b("channelTypeNotAvailable",{channelId:{value:this.id,tag:l.e.PackageData},dataStoreId:{value:this.dataStoreContext.id,tag:l.e.PackageData},dataStorePackagePath:this.dataStoreContext.packagePath.join("/")});if(t=this.registry.get(this.attachMessageType),void 0===t)throw new a.b("channelFactoryNotRegisteredForAttachMessageType",{channelId:{value:this.id,tag:l.e.PackageData},dataStoreId:{value:this.dataStoreContext.id,tag:l.e.PackageData},dataStorePackagePath:this.dataStoreContext.packagePath.join("/"),channelFactoryType:this.attachMessageType});e=t.attributes}else if(t=this.registry.get(e.type),void 0===t)throw new a.b("channelFactoryNotRegisteredForGivenType",{channelId:{value:this.id,tag:l.e.PackageData},dataStoreId:{value:this.dataStoreContext.id,tag:l.e.PackageData},dataStorePackagePath:this.dataStoreContext.packagePath.join("/"),channelFactoryType:e.type});void 0!==e.snapshotFormatVersion&&e.snapshotFormatVersion!==t.attributes.snapshotFormatVersion&&this.subLogger.sendTelemetryEvent({eventName:"ChannelAttributesVersionMismatch",channelType:{value:e.type,tag:l.e.PackageData},channelSnapshotVersion:{value:`${e.snapshotFormatVersion}@${e.packageVersion}`,tag:l.e.PackageData},channelCodeVersion:{value:`${t.attributes.snapshotFormatVersion}@${t.attributes.packageVersion}`,tag:l.e.PackageData}});const n=await t.load(this.runtime,this.id,this.services,e);Object(u.a)(void 0!==this.pending,575);for(const e of this.pending)this.services.deltaConnection.process(e,!1,void 0);return this.thresholdOpsCounter.send("ProcessPendingOps",this.pending.length),this.channel=n,this.pending=void 0,this.isLoaded=!0,this.services.deltaConnection.setConnectionState(this.dataStoreContext.connected),this.channel}async getGCData(e=!1){return this.summarizerNode.getGCData(e)}async getGCDataInternal(e=!1){return(await this.getChannel()).getGCData(e)}updateUsedRoutes(e,t){this.summarizerNode.updateUsedRoutes([""])}}_.pendingOpsCountThreshold=1e3,function(e){e.Attach="attach",e.ChannelOp="op"}(R||(R={}));class B extends o.a{constructor(e,t,n){super(),this.dataStoreContext=e,this.sharedObjectRegistry=t,this._disposed=!1,this.contexts=new Map,this.contextsDeferred=new Map,this.pendingAttach=new Map,this.deferredAttached=new c.a,this.localChannelContextQueue=new Map,this.notBoundedChannelContextSet=new Set,this.pendingHandlesToMakeVisible=new Set,this.logger=l.a.create(e.logger,"FluidDataStoreRuntime",{all:{dataStoreId:Object(w.a)()}}),this.id=e.id,this.options=e.options,this.deltaManager=e.deltaManager,this.quorum=e.getQuorum(),this.audience=e.getAudience();const r=e.baseSnapshot;this.channelsBaseGCDetails=new c.b(async()=>{var e,t,n;const r=await(null!==(n=null===(t=(e=this.dataStoreContext).getBaseGCDetails)||void 0===t?void 0:t.call(e))&&void 0!==n?n:this.dataStoreContext.getInitialGCSummaryDetails());return Object(S.g)(r)}),void 0!==(null==r?void 0:r.trees)&&Object.keys(r.trees).forEach(t=>{if("_search"===t)return;let n;e.isLocalDataStore?(n=new F(t,this.sharedObjectRegistry,this,this.dataStoreContext,this.dataStoreContext.storage,this.logger,(e,n)=>this.submitChannelOp(t,e,n),e=>this.setChannelDirty(e),(e,t)=>this.addedGCOutboundReference(e,t),r.trees[t]),e.attachState!==s.a.Detached?n.makeVisible():this.localChannelContextQueue.set(t,n)):n=new _(this,e,e.storage,(e,n)=>this.submitChannelOp(t,e,n),e=>this.setChannelDirty(e),(e,t)=>this.addedGCOutboundReference(e,t),t,r.trees[t],this.sharedObjectRegistry,void 0,this.dataStoreContext.getCreateChildSummarizerNodeFn(t,{type:f.CreateSummarizerNodeSource.FromSummary}),async()=>this.getChannelBaseGCDetails(t));const i=new c.a;i.resolve(n),this.contexts.set(t,n),this.contextsDeferred.set(t,i)}),this.attachListener(),this.bindState=n?s.b.Bound:s.b.NotBound,this._attachState=e.attachState,this.visibilityState=n?e.attachState===s.a.Detached?f.VisibilityState.LocallyVisible:f.VisibilityState.GloballyVisible:f.VisibilityState.NotVisible,n&&this.deferredAttached.resolve()}static load(e,t,n){return new B(e,t,n)}get IFluidRouter(){return this}get connected(){return this.dataStoreContext.connected}get clientId(){return this.dataStoreContext.clientId}get clientDetails(){return this.dataStoreContext.clientDetails}get isAttached(){return this.attachState!==s.a.Detached}get attachState(){return this._attachState}get absolutePath(){return Object(g.a)(this.id,this.routeContext)}get routeContext(){return this.dataStoreContext.IFluidHandleContext}get IFluidHandleContext(){return this}get rootRoutingContext(){return this}get channelsRoutingContext(){return this}get objectsRoutingContext(){return this}get disposed(){return this._disposed}dispose(){this._disposed||(this._disposed=!0,this.emit("dispose"),this.removeAllListeners())}async resolveHandle(e){return this.request(e)}async request(e){try{const t=y.a.create(e),n=t.pathParts[0];if("_channels"===n||"_custom"===n)return this.request(t.createSubRequest(1));if(this.contextsDeferred.has(n)&&t.isLeaf(1))try{const e=await this.contextsDeferred.get(n).promise;return{mimeType:"fluid/object",status:200,value:await e.getChannel()}}catch(t){return this.logger.sendErrorEvent({eventName:"GetChannelFailedInRequest"},t),Object(v.c)(500,"Failed to get Channel: "+t,e)}return Object(v.a)(e)}catch(e){return Object(v.d)(e)}}async getChannel(e){this.verifyNotClosed(),this.contextsDeferred.has(e)||this.contextsDeferred.set(e,new c.a);const t=await this.contextsDeferred.get(e).promise;return await t.getChannel()}createChannel(e=Object(w.a)(),t){this.verifyNotClosed(),Object(u.a)(!this.contexts.has(e),377),this.notBoundedChannelContextSet.add(e);const n=new j(e,this.sharedObjectRegistry,t,this,this.dataStoreContext,this.dataStoreContext.storage,this.logger,(t,n)=>this.submitChannelOp(e,t,n),e=>this.setChannelDirty(e),(e,t)=>this.addedGCOutboundReference(e,t));if(this.contexts.set(e,n),this.contextsDeferred.has(e))this.contextsDeferred.get(e).resolve(n);else{const t=new c.a;t.resolve(n),this.contextsDeferred.set(e,t)}return Object(u.a)(!!n.channel,378),n.channel}bindChannel(e){Object(u.a)(this.notBoundedChannelContextSet.has(e.id),379),this.notBoundedChannelContextSet.delete(e.id),this.isAttached?this.attachChannel(e):this.pendingHandlesToMakeVisible.has(e.handle)||(this.bind(e.handle),this.localChannelContextQueue.has(e.id)||this.localChannelContextQueue.set(e.id,this.contexts.get(e.id)))}makeVisibleAndAttachGraph(){this.visibilityState===f.VisibilityState.NotVisible&&(this.visibilityState=f.VisibilityState.LocallyVisible,this.pendingHandlesToMakeVisible.forEach(e=>{e.attachGraph()}),this.pendingHandlesToMakeVisible.clear(),this.bindToContext())}attachGraph(){this.makeVisibleAndAttachGraph()}bindToContext(){this.bindState===s.b.NotBound&&(this.bindState=s.b.Binding,this.dataStoreContext.bindToContext(),this.bindState=s.b.Bound)}bind(e){this.visibilityState===f.VisibilityState.NotVisible?this.pendingHandlesToMakeVisible.add(e):e.attachGraph()}setConnectionState(e,t){this.verifyNotClosed();for(const[,n]of this.contexts)n.setConnectionState(e,t);Object(d.c)(this.logger,this,e,t)}getQuorum(){return this.quorum}getAudience(){return this.audience}async uploadBlob(e){return this.verifyNotClosed(),this.dataStoreContext.uploadBlob(e)}process(e,t,n){this.verifyNotClosed();try{switch(e.type){case R.Attach:{const n=e.contents,r=n.id;if(t)Object(u.a)(this.pendingAttach.has(r),380),this.pendingAttach.delete(r);else{Object(u.a)(!this.contexts.has(r),381);const t=new Map,i=Object(m.a)(n.snapshot.entries,t),s=new _(this,this.dataStoreContext,this.dataStoreContext.storage,(e,t)=>this.submitChannelOp(r,e,t),e=>this.setChannelDirty(e),(e,t)=>this.addedGCOutboundReference(e,t),r,i,this.sharedObjectRegistry,t,this.dataStoreContext.getCreateChildSummarizerNodeFn(r,{type:f.CreateSummarizerNodeSource.FromAttach,sequenceNumber:e.sequenceNumber,snapshot:n.snapshot}),async()=>this.getChannelBaseGCDetails(r),n.type);if(this.contexts.set(r,s),this.contextsDeferred.has(r))this.contextsDeferred.get(r).resolve(s);else{const e=new c.a;e.resolve(s),this.contextsDeferred.set(r,e)}}break}case R.ChannelOp:this.processChannelOp(e,t,n)}this.emit("op",e)}catch(t){throw a.c.wrapIfUnrecognized(t,"fluidDataStoreRuntimeFailedToProcessMessage",e)}}processSignal(e,t){this.emit("signal",e,t)}isChannelAttached(e){return!this.notBoundedChannelContextSet.has(e)&&!this.localChannelContextQueue.has(e)&&!this.pendingAttach.has(e)}getOutboundRoutes(){const e=[];for(const[t]of this.contexts)e.push(`${this.absolutePath}/${t}`);return e}updateGCNodes(e){e.addRouteToAllNodes(this.absolutePath),e.addNode("/",this.getOutboundRoutes())}async getGCData(e=!1){const t=new S.a;return await Promise.all(Array.from(this.contexts).filter(([e,t])=>this.isChannelAttached(e)).map(async([n,r])=>{const i=await r.getGCData(e);t.prefixAndAddNodes(n,i.gcNodes)})),this.updateGCNodes(t),t.getGCData()}updateUsedRoutes(e,t){var n;const r=Object(S.h)(e);for(const[e]of r)Object(u.a)(this.contexts.has(e),382);for(const[e,i]of this.contexts)i.updateUsedRoutes(null!==(n=r.get(e))&&void 0!==n?n:[],t)}addedGCOutboundReference(e,t){var n,r;null===(r=(n=this.dataStoreContext).addedGCOutboundReference)||void 0===r||r.call(n,e,t)}async getChannelBaseGCDetails(e){var t;let n=(await this.channelsBaseGCDetails).get(e);return void 0===n?n={}:void 0!==(null===(t=n.gcData)||void 0===t?void 0:t.gcNodes)&&Object(S.e)(n.gcData.gcNodes,this.absolutePath),void 0!==n.usedRoutes&&0!==n.usedRoutes.length||(n.usedRoutes=[""]),n}async summarize(e=!1,t=!0){const n=new b.a;return await Promise.all(Array.from(this.contexts).filter(([e,t])=>{const n=this.isChannelAttached(e);return Object(u.a)(n,383),n}).map(async([r,i])=>{const s=await i.summarize(e,t);n.addWithStats(r,s)})),n.getSummaryTree()}getAttachSummary(){this.attachGraph();const e=new b.a;for(const[t,n]of this.contexts){if(!(n instanceof D))throw new Error("Should only be called with local channel handles");if(!this.notBoundedChannelContextSet.has(t)){let r;if(n.isLoaded){const e=n.getAttachSummary();Object(u.a)(e.summary.type===p.a.Tree,384),r={stats:e.stats,summary:e.summary}}else Object(u.a)(!!this.dataStoreContext.baseSnapshot,385),r=Object(b.f)(this.dataStoreContext.baseSnapshot.trees[t]);e.addWithStats(t,r)}}return e.getSummaryTree()}submitMessage(e,t,n){this.submit(e,t,n)}submitSignal(e,t){return this.verifyNotClosed(),this.dataStoreContext.submitSignal(e,t)}async waitAttached(){return this.deferredAttached.promise}attachChannel(e){if(this.verifyNotClosed(),e.handle.isAttached)return;e.handle.attachGraph(),Object(u.a)(this.isAttached,386),Object(u.a)(this.visibilityState===f.VisibilityState.GloballyVisible,720);const t=T(e,!0,!1),n=Object(b.g)(t.summary),r={id:e.id,snapshot:n,type:e.attributes.type};this.pendingAttach.set(e.id,r),this.submit(R.Attach,r);this.contexts.get(e.id).makeVisible()}submitChannelOp(e,t,n){const r={address:e,contents:t};this.submit(R.ChannelOp,r,n)}submit(e,t,n){this.verifyNotClosed(),this.dataStoreContext.submitMessage(e,t,n)}reSubmit(e,t,n){switch(this.verifyNotClosed(),e){case R.ChannelOp:{const e=t,r=this.contexts.get(e.address);Object(u.a)(!!r,387),r.reSubmit(e.contents,n);break}case R.Attach:this.submit(e,t,n);break;default:Object(h.a)(e)}}async applyStashedOp(e){const t=e,n=this.contexts.get(t.address);return Object(u.a)(!!n,388),await n.getChannel(),n.applyStashedOp(t.contents)}setChannelDirty(e){this.verifyNotClosed(),this.dataStoreContext.setChannelDirty(e)}processChannelOp(e,t,n){this.verifyNotClosed();const r=e.contents,i=Object.assign(Object.assign({},e),{contents:r.contents}),s=this.contexts.get(r.address);return Object(u.a)(!!s,389),s.processOp(i,t,n),s}attachListener(){this.setMaxListeners(Number.MAX_SAFE_INTEGER),this.dataStoreContext.once("attaching",()=>{this.attachGraph(),this._attachState=s.a.Attaching,Object(u.a)(this.visibilityState===f.VisibilityState.LocallyVisible,721),this.visibilityState=f.VisibilityState.GloballyVisible,this.localChannelContextQueue.forEach(e=>{e.makeVisible()}),this.localChannelContextQueue.clear(),this.deferredAttached.resolve(),this.emit("attaching")}),this.dataStoreContext.once("attached",()=>{Object(u.a)(this.visibilityState===f.VisibilityState.GloballyVisible,722),this._attachState=s.a.Attached,this.emit("attached")})}verifyNotClosed(){if(this._disposed)throw new Error("Runtime is closed")}}const L=(e,t=B)=>class extends t{async request(t){const n=await super.request(t);return 404===n.status?e(t,this):n}};var q=n(305);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class z{constructor(...e){this.providers=new Map,this.parents=e.filter(e=>void 0!==e)}get IFluidDependencySynthesizer(){return this}register(e,t){if(this.providers.has(e))throw new Error(`Attempting to register a provider of type ${e} that already exists`);this.providers.set(e,t)}unregister(e){this.providers.has(e)&&this.providers.delete(e)}synthesize(e,t){const n={};return this.generateRequired(n,t),this.generateOptional(n,e),Object.defineProperty(n,"IFluidDependencySynthesizer",{get:()=>this}),n}has(e,t){return!!this.providers.has(e)||!0!==t&&this.parents.some(t=>t.has(e))}getProvider(e){if(this.has(e)){if(this.providers.has(e))return this.providers.get(e);for(const t of this.parents){if(t instanceof z)return t.getProvider(e);{const n=t;if(void 0!==(null==n?void 0:n.getProvider))return n.getProvider(e)}}}}generateRequired(e,t){if(void 0!==t)for(const n of Object.keys(t)){const t=this.resolveProvider(n);if(void 0===t)throw new Error("Object attempted to be created without registered required provider "+n);Object.defineProperty(e,n,t)}}generateOptional(e,t){var n;if(void 0!==t)for(const r of Object.keys(t)){const t=null!==(n=this.resolveProvider(r))&&void 0!==n?n:{get:async()=>{}};Object.defineProperty(e,r,t)}}resolveProvider(e){const t=this.providers.get(e);if(void 0!==t)return"function"==typeof t?{get(){if(t&&"function"==typeof t)return Promise.resolve(this.IFluidDependencySynthesizer).then(async e=>t(e)).then(t=>null==t?void 0:t[e])}}:{get(){if(t)return Promise.resolve(t).then(t=>{if(t)return t[e]})}};for(const t of this.parents){const n={[e]:e},r=t.synthesize(n,{}),i=Object.getOwnPropertyDescriptor(r,e);if(void 0!==i)return i}}}var H=n(261),U=n(595);class V{constructor(e,t){this.absolutePath=e,this.runtime=t,this.isAttached=!0}get IFluidHandle(){return this}attachGraph(){Object(u.a)(!1,202)}async get(){const e=await this.runtime.IFluidHandleContext.resolveHandle({url:this.absolutePath});if(200===e.status&&"fluid/object"===e.mimeType)return e.value;throw new Error("Failed to resolve container path "+this.absolutePath)}bind(e){throw new Error("Cannot bind to LegacyUriHandle")}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
const G="_services";class W{constructor(e){this.runtime=e}get IFluidRouter(){return this}async request(e){return{status:200,mimeType:"fluid/object",value:this}}}class K{constructor(e){this.serviceFn=e}async getService(e){return this.service||(this.service=this.serviceFn(e)),this.service}}const $=e=>{const t=new Map;return new Map(e).forEach((e,n)=>{t.set(n,new K(e))}),async(e,n)=>{if(e.pathParts[0]!==G)return;if(e.pathParts.length<2)return Object(v.c)(400,"request did not specify a service to route to",e);const r=t.get(e.pathParts[1]);if(!r)return Object(v.a)(e);const i=await r.getService(n),s=i.IFluidRouter,a=e.createSubRequest(2);return s?s.request(a):e.isLeaf(2)?{status:200,mimeType:"fluid/object",value:i}:Object(v.c)(400,"request sub-url for service that doesn't support routing",e)}};
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class J{constructor(){this.handlers=[]}pushHandler(...e){void 0!==e&&this.handlers.push(...e)}async handleRequest(e,t){const n=y.a.create(e);for(const e of this.handlers){const r=await e(n,t);if(void 0!==r)return r}return Object(v.a)(e)}}function Q(...e){const t=new J;return t.pushHandler(...e),async(e,n)=>t.handleRequest(e,n)}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */const Y=(e,t)=>{const n=Q(...t);return async(t,r)=>{var i;const s=!0===(null===(i=t.headers)||void 0===i?void 0:i.mountableView);let a=t;if(s){const e=Object.assign({},t.headers);delete e.mountableView,a={url:t.url,headers:e}}const o=await n(a,r);return s&&200===o.status&&e.canMount(o.value)?{status:200,mimeType:"fluid/object",value:new e(o.value)}:o}},X=e=>async(t,n)=>{const r=y.a.create(t);if(0===r.pathParts.length)return n.IFluidHandleContext.resolveHandle({url:`/${e}${r.query}`,headers:t.headers})};function Z(e,t){return""===t.url||"/"===t.url||t.url.startsWith("/?")?{mimeType:"fluid/object",status:200,value:e}:Object(v.a)(t)}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class ee extends H.a{constructor(e){super(),this._disposed=!1,this.runtime=e.runtime,this.context=e.context,this.providers=e.providers,this.initProps=e.initProps,Object(u.a)(void 0===this.runtime._dataObject,189),this.runtime._dataObject=this,this.innerHandle=new U.a(this,"",this.runtime.objectsRoutingContext),this.runtime.once("dispose",()=>{this._disposed=!0,this.dispose()})}get disposed(){return this._disposed}get id(){return this.runtime.id}get IFluidRouter(){return this}get IFluidLoadable(){return this}get IFluidHandle(){return this.innerHandle}get handle(){return this.innerHandle}static async getDataObject(e){const t=e._dataObject;return Object(u.a)(void 0!==t,188),await t.finishInitialization(!0),t}async request(e){return Z(this,e)}async finishInitialization(e){return void 0!==this.initializeP||(this.initializeP=this.initializeInternal(e)),this.initializeP}async initializeInternal(e){var t;await this.preInitialize(),e?(Object(u.a)(void 0===this.initProps,190),await this.initializingFromExisting()):await this.initializingFirstTime(null!==(t=this.context.createProps)&&void 0!==t?t:this.initProps),await this.hasInitialized()}async getFluidObjectFromDirectory(e,t,n){const r=n?n(e,t):t.get(e),i=null==r?void 0:r.IFluidHandle;if(i)return i.get()}async getService(e){return(t=`/${G}/${e}`,n=this.context.containerRuntime,new V(t,n)).get();var t,n}async preInitialize(){}async initializingFirstTime(e){}async initializingFromExisting(){}async hasInitialized(){}dispose(){super.dispose()}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */async function te(e,t,n,r,i,s,a){let o=i;o=L(async(e,t)=>(await ee.getDataObject(t)).request(e),o);const c=new o(t,n,s),u=t.scope,h=new e({runtime:c,context:t,providers:new z(u.IFluidDependencySynthesizer).synthesize(r,{}),initProps:a});return s||await h.finishInitialization(s),{instance:h,runtime:c}}class ne{constructor(e,t,n,r,i,s=B){if(this.type=e,this.ctor=t,this.optionalProviders=r,this.runtimeClass=s,""===this.type)throw new Error("undefined type member");void 0!==i&&(this.registry=new q.a(i)),this.sharedObjectRegistry=new Map(n.map(e=>[e.type,e]))}get IFluidDataStoreFactory(){return this}get IFluidDataStoreRegistry(){return this.registry}get registryEntry(){return[this.type,Promise.resolve(this)]}async instantiateDataStore(e,t){const{runtime:n}=await te(this.ctor,e,this.sharedObjectRegistry,this.optionalProviders,this.runtimeClass,t);return n}async createChildInstance(e,t){return this.createNonRootInstanceCore(e.containerRuntime,[...e.packagePath,this.type],t)}async createPeerInstance(e,t){return this.createNonRootInstanceCore(e.containerRuntime,e.packagePath,t)}async createInstance(e,t){return this.createNonRootInstanceCore(e,[this.type],t)}async createRootInstance(e,t,n){const r=t.createDetachedRootDataStore([this.type],e);return this.createInstanceCore(r,n)}async createNonRootInstanceCore(e,t,n){const r=e.createDetachedDataStore(t);return this.createInstanceCore(r,n)}async createInstanceCore(e,t){const{instance:n,runtime:r}=await te(this.ctor,e,this.sharedObjectRegistry,this.optionalProviders,this.runtimeClass,!1,t);return await e.attachRuntime(this,r),n}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class re extends ne{constructor(e,t,n=[],s,a,o=B){const c=[...n];n.find(e=>e.type===r.a.Type)||c.push(r.b.getFactory()),n.find(e=>e.type===i.a.Type)||c.push(i.b.getFactory()),super(e,t,c,s,a,o)}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class ie extends ee{constructor(){super(...arguments),this.rootDirectoryId="root"}async request(e){const t=y.a.create(e);if("bigBlobs"===t.pathParts[0]){const e=this.root.get(t.pathParts.join("/"));return void 0===e?Object(v.a)(t):{mimeType:"fluid/object",status:200,value:e}}return super.request(t)}get root(){if(!this.internalRoot)throw new Error(this.getUninitializedErrorString("root"));return this.internalRoot}async initializeInternal(e){e?(this.internalRoot=await this.runtime.getChannel(this.rootDirectoryId),this.internalRoot.attributes.type===i.a.Type&&this.runtime.logger.send({category:"generic",eventName:"MapDataObject",message:"Legacy document, SharedMap is masquerading as SharedDirectory in DataObject"})):(this.internalRoot=r.b.create(this.runtime,this.rootDirectoryId),this.internalRoot.bindToContext()),await super.initializeInternal(e)}getUninitializedErrorString(e){return e+" must be initialized before being accessed."}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */var se=n(596),ae=n(307),oe=n(287);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class ce extends oe.a{constructor(e,t,n=[],r){super(),this.registryEntries=e,this.dependencyContainer=t,this.requestHandlers=n,this.runtimeOptions=r,this.registry=new q.a(e)}get IFluidDataStoreRegistry(){return this.registry}async instantiateFirstTime(e){await this.containerInitializingFirstTime(e),await this.containerHasInitialized(e)}async instantiateFromExisting(e){await this.containerHasInitialized(e)}async preInitialize(e,t){const n=e.scope,r=new z(this.dependencyContainer,n.IFluidDependencySynthesizer);n.IFluidDependencySynthesizer=r;const i=await se.b.load(e,this.registryEntries,Q(...this.requestHandlers),this.runtimeOptions,n,t);return r.register(ae.IContainerRuntime,i),i}async containerInitializingFirstTime(e){}async containerHasInitialized(e){}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class ue extends ce{constructor(e,t,n,r=[],i){super(t,n,[X("default"),...r],i),this.defaultFactory=e}async containerInitializingFirstTime(e){await e.createRootDataStore(this.defaultFactory.type,"default")}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
async function he(e){if(e.attachState!==s.a.Attached)return new Promise(t=>{e.once("attached",()=>{Promise.resolve().then(()=>t()).catch(()=>{})})})}async function le(e){const t=await e.request({url:"/"});if(200!==t.status||"fluid/object"!==t.mimeType)throw new Error('Unable to retrieve Fluid object at URL: "/"');if(void 0===t.value)throw new Error('Empty response from URL: "/"');return t.value}async function de(e,t){const n="/"+e,r=await t.request({url:n});if(200!==r.status||"fluid/object"!==r.mimeType)throw new Error(`Unable to retrieve Fluid object with ID: "${e}" from URL: "${n}"`);if(void 0===r.value)throw new Error(`Empty response for ID: "${e}" from URL: "${n}"`);return r.value}async function me(e,t){const n=await t.request({url:e});if(200!==n.status||"fluid/object"!==n.mimeType)throw new Error(`Unable to retrieve Fluid object with from URL: "${e}"`);if(void 0===n.value)throw new Error(`Empty response for from URL: "${e}"`);return n.value}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */ue.defaultDataStoreId="default"},function(e,t,n){"use strict";n.r(t),n.d(t,"PointerEventToSmoothedStrokePathTransform",(function(){return O}));var r=n(12),i=n(45);function s(e){return{x:e.offsetX,y:e.offsetY,pressure:e.pressure,tiltX:e.tiltX,tiltY:e.tiltY,timestamp:e.timeStamp}}function a(e){return{x:e.offsetX,y:e.offsetY,pressure:i.a,tiltX:e.tiltX,tiltY:e.tiltY,timestamp:e.timeStamp}}class o{onPointerDown(e){this.output.beginStroke(a(e))}onPointerMove(e){this.output.addPoint(a(e))}onPointerUp(e){this.output.endStroke(a(e))}}class c{onPointerDown(e){this.output.beginStroke(s(e))}onPointerMove(e){this.output.addPoint(s(e))}onPointerUp(e){this.output.endStroke(s(e))}}var u=n(194);class h{beginStroke(e){this.lastPoint=e,this.output.beginStroke(e)}addPoint(e){this.lastPoint=e,this.output.addPoint(e)}endStroke(e){this.lastPoint=e,this.output.endStroke(e)}}class l{beginStroke(e){this.output.beginStroke(e),this.point=e}addPoint(e){this.point.x===e.x&&this.point.y===e.y||(this.output.addPoint(e),this.point=e)}endStroke(e){this.output.endStroke(e)}}class d{beginStroke(e){this.out1={x:e.x,y:e.y},this.out2=this.out1,this.output.beginStroke(e)}addPoint(e){this.output.addPoint(this.filter(e))}endStroke(e){this.output.endStroke(this.filter(e))}filter(e){const t={x:m(e.x,this.out1.x,this.out2.x),y:m(e.y,this.out1.y,this.out2.y)};return this.out2=this.out1,this.out1=t,{x:t.x,y:t.y,pressure:e.pressure,tiltX:e.tiltX,tiltY:e.tiltY,timestamp:e.timestamp}}}function m(e,t,n){return(1-1.33- -.5)*e+1.33*t+-.5*n}class p{constructor(){this.lastPressure=i.a}beginStroke(e){this.output.beginStroke(e),this.lastPressure=e.pressure}addPoint(e){this.output.addPoint(e),this.lastPressure=e.pressure}endStroke(e){this.output.endStroke(0===e.pressure?{x:e.x,y:e.y,pressure:this.lastPressure,tiltX:e.tiltX,tiltY:e.tiltY,timestamp:e.timestamp}:e)}}class f{constructor(e){this.deduper=new l,this.endStrokePressure=new p,this.jitter=new d,e?(this.preJitterLastPointExtractor=new h,Object(r.chain4)(this.deduper,this.endStrokePressure,this.preJitterLastPointExtractor,this.jitter)):Object(r.chain3)(this.deduper,this.endStrokePressure,this.jitter)}beginStroke(e){Object(r.chain2)(this.jitter,this.output),this.deduper.beginStroke(e)}addPoint(e){this.deduper.addPoint(e)}endStroke(e){this.deduper.endStroke(e)}}function g(e,t,n,r){const i=(e+t)/2,s=(t+n)/2,a=(n+r)/2,o=(i+s)/2,c=(s+a)/2;return[e,i,o,(o+c)/2,c,a,r]}function y(e,t,n,r){return[(n-e)/6+t,(t-r)/6+n]}class v{constructor(){this.began=!1}beginStroke(e){this.output.beginStroke(e),this.cp=[e,e,e,e],this.began=!0}addPoint(e){const[t,n]=this.push(e);this.began?this.began=!1:this.output.addSegment(t,n,this.cp[2])}endStroke(e){this.addPoint(e);const[t,n]=this.push(e);this.output.endStroke(t,n,this.cp[2])}push(e){return this.cp.shift(),this.cp.push(e),function(e,t,n,r){const[i,s]=y(e.x,t.x,n.x,r.x),[a,o]=y(e.y,t.y,n.y,r.y),[c,u]=b(t.pressure,n.pressure),[h,l]=b(t.tiltX,n.tiltX),[d,m]=b(t.tiltY,n.tiltY),[p,f]=b(t.timestamp,n.timestamp);return[{x:i,y:a,pressure:c,tiltX:h,tiltY:d,timestamp:p},{x:s,y:o,pressure:u,tiltX:l,tiltY:m,timestamp:f}]}(this.cp[0],this.cp[1],this.cp[2],this.cp[3])}}function b(e,t){const n=(t-e)/3;return[e+n,t-n]}class S{constructor(){this.deduperJitterTransform=new f(!1),this.fitter=new v,Object(r.chain2)(this.deduperJitterTransform,this.fitter)}beginStroke(e){Object(r.chain2)(this.fitter,this.output),this.deduperJitterTransform.beginStroke(e)}addPoint(e){this.deduperJitterTransform.addPoint(e)}endStroke(e){this.deduperJitterTransform.endStroke(e)}}function w(e,t){const n=function(e,t){return{x:e.x-t.x,y:e.y-t.y}}(e,t);return function(e,t){return e.x*t.x+e.y*t.y}(n,n)}class C{constructor(e){this.flatness=e*e}beginStroke(e){this.output.beginStroke(e),this.beginPoint=e}addSegment(e,t,n){x(this.beginPoint,e,t,n,this.flatness,this.output),this.output.addPoint(n),this.beginPoint=n}endStroke(e,t,n){x(this.beginPoint,e,t,n,this.flatness,this.output),this.output.endStroke(n)}}function x(e,t,n,r,i,s){const[a,o,c,u,h,l,d]=function(e,t,n,r){const[i,s,a,o,c,u,h]=g(e.x,t.x,n.x,r.x),[l,d,m,p,f,y,v]=g(e.y,t.y,n.y,r.y),[b,S,w,C,x,E,O]=g(e.pressure,t.pressure,n.pressure,r.pressure),[T,P,A,N,I,k,D]=g(e.tiltX,t.tiltX,n.tiltX,r.tiltX),[F,j,R,M,_,B,L]=g(e.tiltY,t.tiltY,n.tiltY,r.tiltY),[q,z,H,U,V,G,W]=g(e.timestamp,t.timestamp,n.timestamp,r.timestamp);return[{x:i,y:l,pressure:b,tiltX:T,tiltY:F,timestamp:q},{x:s,y:d,pressure:S,tiltX:P,tiltY:j,timestamp:z},{x:a,y:m,pressure:w,tiltX:A,tiltY:R,timestamp:H},{x:o,y:p,pressure:C,tiltX:N,tiltY:M,timestamp:U},{x:c,y:f,pressure:x,tiltX:I,tiltY:_,timestamp:V},{x:u,y:y,pressure:E,tiltX:k,tiltY:B,timestamp:G},{x:h,y:v,pressure:O,tiltX:D,tiltY:L,timestamp:W}]}(e,t,n,r);(function(e,t,n){const r=w(t,e);if(0===r)return w(n,e);const i=(n.x-t.x)*(t.y-e.y)-(t.x-e.x)*(n.y-t.y);return i*i/r})(a,d,u)<=i||(x(a,o,c,u,i,s),s.addPoint(u),x(u,h,l,d,i,s))}class E{constructor(e){this.bezierStrokePath=new S,this.flattener=new C(e),Object(r.chain2)(this.bezierStrokePath,this.flattener)}beginStroke(e){Object(r.chain2)(this.flattener,this.output),this.bezierStrokePath.beginStroke(e)}addPoint(e){this.bezierStrokePath.addPoint(e)}endStroke(e){this.bezierStrokePath.endStroke(e)}}class O{constructor(e){this.pointerToStroke=Object(u.isPressureInPointerEventSupported)()?new c:new o,this.strokeSmoothener=new E(e),Object(r.chain2)(this.pointerToStroke,this.strokeSmoothener)}onPointerDown(e){Object(r.chain2)(this.strokeSmoothener,this.output),this.pointerToStroke.onPointerDown(e)}onPointerMove(e){this.pointerToStroke.onPointerMove(e)}onPointerUp(e){this.pointerToStroke.onPointerUp(e)}}},function(e,t,n){"use strict";n.r(t),n.d(t,"PointerEventInputPipeline",(function(){return d}));var r=n(12),i=n(138);class s{constructor(){this.activePointerId=-1}onPointerDown(e){-1===this.activePointerId&&(this.activePointerId=e.pointerId,this.output.onPointerDown(e))}onPointerMove(e){this.activePointerId===e.pointerId&&this.output.onPointerMove(e)}onPointerUp(e){this.activePointerId===e.pointerId&&(this.output.onPointerUp(e),this.activePointerId=-1)}}class a{constructor(e){this.element=e}onPointerDown(e){try{this.element.setPointerCapture(e.pointerId)}finally{this.output.onPointerDown(e)}}onPointerMove(e){this.output.onPointerMove(e)}onPointerUp(e){this.output.onPointerUp(e)}}class o{onPointerDown(e){this.output.onPointerDown(e)}onPointerMove(e){(function(e){if("getCoalescedEvents"in e){const t=e.getCoalescedEvents();if(t.length>=1)return t}return[e]})(e).forEach(e=>{this.output.onPointerMove(e)})}onPointerUp(e){this.output.onPointerUp(e)}}class c{constructor(e){this.onPointerDown=e=>{this.output.onPointerDown(e)},this.onPointerMove=e=>{this.output.onPointerMove(e)},this.onPointerUp=e=>{this.output.onPointerUp(e)},this.element=e}activate(){this.element.addEventListener("pointerdown",this.onPointerDown),this.element.addEventListener("pointermove",this.onPointerMove),this.element.addEventListener("pointerup",this.onPointerUp)}deactivate(){this.element.removeEventListener("pointerdown",this.onPointerDown),this.element.removeEventListener("pointermove",this.onPointerMove),this.element.removeEventListener("pointerup",this.onPointerUp)}}var u=n(24);class h{constructor(e){this.element=e}activate(){this.element.addEventListener("touchmove",u.a)}deactivate(){this.element.removeEventListener("touchmove",u.a)}}class l{onPointerDown(e){this.output.onPointerDown(e),Object(u.b)(e)}onPointerMove(e){this.output.onPointerMove(e),Object(u.b)(e)}onPointerUp(e){this.output.onPointerUp(e),Object(u.b)(e)}}class d{constructor(e){Object(r.chain5)(this.head=new c(e),new a(e),new l,new s,this.tail=new o),Object(i.b)()&&(this.preventDefaultOnTouchMove=new h(e))}activate(){var e;this.head.activate(),null===(e=this.preventDefaultOnTouchMove)||void 0===e||e.activate()}deactivate(){var e;this.head.deactivate(),null===(e=this.preventDefaultOnTouchMove)||void 0===e||e.deactivate()}set output(e){this.tail.output=e}}},function(e,t,n){"use strict";n.r(t),n.d(t,"deserializeStrokeFromJSON",(function(){return l}));var r=n(56),i=n(65),s=n(45);const a={tiltX:0,tiltY:0};var o=n(136);class c{constructor(){this.id=o.a,this.drawingAttributes=r.a,this.points=[],this.pressures=[],this.tilts=[],this.timestamps=[]}streamChannels(e){this.points.forEach(t=>{e.addPoint(t)}),this.pressures.forEach(t=>{e.addPressure(t)}),this.tilts.forEach(t=>{e.addTilt(t)}),this.timestamps.forEach(t=>{e.addTimestamp(t)})}streamPoints(e){this.points.forEach((t,n)=>{e.add(this.getPoint(n))})}streamPath(e){if(!(this.points.length<2)){e.beginStroke(this.getPoint(0));for(let t=1;t<this.points.length-1;t+=1)e.addPoint(this.getPoint(t));e.endStroke(this.getPoint(this.points.length-1))}}stream(e){e.setDrawingAttributes(this.drawingAttributes),this.streamPath(e)}addPoint(e){this.points.push(e)}addPressure(e){this.pressures.push(e)}addTilt(e){this.tilts.push(e)}addTimestamp(e){this.timestamps.push(e)}getPressure(e){return this.pressures.length>e?this.pressures[e]:s.a}getTilt(e){return this.tilts.length>e?this.tilts[e]:a}getTimestamp(e){return this.timestamps.length>e?this.timestamps[e]:0}getPoint(e){return Object(i.b)(this.points[e],this.getPressure(e),this.getTilt(e),this.getTimestamp(e))}}var u=n(36);function h(e){return function(e){if(e.x.length!==e.y.length)throw new Error("X & Y don't match");if(0!==e.pressure.length&&e.pressure.length!==e.x.length)throw new Error("Pressure don't match X");if(e.tiltX.length!==e.tiltY.length)throw new Error("Tilt X & Y don't match");if(0!==e.tiltX.length&&e.tiltX.length!==e.x.length)throw new Error("Tilts don't match X.");if(0!==e.timestamp.length&&e.timestamp.length!==e.x.length)throw new Error("Timestamp don't match X")}(e),e.x.length===e.pressure.length&&e.x.length===e.tiltX.length&&e.x.length===e.timestamp.length?function(e){const t=new u.PointArrayStroke;return t.drawingAttributes=e.drawingAttributes,t.id=e.id,e.x.forEach((n,r)=>{t.add({x:n,y:e.y[r],pressure:e.pressure[r],tiltX:e.tiltX[r],tiltY:e.tiltY[r],timestamp:e.timestamp[r]})}),t}(e):function(e){const t=new c;return t.drawingAttributes=e.drawingAttributes,t.id=e.id,e.x.forEach((n,r)=>{t.addPoint({x:n,y:e.y[r]})}),e.pressure.forEach(e=>{t.addPressure(e)}),e.tiltX.forEach((n,r)=>{t.addTilt({tiltX:n,tiltY:e.tiltY[r]})}),e.timestamp.forEach(e=>{t.addTimestamp(e)}),t}(e)}function l(e){return h(JSON.parse(e))}},function(e,t,n){"use strict";n.r(t),n.d(t,"TouchEventInputPipeline",(function(){return u}));var r=n(12);class i{constructor(){this.activeIdentifier=-1}onTouchStart(e,t){-1===this.activeIdentifier&&(this.activeIdentifier=t.identifier,this.output.onTouchStart(e,t))}onTouchMove(e,t){this.activeIdentifier===t.identifier&&this.output.onTouchMove(e,t)}onTouchEnd(e,t){this.activeIdentifier===t.identifier&&(this.output.onTouchEnd(e,t),this.activeIdentifier=-1)}}class s{onTouchStart(e){for(let t=0;t<e.changedTouches.length;t+=1)this.output.onTouchStart(e,e.changedTouches[t])}onTouchMove(e){for(let t=0;t<e.changedTouches.length;t+=1)this.output.onTouchMove(e,e.changedTouches[t])}onTouchEnd(e){for(let t=0;t<e.changedTouches.length;t+=1)this.output.onTouchEnd(e,e.changedTouches[t])}}class a{constructor(e){this.onTouchStart=e=>{this.output.onTouchStart(e)},this.onTouchMove=e=>{this.output.onTouchMove(e)},this.onTouchEnd=e=>{this.output.onTouchEnd(e)},this.element=e}activate(){this.element.addEventListener("touchstart",this.onTouchStart),this.element.addEventListener("touchmove",this.onTouchMove),this.element.addEventListener("touchend",this.onTouchEnd)}deactivate(){this.element.removeEventListener("touchstart",this.onTouchStart),this.element.removeEventListener("touchmove",this.onTouchMove),this.element.removeEventListener("touchend",this.onTouchEnd)}}var o=n(24);class c{onTouchStart(e){this.output.onTouchStart(e),Object(o.b)(e)}onTouchMove(e){this.output.onTouchMove(e),Object(o.b)(e)}onTouchEnd(e){this.output.onTouchEnd(e),Object(o.b)(e)}}class u{constructor(e){Object(r.chain4)(this.head=new a(e),new c,new s,this.tail=new i)}activate(){this.head.activate()}deactivate(){this.head.deactivate()}set output(e){this.tail.output=e}}},function(e,t,n){"use strict";n.r(t),n.d(t,"MouseEventInputPipeline",(function(){return c}));var r=n(12);class i{constructor(){this.active=!1}onMouseDown(e){this.output.onMouseDown(e),this.active=!0}onMouseMove(e){this.active&&this.output.onMouseMove(e)}onMouseUp(e){this.active=!1,this.output.onMouseUp(e)}}class s{constructor(e){this.onMouseDown=e=>{this.output.onMouseDown(e)},this.onMouseMove=e=>{this.output.onMouseMove(e)},this.onMouseUp=e=>{this.output.onMouseUp(e)},this.element=e}activate(){this.element.addEventListener("mousedown",this.onMouseDown),this.element.addEventListener("mousemove",this.onMouseMove),this.element.addEventListener("mouseup",this.onMouseUp)}deactivate(){this.element.removeEventListener("mousedown",this.onMouseDown),this.element.removeEventListener("mousemove",this.onMouseMove),this.element.removeEventListener("mouseup",this.onMouseUp)}}var a=n(24);class o{onMouseDown(e){this.output.onMouseDown(e),Object(a.b)(e)}onMouseMove(e){this.output.onMouseMove(e),Object(a.b)(e)}onMouseUp(e){this.output.onMouseUp(e),Object(a.b)(e)}}class c{constructor(e){Object(r.chain3)(this.head=new s(e),new o,this.tail=new i)}activate(){this.head.activate()}deactivate(){this.head.deactivate()}set output(e){this.tail.output=e}}},function(e,t,n){"use strict";function r(e){return 180*e/Math.PI}function i(e,t){const n=t.target.getBoundingClientRect();return{offsetX:t.clientX-n.left,offsetY:t.clientY-n.top,pressure:t.force,tiltX:r(Math.atan(Math.cos(t.azimuthAngle)/Math.tan(t.altitudeAngle))),tiltY:r(Math.atan(Math.sin(t.azimuthAngle)/Math.tan(t.altitudeAngle))),timeStamp:e.timeStamp,pointerType:"touch"}}n.r(t),n.d(t,"TouchToPointerEventTransform",(function(){return s}));class s{onTouchStart(e,t){this.output.onPointerDown(i(e,t))}onTouchMove(e,t){this.output.onPointerMove(i(e,t))}onTouchEnd(e,t){this.output.onPointerUp(i(e,t))}}},function(e,t,n){"use strict";n.r(t),n.d(t,"DrawingAttributesInjector",(function(){return o}));var r=n(12),i=n(56),s=n(137);class a{constructor(){this.offsetX=0,this.offsetY=0}setDrawingAttributes(e){this.output.setDrawingAttributes(1===e.effect.type?new s.a(e).setEffect({type:1,pattern:e.effect.pattern,offsetX:this.offsetX,offsetY:this.offsetY}).build():e)}beginStroke(e){this.output.beginStroke(e),this.begin=e}addPoint(e){this.output.addPoint(e)}endStroke(e){this.output.endStroke(e);const t=e.x-this.begin.x,n=e.y-this.begin.y,r=t>0?48:-48;this.offsetX+=t+r,this.offsetY+=n+r,this.offsetX%=540,this.offsetY%=540}}class o{constructor(e=i.a){this.offset=new a,this.setDrawingAttributes(e)}setDrawingAttributes(e){this.attributes=e}beginStroke(e){Object(r.chain2)(this.offset,this.output),this.out=1===this.attributes.effect.type?this.offset:this.output,this.out.setDrawingAttributes(this.attributes),this.out.beginStroke(e)}addPoint(e){this.out.addPoint(e)}endStroke(e){this.out.endStroke(e)}}},function(e,t,n){"use strict";function r(){}n.r(t),n.d(t,"StrokeCollector",(function(){return o}));var i=n(193),s=n(36),a=n(45);class o{constructor(e){this.idGenerator=new i.IncrementalNumberUniqueIdGenerator,this.currentStroke=new s.PointArrayStroke,this.isLineMode=!1,this.inputStrokes=[],this.newPointsIndex=0,this.noop={add:r},this.output=this.noop,this.beginEndSink=e}setDrawingAttributes(e){this.currentStroke.drawingAttributes=e}beginStroke(e){this.newPointsIndex=0,this.currentStroke.id=this.idGenerator.generate(),this.beginEndSink.onStrokeBegin(),this.output=this.currentStroke,this.output.add(this.isLineMode?this.getConstantPressurePoint(e):e)}addPoint(e){this.isLineMode&&1===this.currentStroke.points.length?this.output.add(this.getConstantPressurePoint(e)):this.isLineMode&&this.currentStroke.points.length>1?this.currentStroke.points[this.currentStroke.points.length-1]=this.getConstantPressurePoint(e):this.output.add(e)}endStroke(e){this.output!==this.noop&&(this.isLineMode&&this.currentStroke.points.length>1?this.currentStroke.points[this.currentStroke.points.length-1]=this.getConstantPressurePoint(e):this.output.add(e),this.inputStrokes.push([this.currentStroke,this.newPointsIndex]),this.cancel())}makeCurrentStrokeStraight(){const e=this.currentStroke.points.length;e>=2&&(this.linePressure=this.getAveragePressureAcrossStroke(this.currentStroke),0===this.linePressure&&(this.linePressure=a.a),this.currentStroke.points.splice(1,e-2),this.currentStroke.points[0]=this.getConstantPressurePoint(this.currentStroke.points[0]),this.currentStroke.points[1]=this.getConstantPressurePoint(this.currentStroke.points[1]))}cancel(){this.output!==this.noop&&(this.output=this.noop,this.linePressure=void 0,this.currentStroke=new s.PointArrayStroke,this.beginEndSink.onStrokeEnd())}streamCollectedStrokes(e){this.inputStrokes.forEach(t=>{e.add(t[0]),t[1]=t[0].points.length-1})}streamCollectedStrokesNewPoints(e){this.inputStrokes.forEach(t=>{t[1]=Object(s.streamPointArrayStrokeFrom)(t[0],e,t[1])})}resetCollectedStrokes(){this.inputStrokes=[]}streamCurrentStroke(e){this.newPointsIndex=Object(s.streamPointArrayStrokeFrom)(this.currentStroke,e,0)}streamCurrentStrokeNewPoints(e){this.newPointsIndex=Object(s.streamPointArrayStrokeFrom)(this.currentStroke,e,this.newPointsIndex)}getAveragePressureAcrossStroke(e){let t=0;for(let n=0;n<e.points.length;n+=1)t+=e.points[n].pressure;return 0===t||0===e.points.length?0:t/e.points.length}getConstantPressurePoint(e){return void 0===this.linePressure&&(this.linePressure=0===e.pressure?a.a:e.pressure),{x:e.x,y:e.y,pressure:this.linePressure,tiltX:e.tiltX,tiltY:e.tiltY,timestamp:e.timestamp}}}},function(e,t,n){"use strict";function r(e){return{offsetX:e.offsetX,offsetY:e.offsetY,pressure:.5,tiltX:0,tiltY:0,timeStamp:e.timeStamp,pointerType:"mouse"}}n.r(t),n.d(t,"MouseEventToPointerEventTransform",(function(){return i}));class i{onMouseDown(e){this.output.onPointerDown(r(e))}onMouseMove(e){this.output.onPointerMove(r(e))}onMouseUp(e){this.output.onPointerUp(r(e))}}},function(e,t,n){"use strict";function r(e){const t={left:Number.MAX_VALUE,right:-Number.MAX_VALUE,top:Number.MAX_VALUE,bottom:-Number.MAX_VALUE};return e.streamPoints({add:e=>{!function(e,t){e.left=Math.min(e.left,t.x),e.right=Math.max(e.right,t.x),e.top=Math.min(e.top,t.y),e.bottom=Math.max(e.bottom,t.y)}(t,e)}}),t}n.r(t),n.d(t,"calculateStrokeBoundingBox",(function(){return r}))},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function r(e,t){if(""===e)return void 0===t?"":t.absolutePath;{let n=e.startsWith("/")?e.slice(1):e;return n=n.endsWith("/")?n.slice(0,-1):n,void 0===t?"/"+n:`${"/"===t.absolutePath?"":t.absolutePath}/${n}`}}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));var r=n(199),i=n(78);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class s{constructor(){this.handlers=[]}pushHandler(...e){void 0!==e&&this.handlers.push(...e)}async handleRequest(e,t){const n=r.a.create(e);for(const e of this.handlers){const r=await e(n,t);if(void 0!==r)return r}return Object(i.a)(e)}}function a(...e){const t=new s;return t.pushHandler(...e),async(e,n)=>t.handleRequest(e,n)}},function(e,t,n){"use strict";n.d(t,"d",(function(){return s})),n.d(t,"e",(function(){return a})),n.d(t,"a",(function(){return o})),n.d(t,"b",(function(){return c})),n.d(t,"c",(function(){return u})),n.d(t,"f",(function(){return h}));var r=n(64),i=n(16);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class s extends i.a{constructor(e,t,n){super(e,n,new Set(["error"])),this.error=t,this.errorType=r.a.genericError}}i.a;class a extends i.a{constructor(e){super(e,{usageError:!0}),this.errorType="usageError"}}class o extends i.a{constructor(e,t){super(e,{timeoutMs:t}),this.expiryMs=t,this.errorType=r.a.clientSessionExpiredError}}class c extends i.a{constructor(e,t){super(e,Object.assign(Object.assign({},t),{dataProcessingError:1})),this.errorType=r.a.dataCorruptionError,this.canRetry=!1}}class u extends i.a{constructor(e){super(e),this.errorType=r.a.dataProcessingError,this.canRetry=!1}static create(e,t,n,r={}){return u.wrapIfUnrecognized(new i.a(e,r),t,n)}static wrapIfUnrecognized(e,t,n){const r=Object.assign({dataProcessingError:1,dataProcessingCodepath:t},void 0===n?void 0:h(n)),s=Object(i.i)(e,{props:r});if(!Object(i.f)(s))return s;const a=Object(i.k)(s,e=>new u(e));return a.addTelemetryProperties(s.getTelemetryProperties()),a}}const h=e=>({messageClientId:e.clientId,messageSequenceNumber:e.sequenceNumber,messageClientSequenceNumber:e.clientSequenceNumber,messageReferenceSequenceNumber:e.referenceSequenceNumber,messageMinimumSequenceNumber:e.minimumSequenceNumber,messageTimestamp:e.timestamp})},function(e,t,n){"use strict";n.d(t,"a",(function(){return v}));var r=n(98),i=n(1),s=n(282),a=n(257),o=n(37),c=n(575),u=n(191),h=n(596),l=n(284);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class d{constructor(e,t){this.absolutePath=e,this.routeContext=t,this.isAttached=!0,Object(i.a)(e.startsWith("/"),413)}get IFluidRouter(){return this}get IFluidHandleContext(){return this}get IFluidHandle(){return this}async get(){if(void 0===this.objectP){const e={url:this.absolutePath,headers:{[h.c.viaHandle]:!0}};this.objectP=this.routeContext.resolveHandle(e).then(t=>{if("fluid/object"===t.mimeType){return t.value}throw Object(l.f)(t,e)})}return this.objectP}attachGraph(){}bind(e){e.attachGraph()}async request(e){try{const t=(await this.get()).IFluidRouter;return void 0!==t?t.request(e):Object(l.a)(e)}catch(e){return Object(l.d)(e)}}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class m{constructor(e,t){for(this.context=e,this.handleParsedCb=t,this.encodeValue=(e,t)=>{const n=null==e?void 0:e.IFluidHandle;return void 0!==n?this.serializeHandle(n,t):e},this.decodeValue=e=>{if((e=>"__fluid_handle__"===(null==e?void 0:e.type))(e)){const t=e.url.startsWith("/")?e.url:Object(u.a)(e.url,this.context),n=new d(t,this.root);return this.handleParsedCb(n),n}return e},this.root=this.context;void 0!==this.root.routeContext;)this.root=this.root.routeContext}get IFluidSerializer(){return this}encode(e,t){return e&&"object"==typeof e?this.recursivelyReplace(e,this.encodeValue,t):e}decode(e){return e&&"object"==typeof e?this.recursivelyReplace(e,this.decodeValue):e}stringify(e,t){return JSON.stringify(e,(e,n)=>this.encodeValue(n,t))}parse(e){return JSON.parse(e,(e,t)=>this.decodeValue(t))}recursivelyReplace(e,t,n){const r=t(e,n);if(r!==e)return r;let i;for(const r of Object.keys(e)){const s=e[r];if(s&&"object"==typeof s){const a=this.recursivelyReplace(s,t,n);a!==s&&(i=null!=i?i:Array.isArray(e)?[...e]:Object.assign({},e),i[r]=a)}}return null!=i?i:e}serializeHandle(e,t){return t.bind(e),{type:"__fluid_handle__",url:e.absolutePath}}}var p=n(595);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class f extends p.a{get isAttached(){return this.value.isAttached()}constructor(e,t,n){super(e,t,n)}attachGraph(){this.value.bindToContext(),super.attachGraph()}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class g extends m{constructor(){super(...arguments),this.serializedRoutes=new Set}getSerializedRoutes(){return Array.from(this.serializedRoutes)}serializeHandle(e,t){return this.serializedRoutes.add(e.absolutePath),super.serializeHandle(e,t)}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class y extends a.a{constructor(e,t,n){super((e,t)=>this.eventListenerErrorHandler(e,t)),this.id=e,this.runtime=t,this.attributes=n,this._connected=!1,this._isBoundToContext=!1,this.handle=new f(this,e,t.IFluidHandleContext),this.logger=o.a.create(t.logger,void 0,{all:{sharedObjectId:Object(r.a)()}}),this.attachListeners()}get IFluidLoadable(){return this}get connected(){return this._connected}closeWithError(e){void 0===this.closeError&&(this.closeError=e)}verifyNotClosed(){if(void 0!==this.closeError)throw this.closeError}eventListenerErrorHandler(e,t){const n=c.c.wrapIfUnrecognized(t,"SharedObjectEventListenerException");throw n.addTelemetryProperties({emittedEventName:String(e)}),this.closeWithError(n),n}attachListeners(){this.isAttached()||this.runtime.once("attaching",()=>{this.didAttach()})}async load(e){this.runtime.attachState!==s.a.Detached&&(this.services=e),await this.loadCore(e.objectStorage),this.runtime.attachState!==s.a.Detached&&this.attachDeltaHandler()}initializeLocal(){this.initializeLocalCore()}bindToContext(){this._isBoundToContext||(this._isBoundToContext=!0,this.runtime.bindChannel(this))}connect(e){this.services=e,this.attachDeltaHandler()}isAttached(){return void 0!==this.services&&this.runtime.attachState!==s.a.Detached}handleDecoded(e){var t,n,r;this.isAttached()&&(null===(r=null===(t=this.services)||void 0===t?void 0:(n=t.deltaConnection).addedGCOutboundReference)||void 0===r||r.call(n,this.handle,e))}initializeLocalCore(){}didAttach(){}submitLocalMessage(e,t){this.verifyNotClosed(),this.isAttached()&&this.services.deltaConnection.submit(e,t)}dirty(){this.isAttached()&&this.services.deltaConnection.dirty()}onConnect(){}reSubmitCore(e,t){this.submitLocalMessage(e,t)}async newAckBasedPromise(e){let t;return new Promise((n,r)=>{t=()=>r(new Error("FluidDataStoreRuntime disposed while this ack-based Promise was pending")),this.runtime.disposed?t():(this.runtime.on("dispose",t),e(n,r))}).finally(()=>{this.runtime.off("dispose",t)})}attachDeltaHandler(){Object(i.a)(void 0!==this.services,122),this._isBoundToContext=!0,this.didAttach(),this.services.deltaConnection.attach({process:(e,t,n)=>{this.process(e,t,n)},setConnectionState:e=>{this.setConnectionState(e)},reSubmit:(e,t)=>{this.reSubmit(e,t)},applyStashedOp:e=>this.applyStashedOp(e)}),this.setConnectionState(this.services.deltaConnection.connected)}setConnectionState(e){this._connected!==e&&(this._connected=e,e?this.onConnect():this.onDisconnect())}process(e,t,n){this.verifyNotClosed(),this.emit("pre-op",e,t,this),this.processCore(e,t,n),this.emit("op",e,t,this)}reSubmit(e,t){this.reSubmitCore(e,t)}}class v extends y{constructor(e,t,n){super(e,t,n),this._isGCing=!1,this._serializer=new m(this.runtime.channelsRoutingContext,e=>this.handleDecoded(e))}get serializer(){return Object(i.a)(!this._isGCing,117),this._serializer}getAttachSummary(e=!1,t=!1){return this.summarizeCore(this.serializer)}async summarize(e=!1,t=!1){return this.summarizeCore(this.serializer)}getGCData(e=!1){let t;Object(i.a)(!this._isGCing,120),this._isGCing=!0;try{const e=new g(this.runtime.channelsRoutingContext,e=>this.handleDecoded(e));this.processGCDataCore(e),t={gcNodes:{"/":e.getSerializedRoutes()}},Object(i.a)(this._isGCing,121)}finally{this._isGCing=!1}return t}processGCDataCore(e){this.summarizeCore(e)}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return v}));var r=n(182),i=n(5),s=n(585),a=n(590),o=n(67),c=n(578),u=n(573),h=n(597),l=n(78);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class d{constructor(e,t){this.absolutePath=e,this.routeContext=t,this.isAttached=!0,Object(i.a)(e.startsWith("/"),413)}get IFluidRouter(){return this}get IFluidHandleContext(){return this}get IFluidHandle(){return this}async get(){if(void 0===this.objectP){const e={url:this.absolutePath,headers:{[h.c.viaHandle]:!0}};this.objectP=this.routeContext.resolveHandle(e).then(t=>{if("fluid/object"===t.mimeType){return t.value}throw Object(l.e)(t,e)})}return this.objectP}attachGraph(){}bind(e){e.attachGraph()}async request(e){try{const t=(await this.get()).IFluidRouter;return void 0!==t?t.request(e):Object(l.a)(e)}catch(e){return Object(l.c)(e)}}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class m{constructor(e,t){for(this.context=e,this.handleParsedCb=t,this.encodeValue=(e,t)=>{const n=null==e?void 0:e.IFluidHandle;return void 0!==n?this.serializeHandle(n,t):e},this.decodeValue=e=>{if((e=>"__fluid_handle__"===(null==e?void 0:e.type))(e)){const t=e.url.startsWith("/")?e.url:Object(u.a)(e.url,this.context),n=new d(t,this.root);return this.handleParsedCb(n),n}return e},this.root=this.context;void 0!==this.root.routeContext;)this.root=this.root.routeContext}get IFluidSerializer(){return this}encode(e,t){return e&&"object"==typeof e?this.recursivelyReplace(e,this.encodeValue,t):e}decode(e){return e&&"object"==typeof e?this.recursivelyReplace(e,this.decodeValue):e}stringify(e,t){return JSON.stringify(e,(e,n)=>this.encodeValue(n,t))}parse(e){return JSON.parse(e,(e,t)=>this.decodeValue(t))}recursivelyReplace(e,t,n){const r=t(e,n);if(r!==e)return r;let i;for(const r of Object.keys(e)){const s=e[r];if(s&&"object"==typeof s){const a=this.recursivelyReplace(s,t,n);a!==s&&(i=null!=i?i:Array.isArray(e)?[...e]:Object.assign({},e),i[r]=a)}}return null!=i?i:e}serializeHandle(e,t){return t.bind(e),{type:"__fluid_handle__",url:e.absolutePath}}}var p=n(589);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class f extends p.a{get isAttached(){return this.value.isAttached()}constructor(e,t,n){super(e,t,n)}attachGraph(){this.value.bindToContext(),super.attachGraph()}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class g extends m{constructor(){super(...arguments),this.serializedRoutes=new Set}getSerializedRoutes(){return Array.from(this.serializedRoutes)}serializeHandle(e,t){return this.serializedRoutes.add(e.absolutePath),super.serializeHandle(e,t)}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class y extends a.a{constructor(e,t,n){super((e,t)=>this.eventListenerErrorHandler(e,t)),this.id=e,this.runtime=t,this.attributes=n,this._connected=!1,this._isBoundToContext=!1,this.handle=new f(this,e,t.IFluidHandleContext),this.logger=o.a.create(t.logger,void 0,{all:{sharedObjectId:Object(r.a)()}}),this.attachListeners()}get IFluidLoadable(){return this}get connected(){return this._connected}closeWithError(e){void 0===this.closeError&&(this.closeError=e)}verifyNotClosed(){if(void 0!==this.closeError)throw this.closeError}eventListenerErrorHandler(e,t){const n=c.c.wrapIfUnrecognized(t,"SharedObjectEventListenerException");throw n.addTelemetryProperties({emittedEventName:String(e)}),this.closeWithError(n),n}attachListeners(){this.isAttached()||this.runtime.once("attaching",()=>{this.didAttach()})}async load(e){this.runtime.attachState!==s.a.Detached&&(this.services=e),await this.loadCore(e.objectStorage),this.runtime.attachState!==s.a.Detached&&this.attachDeltaHandler()}initializeLocal(){this.initializeLocalCore()}bindToContext(){this._isBoundToContext||(this._isBoundToContext=!0,this.runtime.bindChannel(this))}connect(e){this.services=e,this.attachDeltaHandler()}isAttached(){return void 0!==this.services&&this.runtime.attachState!==s.a.Detached}handleDecoded(e){var t,n,r;this.isAttached()&&(null===(r=null===(t=this.services)||void 0===t?void 0:(n=t.deltaConnection).addedGCOutboundReference)||void 0===r||r.call(n,this.handle,e))}initializeLocalCore(){}didAttach(){}submitLocalMessage(e,t){this.verifyNotClosed(),this.isAttached()&&this.services.deltaConnection.submit(e,t)}dirty(){this.isAttached()&&this.services.deltaConnection.dirty()}onConnect(){}reSubmitCore(e,t){this.submitLocalMessage(e,t)}async newAckBasedPromise(e){let t;return new Promise((n,r)=>{t=()=>r(new Error("FluidDataStoreRuntime disposed while this ack-based Promise was pending")),this.runtime.disposed?t():(this.runtime.on("dispose",t),e(n,r))}).finally(()=>{this.runtime.off("dispose",t)})}attachDeltaHandler(){Object(i.a)(void 0!==this.services,122),this._isBoundToContext=!0,this.didAttach(),this.services.deltaConnection.attach({process:(e,t,n)=>{this.process(e,t,n)},setConnectionState:e=>{this.setConnectionState(e)},reSubmit:(e,t)=>{this.reSubmit(e,t)},applyStashedOp:e=>this.applyStashedOp(e)}),this.setConnectionState(this.services.deltaConnection.connected)}setConnectionState(e){this._connected!==e&&(this._connected=e,e?this.onConnect():this.onDisconnect())}process(e,t,n){this.verifyNotClosed(),this.emit("pre-op",e,t,this),this.processCore(e,t,n),this.emit("op",e,t,this)}reSubmit(e,t){this.reSubmitCore(e,t)}}class v extends y{constructor(e,t,n){super(e,t,n),this._isGCing=!1,this._serializer=new m(this.runtime.channelsRoutingContext,e=>this.handleDecoded(e))}get serializer(){return Object(i.a)(!this._isGCing,117),this._serializer}getAttachSummary(e=!1,t=!1){return this.summarizeCore(this.serializer)}async summarize(e=!1,t=!1){return this.summarizeCore(this.serializer)}getGCData(e=!1){let t;Object(i.a)(!this._isGCing,120),this._isGCing=!0;try{const e=new g(this.runtime.channelsRoutingContext,e=>this.handleDecoded(e));this.processGCDataCore(e),t={gcNodes:{"/":e.getSerializedRoutes()}},Object(i.a)(this._isGCing,121)}finally{this._isGCing=!1}return t}processGCDataCore(e){this.summarizeCore(e)}}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
var r;n.d(t,"d",(function(){return s})),n.d(t,"e",(function(){return a})),n.d(t,"f",(function(){return o})),n.d(t,"a",(function(){return c})),n.d(t,"b",(function(){return u})),n.d(t,"c",(function(){return h})),n.d(t,"g",(function(){return l})),function(e){e.genericError="genericError",e.throttlingError="throttlingError",e.dataCorruptionError="dataCorruptionError",e.dataProcessingError="dataProcessingError",e.usageError="usageError",e.clientSessionExpiredError="clientSessionExpiredError"}(r||(r={}));var i=n(35);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class s extends i.a{constructor(e,t,n){super(e,n,new Set(["error"])),this.error=t,this.errorType=r.genericError}}class a extends i.a{constructor(e,t,n){super(e,n),this.retryAfterSeconds=t,this.errorType=r.throttlingError}static wrap(e,t,n){return Object(i.j)(e,e=>new a(e,t),n)}}class o extends i.a{constructor(e){super(e,{usageError:!0}),this.errorType="usageError"}}class c extends i.a{constructor(e,t){super(e,{timeoutMs:t}),this.expiryMs=t,this.errorType=r.clientSessionExpiredError}}class u extends i.a{constructor(e,t){super(e,Object.assign(Object.assign({},t),{dataProcessingError:1})),this.errorType=r.dataCorruptionError,this.canRetry=!1}}class h extends i.a{constructor(e){super(e),this.errorType=r.dataProcessingError,this.canRetry=!1}static create(e,t,n,r={}){return h.wrapIfUnrecognized(new i.a(e,r),t,n)}static wrapIfUnrecognized(e,t,n){const r=Object.assign({dataProcessingError:1,dataProcessingCodepath:t},void 0===n?void 0:l(n)),s=Object(i.h)(e,{props:r});if(!Object(i.f)(s))return s;const a=Object(i.i)(s,e=>new h(e));return a.addTelemetryProperties(s.getTelemetryProperties()),a}}const l=e=>({messageClientId:e.clientId,messageSequenceNumber:e.sequenceNumber,messageClientSequenceNumber:e.clientSequenceNumber,messageReferenceSequenceNumber:e.referenceSequenceNumber,messageMinimumSequenceNumber:e.minimumSequenceNumber,messageTimestamp:e.timestamp})},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class r{constructor(...e){this.providers=new Map,this.parents=e.filter(e=>void 0!==e)}get IFluidDependencySynthesizer(){return this}register(e,t){if(this.providers.has(e))throw new Error(`Attempting to register a provider of type ${e} that already exists`);this.providers.set(e,t)}unregister(e){this.providers.has(e)&&this.providers.delete(e)}synthesize(e,t){const n={};return this.generateRequired(n,t),this.generateOptional(n,e),Object.defineProperty(n,"IFluidDependencySynthesizer",{get:()=>this}),n}has(e,t){return!!this.providers.has(e)||!0!==t&&this.parents.some(t=>t.has(e))}getProvider(e){if(this.has(e)){if(this.providers.has(e))return this.providers.get(e);for(const t of this.parents){if(t instanceof r)return t.getProvider(e);{const n=t;if(void 0!==(null==n?void 0:n.getProvider))return n.getProvider(e)}}}}generateRequired(e,t){if(void 0!==t)for(const n of Object.keys(t)){const t=this.resolveProvider(n);if(void 0===t)throw new Error("Object attempted to be created without registered required provider "+n);Object.defineProperty(e,n,t)}}generateOptional(e,t){var n;if(void 0!==t)for(const r of Object.keys(t)){const t=null!==(n=this.resolveProvider(r))&&void 0!==n?n:{get:async()=>{}};Object.defineProperty(e,r,t)}}resolveProvider(e){const t=this.providers.get(e);if(void 0!==t)return"function"==typeof t?{get(){if(t&&"function"==typeof t)return Promise.resolve(this.IFluidDependencySynthesizer).then(async e=>t(e)).then(t=>null==t?void 0:t[e])}}:{get(){if(t)return Promise.resolve(t).then(t=>{if(t)return t[e]})}};for(const t of this.parents){const n={[e]:e},r=t.synthesize(n,{}),i=Object.getOwnPropertyDescriptor(r,e);if(void 0!==i)return i}}}},,,,,function(e,t,n){"use strict";n.d(t,"f",(function(){return i})),n.d(t,"b",(function(){return a})),n.d(t,"g",(function(){return o})),n.d(t,"h",(function(){return c})),n.d(t,"e",(function(){return u})),n.d(t,"d",(function(){return h})),n.d(t,"c",(function(){return l})),n.d(t,"a",(function(){return d}));var r=n(5);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */function i(e){return e.replace(/^\/+|\/+$/g,"")}function s(e){return e.replace(/\/+$/g,"")}function a(e){const t={};for(const[n,r]of Object.entries(e.gcNodes))t[n]=Array.from(r);return{gcNodes:t}}function o(e){const t=new Map;if(void 0===e.gcData)return t;const n=e.gcData.gcNodes;delete n["/"];for(const[e,i]of Object.entries(n)){Object(r.a)(e.startsWith("/"),686);const n=e.split("/")[1];let s=e.slice(n.length+1);""===s&&(s="/");let a=t.get(n);void 0===a&&(a={gcData:{gcNodes:{}},usedRoutes:[]}),Object(r.a)(void 0!==a.gcData,687),a.gcData.gcNodes[s]=[...new Set(i)],t.set(n,a)}if(void 0===e.usedRoutes)return t;const i=e.usedRoutes.filter(e=>""!==e&&"/"!==e);for(const e of i){Object(r.a)(e.startsWith("/"),688);const n=e.split("/")[1],i=e.slice(n.length+1),s=t.get(n);Object(r.a)(void 0!==(null==s?void 0:s.usedRoutes),689),s.usedRoutes.push(i),t.set(n,s)}return t}function c(e){const t=e.filter(e=>""!==e&&"/"!==e),n=new Map;for(const e of t){Object(r.a)(e.startsWith("/"),408);const t=e.split("/")[1],i=e.slice(t.length+1),s=n.get(t);void 0!==s?s.push(i):n.set(t,[i])}return n}function u(e,t){const n=Object.entries(e);for(const[r,i]of n){const n=new Set(i);n.delete(t),e[r]=[...n]}}function h(e,t){var n;const i={};for(const[t,n]of Object.entries(e.gcNodes))i[t]={outboundRoutes:Array.from(n.outboundRoutes),unreferencedTimestampMs:n.unreferencedTimestampMs};for(const[e,s]of Object.entries(t.gcNodes)){let t=i[e];void 0===t?t={outboundRoutes:Array.from(s.outboundRoutes),unreferencedTimestampMs:s.unreferencedTimestampMs}:(void 0!==s.unreferencedTimestampMs&&void 0!==t.unreferencedTimestampMs&&Object(r.a)(s.unreferencedTimestampMs===t.unreferencedTimestampMs,690),t={outboundRoutes:[...new Set([...s.outboundRoutes,...t.outboundRoutes])],unreferencedTimestampMs:null!==(n=s.unreferencedTimestampMs)&&void 0!==n?n:t.unreferencedTimestampMs}),i[e]=t}return{gcNodes:i}}function l(e,t){const n=a(e);for(const[e,r]of Object.entries(t.gcNodes))if(void 0===n.gcNodes[e])n.gcNodes[e]=Array.from(r);else{const t=[...r,...n.gcNodes[e]];n.gcNodes[e]=[...new Set(t)]}return n}class d{constructor(){this.gcNodesSet={}}get gcNodes(){const e={};for(const[t,n]of Object.entries(this.gcNodesSet))e[t]=[...n];return e}addNode(e,t){this.gcNodesSet[e]=new Set(t)}prefixAndAddNodes(e,t){for(const[n,r]of Object.entries(t)){let t=n.replace(/^\/+/g,"");t=`/${e}/${t}`,t=s(t),this.gcNodesSet[t]=new Set(r)}}addNodes(e){for(const[t,n]of Object.entries(e))this.gcNodesSet[t]=new Set(n)}addRouteToAllNodes(e){for(const t of Object.values(this.gcNodesSet))t.add(e)}getGCData(){return{gcNodes:this.gcNodes}}}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
var r,i;n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return i})),function(e){e.Detached="Detached",e.Attaching="Attaching",e.Attached="Attached"}(r||(r={})),function(e){e.NotBound="NotBound",e.Binding="Binding",e.Bound="Bound"}(i||(i={}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class r{constructor(e,t,n=e){this.threshold=e,this.logger=t,this.thresholdMultiple=n}send(e,t){t<this.threshold||this.logger.sendPerformanceEvent({eventName:e,value:t})}sendIfMultiple(e,t){t===this.thresholdMultiple&&(this.logger.sendPerformanceEvent({eventName:e,value:t}),this.thresholdMultiple=2*this.thresholdMultiple)}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return i})),n.d(t,"d",(function(){return s})),n.d(t,"c",(function(){return a}));
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
const r="connected",i="disconnected";function s(e,t,n,...r){try{e.emit(n,...r)}catch(e){t.sendErrorEvent({eventName:"RaiseEventError",event:n},e)}}function a(e,t,n,s){try{n?t.emit(r,s):t.emit(i)}catch(t){e.sendErrorEvent({eventName:"RaiseConnectedEventError"},t)}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(33),i=n(5),s=n(20),a=n(140),o=n(182);function c(e,t){return{sha:"",tree:
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function e(t,n,a){const c=[];for(const u of n){const n=`${t}${u.path}`;if(u.type===s.b.Blob){const e=u.value,t=Object(r.e)(e.contents,e.encoding),i=Object(o.a)();a.set(i,t);const h={mode:s.a[u.mode],path:n,sha:i,size:0,type:"blob",url:""};c.push(h)}else if(u.type===s.b.Tree){Object(i.a)(u.type===s.b.Tree,257);const t=u.value,r={mode:s.a[u.mode],path:n,sha:"",size:-1,type:"tree",url:""};c.push(r);const o=e(n+"/",t.entries,a);c.push(...o)}}return c}("",e,t),url:""}}function u(e,t){const n=c(e,t);return Object(a.d)(n)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(573);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class i{constructor(e,t,n){this.value=e,this.path=t,this.routeContext=n,this.pendingHandlesToMakeVisible=new Set,this.locallyVisible=!1,this.absolutePath=Object(r.a)(t,this.routeContext)}get IFluidHandle(){return this}get isAttached(){return this.routeContext.isAttached}get visible(){return this.isAttached||this.locallyVisible}async get(){return this.value}attachGraph(){this.visible||(this.locallyVisible=!0,this.pendingHandlesToMakeVisible.forEach(e=>{e.attachGraph()}),this.pendingHandlesToMakeVisible.clear(),this.routeContext.attachGraph())}bind(e){this.visible?e.attachGraph():this.pendingHandlesToMakeVisible.add(e)}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(71);class i extends r.a{constructor(e){super(),this.errorHandler=e}emit(e,...t){try{return super.emit(e,...t)}catch(t){return this.errorHandler(e,t),!0}}}},function(e,t,n){"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
var r;n.d(t,"a",(function(){return r})),function(e){e.cache="fluid-cache",e.clientDetails="fluid-client-details",e.loadMode="loadMode",e.reconnect="fluid-reconnect",e.sequenceNumber="fluid-sequence-number",e.version="version"}(r||(r={}))},function(e,t,n){"use strict";var r;n.d(t,"a",(function(){return r})),function(e){e.summarizingClient="fluid-client-summarizer",e.createNew="createNew"}(r||(r={}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(79);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */function i(e){return e.type===r.a.Operation||e.type===r.a.Summarize}},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(34),i=n(1),s=n(17),a=n(142),o=n(98);function c(e,t){return{sha:"",tree:
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function e(t,n,a){const c=[];for(const u of n){const n=`${t}${u.path}`;if(u.type===s.b.Blob){const e=u.value,t=Object(r.e)(e.contents,e.encoding),i=Object(o.a)();a.set(i,t);const h={mode:s.a[u.mode],path:n,sha:i,size:0,type:"blob",url:""};c.push(h)}else if(u.type===s.b.Tree){Object(i.a)(u.type===s.b.Tree,257);const t=u.value,r={mode:s.a[u.mode],path:n,sha:"",size:-1,type:"tree",url:""};c.push(r);const o=e(n+"/",t.entries,a);c.push(...o)}}return c}("",e,t),url:""}}function u(e,t){const n=c(e,t);return Object(a.d)(n)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(191);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class i{constructor(e,t,n){this.value=e,this.path=t,this.routeContext=n,this.pendingHandlesToMakeVisible=new Set,this.locallyVisible=!1,this.absolutePath=Object(r.a)(t,this.routeContext)}get IFluidHandle(){return this}get isAttached(){return this.routeContext.isAttached}get visible(){return this.isAttached||this.locallyVisible}async get(){return this.value}attachGraph(){this.visible||(this.locallyVisible=!0,this.pendingHandlesToMakeVisible.forEach(e=>{e.attachGraph()}),this.pendingHandlesToMakeVisible.clear(),this.routeContext.attachGraph())}bind(e){this.visible?e.attachGraph():this.pendingHandlesToMakeVisible.add(e)}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return et})),n.d(t,"c",(function(){return nt})),n.d(t,"d",(function(){return st})),n.d(t,"b",(function(){return ct}));var r,i=n(282),s=n(281),a=n(1),o=n(76),c=n(74),u=n(77),h=n(279),l=n(37),d=n(16),m=n(53),p=n(258);!function(e){e.summarizingClient="fluid-client-summarizer",e.createNew="createNew"}(r||(r={}));var f=n(309),g=n(575),y=n(187),v=n(8),b=n(3),S=n(288),w=n(286),C=n(284),x=n(44),E=n(289),O=n(201),T=n(98),P=n(191);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class A{constructor(e,t,n){this.path=e,this.runtime=t,this.routeContext=n,this.absolutePath=Object(P.a)(e,this.routeContext)}get IFluidHandleContext(){return this}attachGraph(){throw new Error("can't attach container runtime form within container!")}get isAttached(){return this.runtime.attachState!==i.a.Detached}async resolveHandle(e){return this.runtime.resolveHandle(e)}}var N=n(305),I=n(19),k=n(90);class D extends c.a{constructor(e,t,n,r,i){super(),this.logger=e,this.summaryCollection=t,this.clientElection=n,this.maxOpsSinceLastSummary=r,this.electionEnabled=i,this.lastReportedSeq=0,this.summaryCollection.on("default",({sequenceNumber:e})=>{var t,n,i;const s=this.electedClientId;if(void 0===s)return void(this.clientElection.eligibleCount>0&&this.clientElection.resetElectedClient(e));let a=this.clientElection.electionSequenceNumber;if(e-(null!==(t=this.lastSummaryAckSeqForClient)&&void 0!==t?t:a)>this.maxOpsSinceLastSummary){const t=e-this.lastReportedSeq;if(t>this.maxOpsSinceLastSummary&&(this.logger.sendErrorEvent({eventName:"ElectedClientNotSummarizing",electedClientId:s,lastSummaryAckSeqForClient:this.lastSummaryAckSeqForClient,electionSequenceNumber:a,nextElectedClientId:null===(n=this.clientElection.peekNextElectedClient())||void 0===n?void 0:n.clientId,electionEnabled:this.electionEnabled}),this.lastReportedSeq=e),this.electionEnabled){const n=this.electedParentId;this.clientElection.incrementElectedClient(e),a=this.clientElection.electionSequenceNumber,e>(null!==(i=this.lastSummaryAckSeqForClient)&&void 0!==i?i:a)&&t>this.maxOpsSinceLastSummary&&this.logger.sendErrorEvent({eventName:"UnexpectedElectionSequenceNumber",lastSummaryAckSeqForClient:this.lastSummaryAckSeqForClient,electionSequenceNumber:a,sequenceNumber:e,previousClientId:s,previousParentId:n,electedParentId:this.electedParentId,electedClientId:this.electedClientId,opsSinceLastReport:t,maxOpsSinceLastSummary:r})}}}),this.summaryCollection.on(y.a.SummaryAck,e=>{this.lastSummaryAckSeqForClient=e.sequenceNumber}),this.clientElection.on("election",(e,t)=>{this.lastSummaryAckSeqForClient=void 0,void 0===e&&this.clientElection.eligibleCount>0&&this.clientElection.resetElectedClient(t),this.emit("electedSummarizerChanged")})}get electedClientId(){var e;return null===(e=this.clientElection.electedClient)||void 0===e?void 0:e.clientId}get electedParentId(){var e;return null===(e=this.clientElection.electedParent)||void 0===e?void 0:e.clientId}serialize(){var e;const{electedClientId:t,electedParentId:n,electionSequenceNumber:r}=this.clientElection.serialize();return{electedClientId:t,electedParentId:n,electionSequenceNumber:null!==(e=this.lastSummaryAckSeqForClient)&&void 0!==e?e:r}}static isClientEligible(e){const t=e.client.details;return void 0===t||D.clientDetailsPermitElection(t)}}D.clientDetailsPermitElection=e=>e.capabilities.interactive||"summarizer"===e.type;var F=n(595);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class j extends F.a{async get(){throw Error("Do not try to get a summarizer object from the handle. Reference it directly.")}attach(){}bind(e){}}var R,M,_,B=n(278),L=n(280);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class q{constructor(e,t){this.lastOpSequenceNumber=e,this._lastAttempt=t,this._lastSuccessfulSummary=Object.assign({},t)}get lastAttempt(){return this._lastAttempt}get lastSuccessfulSummary(){return this._lastSuccessfulSummary}updateWithLastSummaryAckInfo(e){this._lastAttempt=e,this._lastSuccessfulSummary=Object.assign({},e)}recordAttempt(e){this._lastAttempt={refSequenceNumber:null!=e?e:this.lastOpSequenceNumber,summaryTime:Date.now()}}markLastAttemptAsSuccessful(){this._lastSuccessfulSummary=Object.assign({},this.lastAttempt)}}class z{constructor(e,t,n,r=50){this.heuristicData=e,this.configuration=t,this.trySummarize=n,this.minOpsForAttemptOnClose=r,this.idleTimer=new B.b(this.configuration.idleTime,()=>this.trySummarize("idle"))}get opsSinceLastAck(){return this.heuristicData.lastOpSequenceNumber-this.heuristicData.lastSuccessfulSummary.refSequenceNumber}run(){const e=Date.now()-this.heuristicData.lastSuccessfulSummary.summaryTime,t=this.opsSinceLastAck;e>this.configuration.maxTime?(this.idleTimer.clear(),this.trySummarize("maxTime")):t>this.configuration.maxOps?(this.idleTimer.clear(),this.trySummarize("maxOps")):this.idleTimer.restart()}shouldRunLastSummary(){return this.opsSinceLastAck>this.minOpsForAttemptOnClose}dispose(){this.idleTimer.clear()}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */!function(e){e.genericError="genericError",e.genericNetworkError="genericNetworkError",e.authorizationError="authorizationError",e.fileNotFoundOrAccessDeniedError="fileNotFoundOrAccessDeniedError",e.throttlingError="throttlingError",e.offlineError="offlineError",e.unsupportedClientProtocolVersion="unsupportedClientProtocolVersion",e.writeError="writeError",e.fetchFailure="fetchFailure",e.incorrectServerResponse="incorrectServerResponse",e.fileOverwrittenInStorage="fileOverwrittenInStorage",e.deltaStreamConnectionForbidden="deltaStreamConnectionForbidden"}(R||(R={})),function(e){e[e.Offline=0]="Offline",e[e.Online=1]="Online",e[e.Unknown=2]="Unknown"}(_||(_={}));d.a;class H extends d.a{constructor(e,t){super(e,Object.assign(Object.assign({},t),{statusCode:400})),this.errorType=H.errorType,this.canRetry=!1}}H.errorType=null!==(M=R.deltaStreamConnectionForbidden)&&void 0!==M?M:"deltaStreamConnectionForbidden";d.a;d.a;d.a;const U=e=>null==e?void 0:e.retryAfterSeconds;
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
async function V(e,t,n){const r=[e.then(e=>({result:"done",value:e})),t.then(({timerResult:e})=>({result:e}))];return void 0!==n&&r.push(n.waitCancelled.then(()=>({result:"cancelled"}))),Promise.race(r)}const G={submitSummaryFailure:"Error while generating, uploading, or submitting summary",summaryOpWaitTimeout:"Timeout while waiting for summarize op broadcast",summaryAckWaitTimeout:"Timeout while waiting for summaryAck/summaryNack op",summaryNack:"Server rejected summary via summaryNack op",disconnect:"Summary cancelled due to summarizer or main client disconnect"};class W{constructor(){this.summarySubmitted=new k.a,this.summaryOpBroadcasted=new k.a,this.receivedSummaryAckOrNack=new k.a}fail(e,t,n,r){Object(a.a)(!this.receivedSummaryAckOrNack.isCompleted,606);const i={success:!1,message:e,data:void 0,error:t,retryAfterSeconds:r};this.summarySubmitted.resolve(i),this.summaryOpBroadcasted.resolve(i),this.receivedSummaryAckOrNack.resolve(Object.assign(Object.assign({},i),{data:n}))}build(){return{summarySubmitted:this.summarySubmitted.promise,summaryOpBroadcasted:this.summaryOpBroadcasted.promise,receivedSummaryAckOrNack:this.receivedSummaryAckOrNack.promise}}}class K{constructor(e,t,n,r,i,s,a){this.pendingAckTimer=e,this.heuristicData=t,this.submitSummaryCallback=n,this.raiseSummarizingError=r,this.successfulSummaryCallback=i,this.summaryWatcher=s,this.logger=a,this.summarizeTimer=new B.b(2e4,()=>this.summarizeTimerHandler(2e4,1))}summarize(e,t,n,r=new W){return this.summarizeCore(e,t,r,n).catch(t=>{const n="UnexpectedSummarizeError";this.logger.sendErrorEvent(Object.assign({eventName:n},e),t),r.fail(n,t)}),r.build()}async summarizeCore(e,t,n,r){const{refreshLatestAck:i,fullTree:s}=t,o=l.a.create(this.logger,void 0,{all:e});let c={fullTree:s,timeSinceLastAttempt:Date.now()-this.heuristicData.lastAttempt.summaryTime,timeSinceLastSummary:Date.now()-this.heuristicData.lastSuccessfulSummary.summaryTime};const u=l.c.start(o,Object.assign({eventName:"Summarize",refreshLatestAck:i},c)),h=(e,t,i,s)=>{this.raiseSummarizingError(G[e]);const a=U(t),o=r.cancelled||(null==t?void 0:t.errorType)===R.offlineError?"generic":"error";u.cancel(Object.assign(Object.assign({},i),{reason:e,category:o,retryAfterSeconds:a}),t),n.fail((e=>`${e}: ${G[e]}`)(e),t,s,a)};let m;this.summarizeTimer.start();try{m=await this.submitSummaryCallback({fullTree:s,refreshLatestAck:i,summaryLogger:o,cancellationToken:r});const e=m.referenceSequenceNumber,t=e-this.heuristicData.lastSuccessfulSummary.refSequenceNumber;if(c=Object.assign(Object.assign({},c),{referenceSequenceNumber:e,minimumSequenceNumber:m.minimumSequenceNumber,opsSinceLastAttempt:e-this.heuristicData.lastAttempt.refSequenceNumber,opsSinceLastSummary:t}),"base"!==m.stage&&(c=Object.assign(Object.assign(Object.assign({},c),m.summaryStats),{generateDuration:m.generateDuration}),"generate"!==m.stage&&(c=Object.assign(Object.assign({},c),{handle:m.handle,uploadDuration:m.uploadDuration}),"upload"!==m.stage&&(c=Object.assign(Object.assign({},c),{clientSequenceNumber:m.clientSequenceNumber})))),"submit"!==m.stage)return h("submitSummaryFailure",m.error,c);if(!s&&!m.forcedFullTree){const{summarizedDataStoreCount:e,gcStateUpdatedDataStoreCount:n=0}=m.summaryStats;e>n+t&&o.sendErrorEvent({eventName:"IncrementalSummaryViolation",summarizedDataStoreCount:e,gcStateUpdatedDataStoreCount:n,opsSinceLastSummary:t})}u.reportEvent("generate",Object.assign({},c)),n.summarySubmitted.resolve({success:!0,data:m})}catch(e){return h("submitSummaryFailure",e)}finally{this.heuristicData.recordAttempt(null==m?void 0:m.referenceSequenceNumber),this.summarizeTimer.clear()}try{const e=this.pendingAckTimer.start(),t=this.summaryWatcher.watchSummary(m.clientSequenceNumber),i=await V(t.waitBroadcast(),e,r);if("cancelled"===i.result)return h("disconnect");if("done"!==i.result)return h("summaryOpWaitTimeout");const s=i.value,l=Date.now()-this.heuristicData.lastAttempt.summaryTime;n.summaryOpBroadcasted.resolve({success:!0,data:{summarizeOp:s,broadcastDuration:l}}),this.heuristicData.lastAttempt.summarySequenceNumber=s.sequenceNumber,o.sendTelemetryEvent({eventName:"Summarize_Op",duration:l,referenceSequenceNumber:s.referenceSequenceNumber,summarySequenceNumber:s.sequenceNumber,handle:s.contents.handle});const p=await V(t.waitAckNack(),e,r);if("cancelled"===p.result)return h("disconnect");if("done"!==p.result)return h("summaryAckWaitTimeout");const f=p.value;this.pendingAckTimer.clear();const g=Date.now()-this.heuristicData.lastAttempt.summaryTime;if(c=Object.assign({ackWaitDuration:g,ackNackSequenceNumber:f.sequenceNumber,summarySequenceNumber:f.contents.summaryProposal.summarySequenceNumber},c),f.type!==y.a.SummaryAck){Object(a.a)(f.type===y.a.SummaryNack,628);const e=f.contents,t=null==e?void 0:e.message,n=null==e?void 0:e.retryAfter,r=new d.a("Received summaryNack: "+t,{retryAfterSeconds:n});return o.sendErrorEvent(Object.assign(Object.assign({eventName:"SummaryNack"},c),{retryAfterSeconds:n}),r),Object(a.a)(U(r)===n,607),h("summaryNack",r,Object.assign(Object.assign({},c),{nackRetryAfter:n}),{summaryNackOp:f,ackNackDuration:g})}this.heuristicData.markLastAttemptAsSuccessful(),this.successfulSummaryCallback(),u.end(Object.assign(Object.assign({},c),{handle:f.contents.handle})),n.receivedSummaryAckOrNack.resolve({success:!0,data:{summaryAckOp:f,ackNackDuration:g}})}finally{this.pendingAckTimer.clear()}}summarizeTimerHandler(e,t){if(this.logger.sendPerformanceEvent({eventName:"SummarizeTimeout",timeoutTime:e,timeoutCount:t}),t<5){const n=2*e;this.summarizeTimer.start(n,()=>this.summarizeTimerHandler(n,t+1))}}dispose(){this.summarizeTimer.clear()}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */var $=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n};class J{constructor(e,t,n,r,i,s,a,o,c,{disableHeuristics:u=!1}={}){this.summaryWatcher=t,this.configuration=n,this.submitSummaryCallback=r,this.heuristicData=i,this.raiseSummarizingError=s,this.summaryCollection=a,this.cancellationToken=o,this.stopSummarizerCallback=c,this.stopping=!1,this._disposed=!1,this.tryWhileSummarizing=!1,this.summarizeCount=0,this.totalSuccessfulAttempts=0,this.tryGetCorrelatedLogger=e=>this.heuristicData.lastAttempt.refSequenceNumber===e?this.logger:void 0;const h={summarizeCount:()=>this.summarizeCount,summarizerSuccessfulAttempts:()=>this.totalSuccessfulAttempts};this.logger=l.a.create(e,"Running",{all:h}),u||(this.heuristicRunner=new z(i,n,e=>this.trySummarize(e)));const d=Math.min(this.configuration.maxAckWaitTime,6e5);this.pendingAckTimer=new B.a(d,()=>{this.raiseSummarizingError("Pending summary ack not received in time"),this.logger.sendErrorEvent({eventName:"SummaryAckWaitTimeout",maxAckWaitTime:d,referenceSequenceNumber:this.heuristicData.lastAttempt.refSequenceNumber,summarySequenceNumber:this.heuristicData.lastAttempt.summarySequenceNumber,timePending:Date.now()-this.heuristicData.lastAttempt.summaryTime})}),a.setPendingAckTimerTimeoutCallback(d,()=>{this.pendingAckTimer.hasTimer&&(this.logger.sendTelemetryEvent({eventName:"MissingSummaryAckFoundByOps",referenceSequenceNumber:this.heuristicData.lastAttempt.refSequenceNumber,summarySequenceNumber:this.heuristicData.lastAttempt.summarySequenceNumber}),this.pendingAckTimer.clear())}),this.generator=new K(this.pendingAckTimer,this.heuristicData,this.submitSummaryCallback,this.raiseSummarizingError,()=>{this.totalSuccessfulAttempts++},this.summaryWatcher,this.logger)}static async start(e,t,n,r,i,s,a,o,c,u){var h;const l=new J(e,t,n,r,i,s,a,o,c,u);return await l.waitStart(),null===(h=l.heuristicRunner)||void 0===h||h.run(),l}get disposed(){return this._disposed}dispose(){var e;this.summaryWatcher.dispose(),null===(e=this.heuristicRunner)||void 0===e||e.dispose(),this.heuristicRunner=void 0,this.generator.dispose(),this.pendingAckTimer.clear(),this.disposeEnqueuedSummary(),this._disposed=!0,this.stopping=!0}handleSystemOp(e){switch(e.type){case y.a.ClientLeave:case y.a.ClientJoin:case y.a.Propose:return void this.handleOp(void 0,e);default:return}}handleOp(e,{sequenceNumber:t,type:n,clientId:r,contents:i}){var s;void 0===e&&(this.heuristicData.lastOpSequenceNumber=t,this.tryRunEnqueuedSummary()||null===(s=this.heuristicRunner)||void 0===s||s.run())}async waitStop(e){var t;this.stopping||(this.stopping=!0,this.disposeEnqueuedSummary(),e&&(null===(t=this.heuristicRunner)||void 0===t?void 0:t.shouldRunLastSummary())&&void 0===this.summarizingLock&&this.trySummarizeOnce({reason:"lastSummary"},{}),await this.summarizingLock)}async waitStart(){const e=await V(this.summaryWatcher.waitFlushed(),this.pendingAckTimer.start());this.pendingAckTimer.clear(),this.summaryCollection.unsetPendingAckTimerTimeoutCallback(),"done"===e.result&&void 0!==e.value&&this.heuristicData.updateWithLastSummaryAckInfo({refSequenceNumber:e.value.summaryOp.referenceSequenceNumber,summaryTime:Date.now(),summarySequenceNumber:e.value.summaryOp.sequenceNumber})}async lockedSummaryAction(e){Object(a.a)(void 0===this.summarizingLock,603);const t=new k.a;return this.summarizingLock=t.promise,this.summarizeCount++,e().finally(()=>{var e;t.resolve(),this.summarizingLock=void 0;const n=this.tryWhileSummarizing;this.tryWhileSummarizing=!1,this.stopping||this.tryRunEnqueuedSummary()||!n||null===(e=this.heuristicRunner)||void 0===e||e.run()})}trySummarizeOnce(e,t,n=this.cancellationToken,r=new W){return this.lockedSummaryAction(async()=>this.generator.summarize(e,t,n,r).receivedSummaryAckOrNack).catch(e=>{}),r.build()}trySummarize(e,t=this.cancellationToken){void 0===this.summarizingLock?this.lockedSummaryAction(async()=>{const n=[{refreshLatestAck:!1,fullTree:!1},{refreshLatestAck:!0,fullTree:!1},{refreshLatestAck:!0,fullTree:!1,delaySeconds:120},{refreshLatestAck:!0,fullTree:!0,delaySeconds:600}];let r,i,s=0,a=0;for(let o=0;o<n.length;){if(this.cancellationToken.cancelled)return;s++,a++;const c=n[o],{delaySeconds:u=0}=c,h=$(c,["delaySeconds"]),l=null!=r?r:u,d=Object.assign({reason:e,summaryAttempts:s,summaryAttemptsPerPhase:a,summaryAttemptPhase:o+1},h);l>0&&(this.logger.sendPerformanceEvent(Object.assign({eventName:"SummarizeAttemptDelay",duration:l,summaryNackDelay:void 0!==r},d)),await Object(L.a)(1e3*l));const m=this.generator.summarize(d,h,t),p=await m.receivedSummaryAckOrNack;if(p.success)return;r=p.retryAfterSeconds,(void 0===r||a>1)&&(o++,a=0),i=p}this.logger.sendErrorEvent({eventName:"FailToSummarize",reason:e,message:null==i?void 0:i.message},null==i?void 0:i.error),this.stopSummarizerCallback("failToSummarize")}).catch(e=>{this.logger.sendErrorEvent({eventName:"UnexpectedSummarizeError"},e)}):this.tryWhileSummarizing=!0}summarizeOnDemand(e=new W,t){var{reason:n}=t,r=$(t,["reason"]);if(this.stopping)return e.fail("RunningSummarizer stopped or disposed",void 0),e.build();if(void 0!==this.summarizingLock)throw new g.e("Attempted to run an already-running summarizer on demand");return this.trySummarizeOnce({reason:"onDemand/"+n},r,this.cancellationToken,e)}enqueueSummarize(e){var{reason:t,afterSequenceNumber:n=0,override:r=!1}=e,i=$(e,["reason","afterSequenceNumber","override"]);const s="enqueue;"+t;let a=!1;if(void 0!==this.enqueuedSummary){if(!r)return{alreadyEnqueued:!0};this.enqueuedSummary.resultsBuilder.fail("Aborted; overridden by another enqueue summarize attempt",void 0),this.enqueuedSummary=void 0,a=!0}this.enqueuedSummary={reason:s,afterSequenceNumber:n,options:i,resultsBuilder:new W};const o=this.enqueuedSummary.resultsBuilder.build();return this.tryRunEnqueuedSummary(),a?Object.assign(Object.assign({},o),{alreadyEnqueued:!0,overridden:!0}):o}tryRunEnqueuedSummary(){if(this.stopping)return this.disposeEnqueuedSummary(),!1;if(void 0===this.enqueuedSummary||this.heuristicData.lastOpSequenceNumber<this.enqueuedSummary.afterSequenceNumber||void 0!==this.summarizingLock)return!1;const{reason:e,resultsBuilder:t,options:n}=this.enqueuedSummary;return this.enqueuedSummary=void 0,this.trySummarizeOnce({reason:"enqueuedSummary/"+e},n,this.cancellationToken,t),!0}disposeEnqueuedSummary(){void 0!==this.enqueuedSummary&&(this.enqueuedSummary.resultsBuilder.fail("RunningSummarizer stopped or disposed",void 0),this.enqueuedSummary=void 0)}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class Q extends d.a{constructor(e,t=!1){super(e),this.logged=t,this.errorType="summarizingError",this.canRetry=!0}static wrap(e,t=!1,n){return Object(d.l)(e,e=>new Q(e,t),n)}}class Y extends I.EventEmitter{constructor(e,t,n,r,i,s,a){super(),this.runtime=t,this.configurationGetter=n,this.internalsProvider=r,this.summaryCollection=s,this.runCoordinatorCreateFn=a,this._disposed=!1,this.starting=!1,this.stopDeferred=new k.a,this.summarizeOnDemand=(...e)=>{var t;try{if(this._disposed||(null===(t=this.runningSummarizer)||void 0===t?void 0:t.disposed))throw new g.e("Summarizer is already disposed.");if(void 0!==this.runtime.summarizerClientId&&this.runtime.summarizerClientId!==this.runtime.clientId)throw new g.e("On-demand summary attempted while an elected summarizer is present");const n=new W;if(this.runningSummarizer)return this.runningSummarizer.summarizeOnDemand(n,...e);return this.runCoordinatorCreateFn(this.runtime).then(t=>{this.start(this.runtime.clientId,t,{disableHeuristics:!0}).then(async r=>{r.summarizeOnDemand(n,...e);const i=await Promise.race([this.stopDeferred.promise,t.waitCancelled]);await r.waitStop(!1),t.stop(i),this.close()}).catch(e=>{n.fail("Failed to start summarizer",e)})}).catch(e=>{n.fail("Failed to create cancellation token",e)}),n.build()}catch(e){throw Q.wrap(e,!1,this.logger)}},this.enqueueSummarize=(...e)=>{if(this._disposed||void 0===this.runningSummarizer||this.runningSummarizer.disposed)throw new g.e("Summarizer is not running or already disposed.");return this.runningSummarizer.enqueueSummarize(...e)},this.logger=l.a.create(this.runtime.logger,"Summarizer"),this.innerHandle=new j(this,e,i)}get IFluidLoadable(){return this}get ISummarizer(){return this}get handle(){return this.innerHandle}static async create(e,t){const n={headers:{[s.a.cache]:!1,[s.a.clientDetails]:{capabilities:{interactive:!1},type:"summarizer"},[r.summarizingClient]:!0,[s.a.reconnect]:!1},url:t},i=await e.resolve(n),a=await Object(C.e)(i,{url:"_summarizer"});if(void 0===a.ISummarizer)throw new g.e("Fluid object does not implement ISummarizer");return a.ISummarizer}async run(e,t){try{return await this.runCore(e,t)}catch(e){throw this.stop("summarizerException"),Q.wrap(e,!1,this.logger)}finally{this.close()}}stop(e){this.stopDeferred.resolve(e)}close(){this.dispose(),this.runtime.closeFn()}async runCore(e,t){const n=await this.runCoordinatorCreateFn(this.runtime),r=Promise.race([n.waitCancelled,this.stopDeferred.promise]);if(r.then(t=>{this.logger.sendTelemetryEvent({eventName:"StoppingSummarizer",onBehalfOf:e,reason:t})}),n.cancelled)return n.waitCancelled;const i=await this.start(e,n,t),s=await r;return await i.waitStop(!n.cancelled),n.stop(s),s}async start(e,t,n){if(this.runningSummarizer){if(this.runningSummarizer.disposed)throw new g.e("Starting a disposed summarizer");return this.runningSummarizer}if(this.starting)throw new g.e("Attempting to start a summarizer that is already starting");this.starting=!0,this.logger.sendTelemetryEvent({eventName:"RunningSummarizer",onBehalfOf:e,initSummarySeqNumber:this.runtime.deltaManager.initialSequenceNumber,config:JSON.stringify(this.configurationGetter())});const r=this.runtime.clientId;if(void 0===r)throw new g.e("clientId should be defined if connected.");const i=await J.start(this.logger,this.summaryCollection.createWatcher(r),this.configurationGetter(),async(...e)=>this.internalsProvider.submitSummary(...e),new q(this.runtime.deltaManager.lastSequenceNumber,{refSequenceNumber:this.runtime.deltaManager.initialSequenceNumber,summaryTime:Date.now()}),e=>{this._disposed||this.logger.sendErrorEvent({eventName:"summarizingError"},((e,t)=>new Q(e,t))(e,!0))},this.summaryCollection,t,e=>t.stop(e),n);return this.runningSummarizer=i,this.starting=!1,this.handleSummaryAcks().catch(e=>{this.logger.sendErrorEvent({eventName:"HandleSummaryAckFatalError"},e)}),this.systemOpListener=e=>i.handleSystemOp(e),this.runtime.deltaManager.inbound.on("op",this.systemOpListener),this.opListener=(e,t)=>i.handleOp(e,t),this.runtime.on("batchEnd",this.opListener),i}dispose(){this.stop("summarizerClientDisconnected"),this._disposed=!0,this.runningSummarizer&&(this.runningSummarizer.dispose(),this.runningSummarizer=void 0),this.systemOpListener&&this.runtime.deltaManager.inbound.off("op",this.systemOpListener),this.opListener&&this.runtime.removeListener("batchEnd",this.opListener)}async handleSummaryAcks(){var e;let t=this.runtime.deltaManager.initialSequenceNumber;for(;this.runningSummarizer;){const n=null!==(e=this.runningSummarizer.tryGetCorrelatedLogger(t))&&void 0!==e?e:this.logger;try{const e=await this.summaryCollection.waitSummaryAck(t);t=e.summaryOp.referenceSequenceNumber,await this.internalsProvider.refreshLatestSummaryAck(e.summaryOp.contents.handle,e.summaryAck.contents.handle,t,n)}catch(e){n.sendErrorEvent({eventName:"HandleSummaryAckError",referenceSequenceNumber:t},e)}t++}}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */var X;!function(e){e[e.Off=0]="Off",e[e.Starting=1]="Starting",e[e.Running=2]="Running",e[e.Stopping=3]="Stopping"}(X||(X={}));class Z{constructor(e,t,n,r,i,s,{initialDelayMs:a=5e3,opsToBypassInitialDelay:o=4e3}={},c){this.clientElection=e,this.connectedState=t,this.summaryCollection=n,this.requestSummarizerFn=i,this.startThrottler=s,this.summarizerOptions=c,this.state=X.Off,this._disposed=!1,this.handleConnected=e=>{this.latestClientId=e,this.refreshSummarizer()},this.handleDisconnected=()=>{this.refreshSummarizer()},this.refreshSummarizer=()=>{const e=this.getShouldSummarizeState();switch(this.state){case X.Off:return void(e.shouldSummarize&&this.startSummarization());case X.Starting:return;case X.Running:return void(!1===e.shouldSummarize&&this.stop(e.stopReason));case X.Stopping:default:return}},this.summarizeOnDemand=(...e)=>{if(void 0===this.summarizer)throw Error("No running summarizer client");return this.summarizer.summarizeOnDemand(...e)},this.enqueueSummarize=(...e)=>{if(void 0===this.summarizer)throw Error("No running summarizer client");return this.summarizer.enqueueSummarize(...e)},this.logger=l.a.create(r,"SummaryManager",{all:{clientId:()=>this.latestClientId}}),this.connectedState.on("connected",this.handleConnected),this.connectedState.on("disconnected",this.handleDisconnected),this.latestClientId=this.connectedState.clientId,this.opsToBypassInitialDelay=o,this.initialDelayMs=a}get disposed(){return this._disposed}get currentState(){return this.state}start(){this.clientElection.on("electedSummarizerChanged",this.refreshSummarizer),this.refreshSummarizer()}getShouldSummarizeState(){return this.connectedState.connected?this.connectedState.clientId!==this.clientElection.electedParentId||this.state!==X.Running&&this.connectedState.clientId!==this.clientElection.electedClientId?{shouldSummarize:!1,stopReason:"parentShouldNotSummarize"}:this.disposed?void Object(a.a)(!1,608):{shouldSummarize:!0}:{shouldSummarize:!1,stopReason:"parentNotConnected"}}startSummarization(){Object(a.a)(this.state===X.Off,609),this.state=X.Starting,Object(a.a)(void 0===this.summarizer,610),this.delayBeforeCreatingSummarizer().then(async e=>{if(e&&!1===this.getShouldSummarizeState().shouldSummarize)return"early exit";Object(a.a)(this.state===X.Starting,611),this.state=X.Running;const t=await this.requestSummarizerFn();this.summarizer=t;const n=this.getShouldSummarizeState();if(!1===n.shouldSummarize)return this.state=X.Starting,t.stop(n.stopReason),"early exit after starting summarizer";const r=this.latestClientId;return l.c.timedExecAsync(this.logger,{eventName:"RunningSummarizer",attempt:this.startThrottler.numAttempts},async()=>t.run(r,this.summarizerOptions))}).then(e=>{this.logger.sendTelemetryEvent({eventName:"EndingSummarizer",reason:e})}).catch(e=>{if(this.logger.sendTelemetryEvent({eventName:"EndingSummarizer",reason:"exception"},e),this.getShouldSummarizeState().shouldSummarize||void 0!==this.summarizer){const t=(null==e?void 0:e.errorType)===R.offlineError?"generic":"error";this.logger.sendTelemetryEvent({eventName:"SummarizerException",category:t},e)}}).finally(()=>{var e;Object(a.a)(this.state!==X.Off,612),this.state=X.Off,null===(e=this.summarizer)||void 0===e||e.close(),this.summarizer=void 0,this.getShouldSummarizeState().shouldSummarize&&this.startSummarization()})}stop(e){var t;Z.isStartingOrRunning(this.state)&&(this.state=X.Stopping,null===(t=this.summarizer)||void 0===t||t.stop(e))}async delayBeforeCreatingSummarizer(){let e=this.startThrottler.getDelay();this.logger.sendTelemetryEvent({eventName:"CreatingSummarizer",throttlerDelay:e,initialDelay:this.initialDelayMs,startThrottlerMaxDelayMs:this.startThrottler.maxDelayMs,opsSinceLastAck:this.summaryCollection.opsSinceLastAck,opsToBypassInitialDelay:this.opsToBypassInitialDelay});let t=!1;if(this.summaryCollection.opsSinceLastAck<this.opsToBypassInitialDelay&&(t=!0,e=Math.max(e,this.initialDelayMs)),e>0){let t,n;const r=()=>{this.summaryCollection.opsSinceLastAck>=this.opsToBypassInitialDelay&&(clearTimeout(t),n())},i=new Promise(n=>{t=setTimeout(()=>n(),e)}),s=new Promise(e=>{n=e});this.summaryCollection.addOpListener(r),await Promise.race([i,s]),this.summaryCollection.removeOpListener(r)}return t}dispose(){this.clientElection.off("electedSummarizerChanged",this.refreshSummarizer),this.connectedState.off("connected",this.handleConnected),this.connectedState.off("disconnected",this.handleDisconnected),this._disposed=!0}}Z.isStartingOrRunning=e=>e===X.Starting||e===X.Running
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */;class ee{constructor(e,t){this.logger=t,this.processingTimeIncrement=10,this.currentAllowedProcessingTimeForTurn=ee.processingTime,this.schedulingCount=0,this.deltaManager=e,this.deltaManager.inbound.on("idle",()=>{this.inboundQueueIdle()})}batchBegin(e){this.processingStartTime||(this.processingStartTime=o.a.now()),void 0===this.schedulingLog&&this.schedulingCount%500==0&&(this.schedulingLog={opsRemainingToProcess:0,numberOfTurns:1,totalProcessingTime:0,numberOfBatchesProcessed:0,firstSequenceNumber:e.sequenceNumber,lastSequenceNumber:e.sequenceNumber,startTime:o.a.now()})}batchEnd(e){if(this.schedulingLog&&(this.schedulingLog.numberOfBatchesProcessed++,this.schedulingLog.lastSequenceNumber=e.sequenceNumber,this.schedulingLog.opsRemainingToProcess=this.deltaManager.inbound.length),this.shouldRunScheduler()){const e=o.a.now(),t=e-this.processingStartTime;t>this.currentAllowedProcessingTimeForTurn&&(this.deltaManager.inbound.pause(),this.currentAllowedProcessingTimeForTurn+=this.processingTimeIncrement,this.schedulingLog&&(this.schedulingLog.numberOfTurns++,this.schedulingLog.totalProcessingTime+=t),setTimeout(()=>{this.schedulingLog&&this.logger.sendTelemetryEvent({eventName:"InboundOpsPartialProcessingTime",duration:l.f.formatTick(t),opsProcessed:this.schedulingLog.lastSequenceNumber-this.schedulingLog.firstSequenceNumber+1,opsRemainingToProcess:this.deltaManager.inbound.length,processingTime:l.f.formatTick(this.schedulingLog.totalProcessingTime),numberOfTurns:this.schedulingLog.numberOfTurns,batchesProcessed:this.schedulingLog.numberOfBatchesProcessed,timeToResume:l.f.formatTick(o.a.now()-e)}),this.deltaManager.inbound.resume()}),this.processingStartTime=void 0)}}inboundQueueIdle(){if(this.schedulingLog){const e=o.a.now();this.schedulingLog.totalProcessingTime+=e-this.processingStartTime,this.logger.sendTelemetryEvent({eventName:"InboundOpsProcessingTime",opsRemainingToProcess:this.schedulingLog.opsRemainingToProcess,numberOfTurns:this.schedulingLog.numberOfTurns,processingTime:l.f.formatTick(this.schedulingLog.totalProcessingTime),opsProcessed:this.schedulingLog.lastSequenceNumber-this.schedulingLog.firstSequenceNumber+1,batchesProcessed:this.schedulingLog.numberOfBatchesProcessed,duration:l.f.formatTick(e-this.schedulingLog.startTime),schedulingCount:this.schedulingCount}),this.schedulingLog=void 0}this.schedulingCount++,this.processingStartTime=void 0,this.currentAllowedProcessingTimeForTurn=ee.processingTime}shouldRunScheduler(){return this.deltaManager.inbound.length>0}}ee.processingTime=50;class te{constructor(e,t,n){this.clientId=e,this.deltaManager=t,this.pongCount=0,this.msnTrackingTimestamp=0,this.opProcessingTimes={},this.opPerfData={},this.firstConnection=!0,this.bootTime=o.a.now(),this.connectionStartTime=0,this.gap=0,this.logger=l.a.create(n,"OpPerf"),this.deltaManager.on("pong",e=>this.recordPingTime(e)),this.deltaManager.on("submitOp",e=>this.beforeOpSubmit(e)),this.deltaManager.on("op",e=>this.afterProcessingOp(e)),this.deltaManager.on("connect",(e,t)=>{this.clientId=e.clientId,void 0!==t&&(this.connectionOpSeqNumber=this.deltaManager.lastKnownSeqNumber,this.gap=t,this.connectionStartTime=o.a.now(),this.gap<=0&&this.reportGettingUpToDate())}),this.deltaManager.on("disconnect",()=>{this.sequenceNumberForMsnTracking=void 0,this.clientSequenceNumberForLatencyStatistics=void 0,this.opProcessingTimes={},this.opPerfData={},this.connectionOpSeqNumber=void 0,this.firstConnection=!1}),this.deltaManager.outbound.on("push",e=>{for(const t of e)t.type===y.a.Operation&&this.clientSequenceNumberForLatencyStatistics===t.clientSequenceNumber&&(Object(a.a)(void 0===this.opProcessingTimes.opStartTimeSittingInboundQueue,712),Object(a.a)(void 0===this.opPerfData.durationInboundQueue,713),this.opProcessingTimes.opStartTimeSittingInboundQueue=Date.now(),Object(a.a)(void 0===this.opPerfData.durationOutboundQueue,714),Object(a.a)(void 0!==this.opProcessingTimes.opStartTimeForLatencyStatistics,715),this.opPerfData.durationOutboundQueue=this.opProcessingTimes.opStartTimeSittingInboundQueue-this.opProcessingTimes.opStartTimeForLatencyStatistics)}),this.deltaManager.inbound.on("push",e=>{this.clientId===e.clientId&&e.type===y.a.Operation&&this.clientSequenceNumberForLatencyStatistics===e.clientSequenceNumber&&void 0!==this.opProcessingTimes.opStartTimeSittingInboundQueue&&(this.opProcessingTimes.opStartTimeInboundPushEvent=Date.now(),this.opPerfData.durationInboundQueue=this.opProcessingTimes.opStartTimeInboundPushEvent-this.opProcessingTimes.opStartTimeSittingInboundQueue,this.opProcessingTimes.opStartTimeSittingInboundQueue=void 0,this.opPerfData.lengthInboundQueue=this.deltaManager.inbound.length)}),this.deltaManager.inbound.on("idle",(e,t)=>{"number"==typeof e&&e>=100&&this.logger.sendPerformanceEvent({eventName:"GetDeltas_OpProcessing",count:e,duration:t})})}reportGettingUpToDate(){this.connectionOpSeqNumber=void 0,this.logger.sendPerformanceEvent({eventName:"ConnectionSpeed",duration:o.a.now()-this.connectionStartTime,ops:this.gap,timeToConnect:this.firstConnection?l.f.formatTick(this.connectionStartTime-this.bootTime):void 0,firstConnection:this.firstConnection})}recordPingTime(e){this.pongCount++,this.pingLatency=e,100===this.pongCount&&(this.logger.sendPerformanceEvent({eventName:"DeltaLatency",duration:e}),this.pongCount=0)}beforeOpSubmit(e){void 0===this.clientSequenceNumberForLatencyStatistics&&e.clientSequenceNumber%500==1&&(Object(a.a)(void 0===this.opProcessingTimes.opStartTimeSittingInboundQueue,716),Object(a.a)(void 0===this.opPerfData.durationInboundQueue,717),this.opProcessingTimes.opStartTimeForLatencyStatistics=Date.now(),this.clientSequenceNumberForLatencyStatistics=e.clientSequenceNumber)}afterProcessingOp(e){const t=e.sequenceNumber;if(t===this.connectionOpSeqNumber&&this.reportGettingUpToDate(),void 0===this.sequenceNumberForMsnTracking&&t%1e3==0&&(this.sequenceNumberForMsnTracking=t,this.msnTrackingTimestamp=e.timestamp),void 0!==this.sequenceNumberForMsnTracking&&e.minimumSequenceNumber>=this.sequenceNumberForMsnTracking&&(Object(a.a)(void 0!==this.msnTrackingTimestamp,718),this.logger.sendPerformanceEvent({eventName:"MsnStatistics",sequenceNumber:t,msnDistance:t-this.sequenceNumberForMsnTracking,duration:e.timestamp-this.msnTrackingTimestamp}),this.sequenceNumberForMsnTracking=void 0),this.clientId===e.clientId&&this.clientSequenceNumberForLatencyStatistics===e.clientSequenceNumber){Object(a.a)(void 0!==this.opProcessingTimes.opStartTimeForLatencyStatistics,288);const n=Date.now();void 0!==this.opProcessingTimes.opStartTimeInboundPushEvent&&(this.opPerfData.durationInboundToProcessing=n-this.opProcessingTimes.opStartTimeInboundPushEvent);const r=n-this.opProcessingTimes.opStartTimeForLatencyStatistics,i=r>5e3?"error":"performance";this.logger.sendPerformanceEvent(Object.assign({eventName:"OpRoundtripTime",sequenceNumber:t,referenceSequenceNumber:e.referenceSequenceNumber,duration:r,category:i,pingLatency:this.pingLatency,msnDistance:this.deltaManager.lastSequenceNumber-this.deltaManager.minimumSequenceNumber},this.opPerfData)),this.clientSequenceNumberForLatencyStatistics=void 0,this.opPerfData={}}}}var ne=n(188),re=n(198),ie=n.n(re);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class se{constructor(e,t,n,r){var i;if(this.containerRuntime=e,this.applyStashedOp=t,this.pendingStates=new ie.a,this.previousClientIds=new Set,this.firstStashedCSN=-1,this.disposeOnce=new ne.a(()=>{this.initialStates.clear(),this.pendingStates.clear()}),this.pendingMessagesCount=0,this.isProcessingBatch=!1,this.dispose=()=>this.disposeOnce.value,this.initialStates=new ie.a(null!==(i=null==r?void 0:r.pendingStates)&&void 0!==i?i:[]),r){(null==r?void 0:r.clientId)&&this.previousClientIds.add(r.clientId);const e=r.pendingStates.filter(e=>"message"===e.type);this.firstStashedCSN=e[0].clientSequenceNumber}this.flushModeForNextMessage=n,this.onFlushModeUpdated(n)}get connected(){return this.containerRuntime.connected}hasPendingMessages(){return 0!==this.pendingMessagesCount}getLocalState(){if(this.hasPendingMessages())return{clientId:this.clientId,pendingStates:this.pendingStates.toArray().map(e=>"message"===e.type?Object.assign(Object.assign({},e),{localOpMetadata:void 0}):e)}}get disposed(){return this.disposeOnce.evaluated}onSubmitMessage(e,t,n,r,i,s){const a={type:"message",messageType:e,clientSequenceNumber:t,referenceSequenceNumber:n,content:r,localOpMetadata:i,opMetadata:s};this.pendingStates.push(a),this.pendingMessagesCount++}onFlushModeUpdated(e){this.pendingStates.push({type:"flushMode",flushMode:e})}onFlush(){if(this.containerRuntime.flushMode===b.FlushMode.Immediate)return;const e=this.pendingStates.peekBack();"message"===(null==e?void 0:e.type)&&this.pendingStates.push({type:"flush"})}async applyStashedOpsAt(e){for(;!this.initialStates.isEmpty();){const t=this.initialStates.peekFront();if("message"===t.type){if(t.referenceSequenceNumber>e)break;if(t.referenceSequenceNumber>0&&t.referenceSequenceNumber<e)throw new Error("loaded from snapshot too recent to apply stashed ops");const n=await this.applyStashedOp(t.messageType,t.content);t.localOpMetadata=n}this.pendingStates.push(this.initialStates.shift())}}processMessage(e,t){return e.type===et.ChunkedOp?{localAck:!1,localOpMetadata:void 0}:t?{localAck:!1,localOpMetadata:this.processPendingLocalMessage(e)}:this.processRemoteMessage(e)}processRemoteMessage(e){var t;if(!st(e))return{localAck:!1,localOpMetadata:void 0};const n=e.clientId===Array.from(this.previousClientIds)[0]&&e.clientSequenceNumber>=this.firstStashedCSN,r=Array.from(this.previousClientIds).indexOf(e.clientId)>0;if(n||r)for(Object(a.a)(void 0===this.clientId,651);!this.pendingStates.isEmpty();){const t=this.pendingStates.shift();if("message"===t.type)return this.assertOpMatch(t,e,n),{localAck:!0,localOpMetadata:t.localOpMetadata}}return e.type===et.Rejoin&&this.previousClientIds.has(null===(t=e.contents)||void 0===t?void 0:t.clientId)&&this.previousClientIds.add(e.clientId),{localAck:!1,localOpMetadata:void 0}}assertOpMatch(e,t,n){switch(Object(a.a)(t.type===e.messageType,652),Object(a.a)(t.clientSequenceNumber===e.clientSequenceNumber||!n,653),t.type){case et.Attach:Object(a.a)(t.contents.id===e.content.id,654);break;case et.FluidDataStoreOp:Object(a.a)(t.contents.address===e.content.address,655);break;case et.BlobAttach:break;case et.Rejoin:default:throw new Error(t.type+" not expected")}}processPendingLocalMessage(e){this.maybeProcessBatchBegin(e);const t=this.peekNextPendingState();if(Object(a.a)("message"===t.type,361),this.pendingStates.shift(),t.clientSequenceNumber===e.clientSequenceNumber)return this.pendingMessagesCount--,this.maybeProcessBatchEnd(e),t.localOpMetadata;{const n=g.c.create("pending local message clientSequenceNumber mismatch","unexpectedAckReceived",e,{expectedClientSequenceNumber:t.clientSequenceNumber});this.containerRuntime.closeFn(n)}}maybeProcessBatchBegin(e){let t,n=!1,r=this.peekNextPendingState();for(;"message"!==r.type;)"flushMode"===r.type&&(t=r.flushMode),"flush"===r.type&&(n=!0),this.pendingStates.shift(),r=this.peekNextPendingState();void 0!==t&&(this.flushModeForNextMessage=t),t!==b.FlushMode.Immediate&&(t===b.FlushMode.TurnBased||n)&&(Object(a.a)(!this.isProcessingBatch&&void 0===this.pendingBatchBeginMessage,363),this.pendingBatchBeginMessage=e,this.isProcessingBatch=!0)}maybeProcessBatchEnd(e){var t,n;if(!this.isProcessingBatch)return;const r=this.peekNextPendingState();if("message"===r.type)return;Object(a.a)("flushMode"!==r.type,701),Object(a.a)(void 0!==this.pendingBatchBeginMessage,365);const i=null===(t=this.pendingBatchBeginMessage.metadata)||void 0===t?void 0:t.batch;if(this.pendingBatchBeginMessage===e)Object(a.a)(void 0===i,366);else{const t=null===(n=e.metadata)||void 0===n?void 0:n.batch;Object(a.a)(!0===i,367),Object(a.a)(!1===t,368)}this.pendingBatchBeginMessage=void 0,this.isProcessingBatch=!1}peekNextPendingState(){const e=this.pendingStates.peekFront();return Object(a.a)(!!e,369),e}replayPendingStates(){Object(a.a)(this.connected,370),Object(a.a)(this.clientId!==this.containerRuntime.clientId,371),this.clientId=this.containerRuntime.clientId,Object(a.a)(this.initialStates.isEmpty(),372);let e=this.pendingStates.length;if(0===e)return;this.pendingMessagesCount=0;const t=this.containerRuntime.flushMode;for(this.containerRuntime.setFlushMode(this.flushModeForNextMessage);e>0;){const t=this.pendingStates.shift();switch(t.type){case"message":this.containerRuntime.reSubmitFn(t.messageType,t.content,t.localOpMetadata,t.opMetadata);break;case"flushMode":this.containerRuntime.setFlushMode(t.flushMode);break;case"flush":this.containerRuntime.flush()}e--}this.containerRuntime.setFlushMode(t)}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 *
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY
 */
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class ae{constructor(e,t,n){this.path=e,this.routeContext=t,this.get=n,this.attached=!1,this.absolutePath=Object(P.a)(e,this.routeContext)}get IFluidHandle(){return this}get isAttached(){return this.attached}attachGraph(){this.attached=!0}bind(e){throw new Error("Cannot bind to blob handle")}}class oe{constructor(e,t,n,r,i,s,a){this.routeContext=e,this.getStorage=n,this.attachBlobCallback=r,this.gcNodeUpdated=i,this.runtime=s,this.logger=a,this.blobIds=new Set,this.pendingBlobIds=new Map,this.detachedBlobIds=new Set,this.runtime.once("dispose",()=>{for(const e of this.pendingBlobIds.values())e.reject(new Error("runtime disposed while blobAttach op in flight"))}),this.load(t)}hasBlob(e){return this.blobIds.has(e)||this.detachedBlobIds.has(e)}getBlobGCNodePath(e){return`/${oe.basePath}/${e}`}async getBlob(e){var t,n;const r=null!==(n=null===(t=this.redirectTable)||void 0===t?void 0:t.get(e))&&void 0!==n?n:e;return Object(a.a)(this.hasBlob(r),287),this.gcNodeUpdated(this.getBlobGCNodePath(e)),new ae(`${oe.basePath}/${r}`,this.routeContext,async()=>this.getStorage().readBlob(r).catch(e=>{throw this.logger.sendErrorEvent({eventName:"AttachmentReadBlobError",id:r},e),e}))}async createBlob(e){var t,n;this.runtime.attachState===i.a.Attaching&&(this.logger.sendTelemetryEvent({eventName:"CreateBlobWhileAttaching"}),await new Promise(e=>this.runtime.once("attached",e)));const r=await this.getStorage().createBlob(e),s=new ae(`${oe.basePath}/${r.id}`,this.routeContext,async()=>this.getBlob(r.id).then(async e=>e.get()));return this.runtime.attachState===i.a.Detached?(this.detachedBlobIds.add(r.id),s):(this.pendingBlobIds.has(r.id)?await(null===(t=this.pendingBlobIds.get(r.id))||void 0===t?void 0:t.promise):this.blobIds.has(r.id)||(this.pendingBlobIds.set(r.id,new k.a),this.attachBlobCallback(r.id),await(null===(n=this.pendingBlobIds.get(r.id))||void 0===n?void 0:n.promise)),s)}processBlobAttachOp(e,t){if(t){const t=this.pendingBlobIds.get(e);Object(a.a)(void 0!==t,504),t.resolve(),this.pendingBlobIds.delete(e)}this.blobIds.add(e)}static async load(e,t){if(!e)return{};let n;const r=e.blobs[this.redirectTableBlobName];r&&(n=await t(r));return{ids:Object.entries(e.blobs).filter(([e,t])=>e!==this.redirectTableBlobName).map(([e,t])=>t),redirectTable:n}}load(e){var t,n,r;if(e.ids){const t=this.runtime.attachState===i.a.Detached;e.ids.map(e=>t?this.detachedBlobIds.add(e):this.blobIds.add(e))}e.redirectTable&&(this.redirectTable=new Map(e.redirectTable)),this.logger.sendTelemetryEvent({eventName:"AttachmentBlobsLoaded",count:null!==(n=null===(t=e.ids)||void 0===t?void 0:t.length)&&void 0!==n?n:0,redirectTable:null===(r=e.redirectTable)||void 0===r?void 0:r.length})}getGCData(e=!1){const t={gcNodes:{}};if(this.blobIds.forEach(e=>{t.gcNodes[this.getBlobGCNodePath(e)]=[]}),void 0!==this.redirectTable)for(const[e,n]of this.redirectTable)t.gcNodes[this.getBlobGCNodePath(e)]=[this.getBlobGCNodePath(n)];return t}deleteUnusedRoutes(e){var t;for(const n of e){const e=n.split("/");Object(a.a)(3===e.length&&e[1]===oe.basePath,725);const r=e[2];(null===(t=this.redirectTable)||void 0===t?void 0:t.has(r))?this.redirectTable.delete(r):this.blobIds.delete(r)}}summarize(){const e=!!this.redirectTable||this.runtime.attachState!==i.a.Detached?this.blobIds:this.detachedBlobIds,t=new x.a;return e.forEach(e=>{t.addAttachment(e)}),this.redirectTable&&this.redirectTable.size>0&&t.addBlob(oe.redirectTableBlobName,JSON.stringify(Array.from(this.redirectTable.entries()))),t.getSummaryTree()}setRedirectTable(e){Object(a.a)(this.runtime.attachState===i.a.Detached,594),Object(a.a)(!this.redirectTable,595);for(const[t,n]of e)Object(a.a)(this.detachedBlobIds.delete(t),596),this.blobIds.add(n);Object(a.a)(0===this.detachedBlobIds.size,597),this.redirectTable=e}}oe.basePath="_blobs",oe.redirectTableBlobName=".redirectTable";var ce=n(594);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class ue extends class{constructor(e){this.internalStorageService=e}set policies(e){this._policies=e}get policies(){var e;return null!==(e=this._policies)&&void 0!==e?e:this.internalStorageService.policies}get repositoryUrl(){return this.internalStorageService.repositoryUrl}async getSnapshotTree(e){return this.internalStorageService.getSnapshotTree(e)}async getVersions(e,t){return this.internalStorageService.getVersions(e,t)}async write(e,t,n,r){return this.internalStorageService.write(e,t,n,r)}async uploadSummaryWithContext(e,t){return this.internalStorageService.uploadSummaryWithContext(e,t)}async downloadSummary(e){return this.internalStorageService.downloadSummary(e)}async createBlob(e){return this.internalStorageService.createBlob(e)}async readBlob(e){return this.internalStorageService.readBlob(e)}}{constructor(e,t){super(e),this.blobs=t}get policies(){return this.internalStorageService.policies}async readBlob(e){const t=this.blobs.get(e);return void 0!==t?t:this.internalStorageService.readBlob(e)}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class he{constructor(e){this.notBoundContexts=new Set,this._contexts=new Map,this.deferredContexts=new Map,this.disposeOnce=new ne.a(()=>{for(const[e,t]of this.deferredContexts)t.promise.then(e=>{e.dispose()}).catch(t=>{this._logger.sendErrorEvent({eventName:"FluidDataStoreContextDisposeError",fluidDataStoreId:e},t)})}),this.dispose=()=>this.disposeOnce.value,this._logger=l.a.create(e)}[Symbol.iterator](){return this._contexts.entries()}get size(){return this._contexts.size}get disposed(){return this.disposeOnce.evaluated}notBoundLength(){return this.notBoundContexts.size}isNotBound(e){return this.notBoundContexts.has(e)}has(e){return this._contexts.has(e)}get(e){return this._contexts.get(e)}delete(e){return this.deferredContexts.delete(e),this.notBoundContexts.delete(e),this._contexts.delete(e)}getUnbound(e){if(void 0!==this._contexts.get(e)&&this.notBoundContexts.has(e))return this._contexts.get(e)}addUnbound(e){const t=e.id;Object(a.a)(!this._contexts.has(t),344),this._contexts.set(t,e),this.notBoundContexts.add(t),this.ensureDeferred(t)}async getBoundOrRemoted(e,t){const n=this.ensureDeferred(e);if(t||n.isCompleted)return n.promise}ensureDeferred(e){const t=this.deferredContexts.get(e);if(t)return t;const n=new k.a;return this.deferredContexts.set(e,n),n}bind(e){const t=this.notBoundContexts.delete(e);Object(a.a)(t,345),this.resolveDeferred(e)}resolveDeferred(e){const t=this._contexts.get(e);Object(a.a)(!!t,346),Object(a.a)(!this.notBoundContexts.has(e),347);const n=this.deferredContexts.get(e);Object(a.a)(!!n,348),n.resolve(t)}addBoundOrRemoted(e){const t=e.id;Object(a.a)(!this._contexts.has(t),349),this._contexts.set(t,e),this.ensureDeferred(t),this.resolveDeferred(t)}}var le=n(142),de=n(259);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function me(e,t,n){const r=new Set,i=[...t];for(const t of i){if(r.has(t))continue;r.add(t);const n=e[t];void 0!==n&&i.push(...n)}const s=[],a=[];for(const t of Object.keys(e))r.has(t)?s.push(t):a.push(t);return{referencedNodeIds:s,deletedNodeIds:a}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */const pe="DataStore",fe="SubDataStore",ge="Blob",ye="Other";class ve{constructor(e,t,n){this.unreferencedTimestampMs=e,this.inactiveTimeoutMs=t,this._inactive=!1,void 0!==n&&this.updateTracking(n)}get inactive(){return this._inactive}updateTracking(e){var t;const n=e-this.unreferencedTimestampMs;if(n>this.inactiveTimeoutMs)return this._inactive=!0,void(null===(t=this.timer)||void 0===t||t.clear());const r=this.inactiveTimeoutMs-n;void 0===this.timer&&(this.timer=new B.b(r,()=>{this._inactive=!0})),this.timer.restart(r)}stopTracking(){var e;null===(e=this.timer)||void 0===e||e.clear(),this._inactive=!1}}class be{constructor(e,t,n,r,i,s,o,c,u,h=!0){var d,p,f,y,v,S,w;let C;if(this.runtime=e,this.gcOptions=t,this.getNodePackagePath=n,this.getLastSummaryTimestampMs=r,this.isSummarizerClient=h,this._writeDataAtRoot=!1,this.initialStateNeedsReset=!1,this.currentGCVersion=1,this.newReferencesSinceLastRun=new Map,this.unreferencedNodesState=new Map,this.loggedUnreferencedEvents=new Set,this.pendingEventsQueue=[],this.completedRuns=0,this.mc=Object(m.c)(l.a.create(o,"GarbageCollector",{all:{completedGCRuns:()=>this.completedRuns}})),c)C=Oe(u),this.gcEnabled=C>0,this.sweepEnabled=null!==(d=null==u?void 0:u.sweepEnabled)&&void 0!==d&&d,this.sessionExpiryTimeoutMs=null==u?void 0:u.sessionExpiryTimeoutMs;else{if(t.sweepAllowed&&!t.gcAllowed)throw new g.e("GC sweep phase cannot be enabled without enabling GC mark phase");this.gcEnabled=!0===t.gcAllowed,this.sweepEnabled=!0===t.sweepAllowed,this.mc.config.getBoolean("Fluid.GarbageCollection.RunSessionExpiry")&&this.gcEnabled&&(this.sessionExpiryTimeoutMs=2592e6)}if(void 0!==this.sessionExpiryTimeoutMs&&!0!==this.mc.config.getBoolean("Fluid.GarbageCollection.DisableSessionExpiry")){const e=this.mc.config.getNumber("Fluid.GarbageCollection.TestOverride.SessionExpiryMs");void 0!==e&&(this.sessionExpiryTimeoutMs=e);const t=this.sessionExpiryTimeoutMs;!function e(t,n,r){let i;if(t>2147483647){const s=t-2147483647;i=setTimeout(()=>e(s,n,r),2147483647)}else i=setTimeout(()=>n(),t);r(i)}(t,()=>{this.runtime.closeFn(new g.a("Client session expired.",t))},e=>{this.sessionExpiryTimer=e})}this.latestSummaryGCVersion=null!=C?C:this.currentGCVersion,this.shouldRunGC=null!==(p=this.mc.config.getBoolean("Fluid.GarbageCollection.RunGC"))&&void 0!==p?p:this.gcEnabled&&!t.disableGC;const x=function(e,t){return void 0===t||function(e,t){const n=t.split(".").map(e=>(Object(a.a)(!1===isNaN(+e),762),Number.parseInt(e,10)));Object(a.a)(3===n.length,763);const[r,i,s]=n,o=e.split(/\W/);Object(a.a)(o.length>=3,764);const c=o.slice(0,3).map(e=>(Object(a.a)(!1===isNaN(+e),765),Number.parseInt(e,10))),[u,h,l]=c;if(u>r)return 1;if(r>u)return-1;if(h>i)return 1;if(i>h)return-1;if(l>s)return 1;if(s>l)return-1;if(3===o.length)return 0;return-1}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */(e,t)>=0}("0.59.4002",this.mc.config.getString("Fluid.GarbageCollection.TrackGCState.MinVersion"));this.trackGCState=!0===this.mc.config.getBoolean("Fluid.GarbageCollection.TrackGCState")&&x,this.shouldRunSweep=this.shouldRunGC&&(null!==(f=this.mc.config.getBoolean("Fluid.GarbageCollection.RunSweep"))&&void 0!==f?f:void 0!==this.sessionExpiryTimeoutMs&&this.sweepEnabled),this.inactiveTimeoutMs=null!==(v=null!==(y=this.mc.config.getNumber("Fluid.GarbageCollection.TestOverride.InactiveTimeoutMs"))&&void 0!==y?y:this.gcOptions.inactiveTimeoutMs)&&void 0!==v?v:6048e5,this.testMode=null!==(S=this.mc.config.getBoolean("Fluid.GarbageCollection.GCTestMode"))&&void 0!==S?S:!0===t.runGCInTestMode,this._writeDataAtRoot=null!==(w=this.mc.config.getBoolean("Fluid.GarbageCollection.WriteDataAtRoot"))&&void 0!==w?w:!0===this.gcOptions.writeDataAtRoot;const E=new k.b(async()=>{var e;if(void 0===i)return;const t=i.trees.gc;if(void 0!==t){this._writeDataAtRoot=!0;const e=await Se(t,s);return this.trackGCState&&(this.latestSerializedSummaryState=JSON.stringify(we(e))),e}const n={gcNodes:{"/":{outboundRoutes:[]}}},r=He(i,u);Object(a.a)(void 0!==r,680);for(const[t,i]of Object.entries(r.trees)){const r=i.blobs[b.gcBlobKey];if(void 0===r)continue;const o=await s(r);if(void 0===(null===(e=o.gcData)||void 0===e?void 0:e.gcNodes))continue;const c="/"+t;(await s(i.blobs[Pe])).isRootDataStore&&n.gcNodes["/"].outboundRoutes.push(c);for(const[e,t]of Object.entries(o.gcData.gcNodes)){const r="/"===e?c:`${c}${e}`;n.gcNodes[r]={outboundRoutes:Array.from(t)}}Object(a.a)(void 0!==n.gcNodes[c],681),n.gcNodes[c].unreferencedTimestampMs=o.unrefTimestamp}return 1===Object.keys(n.gcNodes).length?void 0:n});this.initializeBaseStateP=new k.b(async()=>{const e=this.runtime.getCurrentReferenceTimestampMs(),t=await E;if(void 0===t)return;const n={};for(const[r,i]of Object.entries(t.gcNodes))void 0!==i.unreferencedTimestampMs&&this.unreferencedNodesState.set(r,new ve(i.unreferencedTimestampMs,this.inactiveTimeoutMs,e)),n[r]=Array.from(i.outboundRoutes);this.previousGCDataFromLastRun={gcNodes:n}}),this.baseGCDetailsP=new k.b(async()=>{const e=await E;if(void 0===e)return new Map;const t={};for(const[n,r]of Object.entries(e.gcNodes))t[n]=Array.from(r.outboundRoutes);const n=me(t,["/"],this.mc.logger).referencedNodeIds,r=Object(O.g)({gcData:{gcNodes:t},usedRoutes:n});for(const[t,n]of Object.entries(e.gcNodes))if(void 0!==n.unreferencedTimestampMs){const e=r.get(t.slice(1));void 0!==e&&(e.unrefTimestamp=n.unreferencedTimestampMs)}return r});const T=JSON.stringify(Object.assign({gcEnabled:this.gcEnabled,sweepEnabled:this.sweepEnabled,runGC:this.shouldRunGC,runSweep:this.shouldRunSweep,writeAtRoot:this._writeDataAtRoot,testMode:this.testMode,sessionExpiry:this.sessionExpiryTimeoutMs,inactiveTimeout:this.inactiveTimeoutMs,existing:c},this.gcOptions));this.isSummarizerClient&&this.mc.logger.sendTelemetryEvent({eventName:"GarbageCollectorLoaded",gcConfigs:T}),this.shouldRunGC&&this.initializeBaseStateP.catch(e=>{const t=g.c.wrapIfUnrecognized(e,"FailedToInitializeGC");throw t.addTelemetryProperties({gcConfigs:T}),t})}static create(e,t,n,r,i,s,a,o,c,u){return new be(e,t,n,r,i,s,a,o,c,u)}get summaryStateNeedsReset(){return this.initialStateNeedsReset||this.shouldRunGC&&this.latestSummaryGCVersion!==this.currentGCVersion}get writeDataAtRoot(){return this._writeDataAtRoot}async collectGarbage(e){const{runSweep:t=this.shouldRunSweep,fullGC:n=!0===this.gcOptions.runFullGC||this.summaryStateNeedsReset}=e,r=e.logger?l.a.create(e.logger,void 0,{all:{completedGCRuns:()=>this.completedRuns}}):this.mc.logger;return l.c.timedExecAsync(r,{eventName:"GarbageCollection"},async e=>{await this.initializeBaseStateP,await this.runtime.updateStateBeforeGC();const t=await this.runtime.getGCData(n),i=me(t.gcNodes,["/"]),s=this.generateStatsAndLogEvents(i,r);this.updateStateSinceLastRun(t,r);const a=this.runtime.getCurrentReferenceTimestampMs();return this.updateCurrentState(t,i,a),this.runtime.updateUsedRoutes(i.referencedNodeIds,a),this.testMode&&this.runtime.deleteUnusedRoutes(i.deletedNodeIds),e.end(Object.assign({},s)),this.completedRuns++,s},{end:!0,cancel:"error"})}summarize(e,t){var n;if(!this.shouldRunGC||void 0===this.previousGCDataFromLastRun)return;const r={gcNodes:{}};for(const[e,t]of Object.entries(this.previousGCDataFromLastRun.gcNodes))r.gcNodes[e]={outboundRoutes:t,unreferencedTimestampMs:null===(n=this.unreferencedNodesState.get(e))||void 0===n?void 0:n.unreferencedTimestampMs};const i=JSON.stringify(we(r));if(this.trackGCState&&(this.pendingSerializedSummaryState=i,void 0!==this.latestSerializedSummaryState&&this.latestSerializedSummaryState===i&&!e&&t)){const e=Object(x.k)();return e.handleNodeCount++,{summary:{type:v.a.Handle,handle:"/gc",handleType:v.a.Tree},stats:e}}const s=new x.a;return s.addBlob("__gc_root",i),s.getSummaryTree()}getMetadata(){return{gcFeature:this.gcEnabled?this.currentGCVersion:0,sessionExpiryTimeoutMs:this.sessionExpiryTimeoutMs,sweepEnabled:this.sweepEnabled}}async getBaseGCDetails(){return this.baseGCDetailsP}async latestSummaryStateRefreshed(e,t){if(this.initialStateNeedsReset=!1,!this.shouldRunGC||!e.latestSummaryUpdated)return;if(e.wasSummaryTracked)return this.latestSummaryGCVersion=this.currentGCVersion,void(this.trackGCState&&(this.latestSerializedSummaryState=this.pendingSerializedSummaryState,this.pendingSerializedSummaryState=void 0));const n=e.snapshot,r=n.blobs[Ee];if(r){const e=await t(r);this.latestSummaryGCVersion=Oe(e)}const i=n.trees.gc;if(void 0!==i&&this.trackGCState){const e=await Se(i,t);this.latestSerializedSummaryState=JSON.stringify(we(e))}else this.latestSerializedSummaryState=void 0;this.pendingSerializedSummaryState=void 0}nodeUpdated(e,t,n,r,i){this.shouldRunGC&&this.logIfInactive(t,e,n,r,i)}addedOutboundReference(e,t){var n;if(!this.shouldRunGC)return;const r=null!==(n=this.newReferencesSinceLastRun.get(e))&&void 0!==n?n:[];r.push(t),this.newReferencesSinceLastRun.set(e,r),this.logIfInactive("Revived",t)}dispose(){void 0!==this.sessionExpiryTimer&&(clearTimeout(this.sessionExpiryTimer),this.sessionExpiryTimer=void 0)}updateCurrentState(e,t,n){this.previousGCDataFromLastRun=Object(O.b)(e),this.newReferencesSinceLastRun.clear();for(const e of t.referencedNodeIds){const t=this.unreferencedNodesState.get(e);void 0!==t&&(t.stopTracking(),this.unreferencedNodesState.delete(e))}if(void 0!==n)for(const e of t.deletedNodeIds){const t=this.unreferencedNodesState.get(e);void 0===t?this.unreferencedNodesState.set(e,new ve(n,this.inactiveTimeoutMs,n)):t.updateTracking(n)}}updateStateSinceLastRun(e,t){if(void 0===this.previousGCDataFromLastRun)return;const n=this.findMissingExplicitReferences(e,this.previousGCDataFromLastRun,this.newReferencesSinceLastRun);if(!0===this.mc.config.getBoolean("Fluid.GarbageCollection.LogUnknownOutboundReferences")&&n.length>0&&n.forEach(e=>{const n={eventName:"gcUnknownOutboundReferences",gcNodeId:e[0],gcRoutes:JSON.stringify(e[1])};t.sendPerformanceEvent(n)}),0===this.newReferencesSinceLastRun.size)return;const r=Object(O.c)(this.previousGCDataFromLastRun,e);this.newReferencesSinceLastRun.forEach((e,t)=>{void 0===r.gcNodes[t]?r.gcNodes[t]=e:r.gcNodes[t].push(...e)});const i=me(r.gcNodes,["/"]);for(const e of i.referencedNodeIds){const t=this.unreferencedNodesState.get(e);void 0!==t&&(t.stopTracking(),this.unreferencedNodesState.delete(e))}}findMissingExplicitReferences(e,t,n){Object(a.a)(void 0!==t,695);const r=Object.entries(e.gcNodes),i=[];return r.forEach(([e,r])=>{var s,a;const o=null!==(s=t.gcNodes[e])&&void 0!==s?s:[],c=null!==(a=n.get(e))&&void 0!==a?a:[],u=[];r.forEach(t=>{const n=this.runtime.getNodeType(t)===ge||this.runtime.getNodeType(t)===pe,r=!e.startsWith(t);n&&r&&!o.includes(t)&&!c.includes(t)&&u.push(t)}),u.length>0&&i.push([e,u])}),i}generateStatsAndLogEvents(e,t){let n=this.pendingEventsQueue.shift();for(;void 0!==n;){const e=this.getNodePackagePath(n.id);t.sendErrorEvent(Object.assign(Object.assign({},n),{pkg:e?{value:"/"+e.join("/"),tag:l.e.PackageData}:void 0})),n=this.pendingEventsQueue.shift()}const r={nodeCount:0,dataStoreCount:0,attachmentBlobCount:0,unrefNodeCount:0,unrefDataStoreCount:0,unrefAttachmentBlobCount:0,updatedNodeCount:0,updatedDataStoreCount:0,updatedAttachmentBlobCount:0},i=(e,t)=>{r.nodeCount++;const n=this.unreferencedNodesState.has(e)?t:!t;n&&r.updatedNodeCount++,t||r.unrefNodeCount++,this.runtime.getNodeType(e)===pe&&(r.dataStoreCount++,n&&r.updatedDataStoreCount++,t||r.unrefDataStoreCount++),this.runtime.getNodeType(e)===ge&&(r.attachmentBlobCount++,n&&r.updatedAttachmentBlobCount++,t||r.unrefAttachmentBlobCount++)};for(const t of e.referencedNodeIds)i(t,!0);for(const t of e.deletedNodeIds)i(t,!1);return r}logIfInactive(e,t,n=this.runtime.getCurrentReferenceTimestampMs(),r,i){if(void 0===n)return;const s=this.runtime.getNodeType(t);if(s!==pe&&s!==ge)return;if(!this.isSummarizerClient&&"Loaded"!==e)return;const a="inactiveObject_"+e,o=`${t}-${a}`,c=this.unreferencedNodesState.get(t);if((null==c?void 0:c.inactive)&&!this.loggedUnreferencedEvents.has(o)){this.loggedUnreferencedEvents.add(o);const e={eventName:a,id:t,type:s,age:n-c.unreferencedTimestampMs,timeout:this.inactiveTimeoutMs,completedGCRuns:this.completedRuns,lastSummaryTime:this.getLastSummaryTimestampMs(),externalRequest:null==i?void 0:i[nt.externalRequest],viaHandle:null==i?void 0:i[nt.viaHandle]},u=null!=r?r:this.getNodePackagePath(t);void 0!==u?this.mc.logger.sendErrorEvent(Object.assign(Object.assign({},e),{pkg:{value:"/"+u.join("/"),tag:l.e.PackageData}})):this.pendingEventsQueue.push(e)}}}async function Se(e,t){let n={gcNodes:{}};for(const r of Object.keys(e.blobs)){if(!r.startsWith("__gc"))continue;const i=e.blobs[r];if(void 0===i)continue;const s=await t(i);Object(a.a)(void 0!==s,685),n=Object(O.d)(n,s)}return n}function we(e){const t=Object.entries(e.gcNodes);t.sort(([e],[t])=>e.localeCompare(t));const n={gcNodes:{}};for(const[e,r]of t)r.outboundRoutes.sort(),n.gcNodes[e]=r;return n}function Ce(e){return e.summaryFormatVersion?e.summaryFormatVersion:"0.1"===e.snapshotFormatVersion?1:0}function xe(e){return!!e.summaryFormatVersion&&!e.disableIsolatedChannels}const Ee=".metadata";function Oe(e){var t;return e&&null!==(t=e.gcFeature)&&void 0!==t?t:0}const Te=[".protocol",".logTail",".serviceProtocol",".blobs","gc"],Pe=".component";function Ae(e){e.summary={type:v.a.Tree,tree:{[b.channelsTreeName]:e.summary}},e.stats.treeNodeCount++}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function Ne(e,t,n){const r=JSON.stringify(e);return n?{pkg:r,snapshotFormatVersion:"0.1",isRootDataStore:t}:{pkg:r,summaryFormatVersion:2,isRootDataStore:t}}function Ie(e,t,n){const r=Ne(e,t,n);return new le.b(Pe,JSON.stringify(r))}class ke extends c.a{constructor(e,t,n,r,s){super(),this.existing=t,this.bindState=n,this.isLocalDataStore=r,this.makeLocallyVisibleFn=s,this._disposed=!1,this.detachedRuntimeCreation=!1,this.loaded=!1,this.pending=[],this._isInMemoryRoot=!1,this._containerRuntime=e.runtime,this.id=e.id,this.storage=e.storage,this.scope=e.scope,this.writeGCDataAtRoot=e.writeGCDataAtRoot,this.disableIsolatedChannels=e.disableIsolatedChannels,this.pkg=e.pkg,Object(a.a)(!this.id.includes("/"),314),this._attachState=this.containerRuntime.attachState!==i.a.Detached&&this.existing?this.containerRuntime.attachState:i.a.Detached,this.bindToContext=()=>{Object(a.a)(this.bindState===i.b.NotBound,315),this.bindState=i.b.Binding,Object(a.a)(void 0!==this.channel,316),this.makeLocallyVisible(),this.bindState=i.b.Bound};this.summarizerNode=e.createSummarizerNodeFn(async(e,t)=>this.summarizeInternal(e,t),async e=>this.getGCDataInternal(e),async()=>this.getBaseGCDetails()),this.subLogger=l.a.create(this.logger,"FluidDataStoreContext"),this.thresholdOpsCounter=new de.a(ke.pendingOpsCountThreshold,this.subLogger)}get packagePath(){return Object(a.a)(void 0!==this.pkg,313),this.pkg}get options(){return this._containerRuntime.options}get clientId(){return this._containerRuntime.clientId}get clientDetails(){return this._containerRuntime.clientDetails}get logger(){return this._containerRuntime.logger}get deltaManager(){return this._containerRuntime.deltaManager}get connected(){return this._containerRuntime.connected}get IFluidHandleContext(){return this._containerRuntime.IFluidHandleContext}get containerRuntime(){return this._containerRuntime}get isLoaded(){return this.loaded}get baseSnapshot(){return this._baseSnapshot}get disposed(){return this._disposed}get attachState(){return this._attachState}get IFluidDataStoreRegistry(){return this.registry}async isRoot(){return this.isInMemoryRoot()||(await this.getInitialSnapshotDetails()).isRootDataStore}isInMemoryRoot(){return this._isInMemoryRoot}dispose(){this._disposed||(this._disposed=!0,this.channelDeferred&&this.channelDeferred.promise.then(e=>{e.dispose()}).catch(e=>{}))}rejectDeferredRealize(e,t){throw new d.a(e,{packageName:{value:t,tag:l.e.PackageData}})}async realize(){return Object(a.a)(!this.detachedRuntimeCreation,317),this.channelDeferred||(this.channelDeferred=new k.a,this.realizeCore(this.existing).catch(e=>{var t;const n=g.c.wrapIfUnrecognized(e,"realizeFluidDataStoreContext");n.addTelemetryProperties({fluidDataStoreId:{value:this.id,tag:"PackageData"}}),null===(t=this.channelDeferred)||void 0===t||t.reject(n),this.logger.sendErrorEvent({eventName:"RealizeError"},n)})),this.channelDeferred.promise}async factoryFromPackagePath(e){let t;Object(a.a)(this.pkg===e,318),void 0===e&&this.rejectDeferredRealize("packages is undefined");let n,r=this._containerRuntime.IFluidDataStoreRegistry;for(const i of e)r||this.rejectDeferredRealize("No registry for package",n),n=i,t=await r.get(i),t||this.rejectDeferredRealize("Registry does not contain entry for the package",i),r=t.IFluidDataStoreRegistry;const i=null==t?void 0:t.IFluidDataStoreFactory;return void 0===i&&this.rejectDeferredRealize("Can't find factory for package",n),{factory:i,registry:r}}async realizeCore(e){const t=await this.getInitialSnapshotDetails();this._baseSnapshot=t.snapshot;const n=t.pkg,{factory:r,registry:i}=await this.factoryFromPackagePath(n);Object(a.a)(void 0===this.registry,319),this.registry=i;const s=await r.instantiateDataStore(this,e);Object(a.a)(void 0!==s,320),this.bindRuntime(s)}setConnectionState(e,t){this.verifyNotClosed(),this.loaded&&(Object(a.a)(this.connected===e,321),this.channel.setConnectionState(e,t))}process(e,t,n){var r;this.verifyNotClosed();const i=e.contents,s=Object.assign(Object.assign({},e),{type:i.type,contents:i.content});if(this.summarizerNode.recordChange(s),this.loaded)return null===(r=this.channel)||void 0===r?void 0:r.process(s,t,n);Object(a.a)(!t,322),Object(a.a)(void 0!==this.pending,573),this.pending.push(s),this.thresholdOpsCounter.sendIfMultiple("StorePendingOps",this.pending.length)}processSignal(e,t){var n;this.verifyNotClosed(),this.loaded&&(null===(n=this.channel)||void 0===n||n.processSignal(e,t))}getQuorum(){return this._containerRuntime.getQuorum()}getAudience(){return this._containerRuntime.getAudience()}async summarize(e=!1,t=!0){return this.summarizerNode.summarize(e,t)}async summarizeInternal(e,t){await this.realize();const n=await this.channel.summarize(e,t);let r;this.disableIsolatedChannels||(Ae(n),r=[b.channelsTreeName]);const{pkg:i}=await this.getInitialSnapshotDetails(),s=Ne(i,await this.isRoot(),this.disableIsolatedChannels);return Object(x.b)(n,Pe,JSON.stringify(s)),this.writeGCDataAtRoot||Object(x.b)(n,b.gcBlobKey,JSON.stringify(this.summarizerNode.getGCSummaryDetails())),this.summarizerNode.isReferenced()||(n.summary.unreferenced=!0,n.stats.unreferencedBlobSize=n.stats.totalBlobSize),Object.assign(Object.assign({},n),{id:this.id,pathPartsForChildren:r})}async getGCData(e=!1){return this.summarizerNode.getGCData(e)}async getGCDataInternal(e=!1){return await this.realize(),Object(a.a)(void 0!==this.channel,323),this.channel.getGCData(e)}updateUsedRoutes(e,t){this.summarizerNode.updateUsedRoutes(e,t),this.lastUsedState={usedRoutes:e,gcTimestamp:t},this.loaded&&this.updateChannelUsedRoutes()}addedGCOutboundReference(e,t){this._containerRuntime.addedGCOutboundReference(e,t)}updateChannelUsedRoutes(){if(Object(a.a)(this.loaded,324),Object(a.a)(void 0!==this.channel,325),void 0===this.lastUsedState)return;const e=this.lastUsedState.usedRoutes.filter(e=>"/"!==e&&""!==e);this.channel.updateUsedRoutes(e,this.lastUsedState.gcTimestamp)}async request(e){return(await this.realize()).request(e)}submitMessage(e,t,n){this.verifyNotClosed(),Object(a.a)(!!this.channel,326);const r={content:t,type:e};this._containerRuntime.submitDataStoreOp(this.id,r,n)}setChannelDirty(e){this.verifyNotClosed();const t=this.deltaManager.lastSequenceNumber;this.summarizerNode.invalidate(t);const n=this.summarizerNode.getChild(e);n&&n.invalidate(t)}submitSignal(e,t){return this.verifyNotClosed(),Object(a.a)(!!this.channel,327),this._containerRuntime.submitDataStoreSignal(this.id,e,t)}makeLocallyVisible(){Object(a.a)(void 0!==this.channel,719),this.makeLocallyVisibleFn()}bindRuntime(e){var t;if(this.channel)throw new Error("Runtime already bound");try{Object(a.a)(!this.detachedRuntimeCreation,328),Object(a.a)(void 0!==this.channelDeferred,329),Object(a.a)(void 0!==this.pkg,330);const t=this.pending;for(const n of t)e.process(n,!1,void 0);this.thresholdOpsCounter.send("ProcessPendingOps",t.length),this.pending=void 0,this.loaded=!0,this.channel=e,Object.freeze(this.pkg),this.updateChannelUsedRoutes(),this.channelDeferred.resolve(this.channel)}catch(e){null===(t=this.channelDeferred)||void 0===t||t.reject(e),this.logger.sendErrorEvent({eventName:"BindRuntimeError",fluidDataStoreId:{value:this.id,tag:"PackageData"}},e)}}async getAbsoluteUrl(e){if(this.attachState===i.a.Attached)return this._containerRuntime.getAbsoluteUrl(e)}setInMemoryRoot(){this._isInMemoryRoot=!0}reSubmit(e,t){Object(a.a)(!!this.channel,331);const n=e;this.channel.reSubmit(n.type,n.content,t)}async applyStashedOp(e){this.channel||await this.realize(),Object(a.a)(!!this.channel,332);const t=e;return this.channel.applyStashedOp(t.content)}verifyNotClosed(){if(this._disposed)throw new Error("Context is closed")}getCreateChildSummarizerNodeFn(e,t){return(n,r,i)=>this.summarizerNode.createChild(n,e,t,{throwOnFailure:!0},r,i)}async uploadBlob(e){return this.containerRuntime.uploadBlob(e)}}ke.pendingOpsCountThreshold=1e3;class De extends ke{constructor(e){super(e,!0,i.b.Bound,!1,()=>{throw new Error("Already attached")}),this.initialSnapshotDetailsP=new k.b(async()=>{var e,t;let n,r=!0;if("string"==typeof this.initSnapshotValue){const t=(await this.storage.getVersions(this.initSnapshotValue,1))[0];n=null!==(e=await this.storage.getSnapshotTree(t))&&void 0!==e?e:void 0}else n=this.initSnapshotValue;const i=async e=>Object(f.a)(this.storage,e);if(n){const e=await this.summarizerNode.loadBaseSummary(n,i);n=e.baseSummary,this.pending=e.outstandingOps.concat(this.pending)}if(n&&void 0!==n.blobs[Pe]){const e=await i(n.blobs[Pe]);let s;s=Ce(e)<1?e.pkg.startsWith('["')&&e.pkg.endsWith('"]')?JSON.parse(e.pkg):[e.pkg]:JSON.parse(e.pkg),this.pkg=s,r=null===(t=e.isRootDataStore)||void 0===t||t,xe(e)&&(n=n.trees[b.channelsTreeName],Object(a.a)(void 0!==n,510))}return{pkg:this.pkg,isRootDataStore:r,snapshot:n}}),this.initSnapshotValue=e.snapshotTree,this.baseGCDetailsP=new k.b(async()=>{var t;return null!==(t=await e.getBaseGCDetails())&&void 0!==t?t:{}})}async getInitialSnapshotDetails(){return this.initialSnapshotDetailsP}async getInitialGCSummaryDetails(){return this.getBaseGCDetails()}async getBaseGCDetails(){return this.baseGCDetailsP}generateAttachMessage(){throw new Error("Cannot attach remote store")}}class Fe extends ke{constructor(e){super(e,void 0!==e.snapshotTree,e.snapshotTree?i.b.Bound:i.b.NotBound,!0,e.makeLocallyVisibleFn),this.snapshotTree=e.snapshotTree,!0===e.isRootDataStore&&this.setInMemoryRoot(),this.createProps=e.createProps,this.attachListeners()}attachListeners(){this.once("attaching",()=>{Object(a.a)(this.attachState===i.a.Detached,333),this._attachState=i.a.Attaching}),this.once("attached",()=>{Object(a.a)(this.attachState===i.a.Attaching,334),this._attachState=i.a.Attached})}generateAttachMessage(){Object(a.a)(void 0!==this.channel,335),Object(a.a)(void 0!==this.pkg,336);const e=this.channel.getAttachSummary();this.disableIsolatedChannels||Ae(e);const t=Ne(this.pkg,this.isInMemoryRoot(),this.disableIsolatedChannels);Object(x.b)(e,Pe,JSON.stringify(t));const n=Object(x.g)(e.summary);return{id:this.id,snapshot:n,type:this.pkg[this.pkg.length-1]}}async getInitialSnapshotDetails(){var e;let t,n=this.snapshotTree,r=!1;return void 0!==n&&(t=await async function(e,t){const n=await Object(f.a)(e,t.blobs[Pe]),r=Ce(n);return Object(a.a)(r>0,469),n}(this.storage,n),xe(t)&&(n=n.trees[b.channelsTreeName],Object(a.a)(void 0!==n,511)),void 0===this.pkg&&(this.pkg=JSON.parse(t.pkg),(null===(e=t.isRootDataStore)||void 0===e||e)&&(r=!0,this.setInMemoryRoot()))),Object(a.a)(void 0!==this.pkg,338),{pkg:this.pkg,isRootDataStore:r,snapshot:n}}async getInitialGCSummaryDetails(){return{}}async getBaseGCDetails(){return{}}}class je extends Fe{constructor(e){super(e)}}class Re extends Fe{constructor(e){super(e),this.detachedRuntimeCreation=!0}async attachRuntime(e,t){Object(a.a)(this.detachedRuntimeCreation,340),Object(a.a)(void 0===this.channelDeferred,341);const n=e.IFluidDataStoreFactory,r=await this.factoryFromPackagePath(this.pkg);Object(a.a)(r.factory===n,342),Object(a.a)(void 0===this.registry,343),this.registry=r.registry,this.detachedRuntimeCreation=!1,this.channelDeferred=new k.a,super.bindRuntime(t),await this.isRoot()&&(void 0!==t.makeVisibleAndAttachGraph?t.makeVisibleAndAttachGraph():t.bindToContext())}async getInitialSnapshotDetails(){if(this.detachedRuntimeCreation)throw new Error("Detached Fluid Data Store context can't be realized! Please attach runtime first!");return super.getInitialSnapshotDetails()}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */const Me=e=>"string"==typeof(null==e?void 0:e.internalId)&&"string"==typeof(null==e?void 0:e.alias),_e=(e,t,n,r,i)=>new qe(e,t,n,r,i);var Be,Le;!function(e){e.Aliased="Aliased",e.Aliasing="Aliasing",e.None="None"}(Be||(Be={}));class qe{constructor(e,t,n,r,i){this.fluidDataStoreChannel=e,this.internalId=t,this.runtime=n,this.datastores=r,this.logger=i,this.aliasState=Be.None}async trySetAlias(e){switch(this.aliasState){case Be.Aliasing:return"Aliasing";case Be.Aliased:return this.alias===e?"Success":"AlreadyAliased";case Be.None:break;default:Object(u.a)(this.aliasState)}this.aliasState=Be.Aliasing;const t={internalId:this.internalId,alias:e};if(void 0!==this.fluidDataStoreChannel.makeVisibleAndAttachGraph?this.fluidDataStoreChannel.makeVisibleAndAttachGraph():this.fluidDataStoreChannel.bindToContext(),this.runtime.attachState===i.a.Detached){const e=this.datastores.processAliasMessageCore(t);return this.aliasState=Be.Aliased,e?"Success":"Conflict"}return await this.ackBasedPromise(e=>{this.runtime.submitDataStoreAliasOp(t,e)}).then(t=>(this.aliasState=Be.Aliased,t&&(this.alias=e),t)).catch(t=>(this.logger.sendErrorEvent({eventName:"AliasingException",alias:{value:e,tag:l.e.UserData},internalId:{value:this.internalId,tag:l.e.PackageData}},t),this.aliasState=Be.None,!1))?"Success":"Conflict"}async request(e){return this.fluidDataStoreChannel.request(e)}get IFluidRouter(){return this.fluidDataStoreChannel}async ackBasedPromise(e){let t;return new Promise((n,r)=>{t=()=>r(new Error("ContainerRuntime disposed while this ack-based Promise was pending")),this.runtime.disposed?t():(this.runtime.on("dispose",t),e(n,r))}).finally(()=>{this.runtime.off("dispose",t)})}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class ze{constructor(e,t,n,r,s,a,o,c,u,h,d=new he(a)){this.baseSnapshot=e,this.runtime=t,this.submitAttachFn=n,this.getCreateChildSummarizerNodeFn=r,this.deleteChildSummarizerNodeFn=s,this.gcNodeUpdated=c,this.aliasMap=u,this.writeGCDataAtRoot=h,this.contexts=d,this.pendingAttach=new Map,this.attachOpFiredForDataStore=new Set,this.disposeOnce=new ne.a(()=>this.contexts.dispose()),this.dataStoresSinceLastGC=[],this.dispose=()=>this.disposeOnce.value,this.logger=l.a.create(a),this.containerRuntimeHandle=new F.a(this.runtime,"/",this.runtime.IFluidHandleContext);const m=new k.b(async()=>o()),p=async e=>(await m).get(e),f=new Map;if(e)for(const[t,n]of Object.entries(e.trees))f.set(t,n);let g=0;for(const[e,t]of f){let n;if(t.unreferenced&&g++,this.runtime.attachState!==i.a.Detached)n=new De({id:e,snapshotTree:t,getBaseGCDetails:async()=>p(e),runtime:this.runtime,storage:this.runtime.storage,scope:this.runtime.scope,createSummarizerNodeFn:this.getCreateChildSummarizerNodeFn(e,{type:b.CreateSummarizerNodeSource.FromSummary}),writeGCDataAtRoot:this.writeGCDataAtRoot,disableIsolatedChannels:this.runtime.disableIsolatedChannels});else{if("object"!=typeof t)throw new Error("Snapshot should be there to load from!!");const r=t;n=new je({id:e,pkg:void 0,runtime:this.runtime,storage:this.runtime.storage,scope:this.runtime.scope,createSummarizerNodeFn:this.getCreateChildSummarizerNodeFn(e,{type:b.CreateSummarizerNodeSource.FromSummary}),makeLocallyVisibleFn:()=>this.makeDataStoreLocallyVisible(e),snapshotTree:r,isRootDataStore:void 0,writeGCDataAtRoot:this.writeGCDataAtRoot,disableIsolatedChannels:this.runtime.disableIsolatedChannels})}this.contexts.addBoundOrRemoted(n)}this.containerLoadStats={containerLoadDataStoreCount:f.size,referencedDataStoreCount:f.size-g}}aliases(){return this.aliasMap}processAttachMessage(e,t){var n,r;const i=e.contents;if(this.dataStoresSinceLastGC.push(i.id),t)return Object(a.a)(this.pendingAttach.has(i.id),350),null===(n=this.contexts.get(i.id))||void 0===n||n.emit("attached"),void this.pendingAttach.delete(i.id);if(this.alreadyProcessed(i.id)){throw new g.b("Duplicate DataStore created with existing id",Object.assign(Object.assign({},Object(g.f)(e)),{dataStoreId:{value:i.id,tag:l.e.PackageData}}))}const s=new Map;let o;i.snapshot&&(o=Object(ce.a)(i.snapshot.entries,s));const c=[i.type],u=new De({id:i.id,snapshotTree:o,getBaseGCDetails:async()=>({}),runtime:this.runtime,storage:new ue(this.runtime.storage,s),scope:this.runtime.scope,createSummarizerNodeFn:this.getCreateChildSummarizerNodeFn(i.id,{type:b.CreateSummarizerNodeSource.FromAttach,sequenceNumber:e.sequenceNumber,snapshot:null!==(r=i.snapshot)&&void 0!==r?r:{entries:[Ie(c,!0,this.runtime.disableIsolatedChannels)]}}),writeGCDataAtRoot:this.writeGCDataAtRoot,disableIsolatedChannels:this.runtime.disableIsolatedChannels,pkg:c});this.contexts.addBoundOrRemoted(u)}processAliasMessage(e,t,n){const r=e.contents;if(!Me(r))throw new g.b("malformedDataStoreAliasMessage",Object.assign({},Object(g.f)(e)));const i=t,s=this.processAliasMessageCore(r);n&&i(s)}processAliasMessageCore(e){if(this.alreadyProcessed(e.alias))return!1;const t=this.contexts.get(e.internalId);if(void 0===t)return this.logger.sendErrorEvent({eventName:"AliasFluidDataStoreNotFound",fluidDataStoreId:e.internalId}),!1;const n=new F.a(t,e.internalId,this.runtime.IFluidHandleContext);return this.runtime.addedGCOutboundReference(this.containerRuntimeHandle,n),this.aliasMap.set(e.alias,t.id),t.setInMemoryRoot(),!0}alreadyProcessed(e){return void 0!==this.aliasMap.get(e)||void 0!==this.contexts.get(e)}makeDataStoreLocallyVisible(e){const t=this.contexts.getUnbound(e);if(Object(a.a)(!!t,351),this.runtime.attachState!==i.a.Detached){t.emit("attaching");const n=t.generateAttachMessage();this.pendingAttach.set(e,n),this.submitAttachFn(n),this.attachOpFiredForDataStore.add(e)}this.contexts.bind(e)}createDetachedDataStoreCore(e,t,n=Object(T.a)()){const r=new Re({id:n,pkg:e,runtime:this.runtime,storage:this.runtime.storage,scope:this.runtime.scope,createSummarizerNodeFn:this.getCreateChildSummarizerNodeFn(n,{type:b.CreateSummarizerNodeSource.Local}),makeLocallyVisibleFn:()=>this.makeDataStoreLocallyVisible(n),snapshotTree:void 0,isRootDataStore:t,writeGCDataAtRoot:this.writeGCDataAtRoot,disableIsolatedChannels:this.runtime.disableIsolatedChannels});return this.contexts.addUnbound(r),r}_createFluidDataStoreContext(e,t,n,r){const i=new je({id:t,pkg:e,runtime:this.runtime,storage:this.runtime.storage,scope:this.runtime.scope,createSummarizerNodeFn:this.getCreateChildSummarizerNodeFn(t,{type:b.CreateSummarizerNodeSource.Local}),makeLocallyVisibleFn:()=>this.makeDataStoreLocallyVisible(t),snapshotTree:void 0,isRootDataStore:n,writeGCDataAtRoot:this.writeGCDataAtRoot,disableIsolatedChannels:this.runtime.disableIsolatedChannels,createProps:r});return this.contexts.addUnbound(i),i}get disposed(){return this.disposeOnce.evaluated}resubmitDataStoreOp(e,t){const n=e,r=this.contexts.get(n.address);Object(a.a)(!!r,352),r.reSubmit(n.contents,t)}async applyStashedOp(e){const t=e,n=this.contexts.get(t.address);return Object(a.a)(!!n,353),n.applyStashedOp(t.contents)}async applyStashedAttachOp(e){this.pendingAttach.set(e.id,e),this.processAttachMessage({contents:e},!1)}processFluidDataStoreOp(e,t,n){const r=e.contents,i=Object.assign(Object.assign({},e),{contents:r.contents}),s=this.contexts.get(r.address);Object(a.a)(!!s,354),s.process(i,t,n),this.gcNodeUpdated("/"+r.address,e.timestamp,s.isLoaded?s.packagePath:void 0)}async getDataStore(e,t){var n;const r=null!==(n=this.aliasMap.get(e))&&void 0!==n?n:e,i=await this.contexts.getBoundOrRemoted(r,t);if(void 0===i){const t={url:e};throw Object(C.f)(Object(C.a)(t),t)}return i}processSignal(e,t,n){const r=this.contexts.get(e);if(!r)return Object(a.a)(!n,355),void this.logger.sendTelemetryEvent({eventName:"SignalFluidDataStoreNotFound",fluidDataStoreId:{value:e,tag:l.e.PackageData}});r.processSignal(t,n)}setConnectionState(e,t){for(const[n,r]of this.contexts)try{r.setConnectionState(e,t)}catch(e){this.logger.sendErrorEvent({eventName:"SetConnectionStateError",clientId:t,fluidDataStore:n},e)}}setAttachState(e){let t;t=e===i.a.Attaching?"attaching":"attached";for(const[,e]of this.contexts)this.contexts.isNotBound(e.id)||e.emit(t)}get size(){return this.contexts.size}async summarize(e,t){const n=new x.a;return await Promise.all(Array.from(this.contexts).filter(([e,t])=>(Object(a.a)(t.attachState!==i.a.Attaching,357),t.attachState===i.a.Attached)).map(async([r,i])=>{const s=await i.summarize(e,t);n.addWithStats(r,s)})),n.getSummaryTree()}createSummary(){const e=new x.a;let t;do{const n=e.summary.tree;t=this.contexts.notBoundLength(),Array.from(this.contexts).filter(([e,t])=>!(this.contexts.isNotBound(e)||n[e]||this.attachOpFiredForDataStore.has(e))).map(([t,n])=>{let r;if(n.isLoaded){const e=n.generateAttachMessage().snapshot;r=Object(x.h)(e,!0)}else Object(a.a)(!!this.baseSnapshot,358),r=Object(x.f)(this.baseSnapshot.trees[t]);e.addWithStats(t,r)})}while(t!==this.contexts.notBoundLength());return e.getSummaryTree()}async updateStateBeforeGC(){for(const e of this.dataStoresSinceLastGC){const t=this.contexts.get(e);if(Object(a.a)(void 0!==t,694),await t.isRoot()){const n=new F.a(t,e,this.runtime.IFluidHandleContext);this.runtime.addedGCOutboundReference(this.containerRuntimeHandle,n)}}this.dataStoresSinceLastGC=[]}async getGCData(e=!1){const t=new O.a;return await Promise.all(Array.from(this.contexts).filter(([e,t])=>t.attachState===i.a.Attached).map(async([n,r])=>{const i=await r.getGCData(e);t.prefixAndAddNodes(n,i.gcNodes)})),t.addNode("/",await this.getOutboundRoutes()),t.getGCData()}updateUsedRoutes(e,t){var n;const r=Object(O.h)(e);for(const[e]of r)Object(a.a)(this.contexts.has(e),359);for(const[e,i]of this.contexts)i.updateUsedRoutes(null!==(n=r.get(e))&&void 0!==n?n:[],t)}deleteUnusedRoutes(e){for(const t of e){const e=t.split("/");if(e.length>2)continue;const n=e[1];Object(a.a)(this.contexts.has(n),727),this.contexts.delete(n),this.deleteChildSummarizerNodeFn(n)}}async getOutboundRoutes(){const e=[];for(const[t,n]of this.contexts){await n.isRoot()&&e.push("/"+t)}return e}getDataStorePackagePath(e){const t=this.contexts.get(e.split("/")[1]);return(null==t?void 0:t.isLoaded)?t.packagePath:void 0}getGCNodeType(e){const t=e.split("/");if(this.contexts.has(t[1]))return 2===t.length?pe:fe}}function He(e,t){if(e){if(function(e){return!!e&&!e.disableIsolatedChannels}(t)){const t=e.trees[b.channelsTreeName];return Object(a.a)(!!t,360),t}{const t={};for(const[n,r]of Object.entries(e.trees))Te.includes(n)||(t[n]=r);return Object.assign(Object.assign({},e),{trees:t})}}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */!function(e){e[e.Local=0]="Local",e[e.Broadcast=1]="Broadcast",e[e.Acked=2]="Acked",e[e.Nacked=-1]="Nacked"}(Le||(Le={}));class Ue{constructor(e,t){this.clientId=e,this.clientSequenceNumber=t,this.state=Le.Local,this.defSummaryOp=new k.a,this.defSummaryAck=new k.a}static createLocal(e,t){return new Ue(e,t)}static createFromOp(e){const t=new Ue(e.clientId,e.clientSequenceNumber);return t.broadcast(e),t}get summaryOp(){return this._summaryOp}get summaryAckNack(){return this._summaryAckNack}hasBeenAcked(){return this.state===Le.Acked}broadcast(e){return Object(a.a)(this.state===Le.Local,373),this._summaryOp=e,this.defSummaryOp.resolve(),this.state=Le.Broadcast,!0}ackNack(e){return Object(a.a)(this.state===Le.Broadcast,374),this._summaryAckNack=e,this.defSummaryAck.resolve(),this.state=e.type===y.a.SummaryAck?Le.Acked:Le.Nacked,!0}async waitBroadcast(){return await this.defSummaryOp.promise,this._summaryOp}async waitAckNack(){return await this.defSummaryAck.promise,this._summaryAckNack}}class Ve{constructor(e,t){this.clientId=e,this.summaryCollection=t,this.localSummaries=new Map,this._disposed=!1}get disposed(){return this._disposed}watchSummary(e){let t=this.localSummaries.get(e);return t||(t=Ue.createLocal(this.clientId,e),this.localSummaries.set(t.clientSequenceNumber,t)),t}waitFlushed(){return this.summaryCollection.waitFlushed()}tryGetSummary(e){return this.localSummaries.get(e)}setSummary(e){this.localSummaries.set(e.clientSequenceNumber,e)}dispose(){this.summaryCollection.removeWatcher(this.clientId),this._disposed=!0}}class Ge extends c.a{constructor(e,t){super(),this.deltaManager=e,this.logger=t,this.summaryWatchers=new Map,this.pendingSummaries=new Map,this.refreshWaitNextAck=new k.a,this.deltaManager.on("op",e=>this.handleOp(e))}get latestAck(){return this.lastAck}emit(e,...t){return super.emit(e,...t)}get opsSinceLastAck(){var e,t;return this.deltaManager.lastSequenceNumber-(null!==(t=null===(e=this.lastAck)||void 0===e?void 0:e.summaryAck.sequenceNumber)&&void 0!==t?t:this.deltaManager.initialSequenceNumber)}addOpListener(e){this.deltaManager.on("op",e)}removeOpListener(e){this.deltaManager.off("op",e)}createWatcher(e){const t=new Ve(e,this);return this.summaryWatchers.set(e,t),t}removeWatcher(e){this.summaryWatchers.delete(e)}setPendingAckTimerTimeoutCallback(e,t){this.maxAckWaitTime=e,this.pendingAckTimerTimeoutCallback=t}unsetPendingAckTimerTimeoutCallback(){this.maxAckWaitTime=void 0,this.pendingAckTimerTimeoutCallback=void 0}async waitFlushed(){for(;this.pendingSummaries.size>0;){const e=Array.from(this.pendingSummaries,([,e])=>e.waitAckNack());await Promise.all(e)}return this.lastAck}async waitSummaryAck(e){for(;!this.lastAck||this.lastAck.summaryOp.referenceSequenceNumber<e;)await this.refreshWaitNextAck.promise;return this.lastAck}handleOp(e){var t;switch(e.type){case y.a.Summarize:return void this.handleSummaryOp(e);case y.a.SummaryAck:return void this.handleSummaryAck(e);case y.a.SummaryNack:return void this.handleSummaryNack(e);default:{const n=e.timestamp;return void 0!==this.lastSummaryTimestamp&&void 0!==this.maxAckWaitTime&&n-this.lastSummaryTimestamp>=this.maxAckWaitTime&&(null===(t=this.pendingAckTimerTimeoutCallback)||void 0===t||t.call(this)),void this.emit("default",e)}}}handleSummaryOp(e){let t;const n=this.summaryWatchers.get(e.clientId);n&&(t=n.tryGetSummary(e.clientSequenceNumber),t&&t.broadcast(e)),t||(t=Ue.createFromOp(e),n&&n.setSummary(t)),this.pendingSummaries.set(e.sequenceNumber,t),this.lastSummaryTimestamp=e.timestamp,this.emit(y.a.Summarize,e)}handleSummaryAck(e){const t=e.contents.summaryProposal.summarySequenceNumber,n=this.pendingSummaries.get(t);n&&void 0!==n.summaryOp?(n.ackNack(e),this.pendingSummaries.delete(t),(!this.lastAck||t>this.lastAck.summaryAck.contents.summaryProposal.summarySequenceNumber)&&(this.lastAck={summaryOp:n.summaryOp,summaryAck:e},this.refreshWaitNextAck.resolve(),this.refreshWaitNextAck=new k.a,this.emit(y.a.SummaryAck,e))):t>=this.deltaManager.initialSequenceNumber&&this.logger.sendErrorEvent({eventName:"SummaryAckWithoutOp",sequenceNumber:e.sequenceNumber,summarySequenceNumber:t,initialSequenceNumber:this.deltaManager.initialSequenceNumber})}handleSummaryNack(e){const t=e.contents.summaryProposal.summarySequenceNumber,n=this.pendingSummaries.get(t);n&&(n.ackNack(e),this.pendingSummaries.delete(t),this.emit(y.a.SummaryNack,e))}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class We extends c.a{constructor(e,t,n){super(),this.clientMap=new Map,this.rootNode={sequenceNumber:-1,olderClient:void 0,youngerClient:void 0},this._youngestClient=this.rootNode,this.logger=l.a.create(e,"OrderedClientCollection");const r=n.getMembers();for(const[e,t]of r)this.addClient(e,t);n.on("addMember",(e,n)=>{const r=this.addClient(e,n);this.emit("addClient",r,t.lastSequenceNumber)}),n.on("removeMember",e=>{const n=t.lastSequenceNumber,r=this.removeClient(e);void 0===r?this.logger.sendErrorEvent({eventName:"ClientNotFound",clientId:e,sequenceNumber:n}):this.emit("removeClient",r,n)})}get count(){return this.clientMap.size}get oldestClient(){return this.rootNode.youngerClient}addClient(e,t){Object(a.a)(t.sequenceNumber>-1,502);let n=this._youngestClient;for(;n.sequenceNumber>t.sequenceNumber;)Object(a.a)(void 0!==n.olderClient,503),n=n.olderClient;const r={clientId:e,sequenceNumber:t.sequenceNumber,client:Object.assign({},t.client),olderClient:n,youngerClient:n.youngerClient};return r.olderClient.youngerClient=r,void 0===r.youngerClient?this._youngestClient=r:r.youngerClient.olderClient=r,this.clientMap.set(e,r),r}removeClient(e){const t=this.clientMap.get(e);if(void 0!==t)return t.olderClient.youngerClient=t.youngerClient,void 0===t.youngerClient?this._youngestClient=t.olderClient:t.youngerClient.olderClient=t.olderClient,this.clientMap.delete(e),t}getAllClients(){const e=[];let t=this.rootNode;for(;void 0!==t.youngerClient;)e.push(t.youngerClient),t=t.youngerClient;return e}}class Ke extends c.a{constructor(e,t,n,r){let i,s;super(),this.orderedClientCollection=t,this.isEligibleFn=r,this._eligibleCount=0;for(const e of t.getAllClients())this.addClient(e,0),"number"!=typeof n&&(e.clientId===n.electedClientId&&(i=e,void 0===n.electedParentId&&"summarizer"!==e.client.details.type&&(s=e)),e.clientId===n.electedParentId&&(s=e));t.on("addClient",(e,t)=>this.addClient(e,t)),t.on("removeClient",(e,t)=>this.removeClient(e,t)),"number"==typeof n?this._electionSequenceNumber=n:((null==i?void 0:i.clientId)!==n.electedClientId?e.sendErrorEvent({eventName:"InitialElectedClientNotFound",electionSequenceNumber:n.electionSequenceNumber,expectedClientId:n.electedClientId,electedClientId:null==i?void 0:i.clientId,clientCount:t.count}):void 0===i||r(i)||(i=s=this.findFirstEligibleParent(s),e.sendErrorEvent({eventName:"InitialElectedClientIneligible",electionSequenceNumber:n.electionSequenceNumber,expectedClientId:n.electedClientId,electedClientId:null==i?void 0:i.clientId})),this._electedParent=s,this._electedClient=i,this._electionSequenceNumber=n.electionSequenceNumber)}get eligibleCount(){return this._eligibleCount}get electionSequenceNumber(){return this._electionSequenceNumber}get electedClient(){return this._electedClient}get electedParent(){return this._electedParent}tryElectingClient(e,t){let n=!1;const r="summarizer"===(null==e?void 0:e.client.details.type),i=this._electedClient;this._electedClient!==e&&(this._electionSequenceNumber=t,this._electedClient=e,n=!0),this._electedParent===e||r||(this._electedParent=e,n=!0),n&&this.emit("election",e,t,i)}tryElectingParent(e,t){this._electedParent!==e&&(this._electedParent=e,this.emit("election",this._electedClient,t,this._electedClient))}findFirstEligibleParent(e){let t=e;for(;void 0!==t&&(!this.isEligibleFn(t)||"summarizer"===t.client.details.type);)t=t.youngerClient;return t}addClient(e,t){var n;if(this.isEligibleFn(e)){this._eligibleCount++;const r="summarizer"===e.client.details.type,i="summarizer"===(null===(n=this._electedClient)||void 0===n?void 0:n.client.details.type);void 0===this._electedClient||!i&&r?this.tryElectingClient(e,t):void 0!==this._electedParent||r||this.tryElectingParent(e,t)}}removeClient(e,t){var n,r,i,s,a;if(this.isEligibleFn(e))if(this._eligibleCount--,this._electedClient===e)if(this._electedParent!==e){if("summarizer"!==this._electedClient.client.details.type)throw new g.e("Elected client should be a summarizer client 1");this.tryElectingClient(this._electedParent,t)}else{const e=null!==(r=this.findFirstEligibleParent(null===(n=this._electedParent)||void 0===n?void 0:n.youngerClient))&&void 0!==r?r:this.findFirstEligibleParent(this.orderedClientCollection.oldestClient);this.tryElectingClient(e,t)}else if(this._electedParent===e){if("summarizer"!==(null===(i=this._electedClient)||void 0===i?void 0:i.client.details.type))throw new g.e("Elected client should be a summarizer client 2");const e=null!==(a=this.findFirstEligibleParent(null===(s=this._electedParent)||void 0===s?void 0:s.youngerClient))&&void 0!==a?a:this.findFirstEligibleParent(this.orderedClientCollection.oldestClient);this.tryElectingParent(e,t)}}getAllEligibleClients(){return this.orderedClientCollection.getAllClients().filter(this.isEligibleFn)}incrementElectedClient(e){var t,n;const r=null!==(n=this.findFirstEligibleParent(null===(t=this._electedParent)||void 0===t?void 0:t.youngerClient))&&void 0!==n?n:this.findFirstEligibleParent(this.orderedClientCollection.oldestClient);void 0===this._electedClient||this._electedClient===this._electedParent?this.tryElectingClient(r,e):this.tryElectingParent(r,e)}resetElectedClient(e){const t=this.findFirstEligibleParent(this.orderedClientCollection.oldestClient);void 0===this._electedClient||this._electedClient===this._electedParent?this.tryElectingClient(t,e):this.tryElectingParent(t,e)}peekNextElectedClient(){var e,t;return null!==(t=this.findFirstEligibleParent(null===(e=this._electedParent)||void 0===e?void 0:e.youngerClient))&&void 0!==t?t:this.findFirstEligibleParent(this.orderedClientCollection.oldestClient)}serialize(){var e,t;return{electionSequenceNumber:this.electionSequenceNumber,electedClientId:null===(e=this.electedClient)||void 0===e?void 0:e.clientId,electedParentId:null===(t=this.electedParent)||void 0===t?void 0:t.clientId}}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class $e{constructor(e,t,n){this.delayWindowMs=e,this.maxDelayMs=t,this.delayFn=n,this.startTimes=[]}get numAttempts(){return this.startTimes.length}getAttempts(){return[...this.startTimes]}get latestAttemptTime(){return this.startTimes.length>0?this.startTimes[this.startTimes.length-1]:void 0}getDelay(){const e=Date.now(),t=this.latestAttemptTime;if(void 0!==t){const n=t-e;n>0&&(this.startTimes=this.startTimes.map(e=>e-n))}this.startTimes=this.startTimes.filter(t=>e-t<this.delayWindowMs);const n=Math.min(this.delayFn(this.startTimes.length),this.maxDelayMs);return this.startTimes.push(e),this.startTimes=this.startTimes.map(e=>e+n),n===this.maxDelayMs&&this.startTimes.shift(),n}}const Je=({multiplier:e=2,coefficient:t=1,offset:n=0,initialDelay:r}={})=>i=>Math.max(0,i<=0&&void 0!==r?r:t*Math.pow(e,i)+n);new Promise(()=>{});class Qe{constructor(e){this.runtime=e,this._cancelled=!1,this.stopDeferred=new k.a}get cancelled(){return this._cancelled||Object(a.a)(this.runtime.deltaManager.active,605),this._cancelled}get waitCancelled(){return this.stopDeferred.promise}static async create(e){const t=new Qe(e);return await t.waitStart(),t}async waitStart(){if(this.runtime.disposed)this.stop("summarizerClientDisconnected");else{if(this.runtime.once("dispose",()=>this.stop("summarizerClientDisconnected")),!this.runtime.connected){const e=new Promise(e=>this.runtime.once("connected",e));await Promise.race([e,this.waitCancelled])}this.runtime.once("disconnected",()=>this.stop("summarizerClientDisconnected"))}}stop(e){this._cancelled||(this._cancelled=!0,this.stopDeferred.resolve(e))}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class Ye{constructor(e,t,n,r,i=(()=>o.a.now())){this.batchEventEmitter=e,this.trackedBatchCount=0,this.logger=l.a.create(t,"Batching"),this.batchEventEmitter.on("batchBegin",e=>{this.startBatchSequenceNumber=e.sequenceNumber,this.batchProcessingStartTimeStamp=i(),this.trackedBatchCount++}),this.batchEventEmitter.on("batchEnd",(e,t)=>{Object(a.a)(void 0!==this.startBatchSequenceNumber&&void 0!==this.batchProcessingStartTimeStamp,698);const s=t.sequenceNumber-this.startBatchSequenceNumber+1;s>=n&&this.logger.sendErrorEvent({eventName:"LengthTooBig",length:s,threshold:n,batchEndSequenceNumber:t.sequenceNumber,duration:i()-this.batchProcessingStartTimeStamp,batchError:void 0!==e}),this.trackedBatchCount%r==0&&this.logger.sendPerformanceEvent({eventName:"Length",length:s,samplingRate:r,batchEndSequenceNumber:t.sequenceNumber,duration:i()-this.batchProcessingStartTimeStamp}),this.startBatchSequenceNumber=void 0,this.batchProcessingStartTimeStamp=void 0})}}function Xe(e){return e.type===y.a.Operation||e.type===y.a.Summarize}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class Ze{constructor(e,t){this.messageSize=new Map,this._nonSystemOpCount=0,this._opsSizeAccumulator=0,t||(e.inbound.on("push",e=>{const t="string"==typeof e.contents?e.contents:JSON.stringify(e.contents),n=Ze.messageHasData(e)?e.data:"";this.messageSize[Ze.messageId(e)]=t.length+n.length}),e.on("op",e=>{var t;this._nonSystemOpCount+=Xe(e)?1:0;const n=Ze.messageId(e);this._opsSizeAccumulator+=null!==(t=this.messageSize[n])&&void 0!==t?t:0,this.messageSize.delete(n)}))}get nonSystemOpCount(){return this._nonSystemOpCount}get opsSizeAccumulator(){return this._opsSizeAccumulator}static messageId(e){return e.sequenceNumber}static messageHasData(e){return void 0!==e.data}reset(){this._nonSystemOpCount=0,this._opsSizeAccumulator=0}}var et;!function(e){e.FluidDataStoreOp="component",e.Attach="attach",e.ChunkedOp="chunkedOp",e.BlobAttach="blobAttach",e.Rejoin="rejoin",e.Alias="alias"}(et||(et={}));const tt={idleTime:15e3,maxTime:6e4,maxOps:1e3,maxAckWaitTime:6e5};var nt;!function(e){e.wait="wait",e.externalRequest="externalRequest",e.viaHandle="viaHandle"}(nt||(nt={}));const rt=b.FlushMode.TurnBased;var it;function st(e){return!!Object.values(it).includes(e.type)}!function(e){e.FluidDataStoreOp="component",e.Attach="attach",e.ChunkedOp="chunkedOp",e.BlobAttach="blobAttach",e.Rejoin="rejoin",e.Alias="alias",e.Operation="op"}(it||(it={}));class at{constructor(e,t){this.deltaManager=e,this.logger=t,this.localPaused=!1,this.timePaused=0,this.batchCount=0,this.deltaManager.on("prepareSend",e=>{if(0===e.length)return;const t=e[0].metadata;if(!(null==t?void 0:t.batch))return;if(1===e.length)return void delete t.batch;const n=e[e.length-1];n.metadata=Object.assign(Object.assign({},n.metadata),{batch:!1})}),this.deltaManager.inbound.on("push",e=>{this.trackPending(e)}),Object(a.a)(!this.localPaused,659);const n=this.deltaManager.inbound.toArray();for(const e of n)this.trackPending(e);this.deltaManager.on("op",e=>this.afterOpProcessing(e.sequenceNumber))}afterOpProcessing(e){Object(a.a)(!this.localPaused,660),0!==this.deltaManager.inbound.length?void 0!==this.pauseSequenceNumber&&(Object(a.a)(e<this.pauseSequenceNumber,662),e+1===this.pauseSequenceNumber&&this.pauseQueue()):Object(a.a)(void 0===this.pauseSequenceNumber,661)}pauseQueue(){Object(a.a)(!this.localPaused,663),this.localPaused=!0,this.timePaused=o.a.now(),this.deltaManager.inbound.pause()}resumeQueue(e,t){const n=t.sequenceNumber,r=o.a.now()-this.timePaused;this.batchCount++,this.batchCount%1e3==1&&this.logger.sendTelemetryEvent({eventName:"BatchStats",sequenceNumber:n,length:n-e+1,msnDistance:n-t.minimumSequenceNumber,duration:r,batchCount:this.batchCount,interrupted:this.localPaused}),this.localPaused&&(this.localPaused=!1,r>5e3&&this.logger.sendErrorEvent({eventName:"MaxBatchWaitTimeExceeded",duration:r,sequenceNumber:n,length:n-e}),this.deltaManager.inbound.resume())}trackPending(e){Object(a.a)(0!==this.deltaManager.inbound.length,664),Object(a.a)(void 0===this.currentBatchClientId==(void 0===this.pauseSequenceNumber),665);const t=e.metadata,n=null==t?void 0:t.batch;if(!st(e))return Object(a.a)(void 0===this.currentBatchClientId,666),Object(a.a)(void 0===n,667),void Object(a.a)(!this.localPaused,668);if(void 0!==this.currentBatchClientId||void 0!==n){if((void 0!==this.currentBatchClientId||!1===n)&&this.currentBatchClientId!==e.clientId)throw new g.b("OpBatchIncomplete",Object.assign({batchClientId:this.currentBatchClientId},Object(g.f)(e)));n?(Object(a.a)(void 0===this.currentBatchClientId,670),Object(a.a)(!this.localPaused,671),this.pauseSequenceNumber=e.sequenceNumber,this.currentBatchClientId=e.clientId,1===this.deltaManager.inbound.length&&this.pauseQueue()):!1===n?(Object(a.a)(void 0!==this.pauseSequenceNumber,672),this.resumeQueue(this.pauseSequenceNumber,e),this.pauseSequenceNumber=void 0,this.currentBatchClientId=void 0):Object(a.a)(void 0!==this.currentBatchClientId,673)}else Object(a.a)(!this.localPaused,669)}}class ot{constructor(e,t,n){this.deltaManager=e,this.emitter=t,this.logger=n,this.hitError=!1,this.deltaScheduler=new ee(this.deltaManager,l.a.create(this.logger,"DeltaScheduler")),new at(e,n)}beforeOpProcessing(e){var t;if(this.batchClientId!==e.clientId){Object(a.a)(void 0===this.batchClientId,674),this.emitter.emit("batchBegin",e),this.deltaScheduler.batchBegin(e);const n=null===(t=null==e?void 0:e.metadata)||void 0===t?void 0:t.batch;this.batchClientId=n?e.clientId:void 0}}afterOpProcessing(e,t){var n;if(Object(a.a)(!this.hitError,675),e)return this.hitError=!0,this.batchClientId=void 0,this.emitter.emit("batchEnd",e,t),void this.deltaScheduler.batchEnd(t);const r=null===(n=null==t?void 0:t.metadata)||void 0===n?void 0:n.batch;return void 0===this.batchClientId||!1===r?(this.batchClientId=void 0,this.emitter.emit("batchEnd",void 0,t),void this.deltaScheduler.batchEnd(t)):void 0}}class ct extends c.a{constructor(e,t,n,r,s,o,c,u,h,p,v,b){var w,C,x,E,O,T,P,N,I,k,F;super(),this.context=e,this.registry=t,this.runtimeOptions=c,this.containerScope=u,this.logger=h,this.requestHandler=b,this.defaultMaxConsecutiveReconnects=15,this._orderSequentiallyCalls=0,this.needsFlush=!1,this.flushTrigger=!1,this.paused=!1,this.consecutiveReconnects=0,this._disposed=!1,this.emitDirtyDocumentEvent=!0,this.onOp=e=>{Object(a.a)(!this.paused,296),this.paused=!0,this.context.deltaManager.inbound.pause();this.pendingStateManager.applyStashedOpsAt(e.sequenceNumber).then(()=>{this.paused=!1,this.context.deltaManager.inbound.resume()},e=>{this.closeFn(Object(d.i)(e))})},this.summarizeOnDemand=(...e)=>{if("summarizer"===this.clientDetails.type)return this.summarizer.summarizeOnDemand(...e);if(void 0!==this.summaryManager)return this.summaryManager.summarizeOnDemand(...e);throw new g.e("Can't summarize, disableSummaries: "+this.summariesDisabled)},this.enqueueSummarize=(...e)=>{if("summarizer"===this.clientDetails.type)return this.summarizer.enqueueSummarize(...e);if(void 0!==this.summaryManager)return this.summaryManager.enqueueSummarize(...e);throw new g.e("Can't summarize, disableSummaries: "+this.summariesDisabled)},this.messageAtLastSummary=null==n?void 0:n.message,this.disableIsolatedChannels=null!==(w=this.runtimeOptions.summaryOptions.disableIsolatedChannels)&&void 0!==w&&w,this._connected=this.context.connected,this.chunkMap=new Map(s),this.handleContext=new A("",this),this.mc=Object(m.c)(l.a.create(this.logger,"ContainerRuntime")),this._aliasingEnabled=null!==(C=this.mc.config.getBoolean("Fluid.ContainerRuntime.UseDataStoreAliasing"))&&void 0!==C&&C||null!==(x=c.useDataStoreAliasing)&&void 0!==x&&x,this._maxOpSizeInBytes=null!==(E=this.mc.config.getNumber("Fluid.ContainerRuntime.MaxOpSizeInBytes"))&&void 0!==E?E:768e3,this.maxConsecutiveReconnects=null!==(O=this.mc.config.getNumber("Fluid.ContainerRuntime.MaxConsecutiveReconnects"))&&void 0!==O?O:this.defaultMaxConsecutiveReconnects,this._flushMode=c.flushMode,this.garbageCollector=be.create(this,this.runtimeOptions.gcOptions,e=>this.getGCNodePackagePath(e),()=>{var e;return null===(e=this.messageAtLastSummary)||void 0===e?void 0:e.timestamp},e.baseSnapshot,async e=>Object(f.a)(this.storage,e),this.mc.logger,p,n,"summarizer"===this.context.clientDetails.type);const j=this.deltaManager.initialSequenceNumber;this.summarizerNode=Object(S.a)(l.a.create(this.logger,"SummarizerNode"),async(e,t)=>this.summarizeInternal(e,t),j,e.baseSnapshot?j:void 0,{canReuseHandle:!1,throwOnFailure:!0,gcDisabled:!this.garbageCollector.shouldRunGC}),this.context.baseSnapshot&&this.summarizerNode.loadBaseSummaryWithoutDifferential(this.context.baseSnapshot),this.dataStores=new ze(He(e.baseSnapshot,n),this,e=>this.submit(et.Attach,e),(e,t)=>(n,r,i)=>this.summarizerNode.createChild(n,e,t,void 0,r,i),e=>this.summarizerNode.deleteChild(e),this.mc.logger,async()=>this.garbageCollector.getBaseGCDetails(),(e,t,n)=>this.garbageCollector.nodeUpdated(e,"Changed",t,n),new Map(o),this.garbageCollector.writeDataAtRoot),this.blobManager=new oe(this.handleContext,v,()=>this.storage,e=>this.submit(et.BlobAttach,void 0,void 0,{blobId:e}),e=>this.garbageCollector.nodeUpdated(e,"Loaded"),this,this.logger),this.scheduleManager=new ot(e.deltaManager,this,l.a.create(this.logger,"ScheduleManager")),this.deltaSender=this.deltaManager,this.pendingStateManager=new se(this,async(e,t)=>this.applyStashedOp(e,t),this._flushMode,e.pendingLocalState),this.context.quorum.on("removeMember",e=>{this.clearPartialChunks(e)}),this.summaryCollection=new Ge(this.deltaManager,this.logger);const{attachState:R,pendingLocalState:M}=this.context;if(this.dirtyContainer=R!==i.a.Attached||(null===(T=M)||void 0===T?void 0:T.pendingStates.length)>0,this.context.updateDirtyContainerState(this.dirtyContainer),!1===this.runtimeOptions.summaryOptions.generateSummaries&&(this.runtimeOptions.summaryOptions.disableSummaries=!0),this.summariesDisabled)this.mc.logger.sendTelemetryEvent({eventName:"SummariesDisabled"});else{const e=l.a.create(this.logger,"OrderedClientElection"),t=new We(e,this.context.deltaManager,this.context.quorum),n=new Ke(e,t,null!=r?r:this.context.deltaManager.lastSequenceNumber,D.isClientEligible),i=null!==(P=this.mc.config.getBoolean("Fluid.ContainerRuntime.summarizerClientElection"))&&void 0!==P?P:!0===(null===(N=this.runtimeOptions.summaryOptions)||void 0===N?void 0:N.summarizerClientElection),s=null!==(I=this.runtimeOptions.summaryOptions.maxOpsSinceLastSummary)&&void 0!==I?I:7e3;if(this.summarizerClientElection=new D(e,this.summaryCollection,n,s,i),"summarizer"===this.context.clientDetails.type)this._summarizer=new Y("/_summarizer",this,()=>this.summaryConfiguration,this,this.handleContext,this.summaryCollection,async e=>Qe.create(e));else if(D.clientDetailsPermitElection(this.context.clientDetails)){const e=()=>{this.summaryCollection.opsSinceLastAck>s&&(this.logger.sendErrorEvent({eventName:"SummaryStatus:Behind"}),this.summaryCollection.once(y.a.SummaryAck,()=>{this.logger.sendTelemetryEvent({eventName:"SummaryStatus:CaughtUp"}),this.summaryCollection.on("default",e)}),this.summaryCollection.off("default",e))};this.summaryCollection.on("default",e),this.summaryManager=new Z(this.summarizerClientElection,this,this.summaryCollection,this.logger,this.formRequestSummarizerFn(this.context.loader),new $e(6e4,3e4,Je({coefficient:20,initialDelay:0})),{initialDelayMs:this.runtimeOptions.summaryOptions.initialSummarizerDelayMs},this.runtimeOptions.summaryOptions.summarizerOptions),this.summaryManager.start()}}let _;this.deltaManager.on("readonly",e=>{Object(a.a)(e===this.deltaManager.readOnlyInfo.readonly,292),Object(a.a)(!e||!this.connected,293),this.replayPendingStates()}),void 0!==e.pendingLocalState&&this.deltaManager.on("op",this.onOp),h.sendTelemetryEvent(Object.assign({eventName:"DeviceSpec"},function(){try{if("object"==typeof navigator&&null!==navigator)return{deviceMemory:navigator.deviceMemory,hardwareConcurrency:navigator.hardwareConcurrency}}catch(e){}return{}}())),p?(this.createContainerMetadata={createContainerRuntimeVersion:null==n?void 0:n.createContainerRuntimeVersion,createContainerTimestamp:null==n?void 0:n.createContainerTimestamp},_=null!==(F=null!==(k=null==n?void 0:n.summaryNumber)&&void 0!==k?k:null==n?void 0:n.summaryCount)&&void 0!==F?F:0):(this.createContainerMetadata={createContainerRuntimeVersion:"0.59.4002",createContainerTimestamp:Date.now()},_=0),this.nextSummaryNumber=_+1,this.logger.sendTelemetryEvent(Object.assign(Object.assign(Object.assign({eventName:"ContainerLoadStats"},this.createContainerMetadata),this.dataStores.containerLoadStats),{summaryNumber:_,summaryFormatVersion:null==n?void 0:n.summaryFormatVersion,disableIsolatedChannels:null==n?void 0:n.disableIsolatedChannels,gcVersion:null==n?void 0:n.gcFeature})),function(e,t,n){new te(e,t,n)}(this.context.clientId,this.deltaManager,this.logger),((e,t,n=1e3,r=1e3)=>{new Ye(e,t,n,r);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */})(this,this.logger),this.opTracker=new Ze(this.deltaManager,!0===this.mc.config.getBoolean("Fluid.ContainerRuntime.DisableOpTracking"))}get IContainerRuntime(){return this}get IFluidRouter(){return this}static async load(e,t,n,r={},i=e.scope,s){var o,c,u;const h=e,d=null!==(o=h.taggedLogger)&&void 0!==o?o:new l.d(h.logger),m=l.a.create(d,void 0,{all:{runtimeVersion:"0.59.4002"}}),{summaryOptions:p={},gcOptions:y={},loadSequenceNumberVerification:v="close",useDataStoreAliasing:b=!1,flushMode:S=rt}=r,w=e.storage,C=new N.a(t),x=async t=>{var n;const r=null===(n=e.baseSnapshot)||void 0===n?void 0:n.blobs[t];if(e.baseSnapshot&&r)return Object(a.a)(void 0!==w,501),Object(f.a)(w,r)},[E,O,T,P]=await Promise.all([x(".chunks"),x(Ee),x(".electedSummarizer"),x(".aliases")]),A=!0===s||!0===e.existing,I=await oe.load(null===(c=e.baseSnapshot)||void 0===c?void 0:c.trees[".blobs"],async e=>(Object(a.a)(void 0!==w,598),Object(f.a)(w,e))),k=null===(u=null==O?void 0:O.message)||void 0===u?void 0:u.sequenceNumber;if(void 0!==k){const t=e.deltaManager.initialSequenceNumber;if("bypass"!==v&&k!==t){const n=new g.b("Summary metadata mismatch",{runtimeSequenceNumber:k,protocolSequenceNumber:t});"log"===v?m.sendErrorEvent({eventName:"SequenceNumberMismatch"},n):e.closeFn(n)}}return new ct(e,C,O,T,null!=E?E:[],null!=P?P:[],{summaryOptions:p,gcOptions:y,loadSequenceNumberVerification:v,useDataStoreAliasing:b,flushMode:S},i,m,A,I,n)}get options(){return this.context.options}get clientId(){return this.context.clientId}get clientDetails(){return this.context.clientDetails}get deltaManager(){return this.context.deltaManager}get storage(){return this.context.storage}get reSubmitFn(){return this.reSubmit}get closeFn(){return this.context.closeFn}get flushMode(){return this._flushMode}get scope(){return this.containerScope}get IFluidDataStoreRegistry(){return this.registry}get attachState(){return this.context.attachState}get IFluidHandleContext(){return this.handleContext}get connected(){return this._connected}get summarizerClientId(){var e;return null===(e=this.summarizerClientElection)||void 0===e?void 0:e.electedClientId}get summaryConfiguration(){var e;return Object.assign(Object.assign({},tt),null===(e=this.runtimeOptions.summaryOptions)||void 0===e?void 0:e.summaryConfigOverrides)}get disposed(){return this._disposed}get summarizer(){return Object(a.a)(void 0!==this._summarizer,599),this._summarizer}get summariesDisabled(){var e;return!0===this.runtimeOptions.summaryOptions.disableSummaries||!0===(null===(e=this.runtimeOptions.summaryOptions.summaryConfigOverrides)||void 0===e?void 0:e.disableSummaries)}dispose(e){var t;this._disposed||(this._disposed=!0,this.logger.sendTelemetryEvent({eventName:"ContainerRuntimeDisposed",isDirty:this.isDirty,lastSequenceNumber:this.deltaManager.lastSequenceNumber,attachState:this.attachState},e),void 0!==this.summaryManager&&this.summaryManager.dispose(),this.garbageCollector.dispose(),null===(t=this._summarizer)||void 0===t||t.dispose(),this.dataStores.dispose(),this.pendingStateManager.dispose(),this.emit("dispose"),this.removeAllListeners())}get IFluidTokenProvider(){var e;if(null===(e=this.options)||void 0===e?void 0:e.intelligence)return{intelligence:this.options.intelligence}}async request(e){try{const t=w.a.create(e);return"_summarizer"===t.pathParts[0]&&1===t.pathParts.length?void 0!==this._summarizer?{status:200,mimeType:"fluid/object",value:this.summarizer}:Object(C.a)(e):void 0!==this.requestHandler?this.requestHandler(t,this):Object(C.a)(e)}catch(e){return Object(C.d)(e)}}async resolveHandle(e){try{const t=w.a.create(e),n=t.pathParts[0];if("_channels"===n)return this.resolveHandle(t.createSubRequest(1));if(n===oe.basePath&&t.isLeaf(2)){const n=await this.blobManager.getBlob(t.pathParts[1]);return n?{status:200,mimeType:"fluid/object",value:n.get()}:Object(C.a)(e)}if(t.pathParts.length>0){const r=await this.getDataStoreFromRequest(n,e),i=t.createSubRequest(1);return Object(a.a)(i.url.startsWith("/"),294),r.IFluidRouter.request(i)}return Object(C.a)(e)}catch(e){return Object(C.d)(e)}}async getDataStoreFromRequest(e,t){var n,r,i;const s="boolean"!=typeof(null===(n=t.headers)||void 0===n?void 0:n[nt.wait])||(null===(r=t.headers)||void 0===r?void 0:r[nt.wait]),a=await this.dataStores.getDataStore(e,s);if((null===(i=t.headers)||void 0===i?void 0:i[nt.externalRequest])&&this.garbageCollector.shouldRunGC){const e=(await a.getBaseGCDetails()).usedRoutes;if(void 0!==e&&!e.includes("")&&!e.includes("/"))throw Object(C.f)(Object(C.a)(t),t)}const o=await a.realize(),c=Object(O.f)(t.url.split("?")[0]);return this.garbageCollector.nodeUpdated("/"+c,"Loaded",void 0,a.packagePath,null==t?void 0:t.headers),o}addMetadataToSummary(e){var t;const n=Object.assign(Object.assign(Object.assign(Object.assign({},this.createContainerMetadata),{summaryCount:this.nextSummaryNumber,summaryNumber:this.nextSummaryNumber++,summaryFormatVersion:1,disableIsolatedChannels:this.disableIsolatedChannels||void 0}),this.garbageCollector.getMetadata()),{message:null!==(r=this.deltaManager.lastMessage,t=void 0===r?void 0:{clientId:r.clientId,clientSequenceNumber:r.clientSequenceNumber,minimumSequenceNumber:r.minimumSequenceNumber,referenceSequenceNumber:r.referenceSequenceNumber,sequenceNumber:r.sequenceNumber,timestamp:r.timestamp,type:r.type})&&void 0!==t?t:this.messageAtLastSummary});var r;Object(x.b)(e,Ee,JSON.stringify(n))}addContainerStateToSummary(e,t,n){var r;if(this.addMetadataToSummary(e),this.chunkMap.size>0){const t=JSON.stringify([...this.chunkMap]);Object(x.b)(e,".chunks",t)}const i=this.dataStores.aliases();if(i.size>0&&Object(x.b)(e,".aliases",JSON.stringify([...i])),this.summarizerClientElection){const t=JSON.stringify(null===(r=this.summarizerClientElection)||void 0===r?void 0:r.serialize());Object(x.b)(e,".electedSummarizer",t)}const s=this.blobManager.summarize();if(Object.keys(s.summary.tree).length>0&&Object(x.d)(e,".blobs",s),this.garbageCollector.writeDataAtRoot){const r=this.garbageCollector.summarize(t,n);void 0!==r&&Object(x.c)(e,"gc",r)}}shouldContinueReconnecting(){return this.maxConsecutiveReconnects<=0||(this.pendingStateManager.hasPendingMessages()?(this.consecutiveReconnects++,this.consecutiveReconnects===Math.floor(this.maxConsecutiveReconnects/2)&&this.mc.logger.sendTelemetryEvent({eventName:"ReconnectsWithNoProgress",attempts:this.consecutiveReconnects}),this.consecutiveReconnects<this.maxConsecutiveReconnects):(this.resetReconnectCount(),!0))}resetReconnectCount(){this.consecutiveReconnects=0}replayPendingStates(){if(!this.canSendOps())return;const e=this.dirtyContainer;let t;this.dirtyContainer=!1,Object(a.a)(this.emitDirtyDocumentEvent,295),this.emitDirtyDocumentEvent=!1;try{this.pendingStateManager.replayPendingStates()}finally{t=this.dirtyContainer,this.dirtyContainer=e,this.emitDirtyDocumentEvent=!0}this.updateDocumentDirtyState(t)}async applyStashedOp(e,t){switch(e){case et.FluidDataStoreOp:return this.dataStores.applyStashedOp(t);case et.Attach:return this.dataStores.applyStashedAttachOp(t);case et.Alias:case et.BlobAttach:return;case et.ChunkedOp:throw new Error("chunkedOp not expected here");case et.Rejoin:throw new Error("rejoin not expected here");default:Object(u.a)(e,"Unknown ContainerMessageType: "+e)}}setConnectionState(e,t){this.verifyNotClosed();const n=this._connected!==e;if(this._connected=e,n){if(this.deltaManager.off("op",this.onOp),this.context.pendingLocalState=void 0,!this.shouldContinueReconnecting())return void this.closeFn(new g.d("Runtime detected too many reconnects with no progress syncing local ops",void 0,{attempts:this.consecutiveReconnects}));this.replayPendingStates()}this.dataStores.setConnectionState(e,t),Object(p.c)(this.mc.logger,this,e,t)}process(e,t){var n;if(this.verifyNotClosed(),!st(e))return;let r=Object.assign({},e);this.scheduleManager.beforeOpProcessing(r);try{r=function(e){if(e.type===y.a.Operation){if(void 0!==e.contents.address&&void 0===e.contents.type)e.type=et.FluidDataStoreOp;else{const t=e.contents;Object(a.a)(void 0!==t.type,289),e.type=t.type,e.contents=t.contents}Object(a.a)(st(e),290)}return e}(r),r=this.processRemoteChunkedMessage(r);const{localAck:e,localOpMetadata:i}=this.pendingStateManager.processMessage(r,t);switch(this.pendingStateManager.hasPendingMessages()||this.updateDocumentDirtyState(!1),r.type){case et.Attach:this.dataStores.processAttachMessage(r,t||e);break;case et.Alias:this.processAliasMessage(r,i,t);break;case et.FluidDataStoreOp:this.dataStores.processFluidDataStoreOp(r,t||e,i);break;case et.BlobAttach:Object(a.a)(null===(n=null==r?void 0:r.metadata)||void 0===n?void 0:n.blobId,298),this.blobManager.processBlobAttachOp(r.metadata.blobId,t)}this.emit("op",r),this.scheduleManager.afterOpProcessing(void 0,r),t&&this.resetReconnectCount()}catch(e){throw this.scheduleManager.afterOpProcessing(e,r),e}}processAliasMessage(e,t,n){this.dataStores.processAliasMessage(e,t,n)}processSignal(e,t){const n=e.content,r={clientId:e.clientId,content:n.contents.content,type:n.contents.type};void 0!==n.address?this.dataStores.processSignal(n.address,r,t):this.emit("signal",r,t)}async getRootDataStore(e,t=!0){const n=await this.dataStores.getDataStore(e,t);return Object(a.a)(await n.isRoot(),299),n.realize()}setFlushMode(e){e!==this._flushMode&&(this.mc.logger.sendTelemetryEvent({eventName:"FlushMode Updated",old:this._flushMode,new:e}),e===b.FlushMode.Immediate&&this.flush(),this._flushMode=e,this.pendingStateManager.onFlushModeUpdated(e))}flush(){if(Object(a.a)(0===this._orderSequentiallyCalls,588),this.deltaSender&&(this.pendingStateManager.onFlush(),this.needsFlush&&(this.needsFlush=!1,this.canSendOps())))return this.deltaSender.flush()}orderSequentially(e){if(this.flushMode===b.FlushMode.TurnBased)return void this.trackOrderSequentiallyCalls(e);const t=this.flushMode;this.setFlushMode(b.FlushMode.TurnBased),this.trackOrderSequentiallyCalls(e),this.flush(),this.setFlushMode(t)}trackOrderSequentiallyCalls(e){try{this._orderSequentiallyCalls++,e()}catch(e){throw this.closeFn(new g.d("orderSequentially callback exception",e)),e}finally{this._orderSequentiallyCalls--}}async createDataStore(e){const t=Object(T.a)();return _e(await this._createDataStore(e,!1,t),t,this,this.dataStores,this.mc.logger)}async createRootDataStoreLegacy(e,t){const n=await this._createDataStore(e,!0,t);return void 0!==n.makeVisibleAndAttachGraph?n.makeVisibleAndAttachGraph():n.bindToContext(),n}async createRootDataStore(e,t){return!0===this._aliasingEnabled?this.createAndAliasDataStore(e,t):this.createRootDataStoreLegacy(e,t)}async createAndAliasDataStore(e,t,n){const r=Object(T.a)(),i=await this._createDataStore(e,!1,r,n),s=_e(i,r,this,this.dataStores,this.mc.logger),a=await s.trySetAlias(t);if("Success"!==a)throw new g.d("dataStoreAliasFailure",void 0,{alias:{value:t,tag:l.e.UserData},internalId:{value:r,tag:l.e.PackageData},aliasResult:a});return s}createDetachedRootDataStore(e,t){return this.dataStores.createDetachedDataStoreCore(e,!0,t)}createDetachedDataStore(e){return this.dataStores.createDetachedDataStoreCore(e,!1)}async _createDataStoreWithPropsLegacy(e,t,n=Object(T.a)(),r=!1){const i=await this.dataStores._createFluidDataStoreContext(Array.isArray(e)?e:[e],n,r,t).realize();return r&&(void 0!==i.makeVisibleAndAttachGraph?i.makeVisibleAndAttachGraph():i.bindToContext(),this.logger.sendTelemetryEvent({eventName:"Root datastore with props",hasProps:void 0!==t})),_e(i,n,this,this.dataStores,this.mc.logger)}async _createDataStoreWithProps(e,t,n=Object(T.a)(),r=!1){return!0===this._aliasingEnabled&&r?this.createAndAliasDataStore(e,n,t):this._createDataStoreWithPropsLegacy(e,t,n,r)}async _createDataStore(e,t,n=Object(T.a)(),r){return this.dataStores._createFluidDataStoreContext(Array.isArray(e)?e:[e],n,t,r).realize()}canSendOps(){return this.connected&&!this.deltaManager.readOnlyInfo.readonly}getQuorum(){return this.context.quorum}getAudience(){return this.context.audience}get isDirty(){return this.dirtyContainer}isContainerMessageDirtyable(e,t){if(e===et.Attach){if("_scheduler"===t.id)return!1}else if(e===et.FluidDataStoreOp){if("_scheduler"===t.address)return!1}return!0}submitSignal(e,t){this.verifyNotClosed();const n={address:void 0,contents:{type:e,content:t}};return this.context.submitSignalFn(n)}submitDataStoreSignal(e,t,n){const r={address:e,contents:{type:t,content:n}};return this.context.submitSignalFn(r)}setAttachState(e){e===i.a.Attaching?Object(a.a)(this.attachState===i.a.Attaching,301):(Object(a.a)(this.attachState===i.a.Attached,302),this.emit("attached")),e!==i.a.Attached||this.pendingStateManager.hasPendingMessages()||this.updateDocumentDirtyState(!1),this.dataStores.setAttachState(e)}createSummary(e){e&&this.blobManager.setRedirectTable(e);const t=this.dataStores.createSummary();return this.disableIsolatedChannels||Ae(t),this.addContainerStateToSummary(t,!0,!1),t.summary}async getAbsoluteUrl(e){if(void 0===this.context.getAbsoluteUrl)throw new Error("Driver does not implement getAbsoluteUrl");if(this.attachState===i.a.Attached)return this.context.getAbsoluteUrl(e)}async summarizeInternal(e,t){const n=await this.dataStores.summarize(e,t);let r;return this.disableIsolatedChannels||(Ae(n),r=[b.channelsTreeName]),this.addContainerStateToSummary(n,e,t),Object.assign(Object.assign({},n),{id:"",pathPartsForChildren:r})}async summarize(e){this.verifyNotClosed();const{fullTree:t=!1,trackState:n=!0,summaryLogger:r=this.logger,runGC:i=this.garbageCollector.shouldRunGC,runSweep:s,fullGC:o}=e;let c;i&&(c=await this.collectGarbage({logger:r,runSweep:s,fullGC:o}));const{stats:u,summary:h}=await this.summarizerNode.summarize(t,n);return Object(a.a)(h.type===v.a.Tree,303),{stats:u,summary:h,gcStats:c}}async updateStateBeforeGC(){return this.dataStores.updateStateBeforeGC()}async getGCData(e){const t=new O.a,n=await this.dataStores.getGCData(e);t.addNodes(n.gcNodes);const r=this.blobManager.getGCData(e);return t.addNodes(r.gcNodes),t.getGCData()}updateUsedRoutes(e,t){this.summarizerNode.updateUsedRoutes([""]);const n=[];for(const t of e)t.split("/")[1]!==oe.basePath&&n.push(t);return this.dataStores.updateUsedRoutes(n,t)}deleteUnusedRoutes(e){const t=[],n=[];for(const r of e)this.isBlobPath(r)?t.push(r):n.push(r);this.blobManager.deleteUnusedRoutes(t),this.dataStores.deleteUnusedRoutes(n)}getCurrentReferenceTimestampMs(){var e,t,n;return null!==(t=null===(e=this.deltaManager.lastMessage)||void 0===e?void 0:e.timestamp)&&void 0!==t?t:null===(n=this.messageAtLastSummary)||void 0===n?void 0:n.timestamp}getNodeType(e){var t;return this.isBlobPath(e)?ge:null!==(t=this.dataStores.getGCNodeType(e))&&void 0!==t?t:ye}getGCNodePackagePath(e){switch(this.getNodeType(e)){case ge:return["_blobs"];case pe:case fe:return this.dataStores.getDataStorePackagePath(e);default:Object(a.a)(!1,734)}}isBlobPath(e){const t=e.split("/");return!(t.length<2||t[1]!==oe.basePath)}async collectGarbage(e){return this.garbageCollector.collectGarbage(e)}addedGCOutboundReference(e,t){this.garbageCollector.addedOutboundReference(e.absolutePath,t.absolutePath)}async submitSummary(e){var t,n,r;const{fullTree:i,refreshLatestAck:s,summaryLogger:o}=e,c=this.nextSummaryNumber,u=l.a.create(o,void 0,{all:{summaryNumber:c}});if(s){const e=await this.refreshLatestSummaryAckFromServer(l.a.create(u,void 0,{all:{safeSummary:!0}}));e>this.deltaManager.lastSequenceNumber&&await l.c.timedExecAsync(u,{eventName:"WaitingForSeq",lastSequenceNumber:this.deltaManager.lastSequenceNumber,targetSequenceNumber:e,lastKnownSeqNumber:this.deltaManager.lastKnownSeqNumber},async()=>ut(this.deltaManager,e),{start:!0,end:!0,cancel:"error"})}try{await this.deltaManager.inbound.pause();const s=this.deltaManager.lastSequenceNumber,o=this.deltaManager.minimumSequenceNumber,l=`Summary @${s}:${this.deltaManager.minimumSequenceNumber}`;s!==(null===(t=this.deltaManager.lastMessage)||void 0===t?void 0:t.sequenceNumber)&&u.sendErrorEvent({eventName:"LastSequenceMismatch",error:l}),this.summarizerNode.startSummary(s,u);const d=()=>e.cancellationToken.cancelled?{continue:!1,error:"disconnected"}:(Object(a.a)(this.connected,600),this.deltaManager.lastSequenceNumber!==s?{continue:!1,error:`lastSequenceNumber changed before uploading to storage. ${this.deltaManager.lastSequenceNumber} !== ${s}`}:{continue:!0});let m=d();if(!m.continue)return{stage:"base",referenceSequenceNumber:s,minimumSequenceNumber:o,error:m.error};const p=h.a.start();let f;const g=this.garbageCollector.summaryStateNeedsReset;try{f=await this.summarize({fullTree:i||g,trackState:!0,summaryLogger:u,runGC:this.garbageCollector.shouldRunGC})}catch(e){return{stage:"base",referenceSequenceNumber:s,minimumSequenceNumber:o,error:e}}const{summary:S,stats:w}=f;this.messageAtLastSummary=this.deltaManager.lastMessage;const C=this.disableIsolatedChannels?S:S.tree[b.channelsTreeName];Object(a.a)(C.type===v.a.Tree,508);const E=Object.values(C.tree).filter(e=>e.type===v.a.Handle).length,O=S.tree.gc?Object(x.e)(S.tree.gc):void 0,T=Object.assign({dataStoreCount:this.dataStores.size,summarizedDataStoreCount:this.dataStores.size-E,gcStateUpdatedDataStoreCount:null===(n=f.gcStats)||void 0===n?void 0:n.updatedDataStoreCount,gcBlobNodeCount:null==O?void 0:O.blobNodeCount,gcTotalBlobsSize:null==O?void 0:O.totalBlobSize,opsSizesSinceLastSummary:this.opTracker.opsSizeAccumulator,nonSystemOpsSinceLastSummary:this.opTracker.nonSystemOpCount,summaryNumber:c},w),P={referenceSequenceNumber:s,minimumSequenceNumber:o,summaryTree:S,summaryStats:T,generateDuration:p.trace().duration,forcedFullTree:g};if(m=d(),!m.continue)return Object.assign(Object.assign({stage:"generate"},P),{error:m.error});const A=this.summaryCollection.latestAck,N=void 0===A?{proposalHandle:void 0,ackHandle:null===(r=this.context.getLoadedFromVersion())||void 0===r?void 0:r.id,referenceSequenceNumber:s}:{proposalHandle:A.summaryOp.contents.handle,ackHandle:A.summaryAck.contents.handle,referenceSequenceNumber:s};let I;try{I=await this.storage.uploadSummaryWithContext(f.summary,N)}catch(e){return Object.assign(Object.assign({stage:"generate"},P),{error:e})}const k=N.ackHandle,D={handle:I,head:k,message:l,parents:k?[k]:[]},F=Object.assign(Object.assign({},P),{handle:I,uploadDuration:p.trace().duration});if(m=d(),!m.continue)return Object.assign(Object.assign({stage:"upload"},F),{error:m.error});let j;try{j=this.submitSystemMessage(y.a.Summarize,D)}catch(e){return Object.assign(Object.assign({stage:"upload"},F),{error:e})}const R=Object.assign(Object.assign({stage:"submit"},F),{clientSequenceNumber:j,submitOpDuration:p.trace().duration});return this.summarizerNode.completeSummary(I),this.opTracker.reset(),R}finally{this.summarizerNode.clearSummary(),this.deltaManager.inbound.resume()}}processRemoteChunkedMessage(e){if(e.type!==et.ChunkedOp)return e;const t=e.clientId,n=e.contents;if(this.addChunk(t,n),n.chunkId===n.totalChunks){const r=Object.assign({},e),i=this.chunkMap.get(t).join("");return r.contents=JSON.parse(i),r.type=n.originalType,this.clearPartialChunks(t),r}return e}addChunk(e,t){let n=this.chunkMap.get(e);void 0===n&&(n=[],this.chunkMap.set(e,n)),Object(a.a)(t.chunkId===n.length+1,305),n.push(t.contents)}clearPartialChunks(e){this.chunkMap.has(e)&&this.chunkMap.delete(e)}updateDocumentDirtyState(e){this.dirtyContainer!==e&&(this.dirtyContainer=e,this.emitDirtyDocumentEvent&&(this.emit(e?"dirty":"saved"),this.context.updateDirtyContainerState(e)))}submitDataStoreOp(e,t,n){const r={address:e,contents:t};this.submit(et.FluidDataStoreOp,r,n)}submitDataStoreAliasOp(e,t){if(!Me(e))throw new g.e("malformedDataStoreAliasMessage");this.submit(et.Alias,e,t)}async uploadBlob(e){return this.verifyNotClosed(),this.blobManager.createBlob(e)}submit(e,t,n,r){this.verifyNotClosed(),void 0!==this.context.pendingLocalState&&this.closeFn(new g.d("containerRuntimeSubmitWithPendingLocalState")),Object(a.a)(this.attachState!==i.a.Detached,306);let s=-1,o=r;if(this.canSendOps()){const n=JSON.stringify(t),i=this.context.deltaManager.maxMessageSize;this.flushMode!==b.FlushMode.TurnBased||this.needsFlush||(o=Object.assign(Object.assign({},r),{batch:!0}),this.needsFlush=!0,this.flushTrigger||Promise.resolve().then(()=>{this.flushTrigger=!1,this.flush()})),s=this.submitMaybeChunkedMessages(e,t,n,i,this._flushMode===b.FlushMode.TurnBased,o)}this.pendingStateManager.onSubmitMessage(e,s,this.deltaManager.lastSequenceNumber,t,n,o),this.isContainerMessageDirtyable(e,t)&&this.updateDocumentDirtyState(!0)}submitMaybeChunkedMessages(e,t,n,r,i,s){return this._maxOpSizeInBytes>=0?!n||n.length<=this._maxOpSizeInBytes?this.submitRuntimeMessage(e,t,i,s):(this.closeFn(new g.d("OpTooLarge",void 0,{length:{value:n.length,tag:l.e.PackageData},limit:{value:this._maxOpSizeInBytes,tag:l.e.PackageData}})),-1):!n||n.length<=r?this.submitRuntimeMessage(e,t,i,s):this.submitChunkedMessage(e,n,r)}submitChunkedMessage(e,t,n){const r=t.length,i=Math.floor((r-1)/n)+1;let s=0,a=0;for(let r=1;r<=i;r+=1){const o={chunkId:r,contents:t.substr(s,n),originalType:e,totalChunks:i};s+=n,a=this.submitRuntimeMessage(et.ChunkedOp,o,!1)}return a}submitSystemMessage(e,t){this.verifyNotClosed(),Object(a.a)(this.connected,307);const n=this.flushMode===b.FlushMode.TurnBased&&this.needsFlush;return n&&this.mc.logger.sendErrorEvent({eventName:"submitSystemMessageError",type:e}),this.context.submitFn(e,t,n)}submitRuntimeMessage(e,t,n,r){this.verifyNotClosed(),Object(a.a)(this.connected,601);const i={type:e,contents:t};return this.context.submitFn(y.a.Operation,i,n,r)}verifyNotClosed(){if(this._disposed)throw new Error("Runtime is closed")}reSubmit(e,t,n,r){switch(e){case et.FluidDataStoreOp:this.dataStores.resubmitDataStoreOp(t,n);break;case et.Attach:case et.Alias:this.submit(e,t,n);break;case et.ChunkedOp:throw new Error("chunkedOp not expected here");case et.BlobAttach:this.submit(e,t,n,r);break;case et.Rejoin:this.submit(e,t);break;default:Object(u.a)(e,"Unknown ContainerMessageType: "+e)}}async refreshLatestSummaryAck(e,t,n,r){const i=async e=>Object(f.a)(this.storage,e),s=await this.summarizerNode.refreshLatestSummary(e,n,async()=>this.fetchSnapshotFromStorage(t,r,{eventName:"RefreshLatestSummaryGetSnapshot",ackHandle:t,summaryRefSeq:n,fetchLatest:!1}),i,r);await this.garbageCollector.latestSummaryStateRefreshed(s,i)}async refreshLatestSummaryAckFromServer(e){const t=await this.fetchSnapshotFromStorage(null,e,{eventName:"RefreshLatestSummaryGetSnapshot",fetchLatest:!0}),n=async e=>Object(f.a)(this.storage,e),r=await Object(E.a)(t,n),i=await this.summarizerNode.refreshLatestSummary(void 0,r,async()=>t,n,e);return await this.garbageCollector.latestSummaryStateRefreshed(i,n),r}async fetchSnapshotFromStorage(e,t,n){return l.c.timedExecAsync(t,n,async t=>{const n={},r=h.a.start(),i=await this.storage.getVersions(e,1);Object(a.a)(!!i&&!!i[0],311),n.getVersionDuration=r.trace().duration;const s=await this.storage.getSnapshotTree(i[0]);return Object(a.a)(!!s,312),n.getSnapshotDuration=r.trace().duration,t.end(n),s})}getPendingLocalState(){return this.pendingStateManager.getLocalState()}formRequestSummarizerFn(e){return async()=>{const t={headers:{[s.a.cache]:!1,[s.a.clientDetails]:{capabilities:{interactive:!1},type:"summarizer"},[r.summarizingClient]:!0,[s.a.reconnect]:!1},url:"/_summarizer"},n=(await Object(C.e)(e,t)).ISummarizer;if(!n)throw new g.e("Fluid object does not implement ISummarizer");return n}}}const ut=async(e,t)=>new Promise((n,r)=>{e.on("closed",r);const i=r=>{r.sequenceNumber>=t&&(n(),e.off("op",i))};e.on("op",i)})},function(e,t,n){"use strict";n.d(t,"a",(function(){return tt})),n.d(t,"c",(function(){return st})),n.d(t,"d",(function(){return ct})),n.d(t,"b",(function(){return lt}));var r=n(585),i=n(591),s=n(5),a=n(75),o=n(71),c=n(93),u=n(234),h=n(67),l=n(35),d=n(139),m=n(587),p=n(592),f=n(308),g=n(578),y=n(79),v=n(15),b=n(2),S=n(126),w=n(584),C=n(63);class x{constructor(e){this.path=e}static create(e){return new x(encodeURIComponent(e))}static createAndConcat(e){var t;let n=x.create(null!==(t=e[0])&&void 0!==t?t:"");for(let t=1;t<e.length;t++)n=n.concat(x.create(e[t]));return n}toString(){return this.path}concat(e){return new x(`${this.path}/${e.path}`)}}class E{constructor(e){this.summary=e}static createForRoot(e){return new E({referenceSequenceNumber:e,basePath:void 0,localPath:x.create("")})}get referenceSequenceNumber(){return this.summary.referenceSequenceNumber}get basePath(){return this.summary.basePath}get localPath(){return this.summary.localPath}get additionalPath(){return this.summary.additionalPath}set additionalPath(e){this.summary.additionalPath=e}get fullPath(){var e,t;return null!==(t=null===(e=this.basePath)||void 0===e?void 0:e.concat(this.localPath))&&void 0!==t?t:this.localPath}get fullPathForChildren(){return void 0!==this.additionalPath?this.fullPath.concat(this.additionalPath):this.fullPath}createForChild(e){return new E({referenceSequenceNumber:this.referenceSequenceNumber,basePath:this.fullPathForChildren,localPath:x.create(e)})}}function O(e,t){let n=e;const r=[],i=[];for(let e=0;;e++){e>100&&t.sendTelemetryEvent({eventName:"DecodeSummaryMaxDepth",maxDecodeDepth:100});const a=n.blobs._outstandingOps,o=n.trees._baseSummary;if(void 0===a&&void 0===o)return{baseSummary:n,pathParts:r,async getOutstandingOps(e){let n=[];for(const r of i){const i=await e(r);if(n.length>0&&i.length>0){const e=n[n.length-1].sequenceNumber,r=i[0].sequenceNumber;if(r<=e)for(t.sendTelemetryEvent({eventName:"DuplicateOutstandingOps",message:`newEarliestSeq <= latestSeq in decodeSummary: ${r} <= ${e}`});i.length>0&&i[0].sequenceNumber<=e;)i.shift()}n=n.concat(i)}return n}};Object(s.a)(!!a,431),Object(s.a)(void 0!==o,432),n=o,r.push("_baseSummary"),i.unshift(a)}}function T(e){const t=e.trees[b.channelsTreeName];return void 0!==t?{childrenTree:t,childrenPathPart:b.channelsTreeName}:{childrenTree:e,childrenPathPart:void 0}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class P{constructor(e,t,n,r,i,s,a){var o;this.defaultLogger=e,this.summarizeInternalFn=t,this._changeSequenceNumber=r,this._latestSummary=i,this.initialSummary=s,this.wipSummaryLogger=a,this.children=new Map,this.pendingSummaries=new Map,this.outstandingOps=[],this.wipSkipRecursion=!1,this.canReuseHandle=null===(o=n.canReuseHandle)||void 0===o||o,this.throwOnError=!0,this.trackingSequenceNumber=this._changeSequenceNumber}get referenceSequenceNumber(){var e,t;return null!==(t=null===(e=this._latestSummary)||void 0===e?void 0:e.referenceSequenceNumber)&&void 0!==t?t:0}startSummary(e,t){Object(s.a)(void 0===this.wipSummaryLogger,415),Object(s.a)(void 0===this.wipReferenceSequenceNumber,416),this.wipSummaryLogger=t;for(const t of this.children.values())t.startSummary(e,this.wipSummaryLogger);this.wipReferenceSequenceNumber=e}async summarize(e){if(Object(s.a)(this.isTrackingInProgress(),417),Object(s.a)(void 0!==this.wipSummaryLogger,418),this.canReuseHandle&&!e&&!this.hasChanged()){const e=this._latestSummary;if(void 0!==e){this.wipLocalPaths={localPath:e.localPath,additionalPath:e.additionalPath},this.wipSkipRecursion=!0;const t=Object(C.i)();return t.handleNodeCount++,{summary:{type:v.a.Handle,handle:e.fullPath.path,handleType:v.a.Tree},stats:t}}}try{const t=await this.summarizeInternalFn(e);return this.wipLocalPaths={localPath:x.create(t.id)},void 0!==t.pathPartsForChildren&&(this.wipLocalPaths.additionalPath=x.createAndConcat(t.pathPartsForChildren)),{summary:t.summary,stats:t.stats}}catch(e){if(this.throwOnError||this.trackingSequenceNumber<this._changeSequenceNumber)throw e;const t=this._latestSummary,n=this.initialSummary;let r,i;if(void 0!==t)r={fromSummary:!0,summaryNode:t},i=t.localPath;else{if(void 0===(null==n?void 0:n.summary))throw e;r={fromSummary:!1,initialSummary:n.summary},i=x.create(n.id)}this.wipSummaryLogger.sendErrorEvent({eventName:"SummarizingWithBasePlusOps"},e);const s=function(e,t){let n=x.create("_baseSummary");const r=new C.a;if(r.addBlob("_outstandingOps",JSON.stringify(t)),e.fromSummary){const t=e.summaryNode;void 0!==t.additionalPath&&(n=n.concat(t.additionalPath)),r.addHandle("_baseSummary",v.a.Tree,t.fullPath.path)}else r.addWithStats("_baseSummary",e.initialSummary);const i=r.getSummaryTree();return Object.assign(Object.assign({},i),{additionalPath:n})}(r,this.outstandingOps);return this.wipLocalPaths={localPath:i,additionalPath:s.additionalPath},this.wipSkipRecursion=!0,{summary:s.summary,stats:s.stats}}}completeSummary(e){this.completeSummaryCore(e,void 0,!1)}completeSummaryCore(e,t,n){Object(s.a)(void 0!==this.wipSummaryLogger,419),Object(s.a)(void 0!==this.wipReferenceSequenceNumber,420);let r=this.wipLocalPaths;if(n){const e=this._latestSummary;if(void 0===e)return void this.clearSummary();r={localPath:e.localPath,additionalPath:e.additionalPath}}Object(s.a)(!!r,421);const i=new E(Object.assign(Object.assign({},r),{referenceSequenceNumber:this.wipReferenceSequenceNumber,basePath:t})),a=i.fullPathForChildren;for(const t of this.children.values())t.completeSummaryCore(e,a,this.wipSkipRecursion||n);this.pendingSummaries.set(e,i),this.clearSummary()}clearSummary(){this.wipReferenceSequenceNumber=void 0,this.wipLocalPaths=void 0,this.wipSkipRecursion=!1,this.wipSummaryLogger=void 0;for(const e of this.children.values())e.clearSummary()}async refreshLatestSummary(e,t,n,r,i){if(void 0!==e){const t=this.pendingSummaries.get(e);if(void 0!==t)return this.refreshLatestSummaryFromPending(e,t.referenceSequenceNumber),{latestSummaryUpdated:!0,wasSummaryTracked:!0}}if(this.referenceSequenceNumber>=t)return{latestSummaryUpdated:!1};const s=await n();return await this.refreshLatestSummaryFromSnapshot(t,s,void 0,x.create(""),i,r),{latestSummaryUpdated:!0,wasSummaryTracked:!1,snapshot:s}}refreshLatestSummaryFromPending(e,t){const n=this.pendingSummaries.get(e);if(void 0!==n){Object(s.a)(t===n.referenceSequenceNumber,423),this.pendingSummaries.delete(e),this.refreshLatestSummaryCore(t),this._latestSummary=n;for(const n of this.children.values())n.refreshLatestSummaryFromPending(e,t)}else Object(s.a)(void 0===this._latestSummary,422)}async refreshLatestSummaryFromSnapshot(e,t,n,r,i,s){if(this.referenceSequenceNumber>=e)return;this.refreshLatestSummaryCore(e);const{baseSummary:a,pathParts:o}=O(t,i);this._latestSummary=new E({referenceSequenceNumber:e,basePath:n,localPath:r});const{childrenTree:c,childrenPathPart:u}=T(a);void 0!==u&&o.push(u),o.length>0&&(this._latestSummary.additionalPath=x.createAndConcat(o));const h=this._latestSummary.fullPathForChildren;await Promise.all(Array.from(this.children).filter(([e])=>void 0!==c.trees[e]).map(async([t,n])=>n.refreshLatestSummaryFromSnapshot(e,c.trees[t],h,x.create(t),i,s)))}refreshLatestSummaryCore(e){for(const[t,n]of this.pendingSummaries)n.referenceSequenceNumber<e&&this.pendingSummaries.delete(t);for(;this.outstandingOps.length>0&&this.outstandingOps[0].sequenceNumber<=e;)this.outstandingOps.shift()}loadBaseSummaryWithoutDifferential(e){const{childrenPathPart:t}=T(e);void 0!==t&&void 0!==this._latestSummary&&(this._latestSummary.additionalPath=x.create(t))}async loadBaseSummary(e,t){const n=O(e,this.defaultLogger),r=await n.getOutstandingOps(t),{childrenPathPart:i}=T(n.baseSummary);if(void 0!==i&&n.pathParts.push(i),n.pathParts.length>0&&void 0!==this._latestSummary&&(this._latestSummary.additionalPath=x.createAndConcat(n.pathParts)),r.length>0){const e=r[r.length-1].sequenceNumber;Object(s.a)(e<=this.trackingSequenceNumber,425)}return{baseSummary:n.baseSummary,outstandingOps:r}}recordChange(e){const t=this.outstandingOps[this.outstandingOps.length-1];void 0!==t&&Object(s.a)(t.sequenceNumber<e.sequenceNumber,426),this.invalidate(e.sequenceNumber),this.trackingSequenceNumber=e.sequenceNumber,this.outstandingOps.push(e)}invalidate(e){e>this._changeSequenceNumber&&(this._changeSequenceNumber=e)}hasChanged(){return this._changeSequenceNumber>this.referenceSequenceNumber}get latestSummary(){return this._latestSummary}createChild(e,t,n,r={}){Object(s.a)(!this.children.has(t),427);const i=this.getCreateDetailsForChild(t,n),a=new P(this.defaultLogger,e,r,i.changeSequenceNumber,i.latestSummary,i.initialSummary,this.wipSummaryLogger);return this.maybeUpdateChildState(a),this.children.set(t,a),a}getChild(e){return this.children.get(e)}getCreateDetailsForChild(e,t){var n;let r,i,a;const o=this._latestSummary;switch(t.type){case b.CreateSummarizerNodeSource.FromAttach:if(void 0!==o&&t.sequenceNumber<=o.referenceSequenceNumber)i=o.createForChild(e);else{const n=Object(C.h)(t.snapshot);r={sequenceNumber:t.sequenceNumber,id:e,summary:n}}a=t.sequenceNumber;break;case b.CreateSummarizerNodeSource.FromSummary:void 0===this.initialSummary&&Object(s.a)(!!o,428);case b.CreateSummarizerNodeSource.Local:{const c=this.initialSummary;if(void 0!==c){let n,i;if(void 0!==c.summary){const{childrenTree:t}=function(e){const t=e.tree[b.channelsTreeName];return void 0!==t?{childrenTree:t,childrenPathPart:b.channelsTreeName}:{childrenTree:e,childrenPathPart:void 0}}(c.summary.summary);Object(s.a)(t.type===v.a.Tree,470),n=t.tree[e]}t.type===b.CreateSummarizerNodeSource.FromSummary&&Object(s.a)(!!n,429),void 0!==n&&(Object(s.a)(n.type===v.a.Tree,430),i={summary:n,stats:Object(C.e)(n)}),r={sequenceNumber:c.sequenceNumber,id:e,summary:i}}i=null==o?void 0:o.createForChild(e),a=null!==(n=null==o?void 0:o.referenceSequenceNumber)&&void 0!==n?n:-1;break}default:{const e=t.type;Object(c.a)(t,"Unexpected CreateSummarizerNodeSource: "+e)}}return{initialSummary:r,latestSummary:i,changeSequenceNumber:a}}maybeUpdateChildState(e){this.isTrackingInProgress()&&(e.wipReferenceSequenceNumber=this.wipReferenceSequenceNumber)}isTrackingInProgress(){return void 0!==this.wipReferenceSequenceNumber}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class A extends E{constructor(e,t){super(t),this.serializedUsedRoutes=e}}class N extends P{constructor(e,t,n,r,i,s,a,o,c){super(e,async e=>t(e,!0),n,r,i,s,a),this.summarizeFn=t,this.getGCDataFn=o,this.baseGCDetailsLoaded=!1,this.usedRoutes=[""],this.gcDisabled=!0===n.gcDisabled,this.baseGCDetailsP=new S.b(async()=>{var e;return null!==(e=await(null==c?void 0:c()))&&void 0!==e?e:{usedRoutes:[]}})}getGCSummaryDetails(){return this.getBaseGCDetails()}getBaseGCDetails(){return{gcData:this.gcData,usedRoutes:this.usedRoutes,unrefTimestamp:this.unreferencedTimestampMs}}async loadBaseGCDetails(){var e;const t=await this.baseGCDetailsP;this.baseGCDetailsLoaded||(this.baseGCDetailsLoaded=!0,void 0!==t.gcData&&(this.gcData=Object(w.b)(t.gcData)),this.referenceUsedRoutes=null===(e=t.usedRoutes)||void 0===e?void 0:e.sort(),this.unreferencedTimestampMs=t.unrefTimestamp)}async summarize(e,t=!0){return!this.gcDisabled&&this.isTrackingInProgress()&&Object(s.a)(void 0!==this.wipSerializedUsedRoutes,433),t?super.summarize(e):this.summarizeFn(e,t)}async getGCData(e=!1){if(Object(s.a)(!this.gcDisabled,434),Object(s.a)(void 0!==this.getGCDataFn,435),await this.loadBaseGCDetails(),!e&&!this.hasDataChanged()&&void 0!==this.gcData)return Object(w.b)(this.gcData);const t=await this.getGCDataFn(e);return this.gcData=Object(w.b)(t),t}startSummary(e,t){this.gcDisabled||Object(s.a)(void 0===this.wipSerializedUsedRoutes,436),super.startSummary(e,t)}completeSummaryCore(e,t,n){let r;if(this.gcDisabled||(r=this.wipSerializedUsedRoutes,Object(s.a)(void 0!==r,437)),super.completeSummaryCore(e,t,n),!this.gcDisabled){const t=this.pendingSummaries.get(e);if(void 0!==t){const n=new A(r,t);this.pendingSummaries.set(e,n)}}}clearSummary(){this.wipSerializedUsedRoutes=void 0,super.clearSummary()}refreshLatestSummaryFromPending(e,t){if(!this.gcDisabled){const t=this.pendingSummaries.get(e);void 0!==t&&(this.referenceUsedRoutes=JSON.parse(t.serializedUsedRoutes))}return super.refreshLatestSummaryFromPending(e,t)}async refreshLatestSummaryFromSnapshot(e,t,n,r,i,s){if(!this.gcDisabled){const n=t.blobs[b.gcBlobKey];if(void 0!==n){const t=await s(n);if(this.referenceSequenceNumber>=e)return;this.referenceUsedRoutes=t.usedRoutes}}return super.refreshLatestSummaryFromSnapshot(e,t,n,r,i,s)}createChild(e,t,n,r={},i,a){var o;Object(s.a)(!this.children.has(t),438);const c=this.getCreateDetailsForChild(t,n),u=new N(this.defaultLogger,e,Object.assign(Object.assign({},r),{gcDisabled:null!==(o=r.gcDisabled)&&void 0!==o?o:this.gcDisabled}),c.changeSequenceNumber,c.latestSummary,c.initialSummary,this.wipSummaryLogger,i,a);return this.maybeUpdateChildState(u),this.children.set(t,u),u}deleteChild(e){this.children.delete(e)}getChild(e){return this.children.get(e)}isReferenced(){return this.usedRoutes.includes("")||this.usedRoutes.includes("/")}updateUsedRoutes(e,t){this.usedRoutes=e.sort(),!this.gcDisabled&&this.isTrackingInProgress()&&(this.wipSerializedUsedRoutes=JSON.stringify(this.usedRoutes)),this.isReferenced()?this.unreferencedTimestampMs=void 0:void 0===this.unreferencedTimestampMs&&(this.unreferencedTimestampMs=t)}hasChanged(){return this.hasDataChanged()||this.hasUsedStateChanged()}hasDataChanged(){return super.hasChanged()}hasUsedStateChanged(){return!this.gcDisabled&&(void 0===this.referenceUsedRoutes||JSON.stringify(this.usedRoutes)!==JSON.stringify(this.referenceUsedRoutes))}}var I=n(199),k=n(78);var D=n(182),F=n(573);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class j{constructor(e,t,n){this.path=e,this.runtime=t,this.routeContext=n,this.absolutePath=Object(F.a)(e,this.routeContext)}get IFluidHandleContext(){return this}attachGraph(){throw new Error("can't attach container runtime form within container!")}get isAttached(){return this.runtime.attachState!==r.a.Detached}async resolveHandle(e){return this.runtime.resolveHandle(e)}}var R=n(195),M=n(19);class _ extends o.a{constructor(e,t,n,r,i){super(),this.logger=e,this.summaryCollection=t,this.clientElection=n,this.maxOpsSinceLastSummary=r,this.electionEnabled=i,this.lastReportedSeq=0,this.summaryCollection.on("default",({sequenceNumber:e})=>{var t,n,i;const s=this.electedClientId;if(void 0===s)return void(this.clientElection.eligibleCount>0&&this.clientElection.resetElectedClient(e));let a=this.clientElection.electionSequenceNumber;if(e-(null!==(t=this.lastSummaryAckSeqForClient)&&void 0!==t?t:a)>this.maxOpsSinceLastSummary){const t=e-this.lastReportedSeq;if(t>this.maxOpsSinceLastSummary&&(this.logger.sendErrorEvent({eventName:"ElectedClientNotSummarizing",electedClientId:s,lastSummaryAckSeqForClient:this.lastSummaryAckSeqForClient,electionSequenceNumber:a,nextElectedClientId:null===(n=this.clientElection.peekNextElectedClient())||void 0===n?void 0:n.clientId,electionEnabled:this.electionEnabled}),this.lastReportedSeq=e),this.electionEnabled){const n=this.electedParentId;this.clientElection.incrementElectedClient(e),a=this.clientElection.electionSequenceNumber,e>(null!==(i=this.lastSummaryAckSeqForClient)&&void 0!==i?i:a)&&t>this.maxOpsSinceLastSummary&&this.logger.sendErrorEvent({eventName:"UnexpectedElectionSequenceNumber",lastSummaryAckSeqForClient:this.lastSummaryAckSeqForClient,electionSequenceNumber:a,sequenceNumber:e,previousClientId:s,previousParentId:n,electedParentId:this.electedParentId,electedClientId:this.electedClientId,opsSinceLastReport:t,maxOpsSinceLastSummary:r})}}}),this.summaryCollection.on(y.a.SummaryAck,e=>{this.lastSummaryAckSeqForClient=e.sequenceNumber}),this.clientElection.on("election",(e,t)=>{this.lastSummaryAckSeqForClient=void 0,void 0===e&&this.clientElection.eligibleCount>0&&this.clientElection.resetElectedClient(t),this.emit("electedSummarizerChanged")})}get electedClientId(){var e;return null===(e=this.clientElection.electedClient)||void 0===e?void 0:e.clientId}get electedParentId(){var e;return null===(e=this.clientElection.electedParent)||void 0===e?void 0:e.clientId}serialize(){var e;const{electedClientId:t,electedParentId:n,electionSequenceNumber:r}=this.clientElection.serialize();return{electedClientId:t,electedParentId:n,electionSequenceNumber:null!==(e=this.lastSummaryAckSeqForClient)&&void 0!==e?e:r}}static isClientEligible(e){const t=e.client.details;return void 0===t||_.clientDetailsPermitElection(t)}}_.clientDetailsPermitElection=e=>e.capabilities.interactive||"summarizer"===e.type;var B=n(589);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class L extends B.a{async get(){throw Error("Do not try to get a summarizer object from the handle. Reference it directly.")}attach(){}bind(e){}}var q=n(232),z=n(233);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class H{constructor(e,t){this.lastOpSequenceNumber=e,this._lastAttempt=t,this._lastSuccessfulSummary=Object.assign({},t)}get lastAttempt(){return this._lastAttempt}get lastSuccessfulSummary(){return this._lastSuccessfulSummary}updateWithLastSummaryAckInfo(e){this._lastAttempt=e,this._lastSuccessfulSummary=Object.assign({},e)}recordAttempt(e){this._lastAttempt={refSequenceNumber:null!=e?e:this.lastOpSequenceNumber,summaryTime:Date.now()}}markLastAttemptAsSuccessful(){this._lastSuccessfulSummary=Object.assign({},this.lastAttempt)}}class U{constructor(e,t,n,r=50){this.heuristicData=e,this.configuration=t,this.trySummarize=n,this.minOpsForAttemptOnClose=r,this.idleTimer=new q.b(this.configuration.idleTime,()=>this.trySummarize("idle"))}get opsSinceLastAck(){return this.heuristicData.lastOpSequenceNumber-this.heuristicData.lastSuccessfulSummary.refSequenceNumber}run(){const e=Date.now()-this.heuristicData.lastSuccessfulSummary.summaryTime,t=this.opsSinceLastAck;e>this.configuration.maxTime?(this.idleTimer.clear(),this.trySummarize("maxTime")):t>this.configuration.maxOps?(this.idleTimer.clear(),this.trySummarize("maxOps")):this.idleTimer.restart()}shouldRunLastSummary(){return this.opsSinceLastAck>this.minOpsForAttemptOnClose}dispose(){this.idleTimer.clear()}}var V=n(23),G=n(100);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
async function W(e,t,n){const r=[e.then(e=>({result:"done",value:e})),t.then(({timerResult:e})=>({result:e}))];return void 0!==n&&r.push(n.waitCancelled.then(()=>({result:"cancelled"}))),Promise.race(r)}const K={submitSummaryFailure:"Error while generating, uploading, or submitting summary",summaryOpWaitTimeout:"Timeout while waiting for summarize op broadcast",summaryAckWaitTimeout:"Timeout while waiting for summaryAck/summaryNack op",summaryNack:"Server rejected summary via summaryNack op",disconnect:"Summary cancelled due to summarizer or main client disconnect"};class ${constructor(){this.summarySubmitted=new S.a,this.summaryOpBroadcasted=new S.a,this.receivedSummaryAckOrNack=new S.a}fail(e,t,n,r){Object(s.a)(!this.receivedSummaryAckOrNack.isCompleted,606);const i={success:!1,message:e,data:void 0,error:t,retryAfterSeconds:r};this.summarySubmitted.resolve(i),this.summaryOpBroadcasted.resolve(i),this.receivedSummaryAckOrNack.resolve(Object.assign(Object.assign({},i),{data:n}))}build(){return{summarySubmitted:this.summarySubmitted.promise,summaryOpBroadcasted:this.summaryOpBroadcasted.promise,receivedSummaryAckOrNack:this.receivedSummaryAckOrNack.promise}}}class J{constructor(e,t,n,r,i,s,a){this.pendingAckTimer=e,this.heuristicData=t,this.submitSummaryCallback=n,this.raiseSummarizingError=r,this.successfulSummaryCallback=i,this.summaryWatcher=s,this.logger=a,this.summarizeTimer=new q.b(2e4,()=>this.summarizeTimerHandler(2e4,1))}summarize(e,t,n,r=new $){return this.summarizeCore(e,t,r,n).catch(t=>{const n="UnexpectedSummarizeError";this.logger.sendErrorEvent(Object.assign({eventName:n},e),t),r.fail(n,t)}),r.build()}async summarizeCore(e,t,n,r){const{refreshLatestAck:i,fullTree:a}=t,o=h.a.create(this.logger,void 0,{all:e});let c={fullTree:a,timeSinceLastAttempt:Date.now()-this.heuristicData.lastAttempt.summaryTime,timeSinceLastSummary:Date.now()-this.heuristicData.lastSuccessfulSummary.summaryTime};const u=h.c.start(o,Object.assign({eventName:"Summarize",refreshLatestAck:i},c)),d=(e,t,i,s)=>{this.raiseSummarizingError(K[e]);const a=Object(V.j)(t),o=r.cancelled||(null==t?void 0:t.errorType)===G.a.offlineError?"generic":"error";u.cancel(Object.assign(Object.assign({},i),{reason:e,category:o,retryAfterSeconds:a}),t),n.fail((e=>`${e}: ${K[e]}`)(e),t,s,a)};let m;this.summarizeTimer.start();try{m=await this.submitSummaryCallback({fullTree:a,refreshLatestAck:i,summaryLogger:o,cancellationToken:r});const e=m.referenceSequenceNumber,t=e-this.heuristicData.lastSuccessfulSummary.refSequenceNumber;if(c=Object.assign(Object.assign({},c),{referenceSequenceNumber:e,minimumSequenceNumber:m.minimumSequenceNumber,opsSinceLastAttempt:e-this.heuristicData.lastAttempt.refSequenceNumber,opsSinceLastSummary:t}),"base"!==m.stage&&(c=Object.assign(Object.assign(Object.assign({},c),m.summaryStats),{generateDuration:m.generateDuration}),"generate"!==m.stage&&(c=Object.assign(Object.assign({},c),{handle:m.handle,uploadDuration:m.uploadDuration}),"upload"!==m.stage&&(c=Object.assign(Object.assign({},c),{clientSequenceNumber:m.clientSequenceNumber})))),"submit"!==m.stage)return d("submitSummaryFailure",m.error,c);if(!a&&!m.forcedFullTree){const{summarizedDataStoreCount:e,gcStateUpdatedDataStoreCount:n=0}=m.summaryStats;e>n+t&&o.sendErrorEvent({eventName:"IncrementalSummaryViolation",summarizedDataStoreCount:e,gcStateUpdatedDataStoreCount:n,opsSinceLastSummary:t})}u.reportEvent("generate",Object.assign({},c)),n.summarySubmitted.resolve({success:!0,data:m})}catch(e){return d("submitSummaryFailure",e)}finally{this.heuristicData.recordAttempt(null==m?void 0:m.referenceSequenceNumber),this.summarizeTimer.clear()}try{const e=this.pendingAckTimer.start(),t=this.summaryWatcher.watchSummary(m.clientSequenceNumber),i=await W(t.waitBroadcast(),e,r);if("cancelled"===i.result)return d("disconnect");if("done"!==i.result)return d("summaryOpWaitTimeout");const a=i.value,h=Date.now()-this.heuristicData.lastAttempt.summaryTime;n.summaryOpBroadcasted.resolve({success:!0,data:{summarizeOp:a,broadcastDuration:h}}),this.heuristicData.lastAttempt.summarySequenceNumber=a.sequenceNumber,o.sendTelemetryEvent({eventName:"Summarize_Op",duration:h,referenceSequenceNumber:a.referenceSequenceNumber,summarySequenceNumber:a.sequenceNumber,handle:a.contents.handle});const p=await W(t.waitAckNack(),e,r);if("cancelled"===p.result)return d("disconnect");if("done"!==p.result)return d("summaryAckWaitTimeout");const f=p.value;this.pendingAckTimer.clear();const g=Date.now()-this.heuristicData.lastAttempt.summaryTime;if(c=Object.assign({ackWaitDuration:g,ackNackSequenceNumber:f.sequenceNumber,summarySequenceNumber:f.contents.summaryProposal.summarySequenceNumber},c),f.type!==y.a.SummaryAck){Object(s.a)(f.type===y.a.SummaryNack,628);const e=f.contents,t=null==e?void 0:e.message,n=null==e?void 0:e.retryAfter,r=new l.a("Received summaryNack: "+t,{retryAfterSeconds:n});return o.sendErrorEvent(Object.assign(Object.assign({eventName:"SummaryNack"},c),{retryAfterSeconds:n}),r),Object(s.a)(Object(V.j)(r)===n,607),d("summaryNack",r,Object.assign(Object.assign({},c),{nackRetryAfter:n}),{summaryNackOp:f,ackNackDuration:g})}this.heuristicData.markLastAttemptAsSuccessful(),this.successfulSummaryCallback(),u.end(Object.assign(Object.assign({},c),{handle:f.contents.handle})),n.receivedSummaryAckOrNack.resolve({success:!0,data:{summaryAckOp:f,ackNackDuration:g}})}finally{this.pendingAckTimer.clear()}}summarizeTimerHandler(e,t){if(this.logger.sendPerformanceEvent({eventName:"SummarizeTimeout",timeoutTime:e,timeoutCount:t}),t<5){const n=2*e;this.summarizeTimer.start(n,()=>this.summarizeTimerHandler(n,t+1))}}dispose(){this.summarizeTimer.clear()}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */var Q=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n};class Y{constructor(e,t,n,r,i,s,a,o,c,{disableHeuristics:u=!1}={}){this.summaryWatcher=t,this.configuration=n,this.submitSummaryCallback=r,this.heuristicData=i,this.raiseSummarizingError=s,this.summaryCollection=a,this.cancellationToken=o,this.stopSummarizerCallback=c,this.stopping=!1,this._disposed=!1,this.tryWhileSummarizing=!1,this.summarizeCount=0,this.totalSuccessfulAttempts=0,this.tryGetCorrelatedLogger=e=>this.heuristicData.lastAttempt.refSequenceNumber===e?this.logger:void 0;const l={summarizeCount:()=>this.summarizeCount,summarizerSuccessfulAttempts:()=>this.totalSuccessfulAttempts};this.logger=h.a.create(e,"Running",{all:l}),u||(this.heuristicRunner=new U(i,n,e=>this.trySummarize(e)));const d=Math.min(this.configuration.maxAckWaitTime,6e5);this.pendingAckTimer=new q.a(d,()=>{this.raiseSummarizingError("Pending summary ack not received in time"),this.logger.sendErrorEvent({eventName:"SummaryAckWaitTimeout",maxAckWaitTime:d,referenceSequenceNumber:this.heuristicData.lastAttempt.refSequenceNumber,summarySequenceNumber:this.heuristicData.lastAttempt.summarySequenceNumber,timePending:Date.now()-this.heuristicData.lastAttempt.summaryTime})}),a.setPendingAckTimerTimeoutCallback(d,()=>{this.pendingAckTimer.hasTimer&&(this.logger.sendTelemetryEvent({eventName:"MissingSummaryAckFoundByOps",referenceSequenceNumber:this.heuristicData.lastAttempt.refSequenceNumber,summarySequenceNumber:this.heuristicData.lastAttempt.summarySequenceNumber}),this.pendingAckTimer.clear())}),this.generator=new J(this.pendingAckTimer,this.heuristicData,this.submitSummaryCallback,this.raiseSummarizingError,()=>{this.totalSuccessfulAttempts++},this.summaryWatcher,this.logger)}static async start(e,t,n,r,i,s,a,o,c,u){var h;const l=new Y(e,t,n,r,i,s,a,o,c,u);return await l.waitStart(),null===(h=l.heuristicRunner)||void 0===h||h.run(),l}get disposed(){return this._disposed}dispose(){var e;this.summaryWatcher.dispose(),null===(e=this.heuristicRunner)||void 0===e||e.dispose(),this.heuristicRunner=void 0,this.generator.dispose(),this.pendingAckTimer.clear(),this.disposeEnqueuedSummary(),this._disposed=!0,this.stopping=!0}handleSystemOp(e){switch(e.type){case y.a.ClientLeave:case y.a.ClientJoin:case y.a.Propose:return void this.handleOp(void 0,e);default:return}}handleOp(e,{sequenceNumber:t,type:n,clientId:r,contents:i}){var s;void 0===e&&(this.heuristicData.lastOpSequenceNumber=t,this.tryRunEnqueuedSummary()||null===(s=this.heuristicRunner)||void 0===s||s.run())}async waitStop(e){var t;this.stopping||(this.stopping=!0,this.disposeEnqueuedSummary(),e&&(null===(t=this.heuristicRunner)||void 0===t?void 0:t.shouldRunLastSummary())&&void 0===this.summarizingLock&&this.trySummarizeOnce({reason:"lastSummary"},{}),await this.summarizingLock)}async waitStart(){const e=await W(this.summaryWatcher.waitFlushed(),this.pendingAckTimer.start());this.pendingAckTimer.clear(),this.summaryCollection.unsetPendingAckTimerTimeoutCallback(),"done"===e.result&&void 0!==e.value&&this.heuristicData.updateWithLastSummaryAckInfo({refSequenceNumber:e.value.summaryOp.referenceSequenceNumber,summaryTime:Date.now(),summarySequenceNumber:e.value.summaryOp.sequenceNumber})}async lockedSummaryAction(e){Object(s.a)(void 0===this.summarizingLock,603);const t=new S.a;return this.summarizingLock=t.promise,this.summarizeCount++,e().finally(()=>{var e;t.resolve(),this.summarizingLock=void 0;const n=this.tryWhileSummarizing;this.tryWhileSummarizing=!1,this.stopping||this.tryRunEnqueuedSummary()||!n||null===(e=this.heuristicRunner)||void 0===e||e.run()})}trySummarizeOnce(e,t,n=this.cancellationToken,r=new $){return this.lockedSummaryAction(async()=>this.generator.summarize(e,t,n,r).receivedSummaryAckOrNack).catch(e=>{}),r.build()}trySummarize(e,t=this.cancellationToken){void 0===this.summarizingLock?this.lockedSummaryAction(async()=>{const n=[{refreshLatestAck:!1,fullTree:!1},{refreshLatestAck:!0,fullTree:!1},{refreshLatestAck:!0,fullTree:!1,delaySeconds:120},{refreshLatestAck:!0,fullTree:!0,delaySeconds:600}];let r,i,s=0,a=0;for(let o=0;o<n.length;){if(this.cancellationToken.cancelled)return;s++,a++;const c=n[o],{delaySeconds:u=0}=c,h=Q(c,["delaySeconds"]),l=null!=r?r:u,d=Object.assign({reason:e,summaryAttempts:s,summaryAttemptsPerPhase:a,summaryAttemptPhase:o+1},h);l>0&&(this.logger.sendPerformanceEvent(Object.assign({eventName:"SummarizeAttemptDelay",duration:l,summaryNackDelay:void 0!==r},d)),await Object(z.a)(1e3*l));const m=this.generator.summarize(d,h,t),p=await m.receivedSummaryAckOrNack;if(p.success)return;r=p.retryAfterSeconds,(void 0===r||a>1)&&(o++,a=0),i=p}this.logger.sendErrorEvent({eventName:"FailToSummarize",reason:e,message:null==i?void 0:i.message},null==i?void 0:i.error),this.stopSummarizerCallback("failToSummarize")}).catch(e=>{this.logger.sendErrorEvent({eventName:"UnexpectedSummarizeError"},e)}):this.tryWhileSummarizing=!0}summarizeOnDemand(e=new $,t){var{reason:n}=t,r=Q(t,["reason"]);if(this.stopping)return e.fail("RunningSummarizer stopped or disposed",void 0),e.build();if(void 0!==this.summarizingLock)throw new g.f("Attempted to run an already-running summarizer on demand");return this.trySummarizeOnce({reason:"onDemand/"+n},r,this.cancellationToken,e)}enqueueSummarize(e){var{reason:t,afterSequenceNumber:n=0,override:r=!1}=e,i=Q(e,["reason","afterSequenceNumber","override"]);const s="enqueue;"+t;let a=!1;if(void 0!==this.enqueuedSummary){if(!r)return{alreadyEnqueued:!0};this.enqueuedSummary.resultsBuilder.fail("Aborted; overridden by another enqueue summarize attempt",void 0),this.enqueuedSummary=void 0,a=!0}this.enqueuedSummary={reason:s,afterSequenceNumber:n,options:i,resultsBuilder:new $};const o=this.enqueuedSummary.resultsBuilder.build();return this.tryRunEnqueuedSummary(),a?Object.assign(Object.assign({},o),{alreadyEnqueued:!0,overridden:!0}):o}tryRunEnqueuedSummary(){if(this.stopping)return this.disposeEnqueuedSummary(),!1;if(void 0===this.enqueuedSummary||this.heuristicData.lastOpSequenceNumber<this.enqueuedSummary.afterSequenceNumber||void 0!==this.summarizingLock)return!1;const{reason:e,resultsBuilder:t,options:n}=this.enqueuedSummary;return this.enqueuedSummary=void 0,this.trySummarizeOnce({reason:"enqueuedSummary/"+e},n,this.cancellationToken,t),!0}disposeEnqueuedSummary(){void 0!==this.enqueuedSummary&&(this.enqueuedSummary.resultsBuilder.fail("RunningSummarizer stopped or disposed",void 0),this.enqueuedSummary=void 0)}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class X extends l.a{constructor(e,t=!1){super(e),this.logged=t,this.errorType="summarizingError",this.canRetry=!0}static wrap(e,t=!1,n){return Object(l.j)(e,e=>new X(e,t),n)}}class Z extends M.EventEmitter{constructor(e,t,n,r,i,s,a){super(),this.runtime=t,this.configurationGetter=n,this.internalsProvider=r,this.summaryCollection=s,this.runCoordinatorCreateFn=a,this._disposed=!1,this.starting=!1,this.stopDeferred=new S.a,this.summarizeOnDemand=(...e)=>{var t;try{if(this._disposed||(null===(t=this.runningSummarizer)||void 0===t?void 0:t.disposed))throw new g.f("Summarizer is already disposed.");if(void 0!==this.runtime.summarizerClientId&&this.runtime.summarizerClientId!==this.runtime.clientId)throw new g.f("On-demand summary attempted while an elected summarizer is present");const n=new $;if(this.runningSummarizer)return this.runningSummarizer.summarizeOnDemand(n,...e);return this.runCoordinatorCreateFn(this.runtime).then(t=>{this.start(this.runtime.clientId,t,{disableHeuristics:!0}).then(async r=>{r.summarizeOnDemand(n,...e);const i=await Promise.race([this.stopDeferred.promise,t.waitCancelled]);await r.waitStop(!1),t.stop(i),this.close()}).catch(e=>{n.fail("Failed to start summarizer",e)})}).catch(e=>{n.fail("Failed to create cancellation token",e)}),n.build()}catch(e){throw X.wrap(e,!1,this.logger)}},this.enqueueSummarize=(...e)=>{if(this._disposed||void 0===this.runningSummarizer||this.runningSummarizer.disposed)throw new g.f("Summarizer is not running or already disposed.");return this.runningSummarizer.enqueueSummarize(...e)},this.logger=h.a.create(this.runtime.logger,"Summarizer"),this.innerHandle=new L(this,e,i)}get IFluidLoadable(){return this}get ISummarizer(){return this}get handle(){return this.innerHandle}static async create(e,t){const n={headers:{[i.a.cache]:!1,[i.a.clientDetails]:{capabilities:{interactive:!1},type:"summarizer"},[p.a.summarizingClient]:!0,[i.a.reconnect]:!1},url:t},r=await e.resolve(n),s=await Object(k.d)(r,{url:"_summarizer"});if(void 0===s.ISummarizer)throw new g.f("Fluid object does not implement ISummarizer");return s.ISummarizer}async run(e,t){try{return await this.runCore(e,t)}catch(e){throw this.stop("summarizerException"),X.wrap(e,!1,this.logger)}finally{this.close()}}stop(e){this.stopDeferred.resolve(e)}close(){this.dispose(),this.runtime.closeFn()}async runCore(e,t){const n=await this.runCoordinatorCreateFn(this.runtime),r=Promise.race([n.waitCancelled,this.stopDeferred.promise]);if(r.then(t=>{this.logger.sendTelemetryEvent({eventName:"StoppingSummarizer",onBehalfOf:e,reason:t})}),n.cancelled)return n.waitCancelled;const i=await this.start(e,n,t),s=await r;return await i.waitStop(!n.cancelled),n.stop(s),s}async start(e,t,n){if(this.runningSummarizer){if(this.runningSummarizer.disposed)throw new g.f("Starting a disposed summarizer");return this.runningSummarizer}if(this.starting)throw new g.f("Attempting to start a summarizer that is already starting");this.starting=!0,this.logger.sendTelemetryEvent({eventName:"RunningSummarizer",onBehalfOf:e,initSummarySeqNumber:this.runtime.deltaManager.initialSequenceNumber,config:JSON.stringify(this.configurationGetter())});const r=this.runtime.clientId;if(void 0===r)throw new g.f("clientId should be defined if connected.");const i=await Y.start(this.logger,this.summaryCollection.createWatcher(r),this.configurationGetter(),async(...e)=>this.internalsProvider.submitSummary(...e),new H(this.runtime.deltaManager.lastSequenceNumber,{refSequenceNumber:this.runtime.deltaManager.initialSequenceNumber,summaryTime:Date.now()}),e=>{this._disposed||this.logger.sendErrorEvent({eventName:"summarizingError"},((e,t)=>new X(e,t))(e,!0))},this.summaryCollection,t,e=>t.stop(e),n);return this.runningSummarizer=i,this.starting=!1,this.handleSummaryAcks().catch(e=>{this.logger.sendErrorEvent({eventName:"HandleSummaryAckFatalError"},e)}),this.systemOpListener=e=>i.handleSystemOp(e),this.runtime.deltaManager.inbound.on("op",this.systemOpListener),this.opListener=(e,t)=>i.handleOp(e,t),this.runtime.on("batchEnd",this.opListener),i}dispose(){this.stop("summarizerClientDisconnected"),this._disposed=!0,this.runningSummarizer&&(this.runningSummarizer.dispose(),this.runningSummarizer=void 0),this.systemOpListener&&this.runtime.deltaManager.inbound.off("op",this.systemOpListener),this.opListener&&this.runtime.removeListener("batchEnd",this.opListener)}async handleSummaryAcks(){var e;let t=this.runtime.deltaManager.initialSequenceNumber;for(;this.runningSummarizer;){const n=null!==(e=this.runningSummarizer.tryGetCorrelatedLogger(t))&&void 0!==e?e:this.logger;try{const e=await this.summaryCollection.waitSummaryAck(t);t=e.summaryOp.referenceSequenceNumber,await this.internalsProvider.refreshLatestSummaryAck(e.summaryOp.contents.handle,e.summaryAck.contents.handle,t,n)}catch(e){n.sendErrorEvent({eventName:"HandleSummaryAckError",referenceSequenceNumber:t},e)}t++}}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */var ee;!function(e){e[e.Off=0]="Off",e[e.Starting=1]="Starting",e[e.Running=2]="Running",e[e.Stopping=3]="Stopping"}(ee||(ee={}));class te{constructor(e,t,n,r,i,s,{initialDelayMs:a=5e3,opsToBypassInitialDelay:o=4e3}={},c){this.clientElection=e,this.connectedState=t,this.summaryCollection=n,this.requestSummarizerFn=i,this.startThrottler=s,this.summarizerOptions=c,this.state=ee.Off,this._disposed=!1,this.handleConnected=e=>{this.latestClientId=e,this.refreshSummarizer()},this.handleDisconnected=()=>{this.refreshSummarizer()},this.refreshSummarizer=()=>{const e=this.getShouldSummarizeState();switch(this.state){case ee.Off:return void(e.shouldSummarize&&this.startSummarization());case ee.Starting:return;case ee.Running:return void(!1===e.shouldSummarize&&this.stop(e.stopReason));case ee.Stopping:default:return}},this.summarizeOnDemand=(...e)=>{if(void 0===this.summarizer)throw Error("No running summarizer client");return this.summarizer.summarizeOnDemand(...e)},this.enqueueSummarize=(...e)=>{if(void 0===this.summarizer)throw Error("No running summarizer client");return this.summarizer.enqueueSummarize(...e)},this.logger=h.a.create(r,"SummaryManager",{all:{clientId:()=>this.latestClientId}}),this.connectedState.on("connected",this.handleConnected),this.connectedState.on("disconnected",this.handleDisconnected),this.latestClientId=this.connectedState.clientId,this.opsToBypassInitialDelay=o,this.initialDelayMs=a}get disposed(){return this._disposed}get currentState(){return this.state}start(){this.clientElection.on("electedSummarizerChanged",this.refreshSummarizer),this.refreshSummarizer()}getShouldSummarizeState(){return this.connectedState.connected?this.connectedState.clientId!==this.clientElection.electedParentId||this.state!==ee.Running&&this.connectedState.clientId!==this.clientElection.electedClientId?{shouldSummarize:!1,stopReason:"parentShouldNotSummarize"}:this.disposed?void Object(s.a)(!1,608):{shouldSummarize:!0}:{shouldSummarize:!1,stopReason:"parentNotConnected"}}startSummarization(){Object(s.a)(this.state===ee.Off,609),this.state=ee.Starting,Object(s.a)(void 0===this.summarizer,610),this.delayBeforeCreatingSummarizer().then(async e=>{if(e&&!1===this.getShouldSummarizeState().shouldSummarize)return"early exit";Object(s.a)(this.state===ee.Starting,611),this.state=ee.Running;const t=await this.requestSummarizerFn();this.summarizer=t;const n=this.getShouldSummarizeState();if(!1===n.shouldSummarize)return this.state=ee.Starting,t.stop(n.stopReason),"early exit after starting summarizer";const r=this.latestClientId;return h.c.timedExecAsync(this.logger,{eventName:"RunningSummarizer",attempt:this.startThrottler.numAttempts},async()=>t.run(r,this.summarizerOptions))}).then(e=>{this.logger.sendTelemetryEvent({eventName:"EndingSummarizer",reason:e})}).catch(e=>{if(this.logger.sendTelemetryEvent({eventName:"EndingSummarizer",reason:"exception"},e),this.getShouldSummarizeState().shouldSummarize||void 0!==this.summarizer){const t=(null==e?void 0:e.errorType)===G.a.offlineError?"generic":"error";this.logger.sendTelemetryEvent({eventName:"SummarizerException",category:t},e)}}).finally(()=>{var e;Object(s.a)(this.state!==ee.Off,612),this.state=ee.Off,null===(e=this.summarizer)||void 0===e||e.close(),this.summarizer=void 0,this.getShouldSummarizeState().shouldSummarize&&this.startSummarization()})}stop(e){var t;te.isStartingOrRunning(this.state)&&(this.state=ee.Stopping,null===(t=this.summarizer)||void 0===t||t.stop(e))}async delayBeforeCreatingSummarizer(){let e=this.startThrottler.getDelay();this.logger.sendTelemetryEvent({eventName:"CreatingSummarizer",throttlerDelay:e,initialDelay:this.initialDelayMs,startThrottlerMaxDelayMs:this.startThrottler.maxDelayMs,opsSinceLastAck:this.summaryCollection.opsSinceLastAck,opsToBypassInitialDelay:this.opsToBypassInitialDelay});let t=!1;if(this.summaryCollection.opsSinceLastAck<this.opsToBypassInitialDelay&&(t=!0,e=Math.max(e,this.initialDelayMs)),e>0){let t,n;const r=()=>{this.summaryCollection.opsSinceLastAck>=this.opsToBypassInitialDelay&&(clearTimeout(t),n())},i=new Promise(n=>{t=setTimeout(()=>n(),e)}),s=new Promise(e=>{n=e});this.summaryCollection.addOpListener(r),await Promise.race([i,s]),this.summaryCollection.removeOpListener(r)}return t}dispose(){this.clientElection.off("electedSummarizerChanged",this.refreshSummarizer),this.connectedState.off("connected",this.handleConnected),this.connectedState.off("disconnected",this.handleDisconnected),this._disposed=!0}}te.isStartingOrRunning=e=>e===ee.Starting||e===ee.Running
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */;class ne{constructor(e,t){this.logger=t,this.processingTimeIncrement=10,this.currentAllowedProcessingTimeForTurn=ne.processingTime,this.schedulingCount=0,this.deltaManager=e,this.deltaManager.inbound.on("idle",()=>{this.inboundQueueIdle()})}batchBegin(e){this.processingStartTime||(this.processingStartTime=a.a.now()),void 0===this.schedulingLog&&this.schedulingCount%500==0&&(this.schedulingLog={opsRemainingToProcess:0,numberOfTurns:1,totalProcessingTime:0,numberOfBatchesProcessed:0,firstSequenceNumber:e.sequenceNumber,lastSequenceNumber:e.sequenceNumber,startTime:a.a.now()})}batchEnd(e){if(this.schedulingLog&&(this.schedulingLog.numberOfBatchesProcessed++,this.schedulingLog.lastSequenceNumber=e.sequenceNumber,this.schedulingLog.opsRemainingToProcess=this.deltaManager.inbound.length),this.shouldRunScheduler()){const e=a.a.now(),t=e-this.processingStartTime;t>this.currentAllowedProcessingTimeForTurn&&(this.deltaManager.inbound.pause(),this.currentAllowedProcessingTimeForTurn+=this.processingTimeIncrement,this.schedulingLog&&(this.schedulingLog.numberOfTurns++,this.schedulingLog.totalProcessingTime+=t),setTimeout(()=>{this.schedulingLog&&this.logger.sendTelemetryEvent({eventName:"InboundOpsPartialProcessingTime",duration:h.f.formatTick(t),opsProcessed:this.schedulingLog.lastSequenceNumber-this.schedulingLog.firstSequenceNumber+1,opsRemainingToProcess:this.deltaManager.inbound.length,processingTime:h.f.formatTick(this.schedulingLog.totalProcessingTime),numberOfTurns:this.schedulingLog.numberOfTurns,batchesProcessed:this.schedulingLog.numberOfBatchesProcessed,timeToResume:h.f.formatTick(a.a.now()-e)}),this.deltaManager.inbound.resume()}),this.processingStartTime=void 0)}}inboundQueueIdle(){if(this.schedulingLog){const e=a.a.now();this.schedulingLog.totalProcessingTime+=e-this.processingStartTime,this.logger.sendTelemetryEvent({eventName:"InboundOpsProcessingTime",opsRemainingToProcess:this.schedulingLog.opsRemainingToProcess,numberOfTurns:this.schedulingLog.numberOfTurns,processingTime:h.f.formatTick(this.schedulingLog.totalProcessingTime),opsProcessed:this.schedulingLog.lastSequenceNumber-this.schedulingLog.firstSequenceNumber+1,batchesProcessed:this.schedulingLog.numberOfBatchesProcessed,duration:h.f.formatTick(e-this.schedulingLog.startTime),schedulingCount:this.schedulingCount}),this.schedulingLog=void 0}this.schedulingCount++,this.processingStartTime=void 0,this.currentAllowedProcessingTimeForTurn=ne.processingTime}shouldRunScheduler(){return this.deltaManager.inbound.length>0}}ne.processingTime=50;class re{constructor(e,t,n){this.clientId=e,this.deltaManager=t,this.pongCount=0,this.msnTrackingTimestamp=0,this.opProcessingTimes={},this.opPerfData={},this.firstConnection=!0,this.bootTime=a.a.now(),this.connectionStartTime=0,this.gap=0,this.logger=h.a.create(n,"OpPerf"),this.deltaManager.on("pong",e=>this.recordPingTime(e)),this.deltaManager.on("submitOp",e=>this.beforeOpSubmit(e)),this.deltaManager.on("op",e=>this.afterProcessingOp(e)),this.deltaManager.on("connect",(e,t)=>{this.clientId=e.clientId,void 0!==t&&(this.connectionOpSeqNumber=this.deltaManager.lastKnownSeqNumber,this.gap=t,this.connectionStartTime=a.a.now(),this.gap<=0&&this.reportGettingUpToDate())}),this.deltaManager.on("disconnect",()=>{this.sequenceNumberForMsnTracking=void 0,this.clientSequenceNumberForLatencyStatistics=void 0,this.opProcessingTimes={},this.opPerfData={},this.connectionOpSeqNumber=void 0,this.firstConnection=!1}),this.deltaManager.outbound.on("push",e=>{for(const t of e)t.type===y.a.Operation&&this.clientSequenceNumberForLatencyStatistics===t.clientSequenceNumber&&(Object(s.a)(void 0===this.opProcessingTimes.opStartTimeSittingInboundQueue,712),Object(s.a)(void 0===this.opPerfData.durationInboundQueue,713),this.opProcessingTimes.opStartTimeSittingInboundQueue=Date.now(),Object(s.a)(void 0===this.opPerfData.durationOutboundQueue,714),Object(s.a)(void 0!==this.opProcessingTimes.opStartTimeForLatencyStatistics,715),this.opPerfData.durationOutboundQueue=this.opProcessingTimes.opStartTimeSittingInboundQueue-this.opProcessingTimes.opStartTimeForLatencyStatistics)}),this.deltaManager.inbound.on("push",e=>{this.clientId===e.clientId&&e.type===y.a.Operation&&this.clientSequenceNumberForLatencyStatistics===e.clientSequenceNumber&&void 0!==this.opProcessingTimes.opStartTimeSittingInboundQueue&&(this.opProcessingTimes.opStartTimeInboundPushEvent=Date.now(),this.opPerfData.durationInboundQueue=this.opProcessingTimes.opStartTimeInboundPushEvent-this.opProcessingTimes.opStartTimeSittingInboundQueue,this.opProcessingTimes.opStartTimeSittingInboundQueue=void 0,this.opPerfData.lengthInboundQueue=this.deltaManager.inbound.length)}),this.deltaManager.inbound.on("idle",(e,t)=>{"number"==typeof e&&e>=100&&this.logger.sendPerformanceEvent({eventName:"GetDeltas_OpProcessing",count:e,duration:t})})}reportGettingUpToDate(){this.connectionOpSeqNumber=void 0,this.logger.sendPerformanceEvent({eventName:"ConnectionSpeed",duration:a.a.now()-this.connectionStartTime,ops:this.gap,timeToConnect:this.firstConnection?h.f.formatTick(this.connectionStartTime-this.bootTime):void 0,firstConnection:this.firstConnection})}recordPingTime(e){this.pongCount++,this.pingLatency=e,100===this.pongCount&&(this.logger.sendPerformanceEvent({eventName:"DeltaLatency",duration:e}),this.pongCount=0)}beforeOpSubmit(e){void 0===this.clientSequenceNumberForLatencyStatistics&&e.clientSequenceNumber%500==1&&(Object(s.a)(void 0===this.opProcessingTimes.opStartTimeSittingInboundQueue,716),Object(s.a)(void 0===this.opPerfData.durationInboundQueue,717),this.opProcessingTimes.opStartTimeForLatencyStatistics=Date.now(),this.clientSequenceNumberForLatencyStatistics=e.clientSequenceNumber)}afterProcessingOp(e){const t=e.sequenceNumber;if(t===this.connectionOpSeqNumber&&this.reportGettingUpToDate(),void 0===this.sequenceNumberForMsnTracking&&t%1e3==0&&(this.sequenceNumberForMsnTracking=t,this.msnTrackingTimestamp=e.timestamp),void 0!==this.sequenceNumberForMsnTracking&&e.minimumSequenceNumber>=this.sequenceNumberForMsnTracking&&(Object(s.a)(void 0!==this.msnTrackingTimestamp,718),this.logger.sendPerformanceEvent({eventName:"MsnStatistics",sequenceNumber:t,msnDistance:t-this.sequenceNumberForMsnTracking,duration:e.timestamp-this.msnTrackingTimestamp}),this.sequenceNumberForMsnTracking=void 0),this.clientId===e.clientId&&this.clientSequenceNumberForLatencyStatistics===e.clientSequenceNumber){Object(s.a)(void 0!==this.opProcessingTimes.opStartTimeForLatencyStatistics,288);const n=Date.now();void 0!==this.opProcessingTimes.opStartTimeInboundPushEvent&&(this.opPerfData.durationInboundToProcessing=n-this.opProcessingTimes.opStartTimeInboundPushEvent);const r=n-this.opProcessingTimes.opStartTimeForLatencyStatistics,i=r>5e3?"error":"performance";this.logger.sendPerformanceEvent(Object.assign({eventName:"OpRoundtripTime",sequenceNumber:t,referenceSequenceNumber:e.referenceSequenceNumber,duration:r,category:i,pingLatency:this.pingLatency,msnDistance:this.deltaManager.lastSequenceNumber-this.deltaManager.minimumSequenceNumber},this.opPerfData)),this.clientSequenceNumberForLatencyStatistics=void 0,this.opPerfData={}}}}var ie=n(183),se=n(94),ae=n.n(se);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class oe{constructor(e,t,n,r){var i;if(this.containerRuntime=e,this.applyStashedOp=t,this.pendingStates=new ae.a,this.previousClientIds=new Set,this.firstStashedCSN=-1,this.disposeOnce=new ie.a(()=>{this.initialStates.clear(),this.pendingStates.clear()}),this.pendingMessagesCount=0,this.isProcessingBatch=!1,this.dispose=()=>this.disposeOnce.value,this.initialStates=new ae.a(null!==(i=null==r?void 0:r.pendingStates)&&void 0!==i?i:[]),r){(null==r?void 0:r.clientId)&&this.previousClientIds.add(r.clientId);const e=r.pendingStates.filter(e=>"message"===e.type);this.firstStashedCSN=e[0].clientSequenceNumber}this.flushModeForNextMessage=n,this.onFlushModeUpdated(n)}get connected(){return this.containerRuntime.connected}hasPendingMessages(){return 0!==this.pendingMessagesCount}getLocalState(){if(this.hasPendingMessages())return{clientId:this.clientId,pendingStates:this.pendingStates.toArray().map(e=>"message"===e.type?Object.assign(Object.assign({},e),{localOpMetadata:void 0}):e)}}get disposed(){return this.disposeOnce.evaluated}onSubmitMessage(e,t,n,r,i,s){const a={type:"message",messageType:e,clientSequenceNumber:t,referenceSequenceNumber:n,content:r,localOpMetadata:i,opMetadata:s};this.pendingStates.push(a),this.pendingMessagesCount++}onFlushModeUpdated(e){this.pendingStates.push({type:"flushMode",flushMode:e})}onFlush(){if(this.containerRuntime.flushMode===b.FlushMode.Immediate)return;const e=this.pendingStates.peekBack();"message"===(null==e?void 0:e.type)&&this.pendingStates.push({type:"flush"})}async applyStashedOpsAt(e){for(;!this.initialStates.isEmpty();){const t=this.initialStates.peekFront();if("message"===t.type){if(t.referenceSequenceNumber>e)break;if(t.referenceSequenceNumber>0&&t.referenceSequenceNumber<e)throw new Error("loaded from snapshot too recent to apply stashed ops");const n=await this.applyStashedOp(t.messageType,t.content);t.localOpMetadata=n}this.pendingStates.push(this.initialStates.shift())}}processMessage(e,t){return e.type===tt.ChunkedOp?{localAck:!1,localOpMetadata:void 0}:t?{localAck:!1,localOpMetadata:this.processPendingLocalMessage(e)}:this.processRemoteMessage(e)}processRemoteMessage(e){var t;if(!ct(e))return{localAck:!1,localOpMetadata:void 0};const n=e.clientId===Array.from(this.previousClientIds)[0]&&e.clientSequenceNumber>=this.firstStashedCSN,r=Array.from(this.previousClientIds).indexOf(e.clientId)>0;if(n||r)for(Object(s.a)(void 0===this.clientId,651);!this.pendingStates.isEmpty();){const t=this.pendingStates.shift();if("message"===t.type)return this.assertOpMatch(t,e,n),{localAck:!0,localOpMetadata:t.localOpMetadata}}return e.type===tt.Rejoin&&this.previousClientIds.has(null===(t=e.contents)||void 0===t?void 0:t.clientId)&&this.previousClientIds.add(e.clientId),{localAck:!1,localOpMetadata:void 0}}assertOpMatch(e,t,n){switch(Object(s.a)(t.type===e.messageType,652),Object(s.a)(t.clientSequenceNumber===e.clientSequenceNumber||!n,653),t.type){case tt.Attach:Object(s.a)(t.contents.id===e.content.id,654);break;case tt.FluidDataStoreOp:Object(s.a)(t.contents.address===e.content.address,655);break;case tt.BlobAttach:break;case tt.Rejoin:default:throw new Error(t.type+" not expected")}}processPendingLocalMessage(e){this.maybeProcessBatchBegin(e);const t=this.peekNextPendingState();if(Object(s.a)("message"===t.type,361),this.pendingStates.shift(),t.clientSequenceNumber===e.clientSequenceNumber)return this.pendingMessagesCount--,this.maybeProcessBatchEnd(e),t.localOpMetadata;{const n=g.c.create("pending local message clientSequenceNumber mismatch","unexpectedAckReceived",e,{expectedClientSequenceNumber:t.clientSequenceNumber});this.containerRuntime.closeFn(n)}}maybeProcessBatchBegin(e){let t,n=!1,r=this.peekNextPendingState();for(;"message"!==r.type;)"flushMode"===r.type&&(t=r.flushMode),"flush"===r.type&&(n=!0),this.pendingStates.shift(),r=this.peekNextPendingState();void 0!==t&&(this.flushModeForNextMessage=t),t!==b.FlushMode.Immediate&&(t===b.FlushMode.TurnBased||n)&&(Object(s.a)(!this.isProcessingBatch&&void 0===this.pendingBatchBeginMessage,363),this.pendingBatchBeginMessage=e,this.isProcessingBatch=!0)}maybeProcessBatchEnd(e){var t,n;if(!this.isProcessingBatch)return;const r=this.peekNextPendingState();if("message"===r.type)return;Object(s.a)("flushMode"!==r.type,701),Object(s.a)(void 0!==this.pendingBatchBeginMessage,365);const i=null===(t=this.pendingBatchBeginMessage.metadata)||void 0===t?void 0:t.batch;if(this.pendingBatchBeginMessage===e)Object(s.a)(void 0===i,366);else{const t=null===(n=e.metadata)||void 0===n?void 0:n.batch;Object(s.a)(!0===i,367),Object(s.a)(!1===t,368)}this.pendingBatchBeginMessage=void 0,this.isProcessingBatch=!1}peekNextPendingState(){const e=this.pendingStates.peekFront();return Object(s.a)(!!e,369),e}replayPendingStates(){Object(s.a)(this.connected,370),Object(s.a)(this.clientId!==this.containerRuntime.clientId,371),this.clientId=this.containerRuntime.clientId,Object(s.a)(this.initialStates.isEmpty(),372);let e=this.pendingStates.length;if(0===e)return;this.pendingMessagesCount=0;const t=this.containerRuntime.flushMode;for(this.containerRuntime.setFlushMode(this.flushModeForNextMessage);e>0;){const t=this.pendingStates.shift();switch(t.type){case"message":this.containerRuntime.reSubmitFn(t.messageType,t.content,t.localOpMetadata,t.opMetadata);break;case"flushMode":this.containerRuntime.setFlushMode(t.flushMode);break;case"flush":this.containerRuntime.flush()}e--}this.containerRuntime.setFlushMode(t)}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 *
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY
 */
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class ce{constructor(e,t,n){this.path=e,this.routeContext=t,this.get=n,this.attached=!1,this.absolutePath=Object(F.a)(e,this.routeContext)}get IFluidHandle(){return this}get isAttached(){return this.attached}attachGraph(){this.attached=!0}bind(e){throw new Error("Cannot bind to blob handle")}}class ue{constructor(e,t,n,r,i,s,a){this.routeContext=e,this.getStorage=n,this.attachBlobCallback=r,this.gcNodeUpdated=i,this.runtime=s,this.logger=a,this.blobIds=new Set,this.pendingBlobIds=new Map,this.detachedBlobIds=new Set,this.runtime.once("dispose",()=>{for(const e of this.pendingBlobIds.values())e.reject(new Error("runtime disposed while blobAttach op in flight"))}),this.load(t)}hasBlob(e){return this.blobIds.has(e)||this.detachedBlobIds.has(e)}getBlobGCNodePath(e){return`/${ue.basePath}/${e}`}async getBlob(e){var t,n;const r=null!==(n=null===(t=this.redirectTable)||void 0===t?void 0:t.get(e))&&void 0!==n?n:e;return Object(s.a)(this.hasBlob(r),287),this.gcNodeUpdated(this.getBlobGCNodePath(e)),new ce(`${ue.basePath}/${r}`,this.routeContext,async()=>this.getStorage().readBlob(r).catch(e=>{throw this.logger.sendErrorEvent({eventName:"AttachmentReadBlobError",id:r},e),e}))}async createBlob(e){var t,n;this.runtime.attachState===r.a.Attaching&&(this.logger.sendTelemetryEvent({eventName:"CreateBlobWhileAttaching"}),await new Promise(e=>this.runtime.once("attached",e)));const i=await this.getStorage().createBlob(e),s=new ce(`${ue.basePath}/${i.id}`,this.routeContext,async()=>this.getBlob(i.id).then(async e=>e.get()));return this.runtime.attachState===r.a.Detached?(this.detachedBlobIds.add(i.id),s):(this.pendingBlobIds.has(i.id)?await(null===(t=this.pendingBlobIds.get(i.id))||void 0===t?void 0:t.promise):this.blobIds.has(i.id)||(this.pendingBlobIds.set(i.id,new S.a),this.attachBlobCallback(i.id),await(null===(n=this.pendingBlobIds.get(i.id))||void 0===n?void 0:n.promise)),s)}processBlobAttachOp(e,t){if(t){const t=this.pendingBlobIds.get(e);Object(s.a)(void 0!==t,504),t.resolve(),this.pendingBlobIds.delete(e)}this.blobIds.add(e)}static async load(e,t){if(!e)return{};let n;const r=e.blobs[this.redirectTableBlobName];r&&(n=await t(r));return{ids:Object.entries(e.blobs).filter(([e,t])=>e!==this.redirectTableBlobName).map(([e,t])=>t),redirectTable:n}}load(e){var t,n,i;if(e.ids){const t=this.runtime.attachState===r.a.Detached;e.ids.map(e=>t?this.detachedBlobIds.add(e):this.blobIds.add(e))}e.redirectTable&&(this.redirectTable=new Map(e.redirectTable)),this.logger.sendTelemetryEvent({eventName:"AttachmentBlobsLoaded",count:null!==(n=null===(t=e.ids)||void 0===t?void 0:t.length)&&void 0!==n?n:0,redirectTable:null===(i=e.redirectTable)||void 0===i?void 0:i.length})}getGCData(e=!1){const t={gcNodes:{}};if(this.blobIds.forEach(e=>{t.gcNodes[this.getBlobGCNodePath(e)]=[]}),void 0!==this.redirectTable)for(const[e,n]of this.redirectTable)t.gcNodes[this.getBlobGCNodePath(e)]=[this.getBlobGCNodePath(n)];return t}deleteUnusedRoutes(e){var t;for(const n of e){const e=n.split("/");Object(s.a)(3===e.length&&e[1]===ue.basePath,725);const r=e[2];(null===(t=this.redirectTable)||void 0===t?void 0:t.has(r))?this.redirectTable.delete(r):this.blobIds.delete(r)}}summarize(){const e=!!this.redirectTable||this.runtime.attachState!==r.a.Detached?this.blobIds:this.detachedBlobIds,t=new C.a;return e.forEach(e=>{t.addAttachment(e)}),this.redirectTable&&this.redirectTable.size>0&&t.addBlob(ue.redirectTableBlobName,JSON.stringify(Array.from(this.redirectTable.entries()))),t.getSummaryTree()}setRedirectTable(e){Object(s.a)(this.runtime.attachState===r.a.Detached,594),Object(s.a)(!this.redirectTable,595);for(const[t,n]of e)Object(s.a)(this.detachedBlobIds.delete(t),596),this.blobIds.add(n);Object(s.a)(0===this.detachedBlobIds.size,597),this.redirectTable=e}}ue.basePath="_blobs",ue.redirectTableBlobName=".redirectTable";var he=n(588),le=n(131);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
class de extends le.a{constructor(e,t){super(e),this.blobs=t}get policies(){return this.internalStorageService.policies}async readBlob(e){const t=this.blobs.get(e);return void 0!==t?t:this.internalStorageService.readBlob(e)}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class me{constructor(e){this.notBoundContexts=new Set,this._contexts=new Map,this.deferredContexts=new Map,this.disposeOnce=new ie.a(()=>{for(const[e,t]of this.deferredContexts)t.promise.then(e=>{e.dispose()}).catch(t=>{this._logger.sendErrorEvent({eventName:"FluidDataStoreContextDisposeError",fluidDataStoreId:e},t)})}),this.dispose=()=>this.disposeOnce.value,this._logger=h.a.create(e)}[Symbol.iterator](){return this._contexts.entries()}get size(){return this._contexts.size}get disposed(){return this.disposeOnce.evaluated}notBoundLength(){return this.notBoundContexts.size}isNotBound(e){return this.notBoundContexts.has(e)}has(e){return this._contexts.has(e)}get(e){return this._contexts.get(e)}delete(e){return this.deferredContexts.delete(e),this.notBoundContexts.delete(e),this._contexts.delete(e)}getUnbound(e){if(void 0!==this._contexts.get(e)&&this.notBoundContexts.has(e))return this._contexts.get(e)}addUnbound(e){const t=e.id;Object(s.a)(!this._contexts.has(t),344),this._contexts.set(t,e),this.notBoundContexts.add(t),this.ensureDeferred(t)}async getBoundOrRemoted(e,t){const n=this.ensureDeferred(e);if(t||n.isCompleted)return n.promise}ensureDeferred(e){const t=this.deferredContexts.get(e);if(t)return t;const n=new S.a;return this.deferredContexts.set(e,n),n}bind(e){const t=this.notBoundContexts.delete(e);Object(s.a)(t,345),this.resolveDeferred(e)}resolveDeferred(e){const t=this._contexts.get(e);Object(s.a)(!!t,346),Object(s.a)(!this.notBoundContexts.has(e),347);const n=this.deferredContexts.get(e);Object(s.a)(!!n,348),n.resolve(t)}addBoundOrRemoted(e){const t=e.id;Object(s.a)(!this._contexts.has(t),349),this._contexts.set(t,e),this.ensureDeferred(t),this.resolveDeferred(t)}}var pe=n(140),fe=n(586);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function ge(e,t,n){const r=new Set,i=[...t];for(const t of i){if(r.has(t))continue;r.add(t);const n=e[t];void 0!==n&&i.push(...n)}const s=[],a=[];for(const t of Object.keys(e))r.has(t)?s.push(t):a.push(t);return{referencedNodeIds:s,deletedNodeIds:a}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */const ye="DataStore",ve="SubDataStore",be="Blob",Se="Other";class we{constructor(e,t,n){this.unreferencedTimestampMs=e,this.inactiveTimeoutMs=t,this._inactive=!1,void 0!==n&&this.updateTracking(n)}get inactive(){return this._inactive}updateTracking(e){var t;const n=e-this.unreferencedTimestampMs;if(n>this.inactiveTimeoutMs)return this._inactive=!0,void(null===(t=this.timer)||void 0===t||t.clear());const r=this.inactiveTimeoutMs-n;void 0===this.timer&&(this.timer=new q.b(r,()=>{this._inactive=!0})),this.timer.restart(r)}stopTracking(){var e;null===(e=this.timer)||void 0===e||e.clear(),this._inactive=!1}}class Ce{constructor(e,t,n,r,i,a,o,c,u,l=!0){var m,p,f,y,v,C,x;let E;if(this.runtime=e,this.gcOptions=t,this.getNodePackagePath=n,this.getLastSummaryTimestampMs=r,this.isSummarizerClient=l,this._writeDataAtRoot=!1,this.initialStateNeedsReset=!1,this.currentGCVersion=1,this.newReferencesSinceLastRun=new Map,this.unreferencedNodesState=new Map,this.loggedUnreferencedEvents=new Set,this.pendingEventsQueue=[],this.completedRuns=0,this.mc=Object(d.c)(h.a.create(o,"GarbageCollector",{all:{completedGCRuns:()=>this.completedRuns}})),c)E=Ae(u),this.gcEnabled=E>0,this.sweepEnabled=null!==(m=null==u?void 0:u.sweepEnabled)&&void 0!==m&&m,this.sessionExpiryTimeoutMs=null==u?void 0:u.sessionExpiryTimeoutMs;else{if(t.sweepAllowed&&!t.gcAllowed)throw new g.f("GC sweep phase cannot be enabled without enabling GC mark phase");this.gcEnabled=!0===t.gcAllowed,this.sweepEnabled=!0===t.sweepAllowed,this.mc.config.getBoolean("Fluid.GarbageCollection.RunSessionExpiry")&&this.gcEnabled&&(this.sessionExpiryTimeoutMs=2592e6)}if(void 0!==this.sessionExpiryTimeoutMs&&!0!==this.mc.config.getBoolean("Fluid.GarbageCollection.DisableSessionExpiry")){const e=this.mc.config.getNumber("Fluid.GarbageCollection.TestOverride.SessionExpiryMs");void 0!==e&&(this.sessionExpiryTimeoutMs=e);const t=this.sessionExpiryTimeoutMs;!function e(t,n,r){let i;if(t>2147483647){const s=t-2147483647;i=setTimeout(()=>e(s,n,r),2147483647)}else i=setTimeout(()=>n(),t);r(i)}(t,()=>{this.runtime.closeFn(new g.a("Client session expired.",t))},e=>{this.sessionExpiryTimer=e})}this.latestSummaryGCVersion=null!=E?E:this.currentGCVersion,this.shouldRunGC=null!==(p=this.mc.config.getBoolean("Fluid.GarbageCollection.RunGC"))&&void 0!==p?p:this.gcEnabled&&!t.disableGC;const O=function(e,t){return void 0===t||function(e,t){const n=t.split(".").map(e=>(Object(s.a)(!1===isNaN(+e),762),Number.parseInt(e,10)));Object(s.a)(3===n.length,763);const[r,i,a]=n,o=e.split(/\W/);Object(s.a)(o.length>=3,764);const c=o.slice(0,3).map(e=>(Object(s.a)(!1===isNaN(+e),765),Number.parseInt(e,10))),[u,h,l]=c;if(u>r)return 1;if(r>u)return-1;if(h>i)return 1;if(i>h)return-1;if(l>a)return 1;if(a>l)return-1;if(3===o.length)return 0;return-1}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */(e,t)>=0}("0.59.4002",this.mc.config.getString("Fluid.GarbageCollection.TrackGCState.MinVersion"));this.trackGCState=!0===this.mc.config.getBoolean("Fluid.GarbageCollection.TrackGCState")&&O,this.shouldRunSweep=this.shouldRunGC&&(null!==(f=this.mc.config.getBoolean("Fluid.GarbageCollection.RunSweep"))&&void 0!==f?f:void 0!==this.sessionExpiryTimeoutMs&&this.sweepEnabled),this.inactiveTimeoutMs=null!==(v=null!==(y=this.mc.config.getNumber("Fluid.GarbageCollection.TestOverride.InactiveTimeoutMs"))&&void 0!==y?y:this.gcOptions.inactiveTimeoutMs)&&void 0!==v?v:6048e5,this.testMode=null!==(C=this.mc.config.getBoolean("Fluid.GarbageCollection.GCTestMode"))&&void 0!==C?C:!0===t.runGCInTestMode,this._writeDataAtRoot=null!==(x=this.mc.config.getBoolean("Fluid.GarbageCollection.WriteDataAtRoot"))&&void 0!==x?x:!0===this.gcOptions.writeDataAtRoot;const T=new S.b(async()=>{var e;if(void 0===i)return;const t=i.trees.gc;if(void 0!==t){this._writeDataAtRoot=!0;const e=await xe(t,a);return this.trackGCState&&(this.latestSerializedSummaryState=JSON.stringify(Ee(e))),e}const n={gcNodes:{"/":{outboundRoutes:[]}}},r=Ge(i,u);Object(s.a)(void 0!==r,680);for(const[t,i]of Object.entries(r.trees)){const r=i.blobs[b.gcBlobKey];if(void 0===r)continue;const o=await a(r);if(void 0===(null===(e=o.gcData)||void 0===e?void 0:e.gcNodes))continue;const c="/"+t;(await a(i.blobs[Ie])).isRootDataStore&&n.gcNodes["/"].outboundRoutes.push(c);for(const[e,t]of Object.entries(o.gcData.gcNodes)){const r="/"===e?c:`${c}${e}`;n.gcNodes[r]={outboundRoutes:Array.from(t)}}Object(s.a)(void 0!==n.gcNodes[c],681),n.gcNodes[c].unreferencedTimestampMs=o.unrefTimestamp}return 1===Object.keys(n.gcNodes).length?void 0:n});this.initializeBaseStateP=new S.b(async()=>{const e=this.runtime.getCurrentReferenceTimestampMs(),t=await T;if(void 0===t)return;const n={};for(const[r,i]of Object.entries(t.gcNodes))void 0!==i.unreferencedTimestampMs&&this.unreferencedNodesState.set(r,new we(i.unreferencedTimestampMs,this.inactiveTimeoutMs,e)),n[r]=Array.from(i.outboundRoutes);this.previousGCDataFromLastRun={gcNodes:n}}),this.baseGCDetailsP=new S.b(async()=>{const e=await T;if(void 0===e)return new Map;const t={};for(const[n,r]of Object.entries(e.gcNodes))t[n]=Array.from(r.outboundRoutes);const n=ge(t,["/"],this.mc.logger).referencedNodeIds,r=Object(w.g)({gcData:{gcNodes:t},usedRoutes:n});for(const[t,n]of Object.entries(e.gcNodes))if(void 0!==n.unreferencedTimestampMs){const e=r.get(t.slice(1));void 0!==e&&(e.unrefTimestamp=n.unreferencedTimestampMs)}return r});const P=JSON.stringify(Object.assign({gcEnabled:this.gcEnabled,sweepEnabled:this.sweepEnabled,runGC:this.shouldRunGC,runSweep:this.shouldRunSweep,writeAtRoot:this._writeDataAtRoot,testMode:this.testMode,sessionExpiry:this.sessionExpiryTimeoutMs,inactiveTimeout:this.inactiveTimeoutMs,existing:c},this.gcOptions));this.isSummarizerClient&&this.mc.logger.sendTelemetryEvent({eventName:"GarbageCollectorLoaded",gcConfigs:P}),this.shouldRunGC&&this.initializeBaseStateP.catch(e=>{const t=g.c.wrapIfUnrecognized(e,"FailedToInitializeGC");throw t.addTelemetryProperties({gcConfigs:P}),t})}static create(e,t,n,r,i,s,a,o,c,u){return new Ce(e,t,n,r,i,s,a,o,c,u)}get summaryStateNeedsReset(){return this.initialStateNeedsReset||this.shouldRunGC&&this.latestSummaryGCVersion!==this.currentGCVersion}get writeDataAtRoot(){return this._writeDataAtRoot}async collectGarbage(e){const{runSweep:t=this.shouldRunSweep,fullGC:n=!0===this.gcOptions.runFullGC||this.summaryStateNeedsReset}=e,r=e.logger?h.a.create(e.logger,void 0,{all:{completedGCRuns:()=>this.completedRuns}}):this.mc.logger;return h.c.timedExecAsync(r,{eventName:"GarbageCollection"},async e=>{await this.initializeBaseStateP,await this.runtime.updateStateBeforeGC();const t=await this.runtime.getGCData(n),i=ge(t.gcNodes,["/"]),s=this.generateStatsAndLogEvents(i,r);this.updateStateSinceLastRun(t,r);const a=this.runtime.getCurrentReferenceTimestampMs();return this.updateCurrentState(t,i,a),this.runtime.updateUsedRoutes(i.referencedNodeIds,a),this.testMode&&this.runtime.deleteUnusedRoutes(i.deletedNodeIds),e.end(Object.assign({},s)),this.completedRuns++,s},{end:!0,cancel:"error"})}summarize(e,t){var n;if(!this.shouldRunGC||void 0===this.previousGCDataFromLastRun)return;const r={gcNodes:{}};for(const[e,t]of Object.entries(this.previousGCDataFromLastRun.gcNodes))r.gcNodes[e]={outboundRoutes:t,unreferencedTimestampMs:null===(n=this.unreferencedNodesState.get(e))||void 0===n?void 0:n.unreferencedTimestampMs};const i=JSON.stringify(Ee(r));if(this.trackGCState&&(this.pendingSerializedSummaryState=i,void 0!==this.latestSerializedSummaryState&&this.latestSerializedSummaryState===i&&!e&&t)){const e=Object(C.i)();return e.handleNodeCount++,{summary:{type:v.a.Handle,handle:"/gc",handleType:v.a.Tree},stats:e}}const s=new C.a;return s.addBlob("__gc_root",i),s.getSummaryTree()}getMetadata(){return{gcFeature:this.gcEnabled?this.currentGCVersion:0,sessionExpiryTimeoutMs:this.sessionExpiryTimeoutMs,sweepEnabled:this.sweepEnabled}}async getBaseGCDetails(){return this.baseGCDetailsP}async latestSummaryStateRefreshed(e,t){if(this.initialStateNeedsReset=!1,!this.shouldRunGC||!e.latestSummaryUpdated)return;if(e.wasSummaryTracked)return this.latestSummaryGCVersion=this.currentGCVersion,void(this.trackGCState&&(this.latestSerializedSummaryState=this.pendingSerializedSummaryState,this.pendingSerializedSummaryState=void 0));const n=e.snapshot,r=n.blobs[Pe];if(r){const e=await t(r);this.latestSummaryGCVersion=Ae(e)}const i=n.trees.gc;if(void 0!==i&&this.trackGCState){const e=await xe(i,t);this.latestSerializedSummaryState=JSON.stringify(Ee(e))}else this.latestSerializedSummaryState=void 0;this.pendingSerializedSummaryState=void 0}nodeUpdated(e,t,n,r,i){this.shouldRunGC&&this.logIfInactive(t,e,n,r,i)}addedOutboundReference(e,t){var n;if(!this.shouldRunGC)return;const r=null!==(n=this.newReferencesSinceLastRun.get(e))&&void 0!==n?n:[];r.push(t),this.newReferencesSinceLastRun.set(e,r),this.logIfInactive("Revived",t)}dispose(){void 0!==this.sessionExpiryTimer&&(clearTimeout(this.sessionExpiryTimer),this.sessionExpiryTimer=void 0)}updateCurrentState(e,t,n){this.previousGCDataFromLastRun=Object(w.b)(e),this.newReferencesSinceLastRun.clear();for(const e of t.referencedNodeIds){const t=this.unreferencedNodesState.get(e);void 0!==t&&(t.stopTracking(),this.unreferencedNodesState.delete(e))}if(void 0!==n)for(const e of t.deletedNodeIds){const t=this.unreferencedNodesState.get(e);void 0===t?this.unreferencedNodesState.set(e,new we(n,this.inactiveTimeoutMs,n)):t.updateTracking(n)}}updateStateSinceLastRun(e,t){if(void 0===this.previousGCDataFromLastRun)return;const n=this.findMissingExplicitReferences(e,this.previousGCDataFromLastRun,this.newReferencesSinceLastRun);if(!0===this.mc.config.getBoolean("Fluid.GarbageCollection.LogUnknownOutboundReferences")&&n.length>0&&n.forEach(e=>{const n={eventName:"gcUnknownOutboundReferences",gcNodeId:e[0],gcRoutes:JSON.stringify(e[1])};t.sendPerformanceEvent(n)}),0===this.newReferencesSinceLastRun.size)return;const r=Object(w.c)(this.previousGCDataFromLastRun,e);this.newReferencesSinceLastRun.forEach((e,t)=>{void 0===r.gcNodes[t]?r.gcNodes[t]=e:r.gcNodes[t].push(...e)});const i=ge(r.gcNodes,["/"]);for(const e of i.referencedNodeIds){const t=this.unreferencedNodesState.get(e);void 0!==t&&(t.stopTracking(),this.unreferencedNodesState.delete(e))}}findMissingExplicitReferences(e,t,n){Object(s.a)(void 0!==t,695);const r=Object.entries(e.gcNodes),i=[];return r.forEach(([e,r])=>{var s,a;const o=null!==(s=t.gcNodes[e])&&void 0!==s?s:[],c=null!==(a=n.get(e))&&void 0!==a?a:[],u=[];r.forEach(t=>{const n=this.runtime.getNodeType(t)===be||this.runtime.getNodeType(t)===ye,r=!e.startsWith(t);n&&r&&!o.includes(t)&&!c.includes(t)&&u.push(t)}),u.length>0&&i.push([e,u])}),i}generateStatsAndLogEvents(e,t){let n=this.pendingEventsQueue.shift();for(;void 0!==n;){const e=this.getNodePackagePath(n.id);t.sendErrorEvent(Object.assign(Object.assign({},n),{pkg:e?{value:"/"+e.join("/"),tag:h.e.PackageData}:void 0})),n=this.pendingEventsQueue.shift()}const r={nodeCount:0,dataStoreCount:0,attachmentBlobCount:0,unrefNodeCount:0,unrefDataStoreCount:0,unrefAttachmentBlobCount:0,updatedNodeCount:0,updatedDataStoreCount:0,updatedAttachmentBlobCount:0},i=(e,t)=>{r.nodeCount++;const n=this.unreferencedNodesState.has(e)?t:!t;n&&r.updatedNodeCount++,t||r.unrefNodeCount++,this.runtime.getNodeType(e)===ye&&(r.dataStoreCount++,n&&r.updatedDataStoreCount++,t||r.unrefDataStoreCount++),this.runtime.getNodeType(e)===be&&(r.attachmentBlobCount++,n&&r.updatedAttachmentBlobCount++,t||r.unrefAttachmentBlobCount++)};for(const t of e.referencedNodeIds)i(t,!0);for(const t of e.deletedNodeIds)i(t,!1);return r}logIfInactive(e,t,n=this.runtime.getCurrentReferenceTimestampMs(),r,i){if(void 0===n)return;const s=this.runtime.getNodeType(t);if(s!==ye&&s!==be)return;if(!this.isSummarizerClient&&"Loaded"!==e)return;const a="inactiveObject_"+e,o=`${t}-${a}`,c=this.unreferencedNodesState.get(t);if((null==c?void 0:c.inactive)&&!this.loggedUnreferencedEvents.has(o)){this.loggedUnreferencedEvents.add(o);const e={eventName:a,id:t,type:s,age:n-c.unreferencedTimestampMs,timeout:this.inactiveTimeoutMs,completedGCRuns:this.completedRuns,lastSummaryTime:this.getLastSummaryTimestampMs(),externalRequest:null==i?void 0:i[st.externalRequest],viaHandle:null==i?void 0:i[st.viaHandle]},u=null!=r?r:this.getNodePackagePath(t);void 0!==u?this.mc.logger.sendErrorEvent(Object.assign(Object.assign({},e),{pkg:{value:"/"+u.join("/"),tag:h.e.PackageData}})):this.pendingEventsQueue.push(e)}}}async function xe(e,t){let n={gcNodes:{}};for(const r of Object.keys(e.blobs)){if(!r.startsWith("__gc"))continue;const i=e.blobs[r];if(void 0===i)continue;const a=await t(i);Object(s.a)(void 0!==a,685),n=Object(w.d)(n,a)}return n}function Ee(e){const t=Object.entries(e.gcNodes);t.sort(([e],[t])=>e.localeCompare(t));const n={gcNodes:{}};for(const[e,r]of t)r.outboundRoutes.sort(),n.gcNodes[e]=r;return n}function Oe(e){return e.summaryFormatVersion?e.summaryFormatVersion:"0.1"===e.snapshotFormatVersion?1:0}function Te(e){return!!e.summaryFormatVersion&&!e.disableIsolatedChannels}const Pe=".metadata";function Ae(e){var t;return e&&null!==(t=e.gcFeature)&&void 0!==t?t:0}const Ne=[".protocol",".logTail",".serviceProtocol",".blobs","gc"],Ie=".component";function ke(e){e.summary={type:v.a.Tree,tree:{[b.channelsTreeName]:e.summary}},e.stats.treeNodeCount++}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
function De(e,t,n){const r=JSON.stringify(e);return n?{pkg:r,snapshotFormatVersion:"0.1",isRootDataStore:t}:{pkg:r,summaryFormatVersion:2,isRootDataStore:t}}function Fe(e,t,n){const r=De(e,t,n);return new pe.b(Ie,JSON.stringify(r))}class je extends o.a{constructor(e,t,n,i,a){super(),this.existing=t,this.bindState=n,this.isLocalDataStore=i,this.makeLocallyVisibleFn=a,this._disposed=!1,this.detachedRuntimeCreation=!1,this.loaded=!1,this.pending=[],this._isInMemoryRoot=!1,this._containerRuntime=e.runtime,this.id=e.id,this.storage=e.storage,this.scope=e.scope,this.writeGCDataAtRoot=e.writeGCDataAtRoot,this.disableIsolatedChannels=e.disableIsolatedChannels,this.pkg=e.pkg,Object(s.a)(!this.id.includes("/"),314),this._attachState=this.containerRuntime.attachState!==r.a.Detached&&this.existing?this.containerRuntime.attachState:r.a.Detached,this.bindToContext=()=>{Object(s.a)(this.bindState===r.b.NotBound,315),this.bindState=r.b.Binding,Object(s.a)(void 0!==this.channel,316),this.makeLocallyVisible(),this.bindState=r.b.Bound};this.summarizerNode=e.createSummarizerNodeFn(async(e,t)=>this.summarizeInternal(e,t),async e=>this.getGCDataInternal(e),async()=>this.getBaseGCDetails()),this.subLogger=h.a.create(this.logger,"FluidDataStoreContext"),this.thresholdOpsCounter=new fe.a(je.pendingOpsCountThreshold,this.subLogger)}get packagePath(){return Object(s.a)(void 0!==this.pkg,313),this.pkg}get options(){return this._containerRuntime.options}get clientId(){return this._containerRuntime.clientId}get clientDetails(){return this._containerRuntime.clientDetails}get logger(){return this._containerRuntime.logger}get deltaManager(){return this._containerRuntime.deltaManager}get connected(){return this._containerRuntime.connected}get IFluidHandleContext(){return this._containerRuntime.IFluidHandleContext}get containerRuntime(){return this._containerRuntime}get isLoaded(){return this.loaded}get baseSnapshot(){return this._baseSnapshot}get disposed(){return this._disposed}get attachState(){return this._attachState}get IFluidDataStoreRegistry(){return this.registry}async isRoot(){return this.isInMemoryRoot()||(await this.getInitialSnapshotDetails()).isRootDataStore}isInMemoryRoot(){return this._isInMemoryRoot}dispose(){this._disposed||(this._disposed=!0,this.channelDeferred&&this.channelDeferred.promise.then(e=>{e.dispose()}).catch(e=>{}))}rejectDeferredRealize(e,t){throw new l.a(e,{packageName:{value:t,tag:h.e.PackageData}})}async realize(){return Object(s.a)(!this.detachedRuntimeCreation,317),this.channelDeferred||(this.channelDeferred=new S.a,this.realizeCore(this.existing).catch(e=>{var t;const n=g.c.wrapIfUnrecognized(e,"realizeFluidDataStoreContext");n.addTelemetryProperties({fluidDataStoreId:{value:this.id,tag:"PackageData"}}),null===(t=this.channelDeferred)||void 0===t||t.reject(n),this.logger.sendErrorEvent({eventName:"RealizeError"},n)})),this.channelDeferred.promise}async factoryFromPackagePath(e){let t;Object(s.a)(this.pkg===e,318),void 0===e&&this.rejectDeferredRealize("packages is undefined");let n,r=this._containerRuntime.IFluidDataStoreRegistry;for(const i of e)r||this.rejectDeferredRealize("No registry for package",n),n=i,t=await r.get(i),t||this.rejectDeferredRealize("Registry does not contain entry for the package",i),r=t.IFluidDataStoreRegistry;const i=null==t?void 0:t.IFluidDataStoreFactory;return void 0===i&&this.rejectDeferredRealize("Can't find factory for package",n),{factory:i,registry:r}}async realizeCore(e){const t=await this.getInitialSnapshotDetails();this._baseSnapshot=t.snapshot;const n=t.pkg,{factory:r,registry:i}=await this.factoryFromPackagePath(n);Object(s.a)(void 0===this.registry,319),this.registry=i;const a=await r.instantiateDataStore(this,e);Object(s.a)(void 0!==a,320),this.bindRuntime(a)}setConnectionState(e,t){this.verifyNotClosed(),this.loaded&&(Object(s.a)(this.connected===e,321),this.channel.setConnectionState(e,t))}process(e,t,n){var r;this.verifyNotClosed();const i=e.contents,a=Object.assign(Object.assign({},e),{type:i.type,contents:i.content});if(this.summarizerNode.recordChange(a),this.loaded)return null===(r=this.channel)||void 0===r?void 0:r.process(a,t,n);Object(s.a)(!t,322),Object(s.a)(void 0!==this.pending,573),this.pending.push(a),this.thresholdOpsCounter.sendIfMultiple("StorePendingOps",this.pending.length)}processSignal(e,t){var n;this.verifyNotClosed(),this.loaded&&(null===(n=this.channel)||void 0===n||n.processSignal(e,t))}getQuorum(){return this._containerRuntime.getQuorum()}getAudience(){return this._containerRuntime.getAudience()}async summarize(e=!1,t=!0){return this.summarizerNode.summarize(e,t)}async summarizeInternal(e,t){await this.realize();const n=await this.channel.summarize(e,t);let r;this.disableIsolatedChannels||(ke(n),r=[b.channelsTreeName]);const{pkg:i}=await this.getInitialSnapshotDetails(),s=De(i,await this.isRoot(),this.disableIsolatedChannels);return Object(C.b)(n,Ie,JSON.stringify(s)),this.writeGCDataAtRoot||Object(C.b)(n,b.gcBlobKey,JSON.stringify(this.summarizerNode.getGCSummaryDetails())),this.summarizerNode.isReferenced()||(n.summary.unreferenced=!0,n.stats.unreferencedBlobSize=n.stats.totalBlobSize),Object.assign(Object.assign({},n),{id:this.id,pathPartsForChildren:r})}async getGCData(e=!1){return this.summarizerNode.getGCData(e)}async getGCDataInternal(e=!1){return await this.realize(),Object(s.a)(void 0!==this.channel,323),this.channel.getGCData(e)}updateUsedRoutes(e,t){this.summarizerNode.updateUsedRoutes(e,t),this.lastUsedState={usedRoutes:e,gcTimestamp:t},this.loaded&&this.updateChannelUsedRoutes()}addedGCOutboundReference(e,t){this._containerRuntime.addedGCOutboundReference(e,t)}updateChannelUsedRoutes(){if(Object(s.a)(this.loaded,324),Object(s.a)(void 0!==this.channel,325),void 0===this.lastUsedState)return;const e=this.lastUsedState.usedRoutes.filter(e=>"/"!==e&&""!==e);this.channel.updateUsedRoutes(e,this.lastUsedState.gcTimestamp)}async request(e){return(await this.realize()).request(e)}submitMessage(e,t,n){this.verifyNotClosed(),Object(s.a)(!!this.channel,326);const r={content:t,type:e};this._containerRuntime.submitDataStoreOp(this.id,r,n)}setChannelDirty(e){this.verifyNotClosed();const t=this.deltaManager.lastSequenceNumber;this.summarizerNode.invalidate(t);const n=this.summarizerNode.getChild(e);n&&n.invalidate(t)}submitSignal(e,t){return this.verifyNotClosed(),Object(s.a)(!!this.channel,327),this._containerRuntime.submitDataStoreSignal(this.id,e,t)}makeLocallyVisible(){Object(s.a)(void 0!==this.channel,719),this.makeLocallyVisibleFn()}bindRuntime(e){var t;if(this.channel)throw new Error("Runtime already bound");try{Object(s.a)(!this.detachedRuntimeCreation,328),Object(s.a)(void 0!==this.channelDeferred,329),Object(s.a)(void 0!==this.pkg,330);const t=this.pending;for(const n of t)e.process(n,!1,void 0);this.thresholdOpsCounter.send("ProcessPendingOps",t.length),this.pending=void 0,this.loaded=!0,this.channel=e,Object.freeze(this.pkg),this.updateChannelUsedRoutes(),this.channelDeferred.resolve(this.channel)}catch(e){null===(t=this.channelDeferred)||void 0===t||t.reject(e),this.logger.sendErrorEvent({eventName:"BindRuntimeError",fluidDataStoreId:{value:this.id,tag:"PackageData"}},e)}}async getAbsoluteUrl(e){if(this.attachState===r.a.Attached)return this._containerRuntime.getAbsoluteUrl(e)}setInMemoryRoot(){this._isInMemoryRoot=!0}reSubmit(e,t){Object(s.a)(!!this.channel,331);const n=e;this.channel.reSubmit(n.type,n.content,t)}async applyStashedOp(e){this.channel||await this.realize(),Object(s.a)(!!this.channel,332);const t=e;return this.channel.applyStashedOp(t.content)}verifyNotClosed(){if(this._disposed)throw new Error("Context is closed")}getCreateChildSummarizerNodeFn(e,t){return(n,r,i)=>this.summarizerNode.createChild(n,e,t,{throwOnFailure:!0},r,i)}async uploadBlob(e){return this.containerRuntime.uploadBlob(e)}}je.pendingOpsCountThreshold=1e3;class Re extends je{constructor(e){super(e,!0,r.b.Bound,!1,()=>{throw new Error("Already attached")}),this.initialSnapshotDetailsP=new S.b(async()=>{var e,t;let n,r=!0;if("string"==typeof this.initSnapshotValue){const t=(await this.storage.getVersions(this.initSnapshotValue,1))[0];n=null!==(e=await this.storage.getSnapshotTree(t))&&void 0!==e?e:void 0}else n=this.initSnapshotValue;const i=async e=>Object(f.a)(this.storage,e);if(n){const e=await this.summarizerNode.loadBaseSummary(n,i);n=e.baseSummary,this.pending=e.outstandingOps.concat(this.pending)}if(n&&void 0!==n.blobs[Ie]){const e=await i(n.blobs[Ie]);let a;a=Oe(e)<1?e.pkg.startsWith('["')&&e.pkg.endsWith('"]')?JSON.parse(e.pkg):[e.pkg]:JSON.parse(e.pkg),this.pkg=a,r=null===(t=e.isRootDataStore)||void 0===t||t,Te(e)&&(n=n.trees[b.channelsTreeName],Object(s.a)(void 0!==n,510))}return{pkg:this.pkg,isRootDataStore:r,snapshot:n}}),this.initSnapshotValue=e.snapshotTree,this.baseGCDetailsP=new S.b(async()=>{var t;return null!==(t=await e.getBaseGCDetails())&&void 0!==t?t:{}})}async getInitialSnapshotDetails(){return this.initialSnapshotDetailsP}async getInitialGCSummaryDetails(){return this.getBaseGCDetails()}async getBaseGCDetails(){return this.baseGCDetailsP}generateAttachMessage(){throw new Error("Cannot attach remote store")}}class Me extends je{constructor(e){super(e,void 0!==e.snapshotTree,e.snapshotTree?r.b.Bound:r.b.NotBound,!0,e.makeLocallyVisibleFn),this.snapshotTree=e.snapshotTree,!0===e.isRootDataStore&&this.setInMemoryRoot(),this.createProps=e.createProps,this.attachListeners()}attachListeners(){this.once("attaching",()=>{Object(s.a)(this.attachState===r.a.Detached,333),this._attachState=r.a.Attaching}),this.once("attached",()=>{Object(s.a)(this.attachState===r.a.Attaching,334),this._attachState=r.a.Attached})}generateAttachMessage(){Object(s.a)(void 0!==this.channel,335),Object(s.a)(void 0!==this.pkg,336);const e=this.channel.getAttachSummary();this.disableIsolatedChannels||ke(e);const t=De(this.pkg,this.isInMemoryRoot(),this.disableIsolatedChannels);Object(C.b)(e,Ie,JSON.stringify(t));const n=Object(C.g)(e.summary);return{id:this.id,snapshot:n,type:this.pkg[this.pkg.length-1]}}async getInitialSnapshotDetails(){var e;let t,n=this.snapshotTree,r=!1;return void 0!==n&&(t=await async function(e,t){const n=await Object(f.a)(e,t.blobs[Ie]),r=Oe(n);return Object(s.a)(r>0,469),n}(this.storage,n),Te(t)&&(n=n.trees[b.channelsTreeName],Object(s.a)(void 0!==n,511)),void 0===this.pkg&&(this.pkg=JSON.parse(t.pkg),(null===(e=t.isRootDataStore)||void 0===e||e)&&(r=!0,this.setInMemoryRoot()))),Object(s.a)(void 0!==this.pkg,338),{pkg:this.pkg,isRootDataStore:r,snapshot:n}}async getInitialGCSummaryDetails(){return{}}async getBaseGCDetails(){return{}}}class _e extends Me{constructor(e){super(e)}}class Be extends Me{constructor(e){super(e),this.detachedRuntimeCreation=!0}async attachRuntime(e,t){Object(s.a)(this.detachedRuntimeCreation,340),Object(s.a)(void 0===this.channelDeferred,341);const n=e.IFluidDataStoreFactory,r=await this.factoryFromPackagePath(this.pkg);Object(s.a)(r.factory===n,342),Object(s.a)(void 0===this.registry,343),this.registry=r.registry,this.detachedRuntimeCreation=!1,this.channelDeferred=new S.a,super.bindRuntime(t),await this.isRoot()&&(void 0!==t.makeVisibleAndAttachGraph?t.makeVisibleAndAttachGraph():t.bindToContext())}async getInitialSnapshotDetails(){if(this.detachedRuntimeCreation)throw new Error("Detached Fluid Data Store context can't be realized! Please attach runtime first!");return super.getInitialSnapshotDetails()}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */const Le=e=>"string"==typeof(null==e?void 0:e.internalId)&&"string"==typeof(null==e?void 0:e.alias),qe=(e,t,n,r,i)=>new Ue(e,t,n,r,i);var ze,He;!function(e){e.Aliased="Aliased",e.Aliasing="Aliasing",e.None="None"}(ze||(ze={}));class Ue{constructor(e,t,n,r,i){this.fluidDataStoreChannel=e,this.internalId=t,this.runtime=n,this.datastores=r,this.logger=i,this.aliasState=ze.None}async trySetAlias(e){switch(this.aliasState){case ze.Aliasing:return"Aliasing";case ze.Aliased:return this.alias===e?"Success":"AlreadyAliased";case ze.None:break;default:Object(c.a)(this.aliasState)}this.aliasState=ze.Aliasing;const t={internalId:this.internalId,alias:e};if(void 0!==this.fluidDataStoreChannel.makeVisibleAndAttachGraph?this.fluidDataStoreChannel.makeVisibleAndAttachGraph():this.fluidDataStoreChannel.bindToContext(),this.runtime.attachState===r.a.Detached){const e=this.datastores.processAliasMessageCore(t);return this.aliasState=ze.Aliased,e?"Success":"Conflict"}return await this.ackBasedPromise(e=>{this.runtime.submitDataStoreAliasOp(t,e)}).then(t=>(this.aliasState=ze.Aliased,t&&(this.alias=e),t)).catch(t=>(this.logger.sendErrorEvent({eventName:"AliasingException",alias:{value:e,tag:h.e.UserData},internalId:{value:this.internalId,tag:h.e.PackageData}},t),this.aliasState=ze.None,!1))?"Success":"Conflict"}async request(e){return this.fluidDataStoreChannel.request(e)}get IFluidRouter(){return this.fluidDataStoreChannel}async ackBasedPromise(e){let t;return new Promise((n,r)=>{t=()=>r(new Error("ContainerRuntime disposed while this ack-based Promise was pending")),this.runtime.disposed?t():(this.runtime.on("dispose",t),e(n,r))}).finally(()=>{this.runtime.off("dispose",t)})}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class Ve{constructor(e,t,n,i,s,a,o,c,u,l,d=new me(a)){this.baseSnapshot=e,this.runtime=t,this.submitAttachFn=n,this.getCreateChildSummarizerNodeFn=i,this.deleteChildSummarizerNodeFn=s,this.gcNodeUpdated=c,this.aliasMap=u,this.writeGCDataAtRoot=l,this.contexts=d,this.pendingAttach=new Map,this.attachOpFiredForDataStore=new Set,this.disposeOnce=new ie.a(()=>this.contexts.dispose()),this.dataStoresSinceLastGC=[],this.dispose=()=>this.disposeOnce.value,this.logger=h.a.create(a),this.containerRuntimeHandle=new B.a(this.runtime,"/",this.runtime.IFluidHandleContext);const m=new S.b(async()=>o()),p=async e=>(await m).get(e),f=new Map;if(e)for(const[t,n]of Object.entries(e.trees))f.set(t,n);let g=0;for(const[e,t]of f){let n;if(t.unreferenced&&g++,this.runtime.attachState!==r.a.Detached)n=new Re({id:e,snapshotTree:t,getBaseGCDetails:async()=>p(e),runtime:this.runtime,storage:this.runtime.storage,scope:this.runtime.scope,createSummarizerNodeFn:this.getCreateChildSummarizerNodeFn(e,{type:b.CreateSummarizerNodeSource.FromSummary}),writeGCDataAtRoot:this.writeGCDataAtRoot,disableIsolatedChannels:this.runtime.disableIsolatedChannels});else{if("object"!=typeof t)throw new Error("Snapshot should be there to load from!!");const r=t;n=new _e({id:e,pkg:void 0,runtime:this.runtime,storage:this.runtime.storage,scope:this.runtime.scope,createSummarizerNodeFn:this.getCreateChildSummarizerNodeFn(e,{type:b.CreateSummarizerNodeSource.FromSummary}),makeLocallyVisibleFn:()=>this.makeDataStoreLocallyVisible(e),snapshotTree:r,isRootDataStore:void 0,writeGCDataAtRoot:this.writeGCDataAtRoot,disableIsolatedChannels:this.runtime.disableIsolatedChannels})}this.contexts.addBoundOrRemoted(n)}this.containerLoadStats={containerLoadDataStoreCount:f.size,referencedDataStoreCount:f.size-g}}aliases(){return this.aliasMap}processAttachMessage(e,t){var n,r;const i=e.contents;if(this.dataStoresSinceLastGC.push(i.id),t)return Object(s.a)(this.pendingAttach.has(i.id),350),null===(n=this.contexts.get(i.id))||void 0===n||n.emit("attached"),void this.pendingAttach.delete(i.id);if(this.alreadyProcessed(i.id)){throw new g.b("Duplicate DataStore created with existing id",Object.assign(Object.assign({},Object(g.g)(e)),{dataStoreId:{value:i.id,tag:h.e.PackageData}}))}const a=new Map;let o;i.snapshot&&(o=Object(he.a)(i.snapshot.entries,a));const c=[i.type],u=new Re({id:i.id,snapshotTree:o,getBaseGCDetails:async()=>({}),runtime:this.runtime,storage:new de(this.runtime.storage,a),scope:this.runtime.scope,createSummarizerNodeFn:this.getCreateChildSummarizerNodeFn(i.id,{type:b.CreateSummarizerNodeSource.FromAttach,sequenceNumber:e.sequenceNumber,snapshot:null!==(r=i.snapshot)&&void 0!==r?r:{entries:[Fe(c,!0,this.runtime.disableIsolatedChannels)]}}),writeGCDataAtRoot:this.writeGCDataAtRoot,disableIsolatedChannels:this.runtime.disableIsolatedChannels,pkg:c});this.contexts.addBoundOrRemoted(u)}processAliasMessage(e,t,n){const r=e.contents;if(!Le(r))throw new g.b("malformedDataStoreAliasMessage",Object.assign({},Object(g.g)(e)));const i=t,s=this.processAliasMessageCore(r);n&&i(s)}processAliasMessageCore(e){if(this.alreadyProcessed(e.alias))return!1;const t=this.contexts.get(e.internalId);if(void 0===t)return this.logger.sendErrorEvent({eventName:"AliasFluidDataStoreNotFound",fluidDataStoreId:e.internalId}),!1;const n=new B.a(t,e.internalId,this.runtime.IFluidHandleContext);return this.runtime.addedGCOutboundReference(this.containerRuntimeHandle,n),this.aliasMap.set(e.alias,t.id),t.setInMemoryRoot(),!0}alreadyProcessed(e){return void 0!==this.aliasMap.get(e)||void 0!==this.contexts.get(e)}makeDataStoreLocallyVisible(e){const t=this.contexts.getUnbound(e);if(Object(s.a)(!!t,351),this.runtime.attachState!==r.a.Detached){t.emit("attaching");const n=t.generateAttachMessage();this.pendingAttach.set(e,n),this.submitAttachFn(n),this.attachOpFiredForDataStore.add(e)}this.contexts.bind(e)}createDetachedDataStoreCore(e,t,n=Object(D.a)()){const r=new Be({id:n,pkg:e,runtime:this.runtime,storage:this.runtime.storage,scope:this.runtime.scope,createSummarizerNodeFn:this.getCreateChildSummarizerNodeFn(n,{type:b.CreateSummarizerNodeSource.Local}),makeLocallyVisibleFn:()=>this.makeDataStoreLocallyVisible(n),snapshotTree:void 0,isRootDataStore:t,writeGCDataAtRoot:this.writeGCDataAtRoot,disableIsolatedChannels:this.runtime.disableIsolatedChannels});return this.contexts.addUnbound(r),r}_createFluidDataStoreContext(e,t,n,r){const i=new _e({id:t,pkg:e,runtime:this.runtime,storage:this.runtime.storage,scope:this.runtime.scope,createSummarizerNodeFn:this.getCreateChildSummarizerNodeFn(t,{type:b.CreateSummarizerNodeSource.Local}),makeLocallyVisibleFn:()=>this.makeDataStoreLocallyVisible(t),snapshotTree:void 0,isRootDataStore:n,writeGCDataAtRoot:this.writeGCDataAtRoot,disableIsolatedChannels:this.runtime.disableIsolatedChannels,createProps:r});return this.contexts.addUnbound(i),i}get disposed(){return this.disposeOnce.evaluated}resubmitDataStoreOp(e,t){const n=e,r=this.contexts.get(n.address);Object(s.a)(!!r,352),r.reSubmit(n.contents,t)}async applyStashedOp(e){const t=e,n=this.contexts.get(t.address);return Object(s.a)(!!n,353),n.applyStashedOp(t.contents)}async applyStashedAttachOp(e){this.pendingAttach.set(e.id,e),this.processAttachMessage({contents:e},!1)}processFluidDataStoreOp(e,t,n){const r=e.contents,i=Object.assign(Object.assign({},e),{contents:r.contents}),a=this.contexts.get(r.address);Object(s.a)(!!a,354),a.process(i,t,n),this.gcNodeUpdated("/"+r.address,e.timestamp,a.isLoaded?a.packagePath:void 0)}async getDataStore(e,t){var n;const r=null!==(n=this.aliasMap.get(e))&&void 0!==n?n:e,i=await this.contexts.getBoundOrRemoted(r,t);if(void 0===i){const t={url:e};throw Object(k.e)(Object(k.a)(t),t)}return i}processSignal(e,t,n){const r=this.contexts.get(e);if(!r)return Object(s.a)(!n,355),void this.logger.sendTelemetryEvent({eventName:"SignalFluidDataStoreNotFound",fluidDataStoreId:{value:e,tag:h.e.PackageData}});r.processSignal(t,n)}setConnectionState(e,t){for(const[n,r]of this.contexts)try{r.setConnectionState(e,t)}catch(e){this.logger.sendErrorEvent({eventName:"SetConnectionStateError",clientId:t,fluidDataStore:n},e)}}setAttachState(e){let t;t=e===r.a.Attaching?"attaching":"attached";for(const[,e]of this.contexts)this.contexts.isNotBound(e.id)||e.emit(t)}get size(){return this.contexts.size}async summarize(e,t){const n=new C.a;return await Promise.all(Array.from(this.contexts).filter(([e,t])=>(Object(s.a)(t.attachState!==r.a.Attaching,357),t.attachState===r.a.Attached)).map(async([r,i])=>{const s=await i.summarize(e,t);n.addWithStats(r,s)})),n.getSummaryTree()}createSummary(){const e=new C.a;let t;do{const n=e.summary.tree;t=this.contexts.notBoundLength(),Array.from(this.contexts).filter(([e,t])=>!(this.contexts.isNotBound(e)||n[e]||this.attachOpFiredForDataStore.has(e))).map(([t,n])=>{let r;if(n.isLoaded){const e=n.generateAttachMessage().snapshot;r=Object(C.h)(e,!0)}else Object(s.a)(!!this.baseSnapshot,358),r=Object(C.f)(this.baseSnapshot.trees[t]);e.addWithStats(t,r)})}while(t!==this.contexts.notBoundLength());return e.getSummaryTree()}async updateStateBeforeGC(){for(const e of this.dataStoresSinceLastGC){const t=this.contexts.get(e);if(Object(s.a)(void 0!==t,694),await t.isRoot()){const n=new B.a(t,e,this.runtime.IFluidHandleContext);this.runtime.addedGCOutboundReference(this.containerRuntimeHandle,n)}}this.dataStoresSinceLastGC=[]}async getGCData(e=!1){const t=new w.a;return await Promise.all(Array.from(this.contexts).filter(([e,t])=>t.attachState===r.a.Attached).map(async([n,r])=>{const i=await r.getGCData(e);t.prefixAndAddNodes(n,i.gcNodes)})),t.addNode("/",await this.getOutboundRoutes()),t.getGCData()}updateUsedRoutes(e,t){var n;const r=Object(w.h)(e);for(const[e]of r)Object(s.a)(this.contexts.has(e),359);for(const[e,i]of this.contexts)i.updateUsedRoutes(null!==(n=r.get(e))&&void 0!==n?n:[],t)}deleteUnusedRoutes(e){for(const t of e){const e=t.split("/");if(e.length>2)continue;const n=e[1];Object(s.a)(this.contexts.has(n),727),this.contexts.delete(n),this.deleteChildSummarizerNodeFn(n)}}async getOutboundRoutes(){const e=[];for(const[t,n]of this.contexts){await n.isRoot()&&e.push("/"+t)}return e}getDataStorePackagePath(e){const t=this.contexts.get(e.split("/")[1]);return(null==t?void 0:t.isLoaded)?t.packagePath:void 0}getGCNodeType(e){const t=e.split("/");if(this.contexts.has(t[1]))return 2===t.length?ye:ve}}function Ge(e,t){if(e){if(function(e){return!!e&&!e.disableIsolatedChannels}(t)){const t=e.trees[b.channelsTreeName];return Object(s.a)(!!t,360),t}{const t={};for(const[n,r]of Object.entries(e.trees))Ne.includes(n)||(t[n]=r);return Object.assign(Object.assign({},e),{trees:t})}}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */!function(e){e[e.Local=0]="Local",e[e.Broadcast=1]="Broadcast",e[e.Acked=2]="Acked",e[e.Nacked=-1]="Nacked"}(He||(He={}));class We{constructor(e,t){this.clientId=e,this.clientSequenceNumber=t,this.state=He.Local,this.defSummaryOp=new S.a,this.defSummaryAck=new S.a}static createLocal(e,t){return new We(e,t)}static createFromOp(e){const t=new We(e.clientId,e.clientSequenceNumber);return t.broadcast(e),t}get summaryOp(){return this._summaryOp}get summaryAckNack(){return this._summaryAckNack}hasBeenAcked(){return this.state===He.Acked}broadcast(e){return Object(s.a)(this.state===He.Local,373),this._summaryOp=e,this.defSummaryOp.resolve(),this.state=He.Broadcast,!0}ackNack(e){return Object(s.a)(this.state===He.Broadcast,374),this._summaryAckNack=e,this.defSummaryAck.resolve(),this.state=e.type===y.a.SummaryAck?He.Acked:He.Nacked,!0}async waitBroadcast(){return await this.defSummaryOp.promise,this._summaryOp}async waitAckNack(){return await this.defSummaryAck.promise,this._summaryAckNack}}class Ke{constructor(e,t){this.clientId=e,this.summaryCollection=t,this.localSummaries=new Map,this._disposed=!1}get disposed(){return this._disposed}watchSummary(e){let t=this.localSummaries.get(e);return t||(t=We.createLocal(this.clientId,e),this.localSummaries.set(t.clientSequenceNumber,t)),t}waitFlushed(){return this.summaryCollection.waitFlushed()}tryGetSummary(e){return this.localSummaries.get(e)}setSummary(e){this.localSummaries.set(e.clientSequenceNumber,e)}dispose(){this.summaryCollection.removeWatcher(this.clientId),this._disposed=!0}}class $e extends o.a{constructor(e,t){super(),this.deltaManager=e,this.logger=t,this.summaryWatchers=new Map,this.pendingSummaries=new Map,this.refreshWaitNextAck=new S.a,this.deltaManager.on("op",e=>this.handleOp(e))}get latestAck(){return this.lastAck}emit(e,...t){return super.emit(e,...t)}get opsSinceLastAck(){var e,t;return this.deltaManager.lastSequenceNumber-(null!==(t=null===(e=this.lastAck)||void 0===e?void 0:e.summaryAck.sequenceNumber)&&void 0!==t?t:this.deltaManager.initialSequenceNumber)}addOpListener(e){this.deltaManager.on("op",e)}removeOpListener(e){this.deltaManager.off("op",e)}createWatcher(e){const t=new Ke(e,this);return this.summaryWatchers.set(e,t),t}removeWatcher(e){this.summaryWatchers.delete(e)}setPendingAckTimerTimeoutCallback(e,t){this.maxAckWaitTime=e,this.pendingAckTimerTimeoutCallback=t}unsetPendingAckTimerTimeoutCallback(){this.maxAckWaitTime=void 0,this.pendingAckTimerTimeoutCallback=void 0}async waitFlushed(){for(;this.pendingSummaries.size>0;){const e=Array.from(this.pendingSummaries,([,e])=>e.waitAckNack());await Promise.all(e)}return this.lastAck}async waitSummaryAck(e){for(;!this.lastAck||this.lastAck.summaryOp.referenceSequenceNumber<e;)await this.refreshWaitNextAck.promise;return this.lastAck}handleOp(e){var t;switch(e.type){case y.a.Summarize:return void this.handleSummaryOp(e);case y.a.SummaryAck:return void this.handleSummaryAck(e);case y.a.SummaryNack:return void this.handleSummaryNack(e);default:{const n=e.timestamp;return void 0!==this.lastSummaryTimestamp&&void 0!==this.maxAckWaitTime&&n-this.lastSummaryTimestamp>=this.maxAckWaitTime&&(null===(t=this.pendingAckTimerTimeoutCallback)||void 0===t||t.call(this)),void this.emit("default",e)}}}handleSummaryOp(e){let t;const n=this.summaryWatchers.get(e.clientId);n&&(t=n.tryGetSummary(e.clientSequenceNumber),t&&t.broadcast(e)),t||(t=We.createFromOp(e),n&&n.setSummary(t)),this.pendingSummaries.set(e.sequenceNumber,t),this.lastSummaryTimestamp=e.timestamp,this.emit(y.a.Summarize,e)}handleSummaryAck(e){const t=e.contents.summaryProposal.summarySequenceNumber,n=this.pendingSummaries.get(t);n&&void 0!==n.summaryOp?(n.ackNack(e),this.pendingSummaries.delete(t),(!this.lastAck||t>this.lastAck.summaryAck.contents.summaryProposal.summarySequenceNumber)&&(this.lastAck={summaryOp:n.summaryOp,summaryAck:e},this.refreshWaitNextAck.resolve(),this.refreshWaitNextAck=new S.a,this.emit(y.a.SummaryAck,e))):t>=this.deltaManager.initialSequenceNumber&&this.logger.sendErrorEvent({eventName:"SummaryAckWithoutOp",sequenceNumber:e.sequenceNumber,summarySequenceNumber:t,initialSequenceNumber:this.deltaManager.initialSequenceNumber})}handleSummaryNack(e){const t=e.contents.summaryProposal.summarySequenceNumber,n=this.pendingSummaries.get(t);n&&(n.ackNack(e),this.pendingSummaries.delete(t),this.emit(y.a.SummaryNack,e))}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class Je extends o.a{constructor(e,t,n){super(),this.clientMap=new Map,this.rootNode={sequenceNumber:-1,olderClient:void 0,youngerClient:void 0},this._youngestClient=this.rootNode,this.logger=h.a.create(e,"OrderedClientCollection");const r=n.getMembers();for(const[e,t]of r)this.addClient(e,t);n.on("addMember",(e,n)=>{const r=this.addClient(e,n);this.emit("addClient",r,t.lastSequenceNumber)}),n.on("removeMember",e=>{const n=t.lastSequenceNumber,r=this.removeClient(e);void 0===r?this.logger.sendErrorEvent({eventName:"ClientNotFound",clientId:e,sequenceNumber:n}):this.emit("removeClient",r,n)})}get count(){return this.clientMap.size}get oldestClient(){return this.rootNode.youngerClient}addClient(e,t){Object(s.a)(t.sequenceNumber>-1,502);let n=this._youngestClient;for(;n.sequenceNumber>t.sequenceNumber;)Object(s.a)(void 0!==n.olderClient,503),n=n.olderClient;const r={clientId:e,sequenceNumber:t.sequenceNumber,client:Object.assign({},t.client),olderClient:n,youngerClient:n.youngerClient};return r.olderClient.youngerClient=r,void 0===r.youngerClient?this._youngestClient=r:r.youngerClient.olderClient=r,this.clientMap.set(e,r),r}removeClient(e){const t=this.clientMap.get(e);if(void 0!==t)return t.olderClient.youngerClient=t.youngerClient,void 0===t.youngerClient?this._youngestClient=t.olderClient:t.youngerClient.olderClient=t.olderClient,this.clientMap.delete(e),t}getAllClients(){const e=[];let t=this.rootNode;for(;void 0!==t.youngerClient;)e.push(t.youngerClient),t=t.youngerClient;return e}}class Qe extends o.a{constructor(e,t,n,r){let i,s;super(),this.orderedClientCollection=t,this.isEligibleFn=r,this._eligibleCount=0;for(const e of t.getAllClients())this.addClient(e,0),"number"!=typeof n&&(e.clientId===n.electedClientId&&(i=e,void 0===n.electedParentId&&"summarizer"!==e.client.details.type&&(s=e)),e.clientId===n.electedParentId&&(s=e));t.on("addClient",(e,t)=>this.addClient(e,t)),t.on("removeClient",(e,t)=>this.removeClient(e,t)),"number"==typeof n?this._electionSequenceNumber=n:((null==i?void 0:i.clientId)!==n.electedClientId?e.sendErrorEvent({eventName:"InitialElectedClientNotFound",electionSequenceNumber:n.electionSequenceNumber,expectedClientId:n.electedClientId,electedClientId:null==i?void 0:i.clientId,clientCount:t.count}):void 0===i||r(i)||(i=s=this.findFirstEligibleParent(s),e.sendErrorEvent({eventName:"InitialElectedClientIneligible",electionSequenceNumber:n.electionSequenceNumber,expectedClientId:n.electedClientId,electedClientId:null==i?void 0:i.clientId})),this._electedParent=s,this._electedClient=i,this._electionSequenceNumber=n.electionSequenceNumber)}get eligibleCount(){return this._eligibleCount}get electionSequenceNumber(){return this._electionSequenceNumber}get electedClient(){return this._electedClient}get electedParent(){return this._electedParent}tryElectingClient(e,t){let n=!1;const r="summarizer"===(null==e?void 0:e.client.details.type),i=this._electedClient;this._electedClient!==e&&(this._electionSequenceNumber=t,this._electedClient=e,n=!0),this._electedParent===e||r||(this._electedParent=e,n=!0),n&&this.emit("election",e,t,i)}tryElectingParent(e,t){this._electedParent!==e&&(this._electedParent=e,this.emit("election",this._electedClient,t,this._electedClient))}findFirstEligibleParent(e){let t=e;for(;void 0!==t&&(!this.isEligibleFn(t)||"summarizer"===t.client.details.type);)t=t.youngerClient;return t}addClient(e,t){var n;if(this.isEligibleFn(e)){this._eligibleCount++;const r="summarizer"===e.client.details.type,i="summarizer"===(null===(n=this._electedClient)||void 0===n?void 0:n.client.details.type);void 0===this._electedClient||!i&&r?this.tryElectingClient(e,t):void 0!==this._electedParent||r||this.tryElectingParent(e,t)}}removeClient(e,t){var n,r,i,s,a;if(this.isEligibleFn(e))if(this._eligibleCount--,this._electedClient===e)if(this._electedParent!==e){if("summarizer"!==this._electedClient.client.details.type)throw new g.f("Elected client should be a summarizer client 1");this.tryElectingClient(this._electedParent,t)}else{const e=null!==(r=this.findFirstEligibleParent(null===(n=this._electedParent)||void 0===n?void 0:n.youngerClient))&&void 0!==r?r:this.findFirstEligibleParent(this.orderedClientCollection.oldestClient);this.tryElectingClient(e,t)}else if(this._electedParent===e){if("summarizer"!==(null===(i=this._electedClient)||void 0===i?void 0:i.client.details.type))throw new g.f("Elected client should be a summarizer client 2");const e=null!==(a=this.findFirstEligibleParent(null===(s=this._electedParent)||void 0===s?void 0:s.youngerClient))&&void 0!==a?a:this.findFirstEligibleParent(this.orderedClientCollection.oldestClient);this.tryElectingParent(e,t)}}getAllEligibleClients(){return this.orderedClientCollection.getAllClients().filter(this.isEligibleFn)}incrementElectedClient(e){var t,n;const r=null!==(n=this.findFirstEligibleParent(null===(t=this._electedParent)||void 0===t?void 0:t.youngerClient))&&void 0!==n?n:this.findFirstEligibleParent(this.orderedClientCollection.oldestClient);void 0===this._electedClient||this._electedClient===this._electedParent?this.tryElectingClient(r,e):this.tryElectingParent(r,e)}resetElectedClient(e){const t=this.findFirstEligibleParent(this.orderedClientCollection.oldestClient);void 0===this._electedClient||this._electedClient===this._electedParent?this.tryElectingClient(t,e):this.tryElectingParent(t,e)}peekNextElectedClient(){var e,t;return null!==(t=this.findFirstEligibleParent(null===(e=this._electedParent)||void 0===e?void 0:e.youngerClient))&&void 0!==t?t:this.findFirstEligibleParent(this.orderedClientCollection.oldestClient)}serialize(){var e,t;return{electionSequenceNumber:this.electionSequenceNumber,electedClientId:null===(e=this.electedClient)||void 0===e?void 0:e.clientId,electedParentId:null===(t=this.electedParent)||void 0===t?void 0:t.clientId}}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class Ye{constructor(e,t,n){this.delayWindowMs=e,this.maxDelayMs=t,this.delayFn=n,this.startTimes=[]}get numAttempts(){return this.startTimes.length}getAttempts(){return[...this.startTimes]}get latestAttemptTime(){return this.startTimes.length>0?this.startTimes[this.startTimes.length-1]:void 0}getDelay(){const e=Date.now(),t=this.latestAttemptTime;if(void 0!==t){const n=t-e;n>0&&(this.startTimes=this.startTimes.map(e=>e-n))}this.startTimes=this.startTimes.filter(t=>e-t<this.delayWindowMs);const n=Math.min(this.delayFn(this.startTimes.length),this.maxDelayMs);return this.startTimes.push(e),this.startTimes=this.startTimes.map(e=>e+n),n===this.maxDelayMs&&this.startTimes.shift(),n}}const Xe=({multiplier:e=2,coefficient:t=1,offset:n=0,initialDelay:r}={})=>i=>Math.max(0,i<=0&&void 0!==r?r:t*Math.pow(e,i)+n);new Promise(()=>{});class Ze{constructor(e){this.runtime=e,this._cancelled=!1,this.stopDeferred=new S.a}get cancelled(){return this._cancelled||Object(s.a)(this.runtime.deltaManager.active,605),this._cancelled}get waitCancelled(){return this.stopDeferred.promise}static async create(e){const t=new Ze(e);return await t.waitStart(),t}async waitStart(){if(this.runtime.disposed)this.stop("summarizerClientDisconnected");else{if(this.runtime.once("dispose",()=>this.stop("summarizerClientDisconnected")),!this.runtime.connected){const e=new Promise(e=>this.runtime.once("connected",e));await Promise.race([e,this.waitCancelled])}this.runtime.once("disconnected",()=>this.stop("summarizerClientDisconnected"))}}stop(e){this._cancelled||(this._cancelled=!0,this.stopDeferred.resolve(e))}}
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class et{constructor(e,t,n,r,i=(()=>a.a.now())){this.batchEventEmitter=e,this.trackedBatchCount=0,this.logger=h.a.create(t,"Batching"),this.batchEventEmitter.on("batchBegin",e=>{this.startBatchSequenceNumber=e.sequenceNumber,this.batchProcessingStartTimeStamp=i(),this.trackedBatchCount++}),this.batchEventEmitter.on("batchEnd",(e,t)=>{Object(s.a)(void 0!==this.startBatchSequenceNumber&&void 0!==this.batchProcessingStartTimeStamp,698);const a=t.sequenceNumber-this.startBatchSequenceNumber+1;a>=n&&this.logger.sendErrorEvent({eventName:"LengthTooBig",length:a,threshold:n,batchEndSequenceNumber:t.sequenceNumber,duration:i()-this.batchProcessingStartTimeStamp,batchError:void 0!==e}),this.trackedBatchCount%r==0&&this.logger.sendPerformanceEvent({eventName:"Length",length:a,samplingRate:r,batchEndSequenceNumber:t.sequenceNumber,duration:i()-this.batchProcessingStartTimeStamp}),this.startBatchSequenceNumber=void 0,this.batchProcessingStartTimeStamp=void 0})}}var tt,nt=n(593);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */class rt{constructor(e,t){this.messageSize=new Map,this._nonSystemOpCount=0,this._opsSizeAccumulator=0,t||(e.inbound.on("push",e=>{const t="string"==typeof e.contents?e.contents:JSON.stringify(e.contents),n=rt.messageHasData(e)?e.data:"";this.messageSize[rt.messageId(e)]=t.length+n.length}),e.on("op",e=>{var t;this._nonSystemOpCount+=Object(nt.a)(e)?1:0;const n=rt.messageId(e);this._opsSizeAccumulator+=null!==(t=this.messageSize[n])&&void 0!==t?t:0,this.messageSize.delete(n)}))}get nonSystemOpCount(){return this._nonSystemOpCount}get opsSizeAccumulator(){return this._opsSizeAccumulator}static messageId(e){return e.sequenceNumber}static messageHasData(e){return void 0!==e.data}reset(){this._nonSystemOpCount=0,this._opsSizeAccumulator=0}}!function(e){e.FluidDataStoreOp="component",e.Attach="attach",e.ChunkedOp="chunkedOp",e.BlobAttach="blobAttach",e.Rejoin="rejoin",e.Alias="alias"}(tt||(tt={}));const it={idleTime:15e3,maxTime:6e4,maxOps:1e3,maxAckWaitTime:6e5};var st;!function(e){e.wait="wait",e.externalRequest="externalRequest",e.viaHandle="viaHandle"}(st||(st={}));const at=b.FlushMode.TurnBased;var ot;function ct(e){return!!Object.values(ot).includes(e.type)}!function(e){e.FluidDataStoreOp="component",e.Attach="attach",e.ChunkedOp="chunkedOp",e.BlobAttach="blobAttach",e.Rejoin="rejoin",e.Alias="alias",e.Operation="op"}(ot||(ot={}));class ut{constructor(e,t){this.deltaManager=e,this.logger=t,this.localPaused=!1,this.timePaused=0,this.batchCount=0,this.deltaManager.on("prepareSend",e=>{if(0===e.length)return;const t=e[0].metadata;if(!(null==t?void 0:t.batch))return;if(1===e.length)return void delete t.batch;const n=e[e.length-1];n.metadata=Object.assign(Object.assign({},n.metadata),{batch:!1})}),this.deltaManager.inbound.on("push",e=>{this.trackPending(e)}),Object(s.a)(!this.localPaused,659);const n=this.deltaManager.inbound.toArray();for(const e of n)this.trackPending(e);this.deltaManager.on("op",e=>this.afterOpProcessing(e.sequenceNumber))}afterOpProcessing(e){Object(s.a)(!this.localPaused,660),0!==this.deltaManager.inbound.length?void 0!==this.pauseSequenceNumber&&(Object(s.a)(e<this.pauseSequenceNumber,662),e+1===this.pauseSequenceNumber&&this.pauseQueue()):Object(s.a)(void 0===this.pauseSequenceNumber,661)}pauseQueue(){Object(s.a)(!this.localPaused,663),this.localPaused=!0,this.timePaused=a.a.now(),this.deltaManager.inbound.pause()}resumeQueue(e,t){const n=t.sequenceNumber,r=a.a.now()-this.timePaused;this.batchCount++,this.batchCount%1e3==1&&this.logger.sendTelemetryEvent({eventName:"BatchStats",sequenceNumber:n,length:n-e+1,msnDistance:n-t.minimumSequenceNumber,duration:r,batchCount:this.batchCount,interrupted:this.localPaused}),this.localPaused&&(this.localPaused=!1,r>5e3&&this.logger.sendErrorEvent({eventName:"MaxBatchWaitTimeExceeded",duration:r,sequenceNumber:n,length:n-e}),this.deltaManager.inbound.resume())}trackPending(e){Object(s.a)(0!==this.deltaManager.inbound.length,664),Object(s.a)(void 0===this.currentBatchClientId==(void 0===this.pauseSequenceNumber),665);const t=e.metadata,n=null==t?void 0:t.batch;if(!ct(e))return Object(s.a)(void 0===this.currentBatchClientId,666),Object(s.a)(void 0===n,667),void Object(s.a)(!this.localPaused,668);if(void 0!==this.currentBatchClientId||void 0!==n){if((void 0!==this.currentBatchClientId||!1===n)&&this.currentBatchClientId!==e.clientId)throw new g.b("OpBatchIncomplete",Object.assign({batchClientId:this.currentBatchClientId},Object(g.g)(e)));n?(Object(s.a)(void 0===this.currentBatchClientId,670),Object(s.a)(!this.localPaused,671),this.pauseSequenceNumber=e.sequenceNumber,this.currentBatchClientId=e.clientId,1===this.deltaManager.inbound.length&&this.pauseQueue()):!1===n?(Object(s.a)(void 0!==this.pauseSequenceNumber,672),this.resumeQueue(this.pauseSequenceNumber,e),this.pauseSequenceNumber=void 0,this.currentBatchClientId=void 0):Object(s.a)(void 0!==this.currentBatchClientId,673)}else Object(s.a)(!this.localPaused,669)}}class ht{constructor(e,t,n){this.deltaManager=e,this.emitter=t,this.logger=n,this.hitError=!1,this.deltaScheduler=new ne(this.deltaManager,h.a.create(this.logger,"DeltaScheduler")),new ut(e,n)}beforeOpProcessing(e){var t;if(this.batchClientId!==e.clientId){Object(s.a)(void 0===this.batchClientId,674),this.emitter.emit("batchBegin",e),this.deltaScheduler.batchBegin(e);const n=null===(t=null==e?void 0:e.metadata)||void 0===t?void 0:t.batch;this.batchClientId=n?e.clientId:void 0}}afterOpProcessing(e,t){var n;if(Object(s.a)(!this.hitError,675),e)return this.hitError=!0,this.batchClientId=void 0,this.emitter.emit("batchEnd",e,t),void this.deltaScheduler.batchEnd(t);const r=null===(n=null==t?void 0:t.metadata)||void 0===n?void 0:n.batch;return void 0===this.batchClientId||!1===r?(this.batchClientId=void 0,this.emitter.emit("batchEnd",void 0,t),void this.deltaScheduler.batchEnd(t)):void 0}}class lt extends o.a{constructor(e,t,n,i,a,o,c,u,m,p,v,b){var S,w,C,x,O,T,P,A,I,k,D;super(),this.context=e,this.registry=t,this.runtimeOptions=c,this.containerScope=u,this.logger=m,this.requestHandler=b,this.defaultMaxConsecutiveReconnects=15,this._orderSequentiallyCalls=0,this.needsFlush=!1,this.flushTrigger=!1,this.paused=!1,this.consecutiveReconnects=0,this._disposed=!1,this.emitDirtyDocumentEvent=!0,this.onOp=e=>{Object(s.a)(!this.paused,296),this.paused=!0,this.context.deltaManager.inbound.pause();this.pendingStateManager.applyStashedOpsAt(e.sequenceNumber).then(()=>{this.paused=!1,this.context.deltaManager.inbound.resume()},e=>{this.closeFn(Object(l.h)(e))})},this.summarizeOnDemand=(...e)=>{if("summarizer"===this.clientDetails.type)return this.summarizer.summarizeOnDemand(...e);if(void 0!==this.summaryManager)return this.summaryManager.summarizeOnDemand(...e);throw new g.f("Can't summarize, disableSummaries: "+this.summariesDisabled)},this.enqueueSummarize=(...e)=>{if("summarizer"===this.clientDetails.type)return this.summarizer.enqueueSummarize(...e);if(void 0!==this.summaryManager)return this.summaryManager.enqueueSummarize(...e);throw new g.f("Can't summarize, disableSummaries: "+this.summariesDisabled)},this.messageAtLastSummary=null==n?void 0:n.message,this.disableIsolatedChannels=null!==(S=this.runtimeOptions.summaryOptions.disableIsolatedChannels)&&void 0!==S&&S,this._connected=this.context.connected,this.chunkMap=new Map(a),this.handleContext=new j("",this),this.mc=Object(d.c)(h.a.create(this.logger,"ContainerRuntime")),this._aliasingEnabled=null!==(w=this.mc.config.getBoolean("Fluid.ContainerRuntime.UseDataStoreAliasing"))&&void 0!==w&&w||null!==(C=c.useDataStoreAliasing)&&void 0!==C&&C,this._maxOpSizeInBytes=null!==(x=this.mc.config.getNumber("Fluid.ContainerRuntime.MaxOpSizeInBytes"))&&void 0!==x?x:768e3,this.maxConsecutiveReconnects=null!==(O=this.mc.config.getNumber("Fluid.ContainerRuntime.MaxConsecutiveReconnects"))&&void 0!==O?O:this.defaultMaxConsecutiveReconnects,this._flushMode=c.flushMode,this.garbageCollector=Ce.create(this,this.runtimeOptions.gcOptions,e=>this.getGCNodePackagePath(e),()=>{var e;return null===(e=this.messageAtLastSummary)||void 0===e?void 0:e.timestamp},e.baseSnapshot,async e=>Object(f.a)(this.storage,e),this.mc.logger,p,n,"summarizer"===this.context.clientDetails.type);const F=this.deltaManager.initialSequenceNumber;this.summarizerNode=((e,t,n,r,i={},s,a)=>new N(e,t,i,n,void 0===r?void 0:E.createForRoot(r),void 0,void 0,s,a))(h.a.create(this.logger,"SummarizerNode"),async(e,t)=>this.summarizeInternal(e,t),F,e.baseSnapshot?F:void 0,{canReuseHandle:!1,throwOnFailure:!0,gcDisabled:!this.garbageCollector.shouldRunGC}),this.context.baseSnapshot&&this.summarizerNode.loadBaseSummaryWithoutDifferential(this.context.baseSnapshot),this.dataStores=new Ve(Ge(e.baseSnapshot,n),this,e=>this.submit(tt.Attach,e),(e,t)=>(n,r,i)=>this.summarizerNode.createChild(n,e,t,void 0,r,i),e=>this.summarizerNode.deleteChild(e),this.mc.logger,async()=>this.garbageCollector.getBaseGCDetails(),(e,t,n)=>this.garbageCollector.nodeUpdated(e,"Changed",t,n),new Map(o),this.garbageCollector.writeDataAtRoot),this.blobManager=new ue(this.handleContext,v,()=>this.storage,e=>this.submit(tt.BlobAttach,void 0,void 0,{blobId:e}),e=>this.garbageCollector.nodeUpdated(e,"Loaded"),this,this.logger),this.scheduleManager=new ht(e.deltaManager,this,h.a.create(this.logger,"ScheduleManager")),this.deltaSender=this.deltaManager,this.pendingStateManager=new oe(this,async(e,t)=>this.applyStashedOp(e,t),this._flushMode,e.pendingLocalState),this.context.quorum.on("removeMember",e=>{this.clearPartialChunks(e)}),this.summaryCollection=new $e(this.deltaManager,this.logger);const{attachState:R,pendingLocalState:M}=this.context;if(this.dirtyContainer=R!==r.a.Attached||(null===(T=M)||void 0===T?void 0:T.pendingStates.length)>0,this.context.updateDirtyContainerState(this.dirtyContainer),!1===this.runtimeOptions.summaryOptions.generateSummaries&&(this.runtimeOptions.summaryOptions.disableSummaries=!0),this.summariesDisabled)this.mc.logger.sendTelemetryEvent({eventName:"SummariesDisabled"});else{const e=h.a.create(this.logger,"OrderedClientElection"),t=new Je(e,this.context.deltaManager,this.context.quorum),n=new Qe(e,t,null!=i?i:this.context.deltaManager.lastSequenceNumber,_.isClientEligible),r=null!==(P=this.mc.config.getBoolean("Fluid.ContainerRuntime.summarizerClientElection"))&&void 0!==P?P:!0===(null===(A=this.runtimeOptions.summaryOptions)||void 0===A?void 0:A.summarizerClientElection),s=null!==(I=this.runtimeOptions.summaryOptions.maxOpsSinceLastSummary)&&void 0!==I?I:7e3;if(this.summarizerClientElection=new _(e,this.summaryCollection,n,s,r),"summarizer"===this.context.clientDetails.type)this._summarizer=new Z("/_summarizer",this,()=>this.summaryConfiguration,this,this.handleContext,this.summaryCollection,async e=>Ze.create(e));else if(_.clientDetailsPermitElection(this.context.clientDetails)){const e=()=>{this.summaryCollection.opsSinceLastAck>s&&(this.logger.sendErrorEvent({eventName:"SummaryStatus:Behind"}),this.summaryCollection.once(y.a.SummaryAck,()=>{this.logger.sendTelemetryEvent({eventName:"SummaryStatus:CaughtUp"}),this.summaryCollection.on("default",e)}),this.summaryCollection.off("default",e))};this.summaryCollection.on("default",e),this.summaryManager=new te(this.summarizerClientElection,this,this.summaryCollection,this.logger,this.formRequestSummarizerFn(this.context.loader),new Ye(6e4,3e4,Xe({coefficient:20,initialDelay:0})),{initialDelayMs:this.runtimeOptions.summaryOptions.initialSummarizerDelayMs},this.runtimeOptions.summaryOptions.summarizerOptions),this.summaryManager.start()}}let B;this.deltaManager.on("readonly",e=>{Object(s.a)(e===this.deltaManager.readOnlyInfo.readonly,292),Object(s.a)(!e||!this.connected,293),this.replayPendingStates()}),void 0!==e.pendingLocalState&&this.deltaManager.on("op",this.onOp),m.sendTelemetryEvent(Object.assign({eventName:"DeviceSpec"},function(){try{if("object"==typeof navigator&&null!==navigator)return{deviceMemory:navigator.deviceMemory,hardwareConcurrency:navigator.hardwareConcurrency}}catch(e){}return{}}())),p?(this.createContainerMetadata={createContainerRuntimeVersion:null==n?void 0:n.createContainerRuntimeVersion,createContainerTimestamp:null==n?void 0:n.createContainerTimestamp},B=null!==(D=null!==(k=null==n?void 0:n.summaryNumber)&&void 0!==k?k:null==n?void 0:n.summaryCount)&&void 0!==D?D:0):(this.createContainerMetadata={createContainerRuntimeVersion:"0.59.4002",createContainerTimestamp:Date.now()},B=0),this.nextSummaryNumber=B+1,this.logger.sendTelemetryEvent(Object.assign(Object.assign(Object.assign({eventName:"ContainerLoadStats"},this.createContainerMetadata),this.dataStores.containerLoadStats),{summaryNumber:B,summaryFormatVersion:null==n?void 0:n.summaryFormatVersion,disableIsolatedChannels:null==n?void 0:n.disableIsolatedChannels,gcVersion:null==n?void 0:n.gcFeature})),function(e,t,n){new re(e,t,n)}(this.context.clientId,this.deltaManager,this.logger),((e,t,n=1e3,r=1e3)=>{new et(e,t,n,r)})(this,this.logger),this.opTracker=new rt(this.deltaManager,!0===this.mc.config.getBoolean("Fluid.ContainerRuntime.DisableOpTracking"))}get IContainerRuntime(){return this}get IFluidRouter(){return this}static async load(e,t,n,r={},i=e.scope,a){var o,c,u;const l=e,d=null!==(o=l.taggedLogger)&&void 0!==o?o:new h.d(l.logger),m=h.a.create(d,void 0,{all:{runtimeVersion:"0.59.4002"}}),{summaryOptions:p={},gcOptions:y={},loadSequenceNumberVerification:v="close",useDataStoreAliasing:b=!1,flushMode:S=at}=r,w=e.storage,C=new R.a(t),x=async t=>{var n;const r=null===(n=e.baseSnapshot)||void 0===n?void 0:n.blobs[t];if(e.baseSnapshot&&r)return Object(s.a)(void 0!==w,501),Object(f.a)(w,r)},[E,O,T,P]=await Promise.all([x(".chunks"),x(Pe),x(".electedSummarizer"),x(".aliases")]),A=!0===a||!0===e.existing,N=await ue.load(null===(c=e.baseSnapshot)||void 0===c?void 0:c.trees[".blobs"],async e=>(Object(s.a)(void 0!==w,598),Object(f.a)(w,e))),I=null===(u=null==O?void 0:O.message)||void 0===u?void 0:u.sequenceNumber;if(void 0!==I){const t=e.deltaManager.initialSequenceNumber;if("bypass"!==v&&I!==t){const n=new g.b("Summary metadata mismatch",{runtimeSequenceNumber:I,protocolSequenceNumber:t});"log"===v?m.sendErrorEvent({eventName:"SequenceNumberMismatch"},n):e.closeFn(n)}}return new lt(e,C,O,T,null!=E?E:[],null!=P?P:[],{summaryOptions:p,gcOptions:y,loadSequenceNumberVerification:v,useDataStoreAliasing:b,flushMode:S},i,m,A,N,n)}get options(){return this.context.options}get clientId(){return this.context.clientId}get clientDetails(){return this.context.clientDetails}get deltaManager(){return this.context.deltaManager}get storage(){return this.context.storage}get reSubmitFn(){return this.reSubmit}get closeFn(){return this.context.closeFn}get flushMode(){return this._flushMode}get scope(){return this.containerScope}get IFluidDataStoreRegistry(){return this.registry}get attachState(){return this.context.attachState}get IFluidHandleContext(){return this.handleContext}get connected(){return this._connected}get summarizerClientId(){var e;return null===(e=this.summarizerClientElection)||void 0===e?void 0:e.electedClientId}get summaryConfiguration(){var e;return Object.assign(Object.assign({},it),null===(e=this.runtimeOptions.summaryOptions)||void 0===e?void 0:e.summaryConfigOverrides)}get disposed(){return this._disposed}get summarizer(){return Object(s.a)(void 0!==this._summarizer,599),this._summarizer}get summariesDisabled(){var e;return!0===this.runtimeOptions.summaryOptions.disableSummaries||!0===(null===(e=this.runtimeOptions.summaryOptions.summaryConfigOverrides)||void 0===e?void 0:e.disableSummaries)}dispose(e){var t;this._disposed||(this._disposed=!0,this.logger.sendTelemetryEvent({eventName:"ContainerRuntimeDisposed",isDirty:this.isDirty,lastSequenceNumber:this.deltaManager.lastSequenceNumber,attachState:this.attachState},e),void 0!==this.summaryManager&&this.summaryManager.dispose(),this.garbageCollector.dispose(),null===(t=this._summarizer)||void 0===t||t.dispose(),this.dataStores.dispose(),this.pendingStateManager.dispose(),this.emit("dispose"),this.removeAllListeners())}get IFluidTokenProvider(){var e;if(null===(e=this.options)||void 0===e?void 0:e.intelligence)return{intelligence:this.options.intelligence}}async request(e){try{const t=I.a.create(e);return"_summarizer"===t.pathParts[0]&&1===t.pathParts.length?void 0!==this._summarizer?{status:200,mimeType:"fluid/object",value:this.summarizer}:Object(k.a)(e):void 0!==this.requestHandler?this.requestHandler(t,this):Object(k.a)(e)}catch(e){return Object(k.c)(e)}}async resolveHandle(e){try{const t=I.a.create(e),n=t.pathParts[0];if("_channels"===n)return this.resolveHandle(t.createSubRequest(1));if(n===ue.basePath&&t.isLeaf(2)){const n=await this.blobManager.getBlob(t.pathParts[1]);return n?{status:200,mimeType:"fluid/object",value:n.get()}:Object(k.a)(e)}if(t.pathParts.length>0){const r=await this.getDataStoreFromRequest(n,e),i=t.createSubRequest(1);return Object(s.a)(i.url.startsWith("/"),294),r.IFluidRouter.request(i)}return Object(k.a)(e)}catch(e){return Object(k.c)(e)}}async getDataStoreFromRequest(e,t){var n,r,i;const s="boolean"!=typeof(null===(n=t.headers)||void 0===n?void 0:n[st.wait])||(null===(r=t.headers)||void 0===r?void 0:r[st.wait]),a=await this.dataStores.getDataStore(e,s);if((null===(i=t.headers)||void 0===i?void 0:i[st.externalRequest])&&this.garbageCollector.shouldRunGC){const e=(await a.getBaseGCDetails()).usedRoutes;if(void 0!==e&&!e.includes("")&&!e.includes("/"))throw Object(k.e)(Object(k.a)(t),t)}const o=await a.realize(),c=Object(w.f)(t.url.split("?")[0]);return this.garbageCollector.nodeUpdated("/"+c,"Loaded",void 0,a.packagePath,null==t?void 0:t.headers),o}addMetadataToSummary(e){var t;const n=Object.assign(Object.assign(Object.assign(Object.assign({},this.createContainerMetadata),{summaryCount:this.nextSummaryNumber,summaryNumber:this.nextSummaryNumber++,summaryFormatVersion:1,disableIsolatedChannels:this.disableIsolatedChannels||void 0}),this.garbageCollector.getMetadata()),{message:null!==(r=this.deltaManager.lastMessage,t=void 0===r?void 0:{clientId:r.clientId,clientSequenceNumber:r.clientSequenceNumber,minimumSequenceNumber:r.minimumSequenceNumber,referenceSequenceNumber:r.referenceSequenceNumber,sequenceNumber:r.sequenceNumber,timestamp:r.timestamp,type:r.type})&&void 0!==t?t:this.messageAtLastSummary});var r;Object(C.b)(e,Pe,JSON.stringify(n))}addContainerStateToSummary(e,t,n){var r;if(this.addMetadataToSummary(e),this.chunkMap.size>0){const t=JSON.stringify([...this.chunkMap]);Object(C.b)(e,".chunks",t)}const i=this.dataStores.aliases();if(i.size>0&&Object(C.b)(e,".aliases",JSON.stringify([...i])),this.summarizerClientElection){const t=JSON.stringify(null===(r=this.summarizerClientElection)||void 0===r?void 0:r.serialize());Object(C.b)(e,".electedSummarizer",t)}const s=this.blobManager.summarize();if(Object.keys(s.summary.tree).length>0&&Object(C.d)(e,".blobs",s),this.garbageCollector.writeDataAtRoot){const r=this.garbageCollector.summarize(t,n);void 0!==r&&Object(C.c)(e,"gc",r)}}shouldContinueReconnecting(){return this.maxConsecutiveReconnects<=0||(this.pendingStateManager.hasPendingMessages()?(this.consecutiveReconnects++,this.consecutiveReconnects===Math.floor(this.maxConsecutiveReconnects/2)&&this.mc.logger.sendTelemetryEvent({eventName:"ReconnectsWithNoProgress",attempts:this.consecutiveReconnects}),this.consecutiveReconnects<this.maxConsecutiveReconnects):(this.resetReconnectCount(),!0))}resetReconnectCount(){this.consecutiveReconnects=0}replayPendingStates(){if(!this.canSendOps())return;const e=this.dirtyContainer;let t;this.dirtyContainer=!1,Object(s.a)(this.emitDirtyDocumentEvent,295),this.emitDirtyDocumentEvent=!1;try{this.pendingStateManager.replayPendingStates()}finally{t=this.dirtyContainer,this.dirtyContainer=e,this.emitDirtyDocumentEvent=!0}this.updateDocumentDirtyState(t)}async applyStashedOp(e,t){switch(e){case tt.FluidDataStoreOp:return this.dataStores.applyStashedOp(t);case tt.Attach:return this.dataStores.applyStashedAttachOp(t);case tt.Alias:case tt.BlobAttach:return;case tt.ChunkedOp:throw new Error("chunkedOp not expected here");case tt.Rejoin:throw new Error("rejoin not expected here");default:Object(c.a)(e,"Unknown ContainerMessageType: "+e)}}setConnectionState(e,t){this.verifyNotClosed();const n=this._connected!==e;if(this._connected=e,n){if(this.deltaManager.off("op",this.onOp),this.context.pendingLocalState=void 0,!this.shouldContinueReconnecting())return void this.closeFn(new g.d("Runtime detected too many reconnects with no progress syncing local ops",void 0,{attempts:this.consecutiveReconnects}));this.replayPendingStates()}this.dataStores.setConnectionState(e,t),Object(m.c)(this.mc.logger,this,e,t)}process(e,t){var n;if(this.verifyNotClosed(),!ct(e))return;let r=Object.assign({},e);this.scheduleManager.beforeOpProcessing(r);try{r=function(e){if(e.type===y.a.Operation){if(void 0!==e.contents.address&&void 0===e.contents.type)e.type=tt.FluidDataStoreOp;else{const t=e.contents;Object(s.a)(void 0!==t.type,289),e.type=t.type,e.contents=t.contents}Object(s.a)(ct(e),290)}return e}(r),r=this.processRemoteChunkedMessage(r);const{localAck:e,localOpMetadata:i}=this.pendingStateManager.processMessage(r,t);switch(this.pendingStateManager.hasPendingMessages()||this.updateDocumentDirtyState(!1),r.type){case tt.Attach:this.dataStores.processAttachMessage(r,t||e);break;case tt.Alias:this.processAliasMessage(r,i,t);break;case tt.FluidDataStoreOp:this.dataStores.processFluidDataStoreOp(r,t||e,i);break;case tt.BlobAttach:Object(s.a)(null===(n=null==r?void 0:r.metadata)||void 0===n?void 0:n.blobId,298),this.blobManager.processBlobAttachOp(r.metadata.blobId,t)}this.emit("op",r),this.scheduleManager.afterOpProcessing(void 0,r),t&&this.resetReconnectCount()}catch(e){throw this.scheduleManager.afterOpProcessing(e,r),e}}processAliasMessage(e,t,n){this.dataStores.processAliasMessage(e,t,n)}processSignal(e,t){const n=e.content,r={clientId:e.clientId,content:n.contents.content,type:n.contents.type};void 0!==n.address?this.dataStores.processSignal(n.address,r,t):this.emit("signal",r,t)}async getRootDataStore(e,t=!0){const n=await this.dataStores.getDataStore(e,t);return Object(s.a)(await n.isRoot(),299),n.realize()}setFlushMode(e){e!==this._flushMode&&(this.mc.logger.sendTelemetryEvent({eventName:"FlushMode Updated",old:this._flushMode,new:e}),e===b.FlushMode.Immediate&&this.flush(),this._flushMode=e,this.pendingStateManager.onFlushModeUpdated(e))}flush(){if(Object(s.a)(0===this._orderSequentiallyCalls,588),this.deltaSender&&(this.pendingStateManager.onFlush(),this.needsFlush&&(this.needsFlush=!1,this.canSendOps())))return this.deltaSender.flush()}orderSequentially(e){if(this.flushMode===b.FlushMode.TurnBased)return void this.trackOrderSequentiallyCalls(e);const t=this.flushMode;this.setFlushMode(b.FlushMode.TurnBased),this.trackOrderSequentiallyCalls(e),this.flush(),this.setFlushMode(t)}trackOrderSequentiallyCalls(e){try{this._orderSequentiallyCalls++,e()}catch(e){throw this.closeFn(new g.d("orderSequentially callback exception",e)),e}finally{this._orderSequentiallyCalls--}}async createDataStore(e){const t=Object(D.a)();return qe(await this._createDataStore(e,!1,t),t,this,this.dataStores,this.mc.logger)}async createRootDataStoreLegacy(e,t){const n=await this._createDataStore(e,!0,t);return void 0!==n.makeVisibleAndAttachGraph?n.makeVisibleAndAttachGraph():n.bindToContext(),n}async createRootDataStore(e,t){return!0===this._aliasingEnabled?this.createAndAliasDataStore(e,t):this.createRootDataStoreLegacy(e,t)}async createAndAliasDataStore(e,t,n){const r=Object(D.a)(),i=await this._createDataStore(e,!1,r,n),s=qe(i,r,this,this.dataStores,this.mc.logger),a=await s.trySetAlias(t);if("Success"!==a)throw new g.d("dataStoreAliasFailure",void 0,{alias:{value:t,tag:h.e.UserData},internalId:{value:r,tag:h.e.PackageData},aliasResult:a});return s}createDetachedRootDataStore(e,t){return this.dataStores.createDetachedDataStoreCore(e,!0,t)}createDetachedDataStore(e){return this.dataStores.createDetachedDataStoreCore(e,!1)}async _createDataStoreWithPropsLegacy(e,t,n=Object(D.a)(),r=!1){const i=await this.dataStores._createFluidDataStoreContext(Array.isArray(e)?e:[e],n,r,t).realize();return r&&(void 0!==i.makeVisibleAndAttachGraph?i.makeVisibleAndAttachGraph():i.bindToContext(),this.logger.sendTelemetryEvent({eventName:"Root datastore with props",hasProps:void 0!==t})),qe(i,n,this,this.dataStores,this.mc.logger)}async _createDataStoreWithProps(e,t,n=Object(D.a)(),r=!1){return!0===this._aliasingEnabled&&r?this.createAndAliasDataStore(e,n,t):this._createDataStoreWithPropsLegacy(e,t,n,r)}async _createDataStore(e,t,n=Object(D.a)(),r){return this.dataStores._createFluidDataStoreContext(Array.isArray(e)?e:[e],n,t,r).realize()}canSendOps(){return this.connected&&!this.deltaManager.readOnlyInfo.readonly}getQuorum(){return this.context.quorum}getAudience(){return this.context.audience}get isDirty(){return this.dirtyContainer}isContainerMessageDirtyable(e,t){if(e===tt.Attach){if("_scheduler"===t.id)return!1}else if(e===tt.FluidDataStoreOp){if("_scheduler"===t.address)return!1}return!0}submitSignal(e,t){this.verifyNotClosed();const n={address:void 0,contents:{type:e,content:t}};return this.context.submitSignalFn(n)}submitDataStoreSignal(e,t,n){const r={address:e,contents:{type:t,content:n}};return this.context.submitSignalFn(r)}setAttachState(e){e===r.a.Attaching?Object(s.a)(this.attachState===r.a.Attaching,301):(Object(s.a)(this.attachState===r.a.Attached,302),this.emit("attached")),e!==r.a.Attached||this.pendingStateManager.hasPendingMessages()||this.updateDocumentDirtyState(!1),this.dataStores.setAttachState(e)}createSummary(e){e&&this.blobManager.setRedirectTable(e);const t=this.dataStores.createSummary();return this.disableIsolatedChannels||ke(t),this.addContainerStateToSummary(t,!0,!1),t.summary}async getAbsoluteUrl(e){if(void 0===this.context.getAbsoluteUrl)throw new Error("Driver does not implement getAbsoluteUrl");if(this.attachState===r.a.Attached)return this.context.getAbsoluteUrl(e)}async summarizeInternal(e,t){const n=await this.dataStores.summarize(e,t);let r;return this.disableIsolatedChannels||(ke(n),r=[b.channelsTreeName]),this.addContainerStateToSummary(n,e,t),Object.assign(Object.assign({},n),{id:"",pathPartsForChildren:r})}async summarize(e){this.verifyNotClosed();const{fullTree:t=!1,trackState:n=!0,summaryLogger:r=this.logger,runGC:i=this.garbageCollector.shouldRunGC,runSweep:a,fullGC:o}=e;let c;i&&(c=await this.collectGarbage({logger:r,runSweep:a,fullGC:o}));const{stats:u,summary:h}=await this.summarizerNode.summarize(t,n);return Object(s.a)(h.type===v.a.Tree,303),{stats:u,summary:h,gcStats:c}}async updateStateBeforeGC(){return this.dataStores.updateStateBeforeGC()}async getGCData(e){const t=new w.a,n=await this.dataStores.getGCData(e);t.addNodes(n.gcNodes);const r=this.blobManager.getGCData(e);return t.addNodes(r.gcNodes),t.getGCData()}updateUsedRoutes(e,t){this.summarizerNode.updateUsedRoutes([""]);const n=[];for(const t of e)t.split("/")[1]!==ue.basePath&&n.push(t);return this.dataStores.updateUsedRoutes(n,t)}deleteUnusedRoutes(e){const t=[],n=[];for(const r of e)this.isBlobPath(r)?t.push(r):n.push(r);this.blobManager.deleteUnusedRoutes(t),this.dataStores.deleteUnusedRoutes(n)}getCurrentReferenceTimestampMs(){var e,t,n;return null!==(t=null===(e=this.deltaManager.lastMessage)||void 0===e?void 0:e.timestamp)&&void 0!==t?t:null===(n=this.messageAtLastSummary)||void 0===n?void 0:n.timestamp}getNodeType(e){var t;return this.isBlobPath(e)?be:null!==(t=this.dataStores.getGCNodeType(e))&&void 0!==t?t:Se}getGCNodePackagePath(e){switch(this.getNodeType(e)){case be:return["_blobs"];case ye:case ve:return this.dataStores.getDataStorePackagePath(e);default:Object(s.a)(!1,734)}}isBlobPath(e){const t=e.split("/");return!(t.length<2||t[1]!==ue.basePath)}async collectGarbage(e){return this.garbageCollector.collectGarbage(e)}addedGCOutboundReference(e,t){this.garbageCollector.addedOutboundReference(e.absolutePath,t.absolutePath)}async submitSummary(e){var t,n,r;const{fullTree:i,refreshLatestAck:a,summaryLogger:o}=e,c=this.nextSummaryNumber,l=h.a.create(o,void 0,{all:{summaryNumber:c}});if(a){const e=await this.refreshLatestSummaryAckFromServer(h.a.create(l,void 0,{all:{safeSummary:!0}}));e>this.deltaManager.lastSequenceNumber&&await h.c.timedExecAsync(l,{eventName:"WaitingForSeq",lastSequenceNumber:this.deltaManager.lastSequenceNumber,targetSequenceNumber:e,lastKnownSeqNumber:this.deltaManager.lastKnownSeqNumber},async()=>dt(this.deltaManager,e),{start:!0,end:!0,cancel:"error"})}try{await this.deltaManager.inbound.pause();const a=this.deltaManager.lastSequenceNumber,o=this.deltaManager.minimumSequenceNumber,h=`Summary @${a}:${this.deltaManager.minimumSequenceNumber}`;a!==(null===(t=this.deltaManager.lastMessage)||void 0===t?void 0:t.sequenceNumber)&&l.sendErrorEvent({eventName:"LastSequenceMismatch",error:h}),this.summarizerNode.startSummary(a,l);const d=()=>e.cancellationToken.cancelled?{continue:!1,error:"disconnected"}:(Object(s.a)(this.connected,600),this.deltaManager.lastSequenceNumber!==a?{continue:!1,error:`lastSequenceNumber changed before uploading to storage. ${this.deltaManager.lastSequenceNumber} !== ${a}`}:{continue:!0});let m=d();if(!m.continue)return{stage:"base",referenceSequenceNumber:a,minimumSequenceNumber:o,error:m.error};const p=u.a.start();let f;const g=this.garbageCollector.summaryStateNeedsReset;try{f=await this.summarize({fullTree:i||g,trackState:!0,summaryLogger:l,runGC:this.garbageCollector.shouldRunGC})}catch(e){return{stage:"base",referenceSequenceNumber:a,minimumSequenceNumber:o,error:e}}const{summary:S,stats:w}=f;this.messageAtLastSummary=this.deltaManager.lastMessage;const x=this.disableIsolatedChannels?S:S.tree[b.channelsTreeName];Object(s.a)(x.type===v.a.Tree,508);const E=Object.values(x.tree).filter(e=>e.type===v.a.Handle).length,O=S.tree.gc?Object(C.e)(S.tree.gc):void 0,T=Object.assign({dataStoreCount:this.dataStores.size,summarizedDataStoreCount:this.dataStores.size-E,gcStateUpdatedDataStoreCount:null===(n=f.gcStats)||void 0===n?void 0:n.updatedDataStoreCount,gcBlobNodeCount:null==O?void 0:O.blobNodeCount,gcTotalBlobsSize:null==O?void 0:O.totalBlobSize,opsSizesSinceLastSummary:this.opTracker.opsSizeAccumulator,nonSystemOpsSinceLastSummary:this.opTracker.nonSystemOpCount,summaryNumber:c},w),P={referenceSequenceNumber:a,minimumSequenceNumber:o,summaryTree:S,summaryStats:T,generateDuration:p.trace().duration,forcedFullTree:g};if(m=d(),!m.continue)return Object.assign(Object.assign({stage:"generate"},P),{error:m.error});const A=this.summaryCollection.latestAck,N=void 0===A?{proposalHandle:void 0,ackHandle:null===(r=this.context.getLoadedFromVersion())||void 0===r?void 0:r.id,referenceSequenceNumber:a}:{proposalHandle:A.summaryOp.contents.handle,ackHandle:A.summaryAck.contents.handle,referenceSequenceNumber:a};let I;try{I=await this.storage.uploadSummaryWithContext(f.summary,N)}catch(e){return Object.assign(Object.assign({stage:"generate"},P),{error:e})}const k=N.ackHandle,D={handle:I,head:k,message:h,parents:k?[k]:[]},F=Object.assign(Object.assign({},P),{handle:I,uploadDuration:p.trace().duration});if(m=d(),!m.continue)return Object.assign(Object.assign({stage:"upload"},F),{error:m.error});let j;try{j=this.submitSystemMessage(y.a.Summarize,D)}catch(e){return Object.assign(Object.assign({stage:"upload"},F),{error:e})}const R=Object.assign(Object.assign({stage:"submit"},F),{clientSequenceNumber:j,submitOpDuration:p.trace().duration});return this.summarizerNode.completeSummary(I),this.opTracker.reset(),R}finally{this.summarizerNode.clearSummary(),this.deltaManager.inbound.resume()}}processRemoteChunkedMessage(e){if(e.type!==tt.ChunkedOp)return e;const t=e.clientId,n=e.contents;if(this.addChunk(t,n),n.chunkId===n.totalChunks){const r=Object.assign({},e),i=this.chunkMap.get(t).join("");return r.contents=JSON.parse(i),r.type=n.originalType,this.clearPartialChunks(t),r}return e}addChunk(e,t){let n=this.chunkMap.get(e);void 0===n&&(n=[],this.chunkMap.set(e,n)),Object(s.a)(t.chunkId===n.length+1,305),n.push(t.contents)}clearPartialChunks(e){this.chunkMap.has(e)&&this.chunkMap.delete(e)}updateDocumentDirtyState(e){this.dirtyContainer!==e&&(this.dirtyContainer=e,this.emitDirtyDocumentEvent&&(this.emit(e?"dirty":"saved"),this.context.updateDirtyContainerState(e)))}submitDataStoreOp(e,t,n){const r={address:e,contents:t};this.submit(tt.FluidDataStoreOp,r,n)}submitDataStoreAliasOp(e,t){if(!Le(e))throw new g.f("malformedDataStoreAliasMessage");this.submit(tt.Alias,e,t)}async uploadBlob(e){return this.verifyNotClosed(),this.blobManager.createBlob(e)}submit(e,t,n,i){this.verifyNotClosed(),void 0!==this.context.pendingLocalState&&this.closeFn(new g.d("containerRuntimeSubmitWithPendingLocalState")),Object(s.a)(this.attachState!==r.a.Detached,306);let a=-1,o=i;if(this.canSendOps()){const n=JSON.stringify(t),r=this.context.deltaManager.maxMessageSize;this.flushMode!==b.FlushMode.TurnBased||this.needsFlush||(o=Object.assign(Object.assign({},i),{batch:!0}),this.needsFlush=!0,this.flushTrigger||Promise.resolve().then(()=>{this.flushTrigger=!1,this.flush()})),a=this.submitMaybeChunkedMessages(e,t,n,r,this._flushMode===b.FlushMode.TurnBased,o)}this.pendingStateManager.onSubmitMessage(e,a,this.deltaManager.lastSequenceNumber,t,n,o),this.isContainerMessageDirtyable(e,t)&&this.updateDocumentDirtyState(!0)}submitMaybeChunkedMessages(e,t,n,r,i,s){return this._maxOpSizeInBytes>=0?!n||n.length<=this._maxOpSizeInBytes?this.submitRuntimeMessage(e,t,i,s):(this.closeFn(new g.d("OpTooLarge",void 0,{length:{value:n.length,tag:h.e.PackageData},limit:{value:this._maxOpSizeInBytes,tag:h.e.PackageData}})),-1):!n||n.length<=r?this.submitRuntimeMessage(e,t,i,s):this.submitChunkedMessage(e,n,r)}submitChunkedMessage(e,t,n){const r=t.length,i=Math.floor((r-1)/n)+1;let s=0,a=0;for(let r=1;r<=i;r+=1){const o={chunkId:r,contents:t.substr(s,n),originalType:e,totalChunks:i};s+=n,a=this.submitRuntimeMessage(tt.ChunkedOp,o,!1)}return a}submitSystemMessage(e,t){this.verifyNotClosed(),Object(s.a)(this.connected,307);const n=this.flushMode===b.FlushMode.TurnBased&&this.needsFlush;return n&&this.mc.logger.sendErrorEvent({eventName:"submitSystemMessageError",type:e}),this.context.submitFn(e,t,n)}submitRuntimeMessage(e,t,n,r){this.verifyNotClosed(),Object(s.a)(this.connected,601);const i={type:e,contents:t};return this.context.submitFn(y.a.Operation,i,n,r)}verifyNotClosed(){if(this._disposed)throw new Error("Runtime is closed")}reSubmit(e,t,n,r){switch(e){case tt.FluidDataStoreOp:this.dataStores.resubmitDataStoreOp(t,n);break;case tt.Attach:case tt.Alias:this.submit(e,t,n);break;case tt.ChunkedOp:throw new Error("chunkedOp not expected here");case tt.BlobAttach:this.submit(e,t,n,r);break;case tt.Rejoin:this.submit(e,t);break;default:Object(c.a)(e,"Unknown ContainerMessageType: "+e)}}async refreshLatestSummaryAck(e,t,n,r){const i=async e=>Object(f.a)(this.storage,e),s=await this.summarizerNode.refreshLatestSummary(e,n,async()=>this.fetchSnapshotFromStorage(t,r,{eventName:"RefreshLatestSummaryGetSnapshot",ackHandle:t,summaryRefSeq:n,fetchLatest:!1}),i,r);await this.garbageCollector.latestSummaryStateRefreshed(s,i)}async refreshLatestSummaryAckFromServer(e){const t=await this.fetchSnapshotFromStorage(null,e,{eventName:"RefreshLatestSummaryGetSnapshot",fetchLatest:!0}),n=async e=>Object(f.a)(this.storage,e),r=await
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
async function(e,t){const n=e.trees[".protocol"].blobs.attributes;return(await t(n)).sequenceNumber}(t,n),i=await this.summarizerNode.refreshLatestSummary(void 0,r,async()=>t,n,e);return await this.garbageCollector.latestSummaryStateRefreshed(i,n),r}async fetchSnapshotFromStorage(e,t,n){return h.c.timedExecAsync(t,n,async t=>{const n={},r=u.a.start(),i=await this.storage.getVersions(e,1);Object(s.a)(!!i&&!!i[0],311),n.getVersionDuration=r.trace().duration;const a=await this.storage.getSnapshotTree(i[0]);return Object(s.a)(!!a,312),n.getSnapshotDuration=r.trace().duration,t.end(n),a})}getPendingLocalState(){return this.pendingStateManager.getLocalState()}formRequestSummarizerFn(e){return async()=>{const t={headers:{[i.a.cache]:!1,[i.a.clientDetails]:{capabilities:{interactive:!1},type:"summarizer"},[p.a.summarizingClient]:!0,[i.a.reconnect]:!1},url:"/_summarizer"},n=(await Object(k.d)(e,t)).ISummarizer;if(!n)throw new g.f("Fluid object does not implement ISummarizer");return n}}}const dt=async(e,t)=>new Promise((n,r)=>{e.on("closed",r);const i=r=>{r.sequenceNumber>=t&&(n(),e.off("op",i))};e.on("op",i)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,