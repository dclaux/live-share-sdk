(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{580:function(t,i,e){"use strict";e.r(i),e.d(i,"hashFile",(function(){return h})),e.d(i,"gitHashFile",(function(){return u}));var r=e(604),n=e.n(r),o=e(605),s=e.n(o);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
async function h(t,i="SHA-1",e="hex"){let r;switch(i){case"SHA-1":r=new n.a;break;case"SHA-256":r=new s.a}return r.update(t).digest(e)}async function u(t){const i=`blob ${t.byteLength.toString()}${String.fromCharCode(0)}`;return(new n.a).update(i).update(t).digest("hex")}},598:function(t,i,e){
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
var r=e(144),n=r.Buffer;function o(t,i){for(var e in t)i[e]=t[e]}function s(t,i,e){return n(t,i,e)}n.from&&n.alloc&&n.allocUnsafe&&n.allocUnsafeSlow?t.exports=r:(o(r,i),i.Buffer=s),s.prototype=Object.create(n.prototype),o(n,s),s.from=function(t,i,e){if("number"==typeof t)throw new TypeError("Argument must not be a number");return n(t,i,e)},s.alloc=function(t,i,e){if("number"!=typeof t)throw new TypeError("Argument must be a number");var r=n(t);return void 0!==i?"string"==typeof e?r.fill(i,e):r.fill(i):r.fill(0),r},s.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return n(t)},s.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return r.SlowBuffer(t)}},599:function(t,i,e){var r=e(144),n=r.Buffer;function o(t,i){for(var e in t)i[e]=t[e]}function s(t,i,e){return n(t,i,e)}n.from&&n.alloc&&n.allocUnsafe&&n.allocUnsafeSlow?t.exports=r:(o(r,i),i.Buffer=s),o(n,s),s.from=function(t,i,e){if("number"==typeof t)throw new TypeError("Argument must not be a number");return n(t,i,e)},s.alloc=function(t,i,e){if("number"!=typeof t)throw new TypeError("Argument must be a number");var r=n(t);return void 0!==i?"string"==typeof e?r.fill(i,e):r.fill(i):r.fill(0),r},s.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return n(t)},s.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return r.SlowBuffer(t)}},600:function(t,i){"function"==typeof Object.create?t.exports=function(t,i){i&&(t.super_=i,t.prototype=Object.create(i.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,i){if(i){t.super_=i;var e=function(){};e.prototype=i.prototype,t.prototype=new e,t.prototype.constructor=t}}},601:function(t,i,e){var r=e(598).Buffer;function n(t,i){this._block=r.alloc(t),this._finalSize=i,this._blockSize=t,this._len=0}n.prototype.update=function(t,i){"string"==typeof t&&(i=i||"utf8",t=r.from(t,i));for(var e=this._block,n=this._blockSize,o=t.length,s=this._len,h=0;h<o;){for(var u=s%n,_=Math.min(o-h,n-u),f=0;f<_;f++)e[u+f]=t[h+f];h+=_,(s+=_)%n==0&&this._update(e)}return this._len+=o,this},n.prototype.digest=function(t){var i=this._len%this._blockSize;this._block[i]=128,this._block.fill(0,i+1),i>=this._finalSize&&(this._update(this._block),this._block.fill(0));var e=8*this._len;if(e<=4294967295)this._block.writeUInt32BE(e,this._blockSize-4);else{var r=(4294967295&e)>>>0,n=(e-r)/4294967296;this._block.writeUInt32BE(n,this._blockSize-8),this._block.writeUInt32BE(r,this._blockSize-4)}this._update(this._block);var o=this._hash();return t?o.toString(t):o},n.prototype._update=function(){throw new Error("_update must be implemented by subclass")},t.exports=n},602:function(t,i){"function"==typeof Object.create?t.exports=function(t,i){i&&(t.super_=i,t.prototype=Object.create(i.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,i){if(i){t.super_=i;var e=function(){};e.prototype=i.prototype,t.prototype=new e,t.prototype.constructor=t}}},603:function(t,i,e){var r=e(599).Buffer;function n(t,i){this._block=r.alloc(t),this._finalSize=i,this._blockSize=t,this._len=0}n.prototype.update=function(t,i){"string"==typeof t&&(i=i||"utf8",t=r.from(t,i));for(var e=this._block,n=this._blockSize,o=t.length,s=this._len,h=0;h<o;){for(var u=s%n,_=Math.min(o-h,n-u),f=0;f<_;f++)e[u+f]=t[h+f];h+=_,(s+=_)%n==0&&this._update(e)}return this._len+=o,this},n.prototype.digest=function(t){var i=this._len%this._blockSize;this._block[i]=128,this._block.fill(0,i+1),i>=this._finalSize&&(this._update(this._block),this._block.fill(0));var e=8*this._len;if(e<=4294967295)this._block.writeUInt32BE(e,this._blockSize-4);else{var r=(4294967295&e)>>>0,n=(e-r)/4294967296;this._block.writeUInt32BE(n,this._blockSize-8),this._block.writeUInt32BE(r,this._blockSize-4)}this._update(this._block);var o=this._hash();return t?o.toString(t):o},n.prototype._update=function(){throw new Error("_update must be implemented by subclass")},t.exports=n},604:function(t,i,e){var r=e(600),n=e(601),o=e(598).Buffer,s=[1518500249,1859775393,-1894007588,-899497514],h=new Array(80);function u(){this.init(),this._w=h,n.call(this,64,56)}function _(t){return t<<5|t>>>27}function f(t){return t<<30|t>>>2}function c(t,i,e,r){return 0===t?i&e|~i&r:2===t?i&e|i&r|e&r:i^e^r}r(u,n),u.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},u.prototype._update=function(t){for(var i,e=this._w,r=0|this._a,n=0|this._b,o=0|this._c,h=0|this._d,u=0|this._e,a=0;a<16;++a)e[a]=t.readInt32BE(4*a);for(;a<80;++a)e[a]=(i=e[a-3]^e[a-8]^e[a-14]^e[a-16])<<1|i>>>31;for(var l=0;l<80;++l){var p=~~(l/20),b=_(r)+c(p,n,o,h)+u+e[l]+s[p]|0;u=h,h=o,o=f(n),n=r,r=b}this._a=r+this._a|0,this._b=n+this._b|0,this._c=o+this._c|0,this._d=h+this._d|0,this._e=u+this._e|0},u.prototype._hash=function(){var t=o.allocUnsafe(20);return t.writeInt32BE(0|this._a,0),t.writeInt32BE(0|this._b,4),t.writeInt32BE(0|this._c,8),t.writeInt32BE(0|this._d,12),t.writeInt32BE(0|this._e,16),t},t.exports=u},605:function(t,i,e){var r=e(600),n=e(601),o=e(598).Buffer,s=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],h=new Array(64);function u(){this.init(),this._w=h,n.call(this,64,56)}function _(t,i,e){return e^t&(i^e)}function f(t,i,e){return t&i|e&(t|i)}function c(t){return(t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10)}function a(t){return(t>>>6|t<<26)^(t>>>11|t<<21)^(t>>>25|t<<7)}function l(t){return(t>>>7|t<<25)^(t>>>18|t<<14)^t>>>3}r(u,n),u.prototype.init=function(){return this._a=1779033703,this._b=3144134277,this._c=1013904242,this._d=2773480762,this._e=1359893119,this._f=2600822924,this._g=528734635,this._h=1541459225,this},u.prototype._update=function(t){for(var i,e=this._w,r=0|this._a,n=0|this._b,o=0|this._c,h=0|this._d,u=0|this._e,p=0|this._f,b=0|this._g,w=0|this._h,y=0;y<16;++y)e[y]=t.readInt32BE(4*y);for(;y<64;++y)e[y]=0|(((i=e[y-2])>>>17|i<<15)^(i>>>19|i<<13)^i>>>10)+e[y-7]+l(e[y-15])+e[y-16];for(var d=0;d<64;++d){var m=w+a(u)+_(u,p,b)+s[d]+e[d]|0,v=c(r)+f(r,n,o)|0;w=b,b=p,p=u,u=h+m|0,h=o,o=n,n=r,r=m+v|0}this._a=r+this._a|0,this._b=n+this._b|0,this._c=o+this._c|0,this._d=h+this._d|0,this._e=u+this._e|0,this._f=p+this._f|0,this._g=b+this._g|0,this._h=w+this._h|0},u.prototype._hash=function(){var t=o.allocUnsafe(32);return t.writeInt32BE(this._a,0),t.writeInt32BE(this._b,4),t.writeInt32BE(this._c,8),t.writeInt32BE(this._d,12),t.writeInt32BE(this._e,16),t.writeInt32BE(this._f,20),t.writeInt32BE(this._g,24),t.writeInt32BE(this._h,28),t},t.exports=u},606:function(t,i,e){var r=e(602),n=e(603),o=e(599).Buffer,s=[1518500249,1859775393,-1894007588,-899497514],h=new Array(80);function u(){this.init(),this._w=h,n.call(this,64,56)}function _(t){return t<<5|t>>>27}function f(t){return t<<30|t>>>2}function c(t,i,e,r){return 0===t?i&e|~i&r:2===t?i&e|i&r|e&r:i^e^r}r(u,n),u.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},u.prototype._update=function(t){for(var i,e=this._w,r=0|this._a,n=0|this._b,o=0|this._c,h=0|this._d,u=0|this._e,a=0;a<16;++a)e[a]=t.readInt32BE(4*a);for(;a<80;++a)e[a]=(i=e[a-3]^e[a-8]^e[a-14]^e[a-16])<<1|i>>>31;for(var l=0;l<80;++l){var p=~~(l/20),b=_(r)+c(p,n,o,h)+u+e[l]+s[p]|0;u=h,h=o,o=f(n),n=r,r=b}this._a=r+this._a|0,this._b=n+this._b|0,this._c=o+this._c|0,this._d=h+this._d|0,this._e=u+this._e|0},u.prototype._hash=function(){var t=o.allocUnsafe(20);return t.writeInt32BE(0|this._a,0),t.writeInt32BE(0|this._b,4),t.writeInt32BE(0|this._c,8),t.writeInt32BE(0|this._d,12),t.writeInt32BE(0|this._e,16),t},t.exports=u},607:function(t,i,e){var r=e(602),n=e(603),o=e(599).Buffer,s=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],h=new Array(64);function u(){this.init(),this._w=h,n.call(this,64,56)}function _(t,i,e){return e^t&(i^e)}function f(t,i,e){return t&i|e&(t|i)}function c(t){return(t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10)}function a(t){return(t>>>6|t<<26)^(t>>>11|t<<21)^(t>>>25|t<<7)}function l(t){return(t>>>7|t<<25)^(t>>>18|t<<14)^t>>>3}r(u,n),u.prototype.init=function(){return this._a=1779033703,this._b=3144134277,this._c=1013904242,this._d=2773480762,this._e=1359893119,this._f=2600822924,this._g=528734635,this._h=1541459225,this},u.prototype._update=function(t){for(var i,e=this._w,r=0|this._a,n=0|this._b,o=0|this._c,h=0|this._d,u=0|this._e,p=0|this._f,b=0|this._g,w=0|this._h,y=0;y<16;++y)e[y]=t.readInt32BE(4*y);for(;y<64;++y)e[y]=0|(((i=e[y-2])>>>17|i<<15)^(i>>>19|i<<13)^i>>>10)+e[y-7]+l(e[y-15])+e[y-16];for(var d=0;d<64;++d){var m=w+a(u)+_(u,p,b)+s[d]+e[d]|0,v=c(r)+f(r,n,o)|0;w=b,b=p,p=u,u=h+m|0,h=o,o=n,n=r,r=m+v|0}this._a=r+this._a|0,this._b=n+this._b|0,this._c=o+this._c|0,this._d=h+this._d|0,this._e=u+this._e|0,this._f=p+this._f|0,this._g=b+this._g|0,this._h=w+this._h|0},u.prototype._hash=function(){var t=o.allocUnsafe(32);return t.writeInt32BE(this._a,0),t.writeInt32BE(this._b,4),t.writeInt32BE(this._c,8),t.writeInt32BE(this._d,12),t.writeInt32BE(this._e,16),t.writeInt32BE(this._f,20),t.writeInt32BE(this._g,24),t.writeInt32BE(this._h,28),t},t.exports=u},608:function(t,i,e){"use strict";e.r(i),e.d(i,"hashFile",(function(){return h})),e.d(i,"gitHashFile",(function(){return u}));var r=e(606),n=e.n(r),o=e(607),s=e.n(o);
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
async function h(t,i="SHA-1",e="hex"){let r;switch(i){case"SHA-1":r=new n.a;break;case"SHA-256":r=new s.a}return r.update(t).digest(e)}async function u(t){const i=`blob ${t.byteLength.toString()}${String.fromCharCode(0)}`;return(new n.a).update(i).update(t).digest("hex")}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vQzovREVWL0dpdEh1Yi9kY2xhdXgvbGl2ZS1zaGFyZS1zZGsvbm9kZV9tb2R1bGVzL0BmbHVpZGZyYW1ld29yay9jb21tb24tdXRpbHMvbGliL2hhc2hGaWxlTm9kZS5qcyIsIndlYnBhY2s6Ly8vQzovREVWL0dpdEh1Yi9kY2xhdXgvbGl2ZS1zaGFyZS1zZGsvbm9kZV9tb2R1bGVzL3NhZmUtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zYWZlLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vQzovREVWL0dpdEh1Yi9kY2xhdXgvbGl2ZS1zaGFyZS1zZGsvbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vL0M6L0RFVi9HaXRIdWIvZGNsYXV4L2xpdmUtc2hhcmUtc2RrL25vZGVfbW9kdWxlcy9zaGEuanMvaGFzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hhLmpzL2hhc2guanMiLCJ3ZWJwYWNrOi8vL0M6L0RFVi9HaXRIdWIvZGNsYXV4L2xpdmUtc2hhcmUtc2RrL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhMS5qcyIsIndlYnBhY2s6Ly8vQzovREVWL0dpdEh1Yi9kY2xhdXgvbGl2ZS1zaGFyZS1zZGsvbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEyNTYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGExLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhMjU2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmx1aWRmcmFtZXdvcmsvY29tbW9uLXV0aWxzL2xpYi9oYXNoRmlsZU5vZGUuanMiXSwibmFtZXMiOlsiYXN5bmMiLCJoYXNoRmlsZSIsImZpbGUiLCJhbGdvcml0aG0iLCJoYXNoRW5jb2RpbmciLCJlbmdpbmUiLCJ1cGRhdGUiLCJkaWdlc3QiLCJnaXRIYXNoRmlsZSIsImZpbGVQcmVmaXgiLCJieXRlTGVuZ3RoIiwidG9TdHJpbmciLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJidWZmZXIiLCJCdWZmZXIiLCJjb3B5UHJvcHMiLCJzcmMiLCJkc3QiLCJrZXkiLCJTYWZlQnVmZmVyIiwiYXJnIiwiZW5jb2RpbmdPck9mZnNldCIsImxlbmd0aCIsImZyb20iLCJhbGxvYyIsImFsbG9jVW5zYWZlIiwiYWxsb2NVbnNhZmVTbG93IiwibW9kdWxlIiwiZXhwb3J0cyIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsIlR5cGVFcnJvciIsInNpemUiLCJmaWxsIiwiZW5jb2RpbmciLCJidWYiLCJ1bmRlZmluZWQiLCJTbG93QnVmZmVyIiwiY3RvciIsInN1cGVyQ3RvciIsInN1cGVyXyIsImNvbnN0cnVjdG9yIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJUZW1wQ3RvciIsIkhhc2giLCJibG9ja1NpemUiLCJmaW5hbFNpemUiLCJ0aGlzIiwiX2Jsb2NrIiwiX2ZpbmFsU2l6ZSIsIl9ibG9ja1NpemUiLCJfbGVuIiwiZGF0YSIsImVuYyIsImJsb2NrIiwiYWNjdW0iLCJvZmZzZXQiLCJhc3NpZ25lZCIsInJlbWFpbmRlciIsIk1hdGgiLCJtaW4iLCJpIiwiX3VwZGF0ZSIsInJlbSIsImJpdHMiLCJ3cml0ZVVJbnQzMkJFIiwibG93Qml0cyIsImhpZ2hCaXRzIiwiaGFzaCIsIl9oYXNoIiwiRXJyb3IiLCJpbmhlcml0cyIsIksiLCJXIiwiQXJyYXkiLCJTaGExIiwiaW5pdCIsIl93IiwiY2FsbCIsInJvdGw1IiwibnVtIiwicm90bDMwIiwiZnQiLCJzIiwiYiIsImMiLCJkIiwiX2EiLCJfYiIsIl9jIiwiX2QiLCJfZSIsIk0iLCJhIiwiZSIsInJlYWRJbnQzMkJFIiwiaiIsInQiLCJIIiwid3JpdGVJbnQzMkJFIiwiU2hhMjU2IiwiY2giLCJ4IiwieSIsInoiLCJtYWoiLCJzaWdtYTAiLCJzaWdtYTEiLCJnYW1tYTAiLCJfZiIsIl9nIiwiX2giLCJmIiwiZyIsImgiLCJUMSIsIlQyIl0sIm1hcHBpbmdzIjoiMEZBQUE7Ozs7O0FBbUJPQSxlQUFlQyxFQUFTQyxFQUFNQyxFQUFZLFFBQVNDLEVBQWUsT0FDckUsSUFBSUMsRUFFSixPQUFRRixHQUNKLElBQUssUUFDREUsRUFBUyxJQUFJLElBQ2IsTUFFSixJQUFLLFVBQ0RBLEVBQVMsSUFBSSxJQUlyQixPQUFPQSxFQUFPQyxPQUFPSixHQUFNSyxPQUFPSCxHQVMvQkosZUFBZVEsRUFBWU4sR0FDOUIsTUFDTU8sRUFBYSxRQUROUCxFQUFLUSxXQUNjQyxhQUFhQyxPQUFPQyxhQUFhLEtBRWpFLE9BRGUsSUFBSSxLQUNMUCxPQUFPRyxHQUNoQkgsT0FBT0osR0FDUEssT0FBTyxTOztBQzdDaEIsSUFBSU8sRUFBUyxFQUFRLEtBQ2pCQyxFQUFTRCxFQUFPQyxPQUdwQixTQUFTQyxFQUFXQyxFQUFLQyxHQUN2QixJQUFLLElBQUlDLEtBQU9GLEVBQ2RDLEVBQUlDLEdBQU9GLEVBQUlFLEdBV25CLFNBQVNDLEVBQVlDLEVBQUtDLEVBQWtCQyxHQUMxQyxPQUFPUixFQUFPTSxFQUFLQyxFQUFrQkMsR0FUbkNSLEVBQU9TLE1BQVFULEVBQU9VLE9BQVNWLEVBQU9XLGFBQWVYLEVBQU9ZLGdCQUM5REMsRUFBT0MsUUFBVWYsR0FHakJFLEVBQVVGLEVBQVFlLEdBQ2xCQSxFQUFRZCxPQUFTSyxHQU9uQkEsRUFBV1UsVUFBWUMsT0FBT0MsT0FBT2pCLEVBQU9lLFdBRzVDZCxFQUFVRCxFQUFRSyxHQUVsQkEsRUFBV0ksS0FBTyxTQUFVSCxFQUFLQyxFQUFrQkMsR0FDakQsR0FBbUIsaUJBQVJGLEVBQ1QsTUFBTSxJQUFJWSxVQUFVLGlDQUV0QixPQUFPbEIsRUFBT00sRUFBS0MsRUFBa0JDLElBR3ZDSCxFQUFXSyxNQUFRLFNBQVVTLEVBQU1DLEVBQU1DLEdBQ3ZDLEdBQW9CLGlCQUFU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QUswQyxHQUFJLEdBQ3hCUyxFQUFFQyxhQUFhcEQsS0FBSzJDLEdBQUksSUFDeEJRLEVBQUVDLGFBQWFwRCxLQUFLNEMsR0FBSSxJQUN4Qk8sRUFBRUMsYUFBYXBELEtBQUs4RCxHQUFJLElBQ3hCWCxFQUFFQyxhQUFhcEQsS0FBSytELEdBQUksSUFDeEJaLEVBQUVDLGFBQWFwRCxLQUFLZ0UsR0FBSSxJQUVqQmIsR0FHVDNFLEVBQU9DLFFBQVU0RSxHLGlDQ3RJakI7Ozs7O0FBbUJPekcsZUFBZUMsRUFBU0MsRUFBTUMsRUFBWSxRQUFTQyxFQUFlLE9BQ3JFLElBQUlDLEVBRUosT0FBUUYsR0FDSixJQUFLLFFBQ0RFLEVBQVMsSUFBSSxJQUNiLE1BRUosSUFBSyxVQUNEQSxFQUFTLElBQUksSUFJckIsT0FBT0EsRUFBT0MsT0FBT0osR0FBTUssT0FBT0gsR0FTL0JKLGVBQWVRLEVBQVlOLEdBQzlCLE1BQ01PLEVBQWEsUUFETlAsRUFBS1EsV0FDY0MsYUFBYUMsT0FBT0MsYUFBYSxLQUVqRSxPQURlLElBQUksS0FDTFAsT0FBT0csR0FDaEJILE9BQU9KLEdBQ1BLLE9BQU8iLCJmaWxlIjoiRmx1aWRGcmFtZXdvcmstSGFzaEZhbGxiYWNrLjBhMTNmOGQxNWQyZWYyMDNjMzZkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbiBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWludGVybmFsLW1vZHVsZXNcbmltcG9ydCBzaGExIGZyb20gXCJzaGEuanMvc2hhMVwiO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1pbnRlcm5hbC1tb2R1bGVzXG5pbXBvcnQgc2hhMjU2IGZyb20gXCJzaGEuanMvc2hhMjU2XCI7XG4vKipcbiAqIEhhc2ggYSBmaWxlLiBDb25zaXN0ZW50IHdpdGhpbiBhIHNlc3Npb24sIGJ1dCBzaG91bGQgbm90IGJlIHBlcnNpc3RlZCBhbmRcbiAqIGlzIG5vdCBjb25zaXN0ZW50IHdpdGggZ2l0LlxuICogSWYgY2FsbGVkIHVuZGVyIGFuIGluc2VjdXJlIGNvbnRleHQgZm9yIGEgYnJvd3NlciwgdGhpcyB3aWxsIGZhbGxiYWNrIHRvXG4gKiB1c2luZyB0aGUgbm9kZSBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBAcGFyYW0gZmlsZSAtIFRoZSBjb250ZW50cyBvZiB0aGUgZmlsZSBpbiBhIGJ1ZmZlclxuICogQHBhcmFtIGFsZ29yaXRobSAtIFRoZSBoYXNoIGFsZ29yaXRobSB0byB1c2UsIGFydGlmaWNpYWxseSBjb25zdHJhaW5lZCBieSB3aGF0IGlzIHVzZWQgaW50ZXJuYWxseVxuICogQHBhcmFtIGhhc2hFbmNvZGluZyAtIFRoZSBlbmNvZGluZyBvZiB0aGUgcmV0dXJuZWQgaGFzaCwgYWxzbyBhcnRpZmljaWFsbHkgY29uc3RyYWluZWRcbiAqIEByZXR1cm5zIFRoZSBoYXNoIG9mIHRoZSBjb250ZW50IG9mIHRoZSBidWZmZXJcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhc2hGaWxlKGZpbGUsIGFsZ29yaXRobSA9IFwiU0hBLTFcIiwgaGFzaEVuY29kaW5nID0gXCJoZXhcIikge1xuICAgIGxldCBlbmdpbmU7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlZmF1bHQtY2FzZVxuICAgIHN3aXRjaCAoYWxnb3JpdGhtKSB7XG4gICAgICAgIGNhc2UgXCJTSEEtMVwiOiB7XG4gICAgICAgICAgICBlbmdpbmUgPSBuZXcgc2hhMSgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcIlNIQS0yNTZcIjoge1xuICAgICAgICAgICAgZW5naW5lID0gbmV3IHNoYTI1NigpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVuZ2luZS51cGRhdGUoZmlsZSkuZGlnZXN0KGhhc2hFbmNvZGluZyk7XG59XG4vKipcbiAqIENyZWF0ZSBhIGdpdGh1YiBoYXNoIChHaXRodWIgaGFzaGVzIHRoZSBzdHJpbmcgd2l0aCBibG9iIGFuZCBzaXplKVxuICogTXVzdCBiZSBjYWxsZWQgdW5kZXIgc2VjdXJlIGNvbnRleHQgZm9yIGJyb3dzZXJzXG4gKlxuICogQHBhcmFtIGZpbGUgLSBUaGUgY29udGVudHMgb2YgdGhlIGZpbGUgaW4gYSBidWZmZXJcbiAqIEByZXR1cm5zIFRoZSBzaGExIGhhc2ggb2YgdGhlIGNvbnRlbnQgb2YgdGhlIGJ1ZmZlciB3aXRoIHRoZSBgYmxvYmAgcHJlZml4IGFuZCBzaXplXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnaXRIYXNoRmlsZShmaWxlKSB7XG4gICAgY29uc3Qgc2l6ZSA9IGZpbGUuYnl0ZUxlbmd0aDtcbiAgICBjb25zdCBmaWxlUHJlZml4ID0gYGJsb2IgJHtzaXplLnRvU3RyaW5nKCl9JHtTdHJpbmcuZnJvbUNoYXJDb2RlKDApfWA7XG4gICAgY29uc3QgZW5naW5lID0gbmV3IHNoYTEoKTtcbiAgICByZXR1cm4gZW5naW5lLnVwZGF0ZShmaWxlUHJlZml4KVxuICAgICAgICAudXBkYXRlKGZpbGUpXG4gICAgICAgIC5kaWdlc3QoXCJoZXhcIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oYXNoRmlsZU5vZGUuanMubWFwIiwiLyohIHNhZmUtYnVmZmVyLiBNSVQgTGljZW5zZS4gRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnL29wZW5zb3VyY2U+ICovXG4vKiBlc2xpbnQtZGlzYWJsZSBub2RlL25vLWRlcHJlY2F0ZWQtYXBpICovXG52YXIgYnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJylcbnZhciBCdWZmZXIgPSBidWZmZXIuQnVmZmVyXG5cbi8vIGFsdGVybmF0aXZlIHRvIHVzaW5nIE9iamVjdC5rZXlzIGZvciBvbGQgYnJvd3NlcnNcbmZ1bmN0aW9uIGNvcHlQcm9wcyAoc3JjLCBkc3QpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykge1xuICAgIGRzdFtrZXldID0gc3JjW2tleV1cbiAgfVxufVxuaWYgKEJ1ZmZlci5mcm9tICYmIEJ1ZmZlci5hbGxvYyAmJiBCdWZmZXIuYWxsb2NVbnNhZmUgJiYgQnVmZmVyLmFsbG9jVW5zYWZlU2xvdykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGJ1ZmZlclxufSBlbHNlIHtcbiAgLy8gQ29weSBwcm9wZXJ0aWVzIGZyb20gcmVxdWlyZSgnYnVmZmVyJylcbiAgY29weVByb3BzKGJ1ZmZlciwgZXhwb3J0cylcbiAgZXhwb3J0cy5CdWZmZXIgPSBTYWZlQnVmZmVyXG59XG5cbmZ1bmN0aW9uIFNhZmVCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cblNhZmVCdWZmZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShCdWZmZXIucHJvdG90eXBlKVxuXG4vLyBDb3B5IHN0YXRpYyBtZXRob2RzIGZyb20gQnVmZmVyXG5jb3B5UHJvcHMoQnVmZmVyLCBTYWZlQnVmZmVyKVxuXG5TYWZlQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cblNhZmVCdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHZhciBidWYgPSBCdWZmZXIoc2l6ZSlcbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICBidWYuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmLmZpbGwoZmlsbClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYnVmLmZpbGwoMClcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihzaXplKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gYnVmZmVyLlNsb3dCdWZmZXIoc2l6ZSlcbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi9cbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxudmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXJcblxuLy8gYWx0ZXJuYXRpdmUgdG8gdXNpbmcgT2JqZWN0LmtleXMgZm9yIG9sZCBicm93c2Vyc1xuZnVuY3Rpb24gY29weVByb3BzIChzcmMsIGRzdCkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgZHN0W2tleV0gPSBzcmNba2V5XVxuICB9XG59XG5pZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7XG4gIG1vZHVsZS5leHBvcnRzID0gYnVmZmVyXG59IGVsc2Uge1xuICAvLyBDb3B5IHByb3BlcnRpZXMgZnJvbSByZXF1aXJlKCdidWZmZXInKVxuICBjb3B5UHJvcHMoYnVmZmVyLCBleHBvcnRzKVxuICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVCdWZmZXJcbn1cblxuZnVuY3Rpb24gU2FmZUJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxuY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcilcblxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1Zi5maWxsKDApXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoc2l6ZSlcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlci5TbG93QnVmZmVyKHNpemUpXG59XG4iLCJpZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBpZiAoc3VwZXJDdG9yKSB7XG4gICAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH07XG59IGVsc2Uge1xuICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuICAgICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG4gICAgfVxuICB9XG59XG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxuLy8gcHJvdG90eXBlIGNsYXNzIGZvciBoYXNoIGZ1bmN0aW9uc1xuZnVuY3Rpb24gSGFzaCAoYmxvY2tTaXplLCBmaW5hbFNpemUpIHtcbiAgdGhpcy5fYmxvY2sgPSBCdWZmZXIuYWxsb2MoYmxvY2tTaXplKVxuICB0aGlzLl9maW5hbFNpemUgPSBmaW5hbFNpemVcbiAgdGhpcy5fYmxvY2tTaXplID0gYmxvY2tTaXplXG4gIHRoaXMuX2xlbiA9IDBcbn1cblxuSGFzaC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEsIGVuYykge1xuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jID0gZW5jIHx8ICd1dGY4J1xuICAgIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhLCBlbmMpXG4gIH1cblxuICB2YXIgYmxvY2sgPSB0aGlzLl9ibG9ja1xuICB2YXIgYmxvY2tTaXplID0gdGhpcy5fYmxvY2tTaXplXG4gIHZhciBsZW5ndGggPSBkYXRhLmxlbmd0aFxuICB2YXIgYWNjdW0gPSB0aGlzLl9sZW5cblxuICBmb3IgKHZhciBvZmZzZXQgPSAwOyBvZmZzZXQgPCBsZW5ndGg7KSB7XG4gICAgdmFyIGFzc2lnbmVkID0gYWNjdW0gJSBibG9ja1NpemVcbiAgICB2YXIgcmVtYWluZGVyID0gTWF0aC5taW4obGVuZ3RoIC0gb2Zmc2V0LCBibG9ja1NpemUgLSBhc3NpZ25lZClcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVtYWluZGVyOyBpKyspIHtcbiAgICAgIGJsb2NrW2Fzc2lnbmVkICsgaV0gPSBkYXRhW29mZnNldCArIGldXG4gICAgfVxuXG4gICAgYWNjdW0gKz0gcmVtYWluZGVyXG4gICAgb2Zmc2V0ICs9IHJlbWFpbmRlclxuXG4gICAgaWYgKChhY2N1bSAlIGJsb2NrU2l6ZSkgPT09IDApIHtcbiAgICAgIHRoaXMuX3VwZGF0ZShibG9jaylcbiAgICB9XG4gIH1cblxuICB0aGlzLl9sZW4gKz0gbGVuZ3RoXG4gIHJldHVybiB0aGlzXG59XG5cbkhhc2gucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgdmFyIHJlbSA9IHRoaXMuX2xlbiAlIHRoaXMuX2Jsb2NrU2l6ZVxuXG4gIHRoaXMuX2Jsb2NrW3JlbV0gPSAweDgwXG5cbiAgLy8gemVybyAocmVtICsgMSkgdHJhaWxpbmcgYml0cywgd2hlcmUgKHJlbSArIDEpIGlzIHRoZSBzbWFsbGVzdFxuICAvLyBub24tbmVnYXRpdmUgc29sdXRpb24gdG8gdGhlIGVxdWF0aW9uIChsZW5ndGggKyAxICsgKHJlbSArIDEpKSA9PT0gZmluYWxTaXplIG1vZCBibG9ja1NpemVcbiAgdGhpcy5fYmxvY2suZmlsbCgwLCByZW0gKyAxKVxuXG4gIGlmIChyZW0gPj0gdGhpcy5fZmluYWxTaXplKSB7XG4gICAgdGhpcy5fdXBkYXRlKHRoaXMuX2Jsb2NrKVxuICAgIHRoaXMuX2Jsb2NrLmZpbGwoMClcbiAgfVxuXG4gIHZhciBiaXRzID0gdGhpcy5fbGVuICogOFxuXG4gIC8vIHVpbnQzMlxuICBpZiAoYml0cyA8PSAweGZmZmZmZmZmKSB7XG4gICAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJCRShiaXRzLCB0aGlzLl9ibG9ja1NpemUgLSA0KVxuXG4gIC8vIHVpbnQ2NFxuICB9IGVsc2Uge1xuICAgIHZhciBsb3dCaXRzID0gKGJpdHMgJiAweGZmZmZmZmZmKSA+Pj4gMFxuICAgIHZhciBoaWdoQml0cyA9IChiaXRzIC0gbG93Qml0cykgLyAweDEwMDAwMDAwMFxuXG4gICAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJCRShoaWdoQml0cywgdGhpcy5fYmxvY2tTaXplIC0gOClcbiAgICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkJFKGxvd0JpdHMsIHRoaXMuX2Jsb2NrU2l6ZSAtIDQpXG4gIH1cblxuICB0aGlzLl91cGRhdGUodGhpcy5fYmxvY2spXG4gIHZhciBoYXNoID0gdGhpcy5faGFzaCgpXG5cbiAgcmV0dXJuIGVuYyA/IGhhc2gudG9TdHJpbmcoZW5jKSA6IGhhc2hcbn1cblxuSGFzaC5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdfdXBkYXRlIG11c3QgYmUgaW1wbGVtZW50ZWQgYnkgc3ViY2xhc3MnKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEhhc2hcbiIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgICB9XG4gIH1cbn1cbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG4vLyBwcm90b3R5cGUgY2xhc3MgZm9yIGhhc2ggZnVuY3Rpb25zXG5mdW5jdGlvbiBIYXNoIChibG9ja1NpemUsIGZpbmFsU2l6ZSkge1xuICB0aGlzLl9ibG9jayA9IEJ1ZmZlci5hbGxvYyhibG9ja1NpemUpXG4gIHRoaXMuX2ZpbmFsU2l6ZSA9IGZpbmFsU2l6ZVxuICB0aGlzLl9ibG9ja1NpemUgPSBibG9ja1NpemVcbiAgdGhpcy5fbGVuID0gMFxufVxuXG5IYXNoLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSwgZW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmMgPSBlbmMgfHwgJ3V0ZjgnXG4gICAgZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGEsIGVuYylcbiAgfVxuXG4gIHZhciBibG9jayA9IHRoaXMuX2Jsb2NrXG4gIHZhciBibG9ja1NpemUgPSB0aGlzLl9ibG9ja1NpemVcbiAgdmFyIGxlbmd0aCA9IGRhdGEubGVuZ3RoXG4gIHZhciBhY2N1bSA9IHRoaXMuX2xlblxuXG4gIGZvciAodmFyIG9mZnNldCA9IDA7IG9mZnNldCA8IGxlbmd0aDspIHtcbiAgICB2YXIgYXNzaWduZWQgPSBhY2N1bSAlIGJsb2NrU2l6ZVxuICAgIHZhciByZW1haW5kZXIgPSBNYXRoLm1pbihsZW5ndGggLSBvZmZzZXQsIGJsb2NrU2l6ZSAtIGFzc2lnbmVkKVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZW1haW5kZXI7IGkrKykge1xuICAgICAgYmxvY2tbYXNzaWduZWQgKyBpXSA9IGRhdGFbb2Zmc2V0ICsgaV1cbiAgICB9XG5cbiAgICBhY2N1bSArPSByZW1haW5kZXJcbiAgICBvZmZzZXQgKz0gcmVtYWluZGVyXG5cbiAgICBpZiAoKGFjY3VtICUgYmxvY2tTaXplKSA9PT0gMCkge1xuICAgICAgdGhpcy5fdXBkYXRlKGJsb2NrKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuX2xlbiArPSBsZW5ndGhcbiAgcmV0dXJuIHRoaXNcbn1cblxuSGFzaC5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gKGVuYykge1xuICB2YXIgcmVtID0gdGhpcy5fbGVuICUgdGhpcy5fYmxvY2tTaXplXG5cbiAgdGhpcy5fYmxvY2tbcmVtXSA9IDB4ODBcblxuICAvLyB6ZXJvIChyZW0gKyAxKSB0cmFpbGluZyBiaXRzLCB3aGVyZSAocmVtICsgMSkgaXMgdGhlIHNtYWxsZXN0XG4gIC8vIG5vbi1uZWdhdGl2ZSBzb2x1dGlvbiB0byB0aGUgZXF1YXRpb24gKGxlbmd0aCArIDEgKyAocmVtICsgMSkpID09PSBmaW5hbFNpemUgbW9kIGJsb2NrU2l6ZVxuICB0aGlzLl9ibG9jay5maWxsKDAsIHJlbSArIDEpXG5cbiAgaWYgKHJlbSA+PSB0aGlzLl9maW5hbFNpemUpIHtcbiAgICB0aGlzLl91cGRhdGUodGhpcy5fYmxvY2spXG4gICAgdGhpcy5fYmxvY2suZmlsbCgwKVxuICB9XG5cbiAgdmFyIGJpdHMgPSB0aGlzLl9sZW4gKiA4XG5cbiAgLy8gdWludDMyXG4gIGlmIChiaXRzIDw9IDB4ZmZmZmZmZmYpIHtcbiAgICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkJFKGJpdHMsIHRoaXMuX2Jsb2NrU2l6ZSAtIDQpXG5cbiAgLy8gdWludDY0XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxvd0JpdHMgPSAoYml0cyAmIDB4ZmZmZmZmZmYpID4+PiAwXG4gICAgdmFyIGhpZ2hCaXRzID0gKGJpdHMgLSBsb3dCaXRzKSAvIDB4MTAwMDAwMDAwXG5cbiAgICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkJFKGhpZ2hCaXRzLCB0aGlzLl9ibG9ja1NpemUgLSA4KVxuICAgIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyQkUobG93Qml0cywgdGhpcy5fYmxvY2tTaXplIC0gNClcbiAgfVxuXG4gIHRoaXMuX3VwZGF0ZSh0aGlzLl9ibG9jaylcbiAgdmFyIGhhc2ggPSB0aGlzLl9oYXNoKClcblxuICByZXR1cm4gZW5jID8gaGFzaC50b1N0cmluZyhlbmMpIDogaGFzaFxufVxuXG5IYXNoLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ191cGRhdGUgbXVzdCBiZSBpbXBsZW1lbnRlZCBieSBzdWJjbGFzcycpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzaFxuIiwiLypcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMSwgYXMgZGVmaW5lZFxuICogaW4gRklQUyBQVUIgMTgwLTFcbiAqIFZlcnNpb24gMi4xYSBDb3B5cmlnaHQgUGF1bCBKb2huc3RvbiAyMDAwIC0gMjAwMi5cbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCU0QgTGljZW5zZVxuICogU2VlIGh0dHA6Ly9wYWpob21lLm9yZy51ay9jcnlwdC9tZDUgZm9yIGRldGFpbHMuXG4gKi9cblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBLID0gW1xuICAweDVhODI3OTk5LCAweDZlZDllYmExLCAweDhmMWJiY2RjIHwgMCwgMHhjYTYyYzFkNiB8IDBcbl1cblxudmFyIFcgPSBuZXcgQXJyYXkoODApXG5cbmZ1bmN0aW9uIFNoYTEgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYTEsIEhhc2gpXG5cblNoYTEucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweDY3NDUyMzAxXG4gIHRoaXMuX2IgPSAweGVmY2RhYjg5XG4gIHRoaXMuX2MgPSAweDk4YmFkY2ZlXG4gIHRoaXMuX2QgPSAweDEwMzI1NDc2XG4gIHRoaXMuX2UgPSAweGMzZDJlMWYwXG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gcm90bDEgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCAxKSB8IChudW0gPj4+IDMxKVxufVxuXG5mdW5jdGlvbiByb3RsNSAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDUpIHwgKG51bSA+Pj4gMjcpXG59XG5cbmZ1bmN0aW9uIHJvdGwzMCAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDMwKSB8IChudW0gPj4+IDIpXG59XG5cbmZ1bmN0aW9uIGZ0IChzLCBiLCBjLCBkKSB7XG4gIGlmIChzID09PSAwKSByZXR1cm4gKGIgJiBjKSB8ICgofmIpICYgZClcbiAgaWYgKHMgPT09IDIpIHJldHVybiAoYiAmIGMpIHwgKGIgJiBkKSB8IChjICYgZClcbiAgcmV0dXJuIGIgXiBjIF4gZFxufVxuXG5TaGExLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGEgPSB0aGlzLl9hIHwgMFxuICB2YXIgYiA9IHRoaXMuX2IgfCAwXG4gIHZhciBjID0gdGhpcy5fYyB8IDBcbiAgdmFyIGQgPSB0aGlzLl9kIHwgMFxuICB2YXIgZSA9IHRoaXMuX2UgfCAwXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSBXW2ldID0gTS5yZWFkSW50MzJCRShpICogNClcbiAgZm9yICg7IGkgPCA4MDsgKytpKSBXW2ldID0gcm90bDEoV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XSlcblxuICBmb3IgKHZhciBqID0gMDsgaiA8IDgwOyArK2opIHtcbiAgICB2YXIgcyA9IH5+KGogLyAyMClcbiAgICB2YXIgdCA9IChyb3RsNShhKSArIGZ0KHMsIGIsIGMsIGQpICsgZSArIFdbal0gKyBLW3NdKSB8IDBcblxuICAgIGUgPSBkXG4gICAgZCA9IGNcbiAgICBjID0gcm90bDMwKGIpXG4gICAgYiA9IGFcbiAgICBhID0gdFxuICB9XG5cbiAgdGhpcy5fYSA9IChhICsgdGhpcy5fYSkgfCAwXG4gIHRoaXMuX2IgPSAoYiArIHRoaXMuX2IpIHwgMFxuICB0aGlzLl9jID0gKGMgKyB0aGlzLl9jKSB8IDBcbiAgdGhpcy5fZCA9IChkICsgdGhpcy5fZCkgfCAwXG4gIHRoaXMuX2UgPSAoZSArIHRoaXMuX2UpIHwgMFxufVxuXG5TaGExLnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMjApXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSB8IDAsIDApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2IgfCAwLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jIHwgMCwgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCB8IDAsIDEyKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9lIHwgMCwgMTYpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGExXG4iLCIvKipcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMjU2LCBhcyBkZWZpbmVkXG4gKiBpbiBGSVBTIDE4MC0yXG4gKiBWZXJzaW9uIDIuMi1iZXRhIENvcHlyaWdodCBBbmdlbCBNYXJpbiwgUGF1bCBKb2huc3RvbiAyMDAwIC0gMjAwOS5cbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqXG4gKi9cblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBLID0gW1xuICAweDQyOEEyRjk4LCAweDcxMzc0NDkxLCAweEI1QzBGQkNGLCAweEU5QjVEQkE1LFxuICAweDM5NTZDMjVCLCAweDU5RjExMUYxLCAweDkyM0Y4MkE0LCAweEFCMUM1RUQ1LFxuICAweEQ4MDdBQTk4LCAweDEyODM1QjAxLCAweDI0MzE4NUJFLCAweDU1MEM3REMzLFxuICAweDcyQkU1RDc0LCAweDgwREVCMUZFLCAweDlCREMwNkE3LCAweEMxOUJGMTc0LFxuICAweEU0OUI2OUMxLCAweEVGQkU0Nzg2LCAweDBGQzE5REM2LCAweDI0MENBMUNDLFxuICAweDJERTkyQzZGLCAweDRBNzQ4NEFBLCAweDVDQjBBOURDLCAweDc2Rjk4OERBLFxuICAweDk4M0U1MTUyLCAweEE4MzFDNjZELCAweEIwMDMyN0M4LCAweEJGNTk3RkM3LFxuICAweEM2RTAwQkYzLCAweEQ1QTc5MTQ3LCAweDA2Q0E2MzUxLCAweDE0MjkyOTY3LFxuICAweDI3QjcwQTg1LCAweDJFMUIyMTM4LCAweDREMkM2REZDLCAweDUzMzgwRDEzLFxuICAweDY1MEE3MzU0LCAweDc2NkEwQUJCLCAweDgxQzJDOTJFLCAweDkyNzIyQzg1LFxuICAweEEyQkZFOEExLCAweEE4MUE2NjRCLCAweEMyNEI4QjcwLCAweEM3NkM1MUEzLFxuICAweEQxOTJFODE5LCAweEQ2OTkwNjI0LCAweEY0MEUzNTg1LCAweDEwNkFBMDcwLFxuICAweDE5QTRDMTE2LCAweDFFMzc2QzA4LCAweDI3NDg3NzRDLCAweDM0QjBCQ0I1LFxuICAweDM5MUMwQ0IzLCAweDRFRDhBQTRBLCAweDVCOUNDQTRGLCAweDY4MkU2RkYzLFxuICAweDc0OEY4MkVFLCAweDc4QTU2MzZGLCAweDg0Qzg3ODE0LCAweDhDQzcwMjA4LFxuICAweDkwQkVGRkZBLCAweEE0NTA2Q0VCLCAweEJFRjlBM0Y3LCAweEM2NzE3OEYyXG5dXG5cbnZhciBXID0gbmV3IEFycmF5KDY0KVxuXG5mdW5jdGlvbiBTaGEyNTYgKCkge1xuICB0aGlzLmluaXQoKVxuXG4gIHRoaXMuX3cgPSBXIC8vIG5ldyBBcnJheSg2NClcblxuICBIYXNoLmNhbGwodGhpcywgNjQsIDU2KVxufVxuXG5pbmhlcml0cyhTaGEyNTYsIEhhc2gpXG5cblNoYTI1Ni5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4NmEwOWU2NjdcbiAgdGhpcy5fYiA9IDB4YmI2N2FlODVcbiAgdGhpcy5fYyA9IDB4M2M2ZWYzNzJcbiAgdGhpcy5fZCA9IDB4YTU0ZmY1M2FcbiAgdGhpcy5fZSA9IDB4NTEwZTUyN2ZcbiAgdGhpcy5fZiA9IDB4OWIwNTY4OGNcbiAgdGhpcy5fZyA9IDB4MWY4M2Q5YWJcbiAgdGhpcy5faCA9IDB4NWJlMGNkMTlcblxuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiBjaCAoeCwgeSwgeikge1xuICByZXR1cm4geiBeICh4ICYgKHkgXiB6KSlcbn1cblxuZnVuY3Rpb24gbWFqICh4LCB5LCB6KSB7XG4gIHJldHVybiAoeCAmIHkpIHwgKHogJiAoeCB8IHkpKVxufVxuXG5mdW5jdGlvbiBzaWdtYTAgKHgpIHtcbiAgcmV0dXJuICh4ID4+PiAyIHwgeCA8PCAzMCkgXiAoeCA+Pj4gMTMgfCB4IDw8IDE5KSBeICh4ID4+PiAyMiB8IHggPDwgMTApXG59XG5cbmZ1bmN0aW9uIHNpZ21hMSAoeCkge1xuICByZXR1cm4gKHggPj4+IDYgfCB4IDw8IDI2KSBeICh4ID4+PiAxMSB8IHggPDwgMjEpIF4gKHggPj4+IDI1IHwgeCA8PCA3KVxufVxuXG5mdW5jdGlvbiBnYW1tYTAgKHgpIHtcbiAgcmV0dXJuICh4ID4+PiA3IHwgeCA8PCAyNSkgXiAoeCA+Pj4gMTggfCB4IDw8IDE0KSBeICh4ID4+PiAzKVxufVxuXG5mdW5jdGlvbiBnYW1tYTEgKHgpIHtcbiAgcmV0dXJuICh4ID4+PiAxNyB8IHggPDwgMTUpIF4gKHggPj4+IDE5IHwgeCA8PCAxMykgXiAoeCA+Pj4gMTApXG59XG5cblNoYTI1Ni5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhID0gdGhpcy5fYSB8IDBcbiAgdmFyIGIgPSB0aGlzLl9iIHwgMFxuICB2YXIgYyA9IHRoaXMuX2MgfCAwXG4gIHZhciBkID0gdGhpcy5fZCB8IDBcbiAgdmFyIGUgPSB0aGlzLl9lIHwgMFxuICB2YXIgZiA9IHRoaXMuX2YgfCAwXG4gIHZhciBnID0gdGhpcy5fZyB8IDBcbiAgdmFyIGggPSB0aGlzLl9oIHwgMFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgV1tpXSA9IE0ucmVhZEludDMyQkUoaSAqIDQpXG4gIGZvciAoOyBpIDwgNjQ7ICsraSkgV1tpXSA9IChnYW1tYTEoV1tpIC0gMl0pICsgV1tpIC0gN10gKyBnYW1tYTAoV1tpIC0gMTVdKSArIFdbaSAtIDE2XSkgfCAwXG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCA2NDsgKytqKSB7XG4gICAgdmFyIFQxID0gKGggKyBzaWdtYTEoZSkgKyBjaChlLCBmLCBnKSArIEtbal0gKyBXW2pdKSB8IDBcbiAgICB2YXIgVDIgPSAoc2lnbWEwKGEpICsgbWFqKGEsIGIsIGMpKSB8IDBcblxuICAgIGggPSBnXG4gICAgZyA9IGZcbiAgICBmID0gZVxuICAgIGUgPSAoZCArIFQxKSB8IDBcbiAgICBkID0gY1xuICAgIGMgPSBiXG4gICAgYiA9IGFcbiAgICBhID0gKFQxICsgVDIpIHwgMFxuICB9XG5cbiAgdGhpcy5fYSA9IChhICsgdGhpcy5fYSkgfCAwXG4gIHRoaXMuX2IgPSAoYiArIHRoaXMuX2IpIHwgMFxuICB0aGlzLl9jID0gKGMgKyB0aGlzLl9jKSB8IDBcbiAgdGhpcy5fZCA9IChkICsgdGhpcy5fZCkgfCAwXG4gIHRoaXMuX2UgPSAoZSArIHRoaXMuX2UpIHwgMFxuICB0aGlzLl9mID0gKGYgKyB0aGlzLl9mKSB8IDBcbiAgdGhpcy5fZyA9IChnICsgdGhpcy5fZykgfCAwXG4gIHRoaXMuX2ggPSAoaCArIHRoaXMuX2gpIHwgMFxufVxuXG5TaGEyNTYucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgzMilcblxuICBILndyaXRlSW50MzJCRSh0aGlzLl9hLCAwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9iLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jLCA4KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9kLCAxMilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZSwgMTYpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2YsIDIwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9nLCAyNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5faCwgMjgpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGEyNTZcbiIsIi8qXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTEsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgUFVCIDE4MC0xXG4gKiBWZXJzaW9uIDIuMWEgQ29weXJpZ2h0IFBhdWwgSm9obnN0b24gMjAwMCAtIDIwMDIuXG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2VcbiAqIFNlZSBodHRwOi8vcGFqaG9tZS5vcmcudWsvY3J5cHQvbWQ1IGZvciBkZXRhaWxzLlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgSyA9IFtcbiAgMHg1YTgyNzk5OSwgMHg2ZWQ5ZWJhMSwgMHg4ZjFiYmNkYyB8IDAsIDB4Y2E2MmMxZDYgfCAwXG5dXG5cbnZhciBXID0gbmV3IEFycmF5KDgwKVxuXG5mdW5jdGlvbiBTaGExICgpIHtcbiAgdGhpcy5pbml0KClcbiAgdGhpcy5fdyA9IFdcblxuICBIYXNoLmNhbGwodGhpcywgNjQsIDU2KVxufVxuXG5pbmhlcml0cyhTaGExLCBIYXNoKVxuXG5TaGExLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hID0gMHg2NzQ1MjMwMVxuICB0aGlzLl9iID0gMHhlZmNkYWI4OVxuICB0aGlzLl9jID0gMHg5OGJhZGNmZVxuICB0aGlzLl9kID0gMHgxMDMyNTQ3NlxuICB0aGlzLl9lID0gMHhjM2QyZTFmMFxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIHJvdGwxIChudW0pIHtcbiAgcmV0dXJuIChudW0gPDwgMSkgfCAobnVtID4+PiAzMSlcbn1cblxuZnVuY3Rpb24gcm90bDUgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCA1KSB8IChudW0gPj4+IDI3KVxufVxuXG5mdW5jdGlvbiByb3RsMzAgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCAzMCkgfCAobnVtID4+PiAyKVxufVxuXG5mdW5jdGlvbiBmdCAocywgYiwgYywgZCkge1xuICBpZiAocyA9PT0gMCkgcmV0dXJuIChiICYgYykgfCAoKH5iKSAmIGQpXG4gIGlmIChzID09PSAyKSByZXR1cm4gKGIgJiBjKSB8IChiICYgZCkgfCAoYyAmIGQpXG4gIHJldHVybiBiIF4gYyBeIGRcbn1cblxuU2hhMS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhID0gdGhpcy5fYSB8IDBcbiAgdmFyIGIgPSB0aGlzLl9iIHwgMFxuICB2YXIgYyA9IHRoaXMuX2MgfCAwXG4gIHZhciBkID0gdGhpcy5fZCB8IDBcbiAgdmFyIGUgPSB0aGlzLl9lIHwgMFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgV1tpXSA9IE0ucmVhZEludDMyQkUoaSAqIDQpXG4gIGZvciAoOyBpIDwgODA7ICsraSkgV1tpXSA9IHJvdGwxKFdbaSAtIDNdIF4gV1tpIC0gOF0gXiBXW2kgLSAxNF0gXiBXW2kgLSAxNl0pXG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCA4MDsgKytqKSB7XG4gICAgdmFyIHMgPSB+fihqIC8gMjApXG4gICAgdmFyIHQgPSAocm90bDUoYSkgKyBmdChzLCBiLCBjLCBkKSArIGUgKyBXW2pdICsgS1tzXSkgfCAwXG5cbiAgICBlID0gZFxuICAgIGQgPSBjXG4gICAgYyA9IHJvdGwzMChiKVxuICAgIGIgPSBhXG4gICAgYSA9IHRcbiAgfVxuXG4gIHRoaXMuX2EgPSAoYSArIHRoaXMuX2EpIHwgMFxuICB0aGlzLl9iID0gKGIgKyB0aGlzLl9iKSB8IDBcbiAgdGhpcy5fYyA9IChjICsgdGhpcy5fYykgfCAwXG4gIHRoaXMuX2QgPSAoZCArIHRoaXMuX2QpIHwgMFxuICB0aGlzLl9lID0gKGUgKyB0aGlzLl9lKSB8IDBcbn1cblxuU2hhMS5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDIwKVxuXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2EgfCAwLCAwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9iIHwgMCwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYyB8IDAsIDgpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2QgfCAwLCAxMilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZSB8IDAsIDE2KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhMVxuIiwiLyoqXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTI1NiwgYXMgZGVmaW5lZFxuICogaW4gRklQUyAxODAtMlxuICogVmVyc2lvbiAyLjItYmV0YSBDb3B5cmlnaHQgQW5nZWwgTWFyaW4sIFBhdWwgSm9obnN0b24gMjAwMCAtIDIwMDkuXG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgSyA9IFtcbiAgMHg0MjhBMkY5OCwgMHg3MTM3NDQ5MSwgMHhCNUMwRkJDRiwgMHhFOUI1REJBNSxcbiAgMHgzOTU2QzI1QiwgMHg1OUYxMTFGMSwgMHg5MjNGODJBNCwgMHhBQjFDNUVENSxcbiAgMHhEODA3QUE5OCwgMHgxMjgzNUIwMSwgMHgyNDMxODVCRSwgMHg1NTBDN0RDMyxcbiAgMHg3MkJFNUQ3NCwgMHg4MERFQjFGRSwgMHg5QkRDMDZBNywgMHhDMTlCRjE3NCxcbiAgMHhFNDlCNjlDMSwgMHhFRkJFNDc4NiwgMHgwRkMxOURDNiwgMHgyNDBDQTFDQyxcbiAgMHgyREU5MkM2RiwgMHg0QTc0ODRBQSwgMHg1Q0IwQTlEQywgMHg3NkY5ODhEQSxcbiAgMHg5ODNFNTE1MiwgMHhBODMxQzY2RCwgMHhCMDAzMjdDOCwgMHhCRjU5N0ZDNyxcbiAgMHhDNkUwMEJGMywgMHhENUE3OTE0NywgMHgwNkNBNjM1MSwgMHgxNDI5Mjk2NyxcbiAgMHgyN0I3MEE4NSwgMHgyRTFCMjEzOCwgMHg0RDJDNkRGQywgMHg1MzM4MEQxMyxcbiAgMHg2NTBBNzM1NCwgMHg3NjZBMEFCQiwgMHg4MUMyQzkyRSwgMHg5MjcyMkM4NSxcbiAgMHhBMkJGRThBMSwgMHhBODFBNjY0QiwgMHhDMjRCOEI3MCwgMHhDNzZDNTFBMyxcbiAgMHhEMTkyRTgxOSwgMHhENjk5MDYyNCwgMHhGNDBFMzU4NSwgMHgxMDZBQTA3MCxcbiAgMHgxOUE0QzExNiwgMHgxRTM3NkMwOCwgMHgyNzQ4Nzc0QywgMHgzNEIwQkNCNSxcbiAgMHgzOTFDMENCMywgMHg0RUQ4QUE0QSwgMHg1QjlDQ0E0RiwgMHg2ODJFNkZGMyxcbiAgMHg3NDhGODJFRSwgMHg3OEE1NjM2RiwgMHg4NEM4NzgxNCwgMHg4Q0M3MDIwOCxcbiAgMHg5MEJFRkZGQSwgMHhBNDUwNkNFQiwgMHhCRUY5QTNGNywgMHhDNjcxNzhGMlxuXVxuXG52YXIgVyA9IG5ldyBBcnJheSg2NClcblxuZnVuY3Rpb24gU2hhMjU2ICgpIHtcbiAgdGhpcy5pbml0KClcblxuICB0aGlzLl93ID0gVyAvLyBuZXcgQXJyYXkoNjQpXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDY0LCA1Nilcbn1cblxuaW5oZXJpdHMoU2hhMjU2LCBIYXNoKVxuXG5TaGEyNTYucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweDZhMDllNjY3XG4gIHRoaXMuX2IgPSAweGJiNjdhZTg1XG4gIHRoaXMuX2MgPSAweDNjNmVmMzcyXG4gIHRoaXMuX2QgPSAweGE1NGZmNTNhXG4gIHRoaXMuX2UgPSAweDUxMGU1MjdmXG4gIHRoaXMuX2YgPSAweDliMDU2ODhjXG4gIHRoaXMuX2cgPSAweDFmODNkOWFiXG4gIHRoaXMuX2ggPSAweDViZTBjZDE5XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gY2ggKHgsIHksIHopIHtcbiAgcmV0dXJuIHogXiAoeCAmICh5IF4geikpXG59XG5cbmZ1bmN0aW9uIG1haiAoeCwgeSwgeikge1xuICByZXR1cm4gKHggJiB5KSB8ICh6ICYgKHggfCB5KSlcbn1cblxuZnVuY3Rpb24gc2lnbWEwICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gMiB8IHggPDwgMzApIF4gKHggPj4+IDEzIHwgeCA8PCAxOSkgXiAoeCA+Pj4gMjIgfCB4IDw8IDEwKVxufVxuXG5mdW5jdGlvbiBzaWdtYTEgKHgpIHtcbiAgcmV0dXJuICh4ID4+PiA2IHwgeCA8PCAyNikgXiAoeCA+Pj4gMTEgfCB4IDw8IDIxKSBeICh4ID4+PiAyNSB8IHggPDwgNylcbn1cblxuZnVuY3Rpb24gZ2FtbWEwICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gNyB8IHggPDwgMjUpIF4gKHggPj4+IDE4IHwgeCA8PCAxNCkgXiAoeCA+Pj4gMylcbn1cblxuZnVuY3Rpb24gZ2FtbWExICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gMTcgfCB4IDw8IDE1KSBeICh4ID4+PiAxOSB8IHggPDwgMTMpIF4gKHggPj4+IDEwKVxufVxuXG5TaGEyNTYucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoTSkge1xuICB2YXIgVyA9IHRoaXMuX3dcblxuICB2YXIgYSA9IHRoaXMuX2EgfCAwXG4gIHZhciBiID0gdGhpcy5fYiB8IDBcbiAgdmFyIGMgPSB0aGlzLl9jIHwgMFxuICB2YXIgZCA9IHRoaXMuX2QgfCAwXG4gIHZhciBlID0gdGhpcy5fZSB8IDBcbiAgdmFyIGYgPSB0aGlzLl9mIHwgMFxuICB2YXIgZyA9IHRoaXMuX2cgfCAwXG4gIHZhciBoID0gdGhpcy5faCB8IDBcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIFdbaV0gPSBNLnJlYWRJbnQzMkJFKGkgKiA0KVxuICBmb3IgKDsgaSA8IDY0OyArK2kpIFdbaV0gPSAoZ2FtbWExKFdbaSAtIDJdKSArIFdbaSAtIDddICsgZ2FtbWEwKFdbaSAtIDE1XSkgKyBXW2kgLSAxNl0pIHwgMFxuXG4gIGZvciAodmFyIGogPSAwOyBqIDwgNjQ7ICsraikge1xuICAgIHZhciBUMSA9IChoICsgc2lnbWExKGUpICsgY2goZSwgZiwgZykgKyBLW2pdICsgV1tqXSkgfCAwXG4gICAgdmFyIFQyID0gKHNpZ21hMChhKSArIG1haihhLCBiLCBjKSkgfCAwXG5cbiAgICBoID0gZ1xuICAgIGcgPSBmXG4gICAgZiA9IGVcbiAgICBlID0gKGQgKyBUMSkgfCAwXG4gICAgZCA9IGNcbiAgICBjID0gYlxuICAgIGIgPSBhXG4gICAgYSA9IChUMSArIFQyKSB8IDBcbiAgfVxuXG4gIHRoaXMuX2EgPSAoYSArIHRoaXMuX2EpIHwgMFxuICB0aGlzLl9iID0gKGIgKyB0aGlzLl9iKSB8IDBcbiAgdGhpcy5fYyA9IChjICsgdGhpcy5fYykgfCAwXG4gIHRoaXMuX2QgPSAoZCArIHRoaXMuX2QpIHwgMFxuICB0aGlzLl9lID0gKGUgKyB0aGlzLl9lKSB8IDBcbiAgdGhpcy5fZiA9IChmICsgdGhpcy5fZikgfCAwXG4gIHRoaXMuX2cgPSAoZyArIHRoaXMuX2cpIHwgMFxuICB0aGlzLl9oID0gKGggKyB0aGlzLl9oKSB8IDBcbn1cblxuU2hhMjU2LnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMzIpXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSwgMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYiwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYywgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCwgMTIpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2UsIDE2KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9mLCAyMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZywgMjQpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2gsIDI4KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhMjU2XG4iLCIvKiFcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uIGFuZCBjb250cmlidXRvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8taW50ZXJuYWwtbW9kdWxlc1xuaW1wb3J0IHNoYTEgZnJvbSBcInNoYS5qcy9zaGExXCI7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWludGVybmFsLW1vZHVsZXNcbmltcG9ydCBzaGEyNTYgZnJvbSBcInNoYS5qcy9zaGEyNTZcIjtcbi8qKlxuICogSGFzaCBhIGZpbGUuIENvbnNpc3RlbnQgd2l0aGluIGEgc2Vzc2lvbiwgYnV0IHNob3VsZCBub3QgYmUgcGVyc2lzdGVkIGFuZFxuICogaXMgbm90IGNvbnNpc3RlbnQgd2l0aCBnaXQuXG4gKiBJZiBjYWxsZWQgdW5kZXIgYW4gaW5zZWN1cmUgY29udGV4dCBmb3IgYSBicm93c2VyLCB0aGlzIHdpbGwgZmFsbGJhY2sgdG9cbiAqIHVzaW5nIHRoZSBub2RlIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIEBwYXJhbSBmaWxlIC0gVGhlIGNvbnRlbnRzIG9mIHRoZSBmaWxlIGluIGEgYnVmZmVyXG4gKiBAcGFyYW0gYWxnb3JpdGhtIC0gVGhlIGhhc2ggYWxnb3JpdGhtIHRvIHVzZSwgYXJ0aWZpY2lhbGx5IGNvbnN0cmFpbmVkIGJ5IHdoYXQgaXMgdXNlZCBpbnRlcm5hbGx5XG4gKiBAcGFyYW0gaGFzaEVuY29kaW5nIC0gVGhlIGVuY29kaW5nIG9mIHRoZSByZXR1cm5lZCBoYXNoLCBhbHNvIGFydGlmaWNpYWxseSBjb25zdHJhaW5lZFxuICogQHJldHVybnMgVGhlIGhhc2ggb2YgdGhlIGNvbnRlbnQgb2YgdGhlIGJ1ZmZlclxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFzaEZpbGUoZmlsZSwgYWxnb3JpdGhtID0gXCJTSEEtMVwiLCBoYXNoRW5jb2RpbmcgPSBcImhleFwiKSB7XG4gICAgbGV0IGVuZ2luZTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVmYXVsdC1jYXNlXG4gICAgc3dpdGNoIChhbGdvcml0aG0pIHtcbiAgICAgICAgY2FzZSBcIlNIQS0xXCI6IHtcbiAgICAgICAgICAgIGVuZ2luZSA9IG5ldyBzaGExKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiU0hBLTI1NlwiOiB7XG4gICAgICAgICAgICBlbmdpbmUgPSBuZXcgc2hhMjU2KCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZW5naW5lLnVwZGF0ZShmaWxlKS5kaWdlc3QoaGFzaEVuY29kaW5nKTtcbn1cbi8qKlxuICogQ3JlYXRlIGEgZ2l0aHViIGhhc2ggKEdpdGh1YiBoYXNoZXMgdGhlIHN0cmluZyB3aXRoIGJsb2IgYW5kIHNpemUpXG4gKiBNdXN0IGJlIGNhbGxlZCB1bmRlciBzZWN1cmUgY29udGV4dCBmb3IgYnJvd3NlcnNcbiAqXG4gKiBAcGFyYW0gZmlsZSAtIFRoZSBjb250ZW50cyBvZiB0aGUgZmlsZSBpbiBhIGJ1ZmZlclxuICogQHJldHVybnMgVGhlIHNoYTEgaGFzaCBvZiB0aGUgY29udGVudCBvZiB0aGUgYnVmZmVyIHdpdGggdGhlIGBibG9iYCBwcmVmaXggYW5kIHNpemVcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdpdEhhc2hGaWxlKGZpbGUpIHtcbiAgICBjb25zdCBzaXplID0gZmlsZS5ieXRlTGVuZ3RoO1xuICAgIGNvbnN0IGZpbGVQcmVmaXggPSBgYmxvYiAke3NpemUudG9TdHJpbmcoKX0ke1N0cmluZy5mcm9tQ2hhckNvZGUoMCl9YDtcbiAgICBjb25zdCBlbmdpbmUgPSBuZXcgc2hhMSgpO1xuICAgIHJldHVybiBlbmdpbmUudXBkYXRlKGZpbGVQcmVmaXgpXG4gICAgICAgIC51cGRhdGUoZmlsZSlcbiAgICAgICAgLmRpZ2VzdChcImhleFwiKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhc2hGaWxlTm9kZS5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9